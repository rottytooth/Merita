// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
    /* eslint-disable no-undef */
    var globalObject =
      typeof globalThis !== 'undefined'
        ? globalThis
        : typeof self !== 'undefined'
        ? self
        : typeof window !== 'undefined'
        ? window
        : typeof global !== 'undefined'
        ? global
        : {};
    /* eslint-enable no-undef */
  
    // Save the require from previous bundle to this closure if any
    var previousRequire =
      typeof globalObject[parcelRequireName] === 'function' &&
      globalObject[parcelRequireName];
  
    var cache = previousRequire.cache || {};
    // Do not use `require` to prevent Webpack from trying to bundle this call
    var nodeRequire =
      typeof module !== 'undefined' &&
      typeof module.require === 'function' &&
      module.require.bind(module);
  
    function newRequire(name, jumped) {
      if (!cache[name]) {
        if (!modules[name]) {
          // if we cannot find the module within our internal map or
          // cache jump to the current global require ie. the last bundle
          // that was added to the page.
          var currentRequire =
            typeof globalObject[parcelRequireName] === 'function' &&
            globalObject[parcelRequireName];
          if (!jumped && currentRequire) {
            return currentRequire(name, true);
          }
  
          // If there are other bundles on this page the require from the
          // previous one is saved to 'previousRequire'. Repeat this as
          // many times as there are bundles until the module is found or
          // we exhaust the require chain.
          if (previousRequire) {
            return previousRequire(name, true);
          }
  
          // Try the node require function if it exists.
          if (nodeRequire && typeof name === 'string') {
            return nodeRequire(name);
          }
  
          var err = new Error("Cannot find module '" + name + "'");
          err.code = 'MODULE_NOT_FOUND';
          throw err;
        }
  
        localRequire.resolve = resolve;
        localRequire.cache = {};
  
        var module = (cache[name] = new newRequire.Module(name));
  
        modules[name][0].call(
          module.exports,
          localRequire,
          module,
          module.exports,
          this
        );
      }
  
      return cache[name].exports;
  
      function localRequire(x) {
        var res = localRequire.resolve(x);
        return res === false ? {} : newRequire(res);
      }
  
      function resolve(x) {
        var id = modules[name][1][x];
        return id != null ? id : x;
      }
    }
  
    function Module(moduleName) {
      this.id = moduleName;
      this.bundle = newRequire;
      this.exports = {};
    }
  
    newRequire.isParcelRequire = true;
    newRequire.Module = Module;
    newRequire.modules = modules;
    newRequire.cache = cache;
    newRequire.parent = previousRequire;
    newRequire.register = function (id, exports) {
      modules[id] = [
        function (require, module) {
          module.exports = exports;
        },
        {},
      ];
    };
  
    Object.defineProperty(newRequire, 'root', {
      get: function () {
        return globalObject[parcelRequireName];
      },
    });
  
    globalObject[parcelRequireName] = newRequire;
  
    for (var i = 0; i < entry.length; i++) {
      newRequire(entry[i]);
    }
  
    if (mainEntry) {
      // Expose entry point to Node, AMD or browser globals
      // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
      var mainExports = newRequire(mainEntry);
  
      // CommonJS
      if (typeof exports === 'object' && typeof module !== 'undefined') {
        module.exports = mainExports;
  
        // RequireJS
      } else if (typeof define === 'function' && define.amd) {
        define(function () {
          return mainExports;
        });
  
        // <script>
      } else if (globalName) {
        this[globalName] = mainExports;
      }
    }
  })({"lmKb7":[function(require,module,exports) {
  var global = arguments[3];
  var HMR_HOST = null;
  var HMR_PORT = null;
  var HMR_SECURE = false;
  var HMR_ENV_HASH = "d6ea1d42532a7575";
  module.bundle.HMR_BUNDLE_ID = "26170a8763aff760";
  "use strict";
  /* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
  import type {
    HMRAsset,
    HMRMessage,
  } from '@parcel/reporter-dev-server/src/HMRServer.js';
  interface ParcelRequire {
    (string): mixed;
    cache: {|[string]: ParcelModule|};
    hotData: {|[string]: mixed|};
    Module: any;
    parent: ?ParcelRequire;
    isParcelRequire: true;
    modules: {|[string]: [Function, {|[string]: string|}]|};
    HMR_BUNDLE_ID: string;
    root: ParcelRequire;
  }
  interface ParcelModule {
    hot: {|
      data: mixed,
      accept(cb: (Function) => void): void,
      dispose(cb: (mixed) => void): void,
      // accept(deps: Array<string> | string, cb: (Function) => void): void,
      // decline(): void,
      _acceptCallbacks: Array<(Function) => void>,
      _disposeCallbacks: Array<(mixed) => void>,
    |};
  }
  interface ExtensionContext {
    runtime: {|
      reload(): void,
      getURL(url: string): string;
      getManifest(): {manifest_version: number, ...};
    |};
  }
  declare var module: {bundle: ParcelRequire, ...};
  declare var HMR_HOST: string;
  declare var HMR_PORT: string;
  declare var HMR_ENV_HASH: string;
  declare var HMR_SECURE: boolean;
  declare var chrome: ExtensionContext;
  declare var browser: ExtensionContext;
  declare var __parcel__import__: (string) => Promise<void>;
  declare var __parcel__importScripts__: (string) => Promise<void>;
  declare var globalThis: typeof self;
  declare var ServiceWorkerGlobalScope: Object;
  */ var OVERLAY_ID = "__parcel__error__overlay__";
  var OldModule = module.bundle.Module;
  function Module(moduleName) {
      OldModule.call(this, moduleName);
      this.hot = {
          data: module.bundle.hotData[moduleName],
          _acceptCallbacks: [],
          _disposeCallbacks: [],
          accept: function(fn) {
              this._acceptCallbacks.push(fn || function() {});
          },
          dispose: function(fn) {
              this._disposeCallbacks.push(fn);
          }
      };
      module.bundle.hotData[moduleName] = undefined;
  }
  module.bundle.Module = Module;
  module.bundle.hotData = {};
  var checkedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
  function getHostname() {
      return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
  }
  function getPort() {
      return HMR_PORT || location.port;
  }
  // eslint-disable-next-line no-redeclare
  var parent = module.bundle.parent;
  if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
      var hostname = getHostname();
      var port = getPort();
      var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
      var ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/");
      // Web extension context
      var extCtx = typeof chrome === "undefined" ? typeof browser === "undefined" ? null : browser : chrome;
      // Safari doesn't support sourceURL in error stacks.
      // eval may also be disabled via CSP, so do a quick check.
      var supportsSourceURL = false;
      try {
          (0, eval)('throw new Error("test"); //# sourceURL=test.js');
      } catch (err) {
          supportsSourceURL = err.stack.includes("test.js");
      }
      // $FlowFixMe
      ws.onmessage = async function(event /*: {data: string, ...} */ ) {
          checkedAssets = {} /*: {|[string]: boolean|} */ ;
          assetsToAccept = [];
          assetsToDispose = [];
          var data /*: HMRMessage */  = JSON.parse(event.data);
          if (data.type === "update") {
              // Remove error overlay if there is one
              if (typeof document !== "undefined") removeErrorOverlay();
              let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH);
              // Handle HMR Update
              let handled = assets.every((asset)=>{
                  return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
              });
              if (handled) {
                  console.clear();
                  // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                  if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                  await hmrApplyUpdates(assets);
                  // Dispose all old assets.
                  let processedAssets = {} /*: {|[string]: boolean|} */ ;
                  for(let i = 0; i < assetsToDispose.length; i++){
                      let id = assetsToDispose[i][1];
                      if (!processedAssets[id]) {
                          hmrDispose(assetsToDispose[i][0], id);
                          processedAssets[id] = true;
                      }
                  }
                  // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                  processedAssets = {};
                  for(let i = 0; i < assetsToAccept.length; i++){
                      let id = assetsToAccept[i][1];
                      if (!processedAssets[id]) {
                          hmrAccept(assetsToAccept[i][0], id);
                          processedAssets[id] = true;
                      }
                  }
              } else fullReload();
          }
          if (data.type === "error") {
              // Log parcel errors to console
              for (let ansiDiagnostic of data.diagnostics.ansi){
                  let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                  console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
              }
              if (typeof document !== "undefined") {
                  // Render the fancy html overlay
                  removeErrorOverlay();
                  var overlay = createErrorOverlay(data.diagnostics.html);
                  // $FlowFixMe
                  document.body.appendChild(overlay);
              }
          }
      };
      ws.onerror = function(e) {
          console.error(e.message);
      };
      ws.onclose = function() {
          console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
      };
  }
  function removeErrorOverlay() {
      var overlay = document.getElementById(OVERLAY_ID);
      if (overlay) {
          overlay.remove();
          console.log("[parcel] ✨ Error resolved");
      }
  }
  function createErrorOverlay(diagnostics) {
      var overlay = document.createElement("div");
      overlay.id = OVERLAY_ID;
      let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
      for (let diagnostic of diagnostics){
          let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
              return `${p}
  <a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
  ${frame.code}`;
          }, "") : diagnostic.stack;
          errorHTML += `
        <div>
          <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
            🚨 ${diagnostic.message}
          </div>
          <pre>${stack}</pre>
          <div>
            ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
          </div>
          ${diagnostic.documentation ? `<div>📝 <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
        </div>
      `;
      }
      errorHTML += "</div>";
      overlay.innerHTML = errorHTML;
      return overlay;
  }
  function fullReload() {
      if ("reload" in location) location.reload();
      else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
  }
  function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
      var modules = bundle.modules;
      if (!modules) return [];
      var parents = [];
      var k, d, dep;
      for(k in modules)for(d in modules[k][1]){
          dep = modules[k][1][d];
          if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
              bundle,
              k
          ]);
      }
      if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
      return parents;
  }
  function updateLink(link) {
      var href = link.getAttribute("href");
      if (!href) return;
      var newLink = link.cloneNode();
      newLink.onload = function() {
          if (link.parentNode !== null) // $FlowFixMe
          link.parentNode.removeChild(link);
      };
      newLink.setAttribute("href", // $FlowFixMe
      href.split("?")[0] + "?" + Date.now());
      // $FlowFixMe
      link.parentNode.insertBefore(newLink, link.nextSibling);
  }
  var cssTimeout = null;
  function reloadCSS() {
      if (cssTimeout) return;
      cssTimeout = setTimeout(function() {
          var links = document.querySelectorAll('link[rel="stylesheet"]');
          for(var i = 0; i < links.length; i++){
              // $FlowFixMe[incompatible-type]
              var href /*: string */  = links[i].getAttribute("href");
              var hostname = getHostname();
              var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
              var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
              if (!absolute) updateLink(links[i]);
          }
          cssTimeout = null;
      }, 50);
  }
  function hmrDownload(asset) {
      if (asset.type === "js") {
          if (typeof document !== "undefined") {
              let script = document.createElement("script");
              script.src = asset.url + "?t=" + Date.now();
              if (asset.outputFormat === "esmodule") script.type = "module";
              return new Promise((resolve, reject)=>{
                  var _document$head;
                  script.onload = ()=>resolve(script);
                  script.onerror = reject;
                  (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
              });
          } else if (typeof importScripts === "function") {
              // Worker scripts
              if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
              else return new Promise((resolve, reject)=>{
                  try {
                      importScripts(asset.url + "?t=" + Date.now());
                      resolve();
                  } catch (err) {
                      reject(err);
                  }
              });
          }
      }
  }
  async function hmrApplyUpdates(assets) {
      global.parcelHotUpdate = Object.create(null);
      let scriptsToRemove;
      try {
          // If sourceURL comments aren't supported in eval, we need to load
          // the update from the dev server over HTTP so that stack traces
          // are correct in errors/logs. This is much slower than eval, so
          // we only do it if needed (currently just Safari).
          // https://bugs.webkit.org/show_bug.cgi?id=137297
          // This path is also taken if a CSP disallows eval.
          if (!supportsSourceURL) {
              let promises = assets.map((asset)=>{
                  var _hmrDownload;
                  return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                      // Web extension bugfix for Chromium
                      // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12
                      if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {
                          if (typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                              extCtx.runtime.reload();
                              return;
                          }
                          asset.url = extCtx.runtime.getURL("/__parcel_hmr_proxy__?url=" + encodeURIComponent(asset.url + "?t=" + Date.now()));
                          return hmrDownload(asset);
                      }
                      throw err;
                  });
              });
              scriptsToRemove = await Promise.all(promises);
          }
          assets.forEach(function(asset) {
              hmrApply(module.bundle.root, asset);
          });
      } finally{
          delete global.parcelHotUpdate;
          if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
              if (script) {
                  var _document$head2;
                  (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
              }
          });
      }
  }
  function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
      var modules = bundle.modules;
      if (!modules) return;
      if (asset.type === "css") reloadCSS();
      else if (asset.type === "js") {
          let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
          if (deps) {
              if (modules[asset.id]) {
                  // Remove dependencies that are removed and will become orphaned.
                  // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                  let oldDeps = modules[asset.id][1];
                  for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                      let id = oldDeps[dep];
                      let parents = getParents(module.bundle.root, id);
                      if (parents.length === 1) hmrDelete(module.bundle.root, id);
                  }
              }
              if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
              // support for source maps is better with eval.
              (0, eval)(asset.output);
              // $FlowFixMe
              let fn = global.parcelHotUpdate[asset.id];
              modules[asset.id] = [
                  fn,
                  deps
              ];
          } else if (bundle.parent) hmrApply(bundle.parent, asset);
      }
  }
  function hmrDelete(bundle, id) {
      let modules = bundle.modules;
      if (!modules) return;
      if (modules[id]) {
          // Collect dependencies that will become orphaned when this module is deleted.
          let deps = modules[id][1];
          let orphans = [];
          for(let dep in deps){
              let parents = getParents(module.bundle.root, deps[dep]);
              if (parents.length === 1) orphans.push(deps[dep]);
          }
          // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
          delete modules[id];
          delete bundle.cache[id];
          // Now delete the orphans.
          orphans.forEach((id)=>{
              hmrDelete(module.bundle.root, id);
          });
      } else if (bundle.parent) hmrDelete(bundle.parent, id);
  }
  function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
      if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
      // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
      let parents = getParents(module.bundle.root, id);
      let accepted = false;
      while(parents.length > 0){
          let v = parents.shift();
          let a = hmrAcceptCheckOne(v[0], v[1], null);
          if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
          accepted = true;
          else {
              // Otherwise, queue the parents in the next level upward.
              let p = getParents(module.bundle.root, v[1]);
              if (p.length === 0) {
                  // If there are no parents, then we've reached an entry without accepting. Reload.
                  accepted = false;
                  break;
              }
              parents.push(...p);
          }
      }
      return accepted;
  }
  function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
      var modules = bundle.modules;
      if (!modules) return;
      if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
          // If we reached the root bundle without finding where the asset should go,
          // there's nothing to do. Mark as "accepted" so we don't reload the page.
          if (!bundle.parent) return true;
          return hmrAcceptCheck(bundle.parent, id, depsByBundle);
      }
      if (checkedAssets[id]) return true;
      checkedAssets[id] = true;
      var cached = bundle.cache[id];
      assetsToDispose.push([
          bundle,
          id
      ]);
      if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
          assetsToAccept.push([
              bundle,
              id
          ]);
          return true;
      }
  }
  function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
      var cached = bundle.cache[id];
      bundle.hotData[id] = {};
      if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
      if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
          cb(bundle.hotData[id]);
      });
      delete bundle.cache[id];
  }
  function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
      // Execute the module.
      bundle(id);
      // Run the accept callbacks in the new version of the module.
      var cached = bundle.cache[id];
      if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
          var assetsToAlsoAccept = cb(function() {
              return getParents(module.bundle.root, id);
          });
          if (assetsToAlsoAccept && assetsToAccept.length) {
              assetsToAlsoAccept.forEach(function(a) {
                  hmrDispose(a[0], a[1]);
              });
              // $FlowFixMe[method-unbinding]
              assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
          }
      });
  }
  
  },{}],"adjPd":[function(require,module,exports) {
  var _shaderParkCore = require("shader-park-core");
  const codeblock = document.getElementById("script");
  const pegcodeblock = document.getElementById("source");
  const draw = document.getElementById("draw");
  window.addEventListener("load", function() {
      // alert(codeblock.value);
      (0, _shaderParkCore.sculptToMinimalRenderer)(document.querySelector("#output_canvas"), codeblock.value);
      document.getElementById("updateBtn").addEventListener("click", function() {
          // alert(codeblock.value);
          let newCanv = document.createElement("canvas");
          (0, _shaderParkCore.sculptToMinimalRenderer)(newCanv, codeblock.value);
          draw.innerHTML = null;
          draw.appendChild(newCanv);
      });
  }, false);
  
  },{"shader-park-core":"dqAbR"}],"dqAbR":[function(require,module,exports) {
  var global = arguments[3];
  /* Version: 0.1.29 - July 21, 2022 23:29:23 */ (function(global1, factory1) {
      factory1(exports);
  })(this, function(exports) {
      "use strict";
      function createMetadataMethodsForProperty(metadataMap1, kind1, property1) {
          return {
              getMetadata: function(key1) {
                  if ("symbol" != typeof key1) throw new TypeError("Metadata keys must be symbols, received: " + key1);
                  var metadataForKey1 = metadataMap1[key1];
                  if (void 0 !== metadataForKey1) {
                      if (1 === kind1) {
                          var pub1 = metadataForKey1.public;
                          if (void 0 !== pub1) return pub1[property1];
                      } else if (2 === kind1) {
                          var priv1 = metadataForKey1.private;
                          if (void 0 !== priv1) return priv1.get(property1);
                      } else if (Object.hasOwnProperty.call(metadataForKey1, "constructor")) return metadataForKey1.constructor;
                  }
              },
              setMetadata: function(key1, value1) {
                  if ("symbol" != typeof key1) throw new TypeError("Metadata keys must be symbols, received: " + key1);
                  var metadataForKey1 = metadataMap1[key1];
                  if (void 0 === metadataForKey1 && (metadataForKey1 = metadataMap1[key1] = {}), 1 === kind1) {
                      var pub1 = metadataForKey1.public;
                      void 0 === pub1 && (pub1 = metadataForKey1.public = {}), pub1[property1] = value1;
                  } else if (2 === kind1) {
                      var priv1 = metadataForKey1.priv;
                      void 0 === priv1 && (priv1 = metadataForKey1.private = new Map()), priv1.set(property1, value1);
                  } else metadataForKey1.constructor = value1;
              }
          };
      }
      function convertMetadataMapToFinal(obj1, metadataMap1) {
          var parentMetadataMap1 = obj1[Symbol.metadata || Symbol.for("Symbol.metadata")], metadataKeys1 = Object.getOwnPropertySymbols(metadataMap1);
          if (0 !== metadataKeys1.length) {
              for(var i3 = 0; i3 < metadataKeys1.length; i3++){
                  var key1 = metadataKeys1[i3], metaForKey1 = metadataMap1[key1], parentMetaForKey1 = parentMetadataMap1 ? parentMetadataMap1[key1] : null, pub1 = metaForKey1.public, parentPub1 = parentMetaForKey1 ? parentMetaForKey1.public : null;
                  pub1 && parentPub1 && Object.setPrototypeOf(pub1, parentPub1);
                  var priv1 = metaForKey1.private;
                  if (priv1) {
                      var privArr1 = Array.from(priv1.values()), parentPriv1 = parentMetaForKey1 ? parentMetaForKey1.private : null;
                      parentPriv1 && (privArr1 = privArr1.concat(parentPriv1)), metaForKey1.private = privArr1;
                  }
                  parentMetaForKey1 && Object.setPrototypeOf(metaForKey1, parentMetaForKey1);
              }
              parentMetadataMap1 && Object.setPrototypeOf(metadataMap1, parentMetadataMap1), obj1[Symbol.metadata || Symbol.for("Symbol.metadata")] = metadataMap1;
          }
      }
      function createAddInitializerMethod(initializers1) {
          return function(initializer1) {
              assertValidInitializer(initializer1), initializers1.push(initializer1);
          };
      }
      function memberDecCtx(base1, name1, desc1, metadataMap1, initializers1, kind1, isStatic1, isPrivate1) {
          var kindStr1;
          switch(kind1){
              case 1:
                  kindStr1 = "accessor";
                  break;
              case 2:
                  kindStr1 = "method";
                  break;
              case 3:
                  kindStr1 = "getter";
                  break;
              case 4:
                  kindStr1 = "setter";
                  break;
              default:
                  kindStr1 = "field";
          }
          var metadataKind1, metadataName1, ctx1 = {
              kind: kindStr1,
              name: isPrivate1 ? "#" + name1 : name1,
              isStatic: isStatic1,
              isPrivate: isPrivate1
          };
          if (0 !== kind1 && (ctx1.addInitializer = createAddInitializerMethod(initializers1)), isPrivate1) {
              metadataKind1 = 2, metadataName1 = Symbol(name1);
              var access1 = {};
              0 === kind1 ? (access1.get = desc1.get, access1.set = desc1.set) : 2 === kind1 ? access1.get = function() {
                  return desc1.value;
              } : (1 !== kind1 && 3 !== kind1 || (access1.get = function() {
                  return desc1.get.call(this);
              }), 1 !== kind1 && 4 !== kind1 || (access1.set = function(v4) {
                  desc1.set.call(this, v4);
              })), ctx1.access = access1;
          } else metadataKind1 = 1, metadataName1 = name1;
          return Object.assign(ctx1, createMetadataMethodsForProperty(metadataMap1, metadataKind1, metadataName1));
      }
      function assertValidInitializer(initializer1) {
          if ("function" != typeof initializer1) throw new Error("initializers must be functions");
      }
      function assertValidReturnValue(kind1, value1) {
          var type1 = typeof value1;
          if (1 === kind1) {
              if ("object" !== type1 || null === value1) throw new Error("accessor decorators must return an object with get, set, or initializer properties or void 0");
          } else if ("function" !== type1) throw 0 === kind1 ? new Error("field decorators must return a initializer function or void 0") : new Error("method decorators must return a function or void 0");
      }
      function applyMemberDec(ret1, base1, decInfo1, name1, kind1, isStatic1, isPrivate1, metadataMap1, initializers1) {
          var desc1, initializer1, value1, decs1 = decInfo1[0];
          isPrivate1 ? desc1 = 0 === kind1 || 1 === kind1 ? {
              get: decInfo1[3],
              set: decInfo1[4]
          } : 3 === kind1 ? {
              get: decInfo1[3]
          } : 4 === kind1 ? {
              set: decInfo1[3]
          } : {
              value: decInfo1[3]
          } : 0 !== kind1 && (desc1 = Object.getOwnPropertyDescriptor(base1, name1)), 1 === kind1 ? value1 = {
              get: desc1.get,
              set: desc1.set
          } : 2 === kind1 ? value1 = desc1.value : 3 === kind1 ? value1 = desc1.get : 4 === kind1 && (value1 = desc1.set);
          var newValue1, get1, set1, ctx1 = memberDecCtx(base1, name1, desc1, metadataMap1, initializers1, kind1, isStatic1, isPrivate1);
          if ("function" == typeof decs1) void 0 !== (newValue1 = decs1(value1, ctx1)) && (assertValidReturnValue(kind1, newValue1), 0 === kind1 ? initializer1 = newValue1 : 1 === kind1 ? (initializer1 = newValue1.initializer, get1 = newValue1.get || value1.get, set1 = newValue1.set || value1.set, value1 = {
              get: get1,
              set: set1
          }) : value1 = newValue1);
          else for(var i3 = decs1.length - 1; i3 >= 0; i3--){
              var newInit1;
              if (void 0 !== (newValue1 = (0, decs1[i3])(value1, ctx1))) assertValidReturnValue(kind1, newValue1), 0 === kind1 ? newInit1 = newValue1 : 1 === kind1 ? (newInit1 = newValue1.initializer, get1 = newValue1.get || value1.get, set1 = newValue1.set || value1.set, value1 = {
                  get: get1,
                  set: set1
              }) : value1 = newValue1, void 0 !== newInit1 && (void 0 === initializer1 ? initializer1 = newInit1 : "function" == typeof initializer1 ? initializer1 = [
                  initializer1,
                  newInit1
              ] : initializer1.push(newInit1));
          }
          if (0 === kind1 || 1 === kind1) {
              if (void 0 === initializer1) initializer1 = function(instance1, init1) {
                  return init1;
              };
              else if ("function" != typeof initializer1) {
                  var ownInitializers1 = initializer1;
                  initializer1 = function(instance1, init1) {
                      for(var value1 = init1, i3 = 0; i3 < ownInitializers1.length; i3++)value1 = ownInitializers1[i3].call(instance1, value1);
                      return value1;
                  };
              } else {
                  var originalInitializer1 = initializer1;
                  initializer1 = function(instance1, init1) {
                      return originalInitializer1.call(instance1, init1);
                  };
              }
              ret1.push(initializer1);
          }
          0 !== kind1 && (1 === kind1 ? (desc1.get = value1.get, desc1.set = value1.set) : 2 === kind1 ? desc1.value = value1 : 3 === kind1 ? desc1.get = value1 : 4 === kind1 && (desc1.set = value1), isPrivate1 ? 1 === kind1 ? (ret1.push(function(instance1, args1) {
              return value1.get.call(instance1, args1);
          }), ret1.push(function(instance1, args1) {
              return value1.set.call(instance1, args1);
          })) : 2 === kind1 ? ret1.push(value1) : ret1.push(function(instance1, args1) {
              return value1.call(instance1, args1);
          }) : Object.defineProperty(base1, name1, desc1));
      }
      function applyMemberDecs(ret1, Class1, protoMetadataMap1, staticMetadataMap1, decInfos1) {
          for(var protoInitializers1 = [], staticInitializers1 = [], existingProtoNonFields1 = new Map(), existingStaticNonFields1 = new Map(), i3 = 0; i3 < decInfos1.length; i3++){
              var decInfo1 = decInfos1[i3];
              if (Array.isArray(decInfo1)) {
                  var base1, metadataMap1, initializers1, kind1 = decInfo1[1], name1 = decInfo1[2], isPrivate1 = decInfo1.length > 3, isStatic1 = kind1 >= 5;
                  if (isStatic1 ? (base1 = Class1, metadataMap1 = staticMetadataMap1, kind1 -= 5, initializers1 = staticInitializers1) : (base1 = Class1.prototype, metadataMap1 = protoMetadataMap1, initializers1 = protoInitializers1), 0 !== kind1 && !isPrivate1) {
                      var existingNonFields1 = isStatic1 ? existingStaticNonFields1 : existingProtoNonFields1, existingKind1 = existingNonFields1.get(name1) || 0;
                      if (!0 === existingKind1 || 3 === existingKind1 && 4 !== kind1 || 4 === existingKind1 && 3 !== kind1) throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: " + name1);
                      !existingKind1 && kind1 > 2 ? existingNonFields1.set(name1, kind1) : existingNonFields1.set(name1, !0);
                  }
                  applyMemberDec(ret1, base1, decInfo1, name1, kind1, isStatic1, isPrivate1, metadataMap1, initializers1);
              }
          }
          protoInitializers1.length > 0 && pushInitializers(ret1, protoInitializers1), staticInitializers1.length > 0 && pushInitializers(ret1, staticInitializers1);
      }
      function pushInitializers(ret1, initializers1) {
          initializers1.length > 0 ? (initializers1 = initializers1.slice(), ret1.push(function(instance1) {
              for(var i3 = 0; i3 < initializers1.length; i3++)initializers1[i3].call(instance1, instance1);
              return instance1;
          })) : ret1.push(function(instance1) {
              return instance1;
          });
      }
      function applyClassDecs(ret1, targetClass1, metadataMap1, classDecs1) {
          for(var initializers1 = [], newClass1 = targetClass1, name1 = targetClass1.name, ctx1 = Object.assign({
              kind: "class",
              name: name1,
              addInitializer: createAddInitializerMethod(initializers1)
          }, createMetadataMethodsForProperty(metadataMap1, 0, name1)), i3 = classDecs1.length - 1; i3 >= 0; i3--)newClass1 = classDecs1[i3](newClass1, ctx1) || newClass1;
          ret1.push(newClass1), initializers1.length > 0 ? ret1.push(function() {
              for(var i3 = 0; i3 < initializers1.length; i3++)initializers1[i3].call(newClass1, newClass1);
          }) : ret1.push(function() {});
      }
      function _applyDecs(targetClass1, memberDecs1, classDecs1) {
          var ret1 = [], staticMetadataMap1 = {};
          if (memberDecs1) {
              var protoMetadataMap1 = {};
              applyMemberDecs(ret1, targetClass1, protoMetadataMap1, staticMetadataMap1, memberDecs1), convertMetadataMapToFinal(targetClass1.prototype, protoMetadataMap1);
          }
          return classDecs1 && applyClassDecs(ret1, targetClass1, staticMetadataMap1, classDecs1), convertMetadataMapToFinal(targetClass1, staticMetadataMap1), ret1;
      }
      function _asyncIterator(iterable1) {
          var method1, async1, sync1, retry1 = 2;
          for("undefined" != typeof Symbol && (async1 = Symbol.asyncIterator, sync1 = Symbol.iterator); retry1--;){
              if (async1 && null != (method1 = iterable1[async1])) return method1.call(iterable1);
              if (sync1 && null != (method1 = iterable1[sync1])) return new AsyncFromSyncIterator(method1.call(iterable1));
              async1 = "@@asyncIterator", sync1 = "@@iterator";
          }
          throw new TypeError("Object is not async iterable");
      }
      function AsyncFromSyncIterator(s10) {
          function AsyncFromSyncIteratorContinuation1(r1) {
              if (Object(r1) !== r1) return Promise.reject(new TypeError(r1 + " is not an object."));
              var done1 = r1.done;
              return Promise.resolve(r1.value).then(function(value1) {
                  return {
                      value: value1,
                      done: done1
                  };
              });
          }
          return AsyncFromSyncIterator = function(s10) {
              this.s = s10, this.n = s10.next;
          }, AsyncFromSyncIterator.prototype = {
              s: null,
              n: null,
              next: function() {
                  return AsyncFromSyncIteratorContinuation1(this.n.apply(this.s, arguments));
              },
              return: function(value1) {
                  var ret1 = this.s.return;
                  return void 0 === ret1 ? Promise.resolve({
                      value: value1,
                      done: !0
                  }) : AsyncFromSyncIteratorContinuation1(ret1.apply(this.s, arguments));
              },
              throw: function(value1) {
                  var thr1 = this.s.return;
                  return void 0 === thr1 ? Promise.reject(value1) : AsyncFromSyncIteratorContinuation1(thr1.apply(this.s, arguments));
              }
          }, new AsyncFromSyncIterator(s10);
      }
      var REACT_ELEMENT_TYPE;
      function _jsx(type1, props1, key1, children1) {
          REACT_ELEMENT_TYPE || (REACT_ELEMENT_TYPE = "function" == typeof Symbol && Symbol.for && Symbol.for("react.element") || 60103);
          var defaultProps1 = type1 && type1.defaultProps, childrenLength1 = arguments.length - 3;
          if (props1 || 0 === childrenLength1 || (props1 = {
              children: void 0
          }), 1 === childrenLength1) props1.children = children1;
          else if (childrenLength1 > 1) {
              for(var childArray1 = new Array(childrenLength1), i3 = 0; i3 < childrenLength1; i3++)childArray1[i3] = arguments[i3 + 3];
              props1.children = childArray1;
          }
          if (props1 && defaultProps1) for(var propName1 in defaultProps1)void 0 === props1[propName1] && (props1[propName1] = defaultProps1[propName1]);
          else props1 || (props1 = defaultProps1 || {});
          return {
              $$typeof: REACT_ELEMENT_TYPE,
              type: type1,
              key: void 0 === key1 ? null : "" + key1,
              ref: null,
              props: props1,
              _owner: null
          };
      }
      function ownKeys(object1, enumerableOnly1) {
          var keys1 = Object.keys(object1);
          if (Object.getOwnPropertySymbols) {
              var symbols1 = Object.getOwnPropertySymbols(object1);
              enumerableOnly1 && (symbols1 = symbols1.filter(function(sym1) {
                  return Object.getOwnPropertyDescriptor(object1, sym1).enumerable;
              })), keys1.push.apply(keys1, symbols1);
          }
          return keys1;
      }
      function _objectSpread2(target1) {
          for(var i3 = 1; i3 < arguments.length; i3++){
              var source1 = null != arguments[i3] ? arguments[i3] : {};
              i3 % 2 ? ownKeys(Object(source1), !0).forEach(function(key1) {
                  _defineProperty(target1, key1, source1[key1]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target1, Object.getOwnPropertyDescriptors(source1)) : ownKeys(Object(source1)).forEach(function(key1) {
                  Object.defineProperty(target1, key1, Object.getOwnPropertyDescriptor(source1, key1));
              });
          }
          return target1;
      }
      function _typeof(obj1) {
          "@babel/helpers - typeof";
          return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj1) {
              return typeof obj1;
          } : function(obj1) {
              return obj1 && "function" == typeof Symbol && obj1.constructor === Symbol && obj1 !== Symbol.prototype ? "symbol" : typeof obj1;
          }, _typeof(obj1);
      }
      function _wrapRegExp() {
          _wrapRegExp = function(re1, groups1) {
              return new BabelRegExp1(re1, void 0, groups1);
          };
          var _super1 = RegExp.prototype, _groups1 = new WeakMap();
          function BabelRegExp1(re1, flags1, groups1) {
              var _this1 = new RegExp(re1, flags1);
              return _groups1.set(_this1, groups1 || _groups1.get(re1)), _setPrototypeOf(_this1, BabelRegExp1.prototype);
          }
          function buildGroups1(result1, re1) {
              var g1 = _groups1.get(re1);
              return Object.keys(g1).reduce(function(groups1, name1) {
                  return groups1[name1] = result1[g1[name1]], groups1;
              }, Object.create(null));
          }
          return _inherits(BabelRegExp1, RegExp), BabelRegExp1.prototype.exec = function(str1) {
              var result1 = _super1.exec.call(this, str1);
              return result1 && (result1.groups = buildGroups1(result1, this)), result1;
          }, BabelRegExp1.prototype[Symbol.replace] = function(str1, substitution1) {
              if ("string" == typeof substitution1) {
                  var groups1 = _groups1.get(this);
                  return _super1[Symbol.replace].call(this, str1, substitution1.replace(/\$<([^>]+)>/g, function(_1, name1) {
                      return "$" + groups1[name1];
                  }));
              }
              if ("function" == typeof substitution1) {
                  var _this1 = this;
                  return _super1[Symbol.replace].call(this, str1, function() {
                      var args1 = arguments;
                      return "object" != typeof args1[args1.length - 1] && (args1 = [].slice.call(args1)).push(buildGroups1(args1, _this1)), substitution1.apply(this, args1);
                  });
              }
              return _super1[Symbol.replace].call(this, str1, substitution1);
          }, _wrapRegExp.apply(this, arguments);
      }
      function _AwaitValue(value1) {
          this.wrapped = value1;
      }
      function _AsyncGenerator(gen1) {
          var front1, back1;
          function send1(key1, arg1) {
              return new Promise(function(resolve1, reject1) {
                  var request1 = {
                      key: key1,
                      arg: arg1,
                      resolve: resolve1,
                      reject: reject1,
                      next: null
                  };
                  if (back1) back1 = back1.next = request1;
                  else {
                      front1 = back1 = request1;
                      resume1(key1, arg1);
                  }
              });
          }
          function resume1(key1, arg1) {
              try {
                  var result1 = gen1[key1](arg1);
                  var value1 = result1.value;
                  var wrappedAwait1 = value1 instanceof _AwaitValue;
                  Promise.resolve(wrappedAwait1 ? value1.wrapped : value1).then(function(arg1) {
                      if (wrappedAwait1) {
                          resume1(key1 === "return" ? "return" : "next", arg1);
                          return;
                      }
                      settle1(result1.done ? "return" : "normal", arg1);
                  }, function(err1) {
                      resume1("throw", err1);
                  });
              } catch (err1) {
                  settle1("throw", err1);
              }
          }
          function settle1(type1, value1) {
              switch(type1){
                  case "return":
                      front1.resolve({
                          value: value1,
                          done: true
                      });
                      break;
                  case "throw":
                      front1.reject(value1);
                      break;
                  default:
                      front1.resolve({
                          value: value1,
                          done: false
                      });
                      break;
              }
              front1 = front1.next;
              if (front1) resume1(front1.key, front1.arg);
              else back1 = null;
          }
          this._invoke = send1;
          if (typeof gen1.return !== "function") this.return = undefined;
      }
      _AsyncGenerator.prototype[typeof Symbol === "function" && Symbol.asyncIterator || "@@asyncIterator"] = function() {
          return this;
      };
      _AsyncGenerator.prototype.next = function(arg1) {
          return this._invoke("next", arg1);
      };
      _AsyncGenerator.prototype.throw = function(arg1) {
          return this._invoke("throw", arg1);
      };
      _AsyncGenerator.prototype.return = function(arg1) {
          return this._invoke("return", arg1);
      };
      function _wrapAsyncGenerator(fn1) {
          return function() {
              return new _AsyncGenerator(fn1.apply(this, arguments));
          };
      }
      function _awaitAsyncGenerator(value1) {
          return new _AwaitValue(value1);
      }
      function _asyncGeneratorDelegate(inner1, awaitWrap1) {
          var iter1 = {}, waiting1 = false;
          function pump1(key1, value1) {
              waiting1 = true;
              value1 = new Promise(function(resolve1) {
                  resolve1(inner1[key1](value1));
              });
              return {
                  done: false,
                  value: awaitWrap1(value1)
              };
          }
          iter1[typeof Symbol !== "undefined" && Symbol.iterator || "@@iterator"] = function() {
              return this;
          };
          iter1.next = function(value1) {
              if (waiting1) {
                  waiting1 = false;
                  return value1;
              }
              return pump1("next", value1);
          };
          if (typeof inner1.throw === "function") iter1.throw = function(value1) {
              if (waiting1) {
                  waiting1 = false;
                  throw value1;
              }
              return pump1("throw", value1);
          };
          if (typeof inner1.return === "function") iter1.return = function(value1) {
              if (waiting1) {
                  waiting1 = false;
                  return value1;
              }
              return pump1("return", value1);
          };
          return iter1;
      }
      function asyncGeneratorStep(gen1, resolve1, reject1, _next1, _throw1, key1, arg1) {
          try {
              var info1 = gen1[key1](arg1);
              var value1 = info1.value;
          } catch (error1) {
              reject1(error1);
              return;
          }
          if (info1.done) resolve1(value1);
          else Promise.resolve(value1).then(_next1, _throw1);
      }
      function _asyncToGenerator(fn1) {
          return function() {
              var self1 = this, args1 = arguments;
              return new Promise(function(resolve1, reject1) {
                  var gen1 = fn1.apply(self1, args1);
                  function _next1(value1) {
                      asyncGeneratorStep(gen1, resolve1, reject1, _next1, _throw1, "next", value1);
                  }
                  function _throw1(err1) {
                      asyncGeneratorStep(gen1, resolve1, reject1, _next1, _throw1, "throw", err1);
                  }
                  _next1(undefined);
              });
          };
      }
      function _classCallCheck(instance1, Constructor1) {
          if (!(instance1 instanceof Constructor1)) throw new TypeError("Cannot call a class as a function");
      }
      function _defineProperties(target1, props1) {
          for(var i3 = 0; i3 < props1.length; i3++){
              var descriptor1 = props1[i3];
              descriptor1.enumerable = descriptor1.enumerable || false;
              descriptor1.configurable = true;
              if ("value" in descriptor1) descriptor1.writable = true;
              Object.defineProperty(target1, descriptor1.key, descriptor1);
          }
      }
      function _createClass(Constructor1, protoProps1, staticProps1) {
          if (protoProps1) _defineProperties(Constructor1.prototype, protoProps1);
          if (staticProps1) _defineProperties(Constructor1, staticProps1);
          Object.defineProperty(Constructor1, "prototype", {
              writable: false
          });
          return Constructor1;
      }
      function _defineEnumerableProperties(obj1, descs1) {
          for(var key1 in descs1){
              var desc1 = descs1[key1];
              desc1.configurable = desc1.enumerable = true;
              if ("value" in desc1) desc1.writable = true;
              Object.defineProperty(obj1, key1, desc1);
          }
          if (Object.getOwnPropertySymbols) {
              var objectSymbols1 = Object.getOwnPropertySymbols(descs1);
              for(var i3 = 0; i3 < objectSymbols1.length; i3++){
                  var sym1 = objectSymbols1[i3];
                  var desc1 = descs1[sym1];
                  desc1.configurable = desc1.enumerable = true;
                  if ("value" in desc1) desc1.writable = true;
                  Object.defineProperty(obj1, sym1, desc1);
              }
          }
          return obj1;
      }
      function _defaults(obj1, defaults1) {
          var keys1 = Object.getOwnPropertyNames(defaults1);
          for(var i3 = 0; i3 < keys1.length; i3++){
              var key1 = keys1[i3];
              var value1 = Object.getOwnPropertyDescriptor(defaults1, key1);
              if (value1 && value1.configurable && obj1[key1] === undefined) Object.defineProperty(obj1, key1, value1);
          }
          return obj1;
      }
      function _defineProperty(obj1, key1, value1) {
          if (key1 in obj1) Object.defineProperty(obj1, key1, {
              value: value1,
              enumerable: true,
              configurable: true,
              writable: true
          });
          else obj1[key1] = value1;
          return obj1;
      }
      function _extends() {
          _extends = Object.assign || function(target1) {
              for(var i3 = 1; i3 < arguments.length; i3++){
                  var source1 = arguments[i3];
                  for(var key1 in source1)if (Object.prototype.hasOwnProperty.call(source1, key1)) target1[key1] = source1[key1];
              }
              return target1;
          };
          return _extends.apply(this, arguments);
      }
      function _objectSpread(target1) {
          for(var i3 = 1; i3 < arguments.length; i3++){
              var source1 = arguments[i3] != null ? Object(arguments[i3]) : {};
              var ownKeys1 = Object.keys(source1);
              if (typeof Object.getOwnPropertySymbols === "function") ownKeys1.push.apply(ownKeys1, Object.getOwnPropertySymbols(source1).filter(function(sym1) {
                  return Object.getOwnPropertyDescriptor(source1, sym1).enumerable;
              }));
              ownKeys1.forEach(function(key1) {
                  _defineProperty(target1, key1, source1[key1]);
              });
          }
          return target1;
      }
      function _inherits(subClass1, superClass1) {
          if (typeof superClass1 !== "function" && superClass1 !== null) throw new TypeError("Super expression must either be null or a function");
          subClass1.prototype = Object.create(superClass1 && superClass1.prototype, {
              constructor: {
                  value: subClass1,
                  writable: true,
                  configurable: true
              }
          });
          Object.defineProperty(subClass1, "prototype", {
              writable: false
          });
          if (superClass1) _setPrototypeOf(subClass1, superClass1);
      }
      function _inheritsLoose(subClass1, superClass1) {
          subClass1.prototype = Object.create(superClass1.prototype);
          subClass1.prototype.constructor = subClass1;
          _setPrototypeOf(subClass1, superClass1);
      }
      function _getPrototypeOf(o5) {
          _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf1(o5) {
              return o5.__proto__ || Object.getPrototypeOf(o5);
          };
          return _getPrototypeOf(o5);
      }
      function _setPrototypeOf(o5, p6) {
          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf1(o5, p6) {
              o5.__proto__ = p6;
              return o5;
          };
          return _setPrototypeOf(o5, p6);
      }
      function _isNativeReflectConstruct() {
          if (typeof Reflect === "undefined" || !Reflect.construct) return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === "function") return true;
          try {
              Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
              return true;
          } catch (e1) {
              return false;
          }
      }
      function _construct(Parent1, args1, Class1) {
          if (_isNativeReflectConstruct()) _construct = Reflect.construct;
          else _construct = function _construct1(Parent1, args1, Class1) {
              var a3 = [
                  null
              ];
              a3.push.apply(a3, args1);
              var Constructor1 = Function.bind.apply(Parent1, a3);
              var instance1 = new Constructor1();
              if (Class1) _setPrototypeOf(instance1, Class1.prototype);
              return instance1;
          };
          return _construct.apply(null, arguments);
      }
      function _isNativeFunction(fn1) {
          return Function.toString.call(fn1).indexOf("[native code]") !== -1;
      }
      function _wrapNativeSuper(Class1) {
          var _cache1 = typeof Map === "function" ? new Map() : undefined;
          _wrapNativeSuper = function _wrapNativeSuper1(Class1) {
              if (Class1 === null || !_isNativeFunction(Class1)) return Class1;
              if (typeof Class1 !== "function") throw new TypeError("Super expression must either be null or a function");
              if (typeof _cache1 !== "undefined") {
                  if (_cache1.has(Class1)) return _cache1.get(Class1);
                  _cache1.set(Class1, Wrapper1);
              }
              function Wrapper1() {
                  return _construct(Class1, arguments, _getPrototypeOf(this).constructor);
              }
              Wrapper1.prototype = Object.create(Class1.prototype, {
                  constructor: {
                      value: Wrapper1,
                      enumerable: false,
                      writable: true,
                      configurable: true
                  }
              });
              return _setPrototypeOf(Wrapper1, Class1);
          };
          return _wrapNativeSuper(Class1);
      }
      function _instanceof(left1, right1) {
          if (right1 != null && typeof Symbol !== "undefined" && right1[Symbol.hasInstance]) return !!right1[Symbol.hasInstance](left1);
          else return left1 instanceof right1;
      }
      function _interopRequireDefault(obj1) {
          return obj1 && obj1.__esModule ? obj1 : {
              default: obj1
          };
      }
      function _getRequireWildcardCache(nodeInterop1) {
          if (typeof WeakMap !== "function") return null;
          var cacheBabelInterop1 = new WeakMap();
          var cacheNodeInterop1 = new WeakMap();
          return (_getRequireWildcardCache = function(nodeInterop1) {
              return nodeInterop1 ? cacheNodeInterop1 : cacheBabelInterop1;
          })(nodeInterop1);
      }
      function _interopRequireWildcard(obj1, nodeInterop1) {
          if (!nodeInterop1 && obj1 && obj1.__esModule) return obj1;
          if (obj1 === null || typeof obj1 !== "object" && typeof obj1 !== "function") return {
              default: obj1
          };
          var cache1 = _getRequireWildcardCache(nodeInterop1);
          if (cache1 && cache1.has(obj1)) return cache1.get(obj1);
          var newObj1 = {};
          var hasPropertyDescriptor1 = Object.defineProperty && Object.getOwnPropertyDescriptor;
          for(var key1 in obj1)if (key1 !== "default" && Object.prototype.hasOwnProperty.call(obj1, key1)) {
              var desc1 = hasPropertyDescriptor1 ? Object.getOwnPropertyDescriptor(obj1, key1) : null;
              if (desc1 && (desc1.get || desc1.set)) Object.defineProperty(newObj1, key1, desc1);
              else newObj1[key1] = obj1[key1];
          }
          newObj1.default = obj1;
          if (cache1) cache1.set(obj1, newObj1);
          return newObj1;
      }
      function _newArrowCheck(innerThis1, boundThis1) {
          if (innerThis1 !== boundThis1) throw new TypeError("Cannot instantiate an arrow function");
      }
      function _objectDestructuringEmpty(obj1) {
          if (obj1 == null) throw new TypeError("Cannot destructure undefined");
      }
      function _objectWithoutPropertiesLoose(source1, excluded1) {
          if (source1 == null) return {};
          var target1 = {};
          var sourceKeys1 = Object.keys(source1);
          var key1, i3;
          for(i3 = 0; i3 < sourceKeys1.length; i3++){
              key1 = sourceKeys1[i3];
              if (excluded1.indexOf(key1) >= 0) continue;
              target1[key1] = source1[key1];
          }
          return target1;
      }
      function _objectWithoutProperties(source1, excluded1) {
          if (source1 == null) return {};
          var target1 = _objectWithoutPropertiesLoose(source1, excluded1);
          var key1, i3;
          if (Object.getOwnPropertySymbols) {
              var sourceSymbolKeys1 = Object.getOwnPropertySymbols(source1);
              for(i3 = 0; i3 < sourceSymbolKeys1.length; i3++){
                  key1 = sourceSymbolKeys1[i3];
                  if (excluded1.indexOf(key1) >= 0) continue;
                  if (!Object.prototype.propertyIsEnumerable.call(source1, key1)) continue;
                  target1[key1] = source1[key1];
              }
          }
          return target1;
      }
      function _assertThisInitialized(self1) {
          if (self1 === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return self1;
      }
      function _possibleConstructorReturn(self1, call1) {
          if (call1 && (typeof call1 === "object" || typeof call1 === "function")) return call1;
          else if (call1 !== void 0) throw new TypeError("Derived constructors may only return object or undefined");
          return _assertThisInitialized(self1);
      }
      function _createSuper(Derived1) {
          var hasNativeReflectConstruct1 = _isNativeReflectConstruct();
          return function _createSuperInternal1() {
              var Super1 = _getPrototypeOf(Derived1), result1;
              if (hasNativeReflectConstruct1) {
                  var NewTarget1 = _getPrototypeOf(this).constructor;
                  result1 = Reflect.construct(Super1, arguments, NewTarget1);
              } else result1 = Super1.apply(this, arguments);
              return _possibleConstructorReturn(this, result1);
          };
      }
      function _superPropBase(object1, property1) {
          while(!Object.prototype.hasOwnProperty.call(object1, property1)){
              object1 = _getPrototypeOf(object1);
              if (object1 === null) break;
          }
          return object1;
      }
      function _get() {
          if (typeof Reflect !== "undefined" && Reflect.get) _get = Reflect.get;
          else _get = function _get1(target1, property1, receiver1) {
              var base1 = _superPropBase(target1, property1);
              if (!base1) return;
              var desc1 = Object.getOwnPropertyDescriptor(base1, property1);
              if (desc1.get) return desc1.get.call(arguments.length < 3 ? target1 : receiver1);
              return desc1.value;
          };
          return _get.apply(this, arguments);
      }
      function set(target1, property1, value1, receiver1) {
          if (typeof Reflect !== "undefined" && Reflect.set) set = Reflect.set;
          else set = function set1(target1, property1, value1, receiver1) {
              var base1 = _superPropBase(target1, property1);
              var desc1;
              if (base1) {
                  desc1 = Object.getOwnPropertyDescriptor(base1, property1);
                  if (desc1.set) {
                      desc1.set.call(receiver1, value1);
                      return true;
                  } else if (!desc1.writable) return false;
              }
              desc1 = Object.getOwnPropertyDescriptor(receiver1, property1);
              if (desc1) {
                  if (!desc1.writable) return false;
                  desc1.value = value1;
                  Object.defineProperty(receiver1, property1, desc1);
              } else _defineProperty(receiver1, property1, value1);
              return true;
          };
          return set(target1, property1, value1, receiver1);
      }
      function _set(target1, property1, value1, receiver1, isStrict1) {
          var s10 = set(target1, property1, value1, receiver1 || target1);
          if (!s10 && isStrict1) throw new Error("failed to set property");
          return value1;
      }
      function _taggedTemplateLiteral(strings1, raw1) {
          if (!raw1) raw1 = strings1.slice(0);
          return Object.freeze(Object.defineProperties(strings1, {
              raw: {
                  value: Object.freeze(raw1)
              }
          }));
      }
      function _taggedTemplateLiteralLoose(strings1, raw1) {
          if (!raw1) raw1 = strings1.slice(0);
          strings1.raw = raw1;
          return strings1;
      }
      function _readOnlyError(name1) {
          throw new TypeError('"' + name1 + '" is read-only');
      }
      function _writeOnlyError(name1) {
          throw new TypeError('"' + name1 + '" is write-only');
      }
      function _classNameTDZError(name1) {
          throw new Error('Class "' + name1 + '" cannot be referenced in computed property keys.');
      }
      function _temporalUndefined() {}
      function _tdz(name1) {
          throw new ReferenceError(name1 + " is not defined - temporal dead zone");
      }
      function _temporalRef(val1, name1) {
          return val1 === _temporalUndefined ? _tdz(name1) : val1;
      }
      function _slicedToArray(arr1, i3) {
          return _arrayWithHoles(arr1) || _iterableToArrayLimit(arr1, i3) || _unsupportedIterableToArray(arr1, i3) || _nonIterableRest();
      }
      function _slicedToArrayLoose(arr1, i3) {
          return _arrayWithHoles(arr1) || _iterableToArrayLimitLoose(arr1, i3) || _unsupportedIterableToArray(arr1, i3) || _nonIterableRest();
      }
      function _toArray(arr1) {
          return _arrayWithHoles(arr1) || _iterableToArray(arr1) || _unsupportedIterableToArray(arr1) || _nonIterableRest();
      }
      function _toConsumableArray(arr1) {
          return _arrayWithoutHoles(arr1) || _iterableToArray(arr1) || _unsupportedIterableToArray(arr1) || _nonIterableSpread();
      }
      function _arrayWithoutHoles(arr1) {
          if (Array.isArray(arr1)) return _arrayLikeToArray(arr1);
      }
      function _arrayWithHoles(arr1) {
          if (Array.isArray(arr1)) return arr1;
      }
      function _maybeArrayLike(next1, arr1, i3) {
          if (arr1 && !Array.isArray(arr1) && typeof arr1.length === "number") {
              var len1 = arr1.length;
              return _arrayLikeToArray(arr1, i3 !== void 0 && i3 < len1 ? i3 : len1);
          }
          return next1(arr1, i3);
      }
      function _iterableToArray(iter1) {
          if (typeof Symbol !== "undefined" && iter1[Symbol.iterator] != null || iter1["@@iterator"] != null) return Array.from(iter1);
      }
      function _iterableToArrayLimit(arr1, i3) {
          var _i1 = arr1 == null ? null : typeof Symbol !== "undefined" && arr1[Symbol.iterator] || arr1["@@iterator"];
          if (_i1 == null) return;
          var _arr1 = [];
          var _n1 = true;
          var _d1 = false;
          var _s1, _e1;
          try {
              for(_i1 = _i1.call(arr1); !(_n1 = (_s1 = _i1.next()).done); _n1 = true){
                  _arr1.push(_s1.value);
                  if (i3 && _arr1.length === i3) break;
              }
          } catch (err1) {
              _d1 = true;
              _e1 = err1;
          } finally{
              try {
                  if (!_n1 && _i1["return"] != null) _i1["return"]();
              } finally{
                  if (_d1) throw _e1;
              }
          }
          return _arr1;
      }
      function _iterableToArrayLimitLoose(arr1, i3) {
          var _i1 = arr1 && (typeof Symbol !== "undefined" && arr1[Symbol.iterator] || arr1["@@iterator"]);
          if (_i1 == null) return;
          var _arr1 = [];
          for(_i1 = _i1.call(arr1), _step; !(_step = _i1.next()).done;){
              _arr1.push(_step.value);
              if (i3 && _arr1.length === i3) break;
          }
          return _arr1;
      }
      function _unsupportedIterableToArray(o5, minLen1) {
          if (!o5) return;
          if (typeof o5 === "string") return _arrayLikeToArray(o5, minLen1);
          var n3 = Object.prototype.toString.call(o5).slice(8, -1);
          if (n3 === "Object" && o5.constructor) n3 = o5.constructor.name;
          if (n3 === "Map" || n3 === "Set") return Array.from(o5);
          if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3)) return _arrayLikeToArray(o5, minLen1);
      }
      function _arrayLikeToArray(arr1, len1) {
          if (len1 == null || len1 > arr1.length) len1 = arr1.length;
          for(var i3 = 0, arr21 = new Array(len1); i3 < len1; i3++)arr21[i3] = arr1[i3];
          return arr21;
      }
      function _nonIterableSpread() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _nonIterableRest() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _createForOfIteratorHelper(o5, allowArrayLike1) {
          var it1 = typeof Symbol !== "undefined" && o5[Symbol.iterator] || o5["@@iterator"];
          if (!it1) {
              if (Array.isArray(o5) || (it1 = _unsupportedIterableToArray(o5)) || allowArrayLike1 && o5 && typeof o5.length === "number") {
                  if (it1) o5 = it1;
                  var i3 = 0;
                  var F1 = function() {};
                  return {
                      s: F1,
                      n: function() {
                          if (i3 >= o5.length) return {
                              done: true
                          };
                          return {
                              done: false,
                              value: o5[i3++]
                          };
                      },
                      e: function(e1) {
                          throw e1;
                      },
                      f: F1
                  };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          var normalCompletion1 = true, didErr1 = false, err1;
          return {
              s: function() {
                  it1 = it1.call(o5);
              },
              n: function() {
                  var step1 = it1.next();
                  normalCompletion1 = step1.done;
                  return step1;
              },
              e: function(e1) {
                  didErr1 = true;
                  err1 = e1;
              },
              f: function() {
                  try {
                      if (!normalCompletion1 && it1.return != null) it1.return();
                  } finally{
                      if (didErr1) throw err1;
                  }
              }
          };
      }
      function _createForOfIteratorHelperLoose(o5, allowArrayLike1) {
          var it1 = typeof Symbol !== "undefined" && o5[Symbol.iterator] || o5["@@iterator"];
          if (it1) return (it1 = it1.call(o5)).next.bind(it1);
          if (Array.isArray(o5) || (it1 = _unsupportedIterableToArray(o5)) || allowArrayLike1 && o5 && typeof o5.length === "number") {
              if (it1) o5 = it1;
              var i3 = 0;
              return function() {
                  if (i3 >= o5.length) return {
                      done: true
                  };
                  return {
                      done: false,
                      value: o5[i3++]
                  };
              };
          }
          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _skipFirstGeneratorNext(fn1) {
          return function() {
              var it1 = fn1.apply(this, arguments);
              it1.next();
              return it1;
          };
      }
      function _toPrimitive(input1, hint1) {
          if (typeof input1 !== "object" || input1 === null) return input1;
          var prim1 = input1[Symbol.toPrimitive];
          if (prim1 !== undefined) {
              var res1 = prim1.call(input1, hint1 || "default");
              if (typeof res1 !== "object") return res1;
              throw new TypeError("@@toPrimitive must return a primitive value.");
          }
          return (hint1 === "string" ? String : Number)(input1);
      }
      function _toPropertyKey(arg1) {
          var key1 = _toPrimitive(arg1, "string");
          return typeof key1 === "symbol" ? key1 : String(key1);
      }
      function _initializerWarningHelper(descriptor1, context1) {
          throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and runs after the decorators transform.");
      }
      function _initializerDefineProperty(target1, property1, descriptor1, context1) {
          if (!descriptor1) return;
          Object.defineProperty(target1, property1, {
              enumerable: descriptor1.enumerable,
              configurable: descriptor1.configurable,
              writable: descriptor1.writable,
              value: descriptor1.initializer ? descriptor1.initializer.call(context1) : void 0
          });
      }
      function _applyDecoratedDescriptor(target1, property1, decorators1, descriptor1, context1) {
          var desc1 = {};
          Object.keys(descriptor1).forEach(function(key1) {
              desc1[key1] = descriptor1[key1];
          });
          desc1.enumerable = !!desc1.enumerable;
          desc1.configurable = !!desc1.configurable;
          if ("value" in desc1 || desc1.initializer) desc1.writable = true;
          desc1 = decorators1.slice().reverse().reduce(function(desc1, decorator1) {
              return decorator1(target1, property1, desc1) || desc1;
          }, desc1);
          if (context1 && desc1.initializer !== void 0) {
              desc1.value = desc1.initializer ? desc1.initializer.call(context1) : void 0;
              desc1.initializer = undefined;
          }
          if (desc1.initializer === void 0) {
              Object.defineProperty(target1, property1, desc1);
              desc1 = null;
          }
          return desc1;
      }
      var id = 0;
      function _classPrivateFieldLooseKey(name1) {
          return "__private_" + id++ + "_" + name1;
      }
      function _classPrivateFieldLooseBase(receiver1, privateKey1) {
          if (!Object.prototype.hasOwnProperty.call(receiver1, privateKey1)) throw new TypeError("attempted to use private field on non-instance");
          return receiver1;
      }
      function _classPrivateFieldGet(receiver1, privateMap1) {
          var descriptor1 = _classExtractFieldDescriptor(receiver1, privateMap1, "get");
          return _classApplyDescriptorGet(receiver1, descriptor1);
      }
      function _classPrivateFieldSet(receiver1, privateMap1, value1) {
          var descriptor1 = _classExtractFieldDescriptor(receiver1, privateMap1, "set");
          _classApplyDescriptorSet(receiver1, descriptor1, value1);
          return value1;
      }
      function _classPrivateFieldDestructureSet(receiver1, privateMap1) {
          var descriptor1 = _classExtractFieldDescriptor(receiver1, privateMap1, "set");
          return _classApplyDescriptorDestructureSet(receiver1, descriptor1);
      }
      function _classExtractFieldDescriptor(receiver1, privateMap1, action1) {
          if (!privateMap1.has(receiver1)) throw new TypeError("attempted to " + action1 + " private field on non-instance");
          return privateMap1.get(receiver1);
      }
      function _classStaticPrivateFieldSpecGet(receiver1, classConstructor1, descriptor1) {
          _classCheckPrivateStaticAccess(receiver1, classConstructor1);
          _classCheckPrivateStaticFieldDescriptor(descriptor1, "get");
          return _classApplyDescriptorGet(receiver1, descriptor1);
      }
      function _classStaticPrivateFieldSpecSet(receiver1, classConstructor1, descriptor1, value1) {
          _classCheckPrivateStaticAccess(receiver1, classConstructor1);
          _classCheckPrivateStaticFieldDescriptor(descriptor1, "set");
          _classApplyDescriptorSet(receiver1, descriptor1, value1);
          return value1;
      }
      function _classStaticPrivateMethodGet(receiver1, classConstructor1, method1) {
          _classCheckPrivateStaticAccess(receiver1, classConstructor1);
          return method1;
      }
      function _classStaticPrivateMethodSet() {
          throw new TypeError("attempted to set read only static private field");
      }
      function _classApplyDescriptorGet(receiver1, descriptor1) {
          if (descriptor1.get) return descriptor1.get.call(receiver1);
          return descriptor1.value;
      }
      function _classApplyDescriptorSet(receiver1, descriptor1, value1) {
          if (descriptor1.set) descriptor1.set.call(receiver1, value1);
          else {
              if (!descriptor1.writable) throw new TypeError("attempted to set read only private field");
              descriptor1.value = value1;
          }
      }
      function _classApplyDescriptorDestructureSet(receiver1, descriptor1) {
          if (descriptor1.set) {
              if (!("__destrObj" in descriptor1)) descriptor1.__destrObj = {
                  set value (v){
                      descriptor1.set.call(receiver1, v);
                  }
              };
              return descriptor1.__destrObj;
          } else {
              if (!descriptor1.writable) throw new TypeError("attempted to set read only private field");
              return descriptor1;
          }
      }
      function _classStaticPrivateFieldDestructureSet(receiver1, classConstructor1, descriptor1) {
          _classCheckPrivateStaticAccess(receiver1, classConstructor1);
          _classCheckPrivateStaticFieldDescriptor(descriptor1, "set");
          return _classApplyDescriptorDestructureSet(receiver1, descriptor1);
      }
      function _classCheckPrivateStaticAccess(receiver1, classConstructor1) {
          if (receiver1 !== classConstructor1) throw new TypeError("Private static access of wrong provenance");
      }
      function _classCheckPrivateStaticFieldDescriptor(descriptor1, action1) {
          if (descriptor1 === undefined) throw new TypeError("attempted to " + action1 + " private static field before its declaration");
      }
      function _decorate(decorators1, factory1, superClass1, mixins1) {
          var api1 = _getDecoratorsApi();
          if (mixins1) for(var i3 = 0; i3 < mixins1.length; i3++)api1 = mixins1[i3](api1);
          var r1 = factory1(function initialize1(O1) {
              api1.initializeInstanceElements(O1, decorated1.elements);
          }, superClass1);
          var decorated1 = api1.decorateClass(_coalesceClassElements(r1.d.map(_createElementDescriptor)), decorators1);
          api1.initializeClassElements(r1.F, decorated1.elements);
          return api1.runClassFinishers(r1.F, decorated1.finishers);
      }
      function _getDecoratorsApi() {
          _getDecoratorsApi = function() {
              return api1;
          };
          var api1 = {
              elementsDefinitionOrder: [
                  [
                      "method"
                  ],
                  [
                      "field"
                  ]
              ],
              initializeInstanceElements: function(O1, elements1) {
                  [
                      "method",
                      "field"
                  ].forEach(function(kind1) {
                      elements1.forEach(function(element1) {
                          if (element1.kind === kind1 && element1.placement === "own") this.defineClassElement(O1, element1);
                      }, this);
                  }, this);
              },
              initializeClassElements: function(F1, elements1) {
                  var proto1 = F1.prototype;
                  [
                      "method",
                      "field"
                  ].forEach(function(kind1) {
                      elements1.forEach(function(element1) {
                          var placement1 = element1.placement;
                          if (element1.kind === kind1 && (placement1 === "static" || placement1 === "prototype")) {
                              var receiver1 = placement1 === "static" ? F1 : proto1;
                              this.defineClassElement(receiver1, element1);
                          }
                      }, this);
                  }, this);
              },
              defineClassElement: function(receiver1, element1) {
                  var descriptor1 = element1.descriptor;
                  if (element1.kind === "field") {
                      var initializer1 = element1.initializer;
                      descriptor1 = {
                          enumerable: descriptor1.enumerable,
                          writable: descriptor1.writable,
                          configurable: descriptor1.configurable,
                          value: initializer1 === void 0 ? void 0 : initializer1.call(receiver1)
                      };
                  }
                  Object.defineProperty(receiver1, element1.key, descriptor1);
              },
              decorateClass: function(elements1, decorators1) {
                  var newElements1 = [];
                  var finishers1 = [];
                  var placements1 = {
                      static: [],
                      prototype: [],
                      own: []
                  };
                  elements1.forEach(function(element1) {
                      this.addElementPlacement(element1, placements1);
                  }, this);
                  elements1.forEach(function(element1) {
                      if (!_hasDecorators(element1)) return newElements1.push(element1);
                      var elementFinishersExtras1 = this.decorateElement(element1, placements1);
                      newElements1.push(elementFinishersExtras1.element);
                      newElements1.push.apply(newElements1, elementFinishersExtras1.extras);
                      finishers1.push.apply(finishers1, elementFinishersExtras1.finishers);
                  }, this);
                  if (!decorators1) return {
                      elements: newElements1,
                      finishers: finishers1
                  };
                  var result1 = this.decorateConstructor(newElements1, decorators1);
                  finishers1.push.apply(finishers1, result1.finishers);
                  result1.finishers = finishers1;
                  return result1;
              },
              addElementPlacement: function(element1, placements1, silent1) {
                  var keys1 = placements1[element1.placement];
                  if (!silent1 && keys1.indexOf(element1.key) !== -1) throw new TypeError("Duplicated element (" + element1.key + ")");
                  keys1.push(element1.key);
              },
              decorateElement: function(element1, placements1) {
                  var extras1 = [];
                  var finishers1 = [];
                  for(var decorators1 = element1.decorators, i3 = decorators1.length - 1; i3 >= 0; i3--){
                      var keys1 = placements1[element1.placement];
                      keys1.splice(keys1.indexOf(element1.key), 1);
                      var elementObject1 = this.fromElementDescriptor(element1);
                      var elementFinisherExtras1 = this.toElementFinisherExtras((0, decorators1[i3])(elementObject1) || elementObject1);
                      element1 = elementFinisherExtras1.element;
                      this.addElementPlacement(element1, placements1);
                      if (elementFinisherExtras1.finisher) finishers1.push(elementFinisherExtras1.finisher);
                      var newExtras1 = elementFinisherExtras1.extras;
                      if (newExtras1) {
                          for(var j1 = 0; j1 < newExtras1.length; j1++)this.addElementPlacement(newExtras1[j1], placements1);
                          extras1.push.apply(extras1, newExtras1);
                      }
                  }
                  return {
                      element: element1,
                      finishers: finishers1,
                      extras: extras1
                  };
              },
              decorateConstructor: function(elements1, decorators1) {
                  var finishers1 = [];
                  for(var i3 = decorators1.length - 1; i3 >= 0; i3--){
                      var obj1 = this.fromClassDescriptor(elements1);
                      var elementsAndFinisher1 = this.toClassDescriptor((0, decorators1[i3])(obj1) || obj1);
                      if (elementsAndFinisher1.finisher !== undefined) finishers1.push(elementsAndFinisher1.finisher);
                      if (elementsAndFinisher1.elements !== undefined) {
                          elements1 = elementsAndFinisher1.elements;
                          for(var j1 = 0; j1 < elements1.length - 1; j1++)for(var k1 = j1 + 1; k1 < elements1.length; k1++){
                              if (elements1[j1].key === elements1[k1].key && elements1[j1].placement === elements1[k1].placement) throw new TypeError("Duplicated element (" + elements1[j1].key + ")");
                          }
                      }
                  }
                  return {
                      elements: elements1,
                      finishers: finishers1
                  };
              },
              fromElementDescriptor: function(element1) {
                  var obj1 = {
                      kind: element1.kind,
                      key: element1.key,
                      placement: element1.placement,
                      descriptor: element1.descriptor
                  };
                  var desc1 = {
                      value: "Descriptor",
                      configurable: true
                  };
                  Object.defineProperty(obj1, Symbol.toStringTag, desc1);
                  if (element1.kind === "field") obj1.initializer = element1.initializer;
                  return obj1;
              },
              toElementDescriptors: function(elementObjects1) {
                  if (elementObjects1 === undefined) return;
                  return _toArray(elementObjects1).map(function(elementObject1) {
                      var element1 = this.toElementDescriptor(elementObject1);
                      this.disallowProperty(elementObject1, "finisher", "An element descriptor");
                      this.disallowProperty(elementObject1, "extras", "An element descriptor");
                      return element1;
                  }, this);
              },
              toElementDescriptor: function(elementObject1) {
                  var kind1 = String(elementObject1.kind);
                  if (kind1 !== "method" && kind1 !== "field") throw new TypeError('An element descriptor\'s .kind property must be either "method" or "field", but a decorator created an element descriptor with .kind "' + kind1 + '"');
                  var key1 = _toPropertyKey(elementObject1.key);
                  var placement1 = String(elementObject1.placement);
                  if (placement1 !== "static" && placement1 !== "prototype" && placement1 !== "own") throw new TypeError('An element descriptor\'s .placement property must be one of "static", "prototype" or "own", but a decorator created an element descriptor with .placement "' + placement1 + '"');
                  var descriptor1 = elementObject1.descriptor;
                  this.disallowProperty(elementObject1, "elements", "An element descriptor");
                  var element1 = {
                      kind: kind1,
                      key: key1,
                      placement: placement1,
                      descriptor: Object.assign({}, descriptor1)
                  };
                  if (kind1 !== "field") this.disallowProperty(elementObject1, "initializer", "A method descriptor");
                  else {
                      this.disallowProperty(descriptor1, "get", "The property descriptor of a field descriptor");
                      this.disallowProperty(descriptor1, "set", "The property descriptor of a field descriptor");
                      this.disallowProperty(descriptor1, "value", "The property descriptor of a field descriptor");
                      element1.initializer = elementObject1.initializer;
                  }
                  return element1;
              },
              toElementFinisherExtras: function(elementObject1) {
                  var element1 = this.toElementDescriptor(elementObject1);
                  var finisher1 = _optionalCallableProperty(elementObject1, "finisher");
                  var extras1 = this.toElementDescriptors(elementObject1.extras);
                  return {
                      element: element1,
                      finisher: finisher1,
                      extras: extras1
                  };
              },
              fromClassDescriptor: function(elements1) {
                  var obj1 = {
                      kind: "class",
                      elements: elements1.map(this.fromElementDescriptor, this)
                  };
                  var desc1 = {
                      value: "Descriptor",
                      configurable: true
                  };
                  Object.defineProperty(obj1, Symbol.toStringTag, desc1);
                  return obj1;
              },
              toClassDescriptor: function(obj1) {
                  var kind1 = String(obj1.kind);
                  if (kind1 !== "class") throw new TypeError('A class descriptor\'s .kind property must be "class", but a decorator created a class descriptor with .kind "' + kind1 + '"');
                  this.disallowProperty(obj1, "key", "A class descriptor");
                  this.disallowProperty(obj1, "placement", "A class descriptor");
                  this.disallowProperty(obj1, "descriptor", "A class descriptor");
                  this.disallowProperty(obj1, "initializer", "A class descriptor");
                  this.disallowProperty(obj1, "extras", "A class descriptor");
                  var finisher1 = _optionalCallableProperty(obj1, "finisher");
                  var elements1 = this.toElementDescriptors(obj1.elements);
                  return {
                      elements: elements1,
                      finisher: finisher1
                  };
              },
              runClassFinishers: function(constructor1, finishers1) {
                  for(var i3 = 0; i3 < finishers1.length; i3++){
                      var newConstructor1 = (0, finishers1[i3])(constructor1);
                      if (newConstructor1 !== undefined) {
                          if (typeof newConstructor1 !== "function") throw new TypeError("Finishers must return a constructor.");
                          constructor1 = newConstructor1;
                      }
                  }
                  return constructor1;
              },
              disallowProperty: function(obj1, name1, objectType1) {
                  if (obj1[name1] !== undefined) throw new TypeError(objectType1 + " can't have a ." + name1 + " property.");
              }
          };
          return api1;
      }
      function _createElementDescriptor(def1) {
          var key1 = _toPropertyKey(def1.key);
          var descriptor1;
          if (def1.kind === "method") descriptor1 = {
              value: def1.value,
              writable: true,
              configurable: true,
              enumerable: false
          };
          else if (def1.kind === "get") descriptor1 = {
              get: def1.value,
              configurable: true,
              enumerable: false
          };
          else if (def1.kind === "set") descriptor1 = {
              set: def1.value,
              configurable: true,
              enumerable: false
          };
          else if (def1.kind === "field") descriptor1 = {
              configurable: true,
              writable: true,
              enumerable: true
          };
          var element1 = {
              kind: def1.kind === "field" ? "field" : "method",
              key: key1,
              placement: def1.static ? "static" : def1.kind === "field" ? "own" : "prototype",
              descriptor: descriptor1
          };
          if (def1.decorators) element1.decorators = def1.decorators;
          if (def1.kind === "field") element1.initializer = def1.value;
          return element1;
      }
      function _coalesceGetterSetter(element1, other1) {
          if (element1.descriptor.get !== undefined) other1.descriptor.get = element1.descriptor.get;
          else other1.descriptor.set = element1.descriptor.set;
      }
      function _coalesceClassElements(elements1) {
          var newElements1 = [];
          var isSameElement1 = function(other1) {
              return other1.kind === "method" && other1.key === element1.key && other1.placement === element1.placement;
          };
          for(var i3 = 0; i3 < elements1.length; i3++){
              var element1 = elements1[i3];
              var other1;
              if (element1.kind === "method" && (other1 = newElements1.find(isSameElement1))) {
                  if (_isDataDescriptor(element1.descriptor) || _isDataDescriptor(other1.descriptor)) {
                      if (_hasDecorators(element1) || _hasDecorators(other1)) throw new ReferenceError("Duplicated methods (" + element1.key + ") can't be decorated.");
                      other1.descriptor = element1.descriptor;
                  } else {
                      if (_hasDecorators(element1)) {
                          if (_hasDecorators(other1)) throw new ReferenceError("Decorators can't be placed on different accessors with for the same property (" + element1.key + ").");
                          other1.decorators = element1.decorators;
                      }
                      _coalesceGetterSetter(element1, other1);
                  }
              } else newElements1.push(element1);
          }
          return newElements1;
      }
      function _hasDecorators(element1) {
          return element1.decorators && element1.decorators.length;
      }
      function _isDataDescriptor(desc1) {
          return desc1 !== undefined && !(desc1.value === undefined && desc1.writable === undefined);
      }
      function _optionalCallableProperty(obj1, name1) {
          var value1 = obj1[name1];
          if (value1 !== undefined && typeof value1 !== "function") throw new TypeError("Expected '" + name1 + "' to be a function");
          return value1;
      }
      function _classPrivateMethodGet(receiver1, privateSet1, fn1) {
          if (!privateSet1.has(receiver1)) throw new TypeError("attempted to get private field on non-instance");
          return fn1;
      }
      function _checkPrivateRedeclaration(obj1, privateCollection1) {
          if (privateCollection1.has(obj1)) throw new TypeError("Cannot initialize the same private elements twice on an object");
      }
      function _classPrivateFieldInitSpec(obj1, privateMap1, value1) {
          _checkPrivateRedeclaration(obj1, privateMap1);
          privateMap1.set(obj1, value1);
      }
      function _classPrivateMethodInitSpec(obj1, privateSet1) {
          _checkPrivateRedeclaration(obj1, privateSet1);
          privateSet1.add(obj1);
      }
      function _classPrivateMethodSet() {
          throw new TypeError("attempted to reassign private method");
      }
      function _identity(x4) {
          return x4;
      }
      // Numbers represent type - 
      // 1:float 2:vec2 3:vec3 4:vec4
      var geometryFunctions = {
          sphere: {
              args: [
                  1
              ]
          },
          line: {
              args: [
                  3,
                  3,
                  1
              ]
          },
          cone: {
              args: [
                  1,
                  1
              ]
          },
          roundCone: {
              args: [
                  3,
                  3,
                  1,
                  1
              ]
          },
          plane: {
              args: [
                  1,
                  1,
                  1,
                  1
              ]
          }
      };
      var mathFunctions = {
          nsin: {
              args: [
                  1
              ],
              ret: 1
          },
          ncos: {
              args: [
                  1
              ],
              ret: 1
          },
          round: {
              args: [
                  1
              ],
              ret: 1
          },
          hsv2rgb: {
              args: [
                  3
              ],
              ret: 3
          },
          rgb2hsv: {
              args: [
                  3
              ],
              ret: 3
          },
          rotateVec: {
              args: [
                  3,
                  3,
                  1
              ],
              ret: 3
          },
          toSpherical: {
              args: [
                  3
              ],
              ret: 3
          },
          fromSpherical: {
              args: [
                  3
              ],
              ret: 3
          },
          getRayDirection: {
              args: [],
              ret: 3
          },
          osc: {
              args: [
                  1
              ],
              ret: 1
          },
          _hash33: {
              args: [
                  3
              ],
              ret: 3
          },
          _hash13: {
              args: [
                  3
              ],
              ret: 1
          },
          noise: {
              args: [
                  3
              ],
              ret: 1
          },
          fractalNoise: {
              args: [
                  3
              ],
              ret: 1
          },
          sphericalDistribution: {
              args: [
                  3,
                  1
              ],
              ret: 4
          }
      }; // these all have a single input/output and are overloaded for 
      // all types so a list of names is all we need to generate them
      var glslBuiltInOneToOne = [
          "sin",
          "cos",
          "tan",
          "asin",
          "acos",
          "exp",
          "log",
          "exp2",
          "log2",
          "sqrt",
          "inversesqrt",
          "abs",
          "sign",
          "floor",
          "ceil",
          "fract"
      ]; // need better overloading system
      var glslBuiltInOther = {
          // overload pow somehow?
          // pow: { args:[1,1], ret:1 },
          mod: {
              args: [
                  1,
                  1
              ],
              ret: 1
          },
          min: {
              args: [
                  1,
                  1
              ],
              ret: 1
          },
          max: {
              args: [
                  1,
                  1
              ],
              ret: 1
          },
          atan: {
              args: [
                  1,
                  1
              ],
              ret: 1
          },
          clamp: {
              args: [
                  1,
                  1,
                  1
              ],
              ret: 1
          },
          step: {
              args: [
                  1,
                  1
              ],
              ret: 1
          },
          smoothstep: {
              args: [
                  1,
                  1,
                  1
              ],
              ret: 1
          },
          // also overload length for vec3 and vec2?
          length: {
              args: [
                  3
              ],
              ret: 1
          },
          distance: {
              args: [
                  3,
                  3
              ],
              ret: 1
          },
          dot: {
              args: [
                  3,
                  3
              ],
              ret: 1
          },
          cross: {
              args: [
                  3,
                  3
              ],
              ret: 3
          },
          normalize: {
              args: [
                  3
              ],
              ret: 3
          },
          reflect: {
              args: [
                  3,
                  3
              ],
              ret: 3
          },
          refract: {
              args: [
                  3,
                  3
              ],
              ret: 3
          }
      }; // let arg = {
      //     'mix' : (a, b, c) => (a.dim === b.dim && (c.dim === 1 || c.dim === a.dim))? a.dim: -1,
      // };
      function convertFunctionToString(source1) {
          if (typeof source1 === "function") {
              source1 = source1.toString();
              return source1.slice(source1.indexOf("{") + 1, source1.lastIndexOf("}"));
          } else if (!(typeof source1 === "string")) throw "your Shader Park code requires the source code to be a function, or a string";
          return source1;
      }
      var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
      function getDefaultExportFromCjs(x4) {
          return x4 && x4.__esModule && Object.prototype.hasOwnProperty.call(x4, "default") ? x4["default"] : x4;
      }
      function getDefaultExportFromNamespaceIfPresent(n3) {
          return n3 && Object.prototype.hasOwnProperty.call(n3, "default") ? n3["default"] : n3;
      }
      function getDefaultExportFromNamespaceIfNotNamed(n3) {
          return n3 && Object.prototype.hasOwnProperty.call(n3, "default") && Object.keys(n3).length === 1 ? n3["default"] : n3;
      }
      function getAugmentedNamespace(n3) {
          if (n3.__esModule) return n3;
          var a3 = Object.defineProperty({}, "__esModule", {
              value: true
          });
          Object.keys(n3).forEach(function(k1) {
              var d7 = Object.getOwnPropertyDescriptor(n3, k1);
              Object.defineProperty(a3, k1, d7.get ? d7 : {
                  enumerable: true,
                  get: function() {
                      return n3[k1];
                  }
              });
          });
          return a3;
      }
      function createCommonjsModule(fn1) {
          var module1 = {
              exports: {}
          };
          return fn1(module1, module1.exports), module1.exports;
      }
      function commonjsRequire(path1) {
          throw new Error('Could not dynamically require "' + path1 + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
      }
      var glslParser = createCommonjsModule(function(module, exports) {
          // Adapted from https://github.com/cimaron/cwebgl/blob/master/external/glsl2js/glsl.js
          /*
      Copyright (c) 2011 Cimaron Shanahan
      
      Permission is hereby granted, free of charge, to any person obtaining a copy of
      this software and associated documentation files (the "Software"), to deal in
      the Software without restriction, including without limitation the rights to
      use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
      the Software, and to permit persons to whom the Software is furnished to do so,
      subject to the following conditions:
      
      The above copyright notice and this permission notice shall be included in all
      copies or substantial portions of the Software.
      
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
      FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
      COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
      IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
      CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
      */ (function() {
              /*
        Copyright (c) 2011 Cimaron Shanahan
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of
        this software and associated documentation files (the "Software"), to deal in
        the Software without restriction, including without limitation the rights to
        use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
        the Software, and to permit persons to whom the Software is furnished to do so,
        subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
        FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
        COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
        IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
        CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        */ var glsl = {
                  runParse: function runParse1(src2, options1) {
                      var state1, result1, irs1;
                      state1 = new GlslState(options1);
                      state1.setSource(src2); //Preprocess
                      result1 = this.preprocessor.process(state1); //Parse into AST
                      if (result1) result1 = this.parser.parse(state1);
                      /*
            //Generate IR
            if (result) {
            result = this.generate(state);
            }
            */ if (result1) state1.status = true;
                      return state1;
                  },
                  /**
           * Compilation targets
           */ target: {
                      fragment: 0,
                      "x-fragment": 0,
                      "x-shader/x-fragment": 0,
                      vertex: 1,
                      "x-vertex": 1,
                      "x-shader/x-vertex": 1
                  }
              }; // Copyright Joyent, Inc. and other Node contributors.
              //
              // Permission is hereby granted, free of charge, to any person obtaining a
              // copy of this software and associated documentation files (the
              // "Software"), to deal in the Software without restriction, including
              // without limitation the rights to use, copy, modify, merge, publish,
              // distribute, sublicense, and/or sell copies of the Software, and to permit
              // persons to whom the Software is furnished to do so, subject to the
              // following conditions:
              //
              // The above copyright notice and this permission notice shall be included
              // in all copies or substantial portions of the Software.
              //
              // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
              // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
              // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
              // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
              // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
              // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
              // USE OR OTHER DEALINGS IN THE SOFTWARE.
              /**
         * Select node.js util functions
         */ var util = {};
              (function(exports1) {
                  var formatRegExp1 = /%[sdj%]/g;
                  exports1.format = function(f1) {
                      if (!isString1(f1)) {
                          var objects1 = [];
                          for(var i3 = 0; i3 < arguments.length; i3++)objects1.push(inspect(arguments[i3]));
                          return objects1.join(" ");
                      }
                      var i3 = 1;
                      var args1 = arguments;
                      var len1 = args1.length;
                      var str1 = String(f1).replace(formatRegExp1, function(x4) {
                          if (x4 === "%%") return "%";
                          if (i3 >= len1) return x4;
                          switch(x4){
                              case "%s":
                                  return String(args1[i3++]);
                              case "%d":
                                  return Number(args1[i3++]);
                              case "%j":
                                  try {
                                      return JSON.stringify(args1[i3++]);
                                  } catch (_1) {
                                      return "[Circular]";
                                  }
                              default:
                                  return x4;
                          }
                      });
                      for(var x4 = args1[i3]; i3 < len1; x4 = args1[++i3])//if (isNull(x) || !isObject(x)) {
                      str1 += " " + x4; //} else {
                      return str1;
                  };
                  function isString1(arg1) {
                      return typeof arg1 === "string";
                  }
                  exports1.isString = isString1;
                  /**
           * Inherit the prototype methods from one constructor into another.
           *
           * The Function.prototype.inherits from lang.js rewritten as a standalone
           * function (not on Function.prototype). NOTE: If this file is to be loaded
           * during bootstrapping this function needs to be rewritten using some native
           * functions as prototype setup using normal JavaScript does not work as
           * expected during bootstrapping (see mirror.js in r114903).
           *
           * @param {function} ctor Constructor function which needs to inherit the
           * prototype.
           * @param {function} superCtor Constructor function to inherit prototype from.
           */ exports1.inherits = function(ctor1, superCtor1) {
                      ctor1.super_ = superCtor1;
                      ctor1.prototype = Object.create(superCtor1.prototype, {
                          constructor: {
                              value: ctor1,
                              enumerable: false,
                              writable: true,
                              configurable: true
                          }
                      });
                  };
              })(util);
              /*
        Copyright (c) 2014 Cimaron Shanahan
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of
        this software and associated documentation files (the "Software"), to deal in
        the Software without restriction, including without limitation the rights to
        use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
        the Software, and to permit persons to whom the Software is furnished to do so,
        subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
        FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
        COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
        IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
        CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        */ function GlslState(options1) {
                  var i3;
                  this.options = {
                      target: 0,
                      language_version: 100,
                      opt: {
                          fold_constants: true
                      }
                  };
                  for(i3 in options1)this.options[i3] = options1[i3];
                  this.symbols = new SymbolTable();
                  symbol_table_init(this.symbols, options1.target);
                  this.status = false;
                  this.translation_unit = "";
                  this.ast = [];
                  this.ir = null;
                  this.errors = [];
                  this.warnings = [];
              }
              proto = GlslState.prototype = {};
              /**
         * Get identifier type
         *
         * @param   object   state   GLSL state
         * @param   string   name    Identifier name
         * Add error to state
         *
         * @return  string
         * @param   string   msg      Message
         * @param   int      line     Message
         * @param   int      column   Message
         */ proto.classify_identifier = function(state1, name1) {
                  if (this.symbols.get_variable(name1) || this.symbols.get_function(name1)) return "IDENTIFIER";
                  else if (this.symbols.get_type(name1)) return "TYPE_IDENTIFIER";
                  else return "NEW_IDENTIFIER";
              };
              proto.setSource = function(src2) {
                  this.src = src2;
              };
              proto.getSource = function() {
                  return this.src;
              };
              proto.setTranslationUnit = function(tu1) {
                  this.translation_unit = tu1;
              };
              proto.getTranslationUnit = function() {
                  return this.translation_unit;
              };
              proto.addAstNode = function(node1) {
                  this.ast.push(node1);
              };
              proto.getAst = function() {
                  return this.ast;
              };
              proto.setIR = function(ir1) {
                  this.ir = ir1;
              };
              proto.getIR = function() {
                  return this.ir;
              };
              proto.getStatus = function() {
                  return this.status;
              };
              /**
         * Add error to state
         *
         * @param   string   msg      Message
         * @param   int      line     Message
         * @param   int      column   Message
         */ proto.addError = function(msg1, line1, column1) {
                  var err1;
                  if (!line1 && !column1) {
                      this.errors.push(msg1);
                      return;
                  }
                  err1 = util.format("%s at line %s, column %s", msg1, line1, column1);
                  this.errors.push(err1);
              };
              /**
         * Add warning to state
         *
         * @param   string   msg      Message
         * @param   int      line     Message
         * @param   int      column   Message
         */ proto.addWarning = function(msg1, line1, column1) {
                  var warn1;
                  if (!line1 && !column1) {
                      this.warnings.push(msg1);
                      return;
                  }
                  warn1 = util.format("%s at line %s, column %s", msg1, line1, column1);
                  this.warnings.push(warn1);
              };
              /**
         * Get compile errors
         *
         * @return  mixed
         */ proto.getErrors = function() {
                  return this.errors;
              };
              /**
         * Get compile errors
         *
         * @return  mixed
         */ proto.getWarnings = function() {
                  return this.warnings;
              };
              /*
        Copyright (c) 2014 Cimaron Shanahan
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of
        this software and associated documentation files (the "Software"), to deal in
        the Software without restriction, including without limitation the rights to
        use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
        the Software, and to permit persons to whom the Software is furnished to do so,
        subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
        FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
        COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
        IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
        CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        */ /**
         * Preprocessor Class
         */ function Preprocessor() {}
              Preprocessor.modules = {};
              var proto = Preprocessor.prototype;
              proto.process = function(state1) {
                  var m1, out1 = state1.getSource();
                  for(m1 in Preprocessor.modules)try {
                      out1 = Preprocessor.modules[m1].process(out1);
                  } catch (e1) {
                      state1.addError(e1.message, e1.lineNumber, e1.columnNumber);
                      return false;
                  }
                  state1.setTranslationUnit(out1);
                  return true;
              };
              glsl.preprocessor = new Preprocessor();
              /*
        Copyright (c) 2014 Cimaron Shanahan
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of
        this software and associated documentation files (the "Software"), to deal in
        the Software without restriction, including without limitation the rights to
        use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
        the Software, and to permit persons to whom the Software is furnished to do so,
        subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
        FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
        COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
        IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
        CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        */ Preprocessor.modules.comments = {
                  process: function process1(src2) {
                      var i3, chr1, la1, out1 = "", line1 = 1, in_single1 = 0, in_multi1 = 0;
                      for(i3 = 0; i3 < src2.length; i3++){
                          chr1 = src2.substr(i3, 1);
                          la1 = src2.substr(i3 + 1, 1); //Enter single line comment
                          if (chr1 == "/" && la1 == "/" && !in_single1 && !in_multi1) {
                              in_single1 = line1;
                              i3++;
                              continue;
                          } //Exit single line comment
                          if (chr1 == "\n" && in_single1) in_single1 = 0;
                           //Enter multi line comment
                          if (chr1 == "/" && la1 == "*" && !in_multi1 && !in_single1) {
                              in_multi1 = line1;
                              i3++;
                              continue;
                          } //Exit multi line comment
                          if (chr1 == "*" && la1 == "/" && in_multi1) {
                              //Treat single line multi-comment as space
                              if (in_multi1 == line1) out1 += " ";
                              in_multi1 = 0;
                              i3++;
                              continue;
                          } //Newlines are preserved
                          if (!in_multi1 && !in_single1 || chr1 == "\n") {
                              out1 += chr1;
                              line1++;
                          }
                      }
                      return out1;
                  }
              };
              /*
        Copyright (c) 2014 Cimaron Shanahan
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of
        this software and associated documentation files (the "Software"), to deal in
        the Software without restriction, including without limitation the rights to
        use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
        the Software, and to permit persons to whom the Software is furnished to do so,
        subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
        FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
        COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
        IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
        CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        */ Preprocessor.modules.directives = {
                  state: {
                      lines: [],
                      defines: {}
                  },
                  process: function process1(src2) {
                      var i3, l1;
                      this.state.lines = src2.split("\n");
                      this.state.defines = {
                          GL_ES: "1",
                          __FILE__: "0",
                          __LINE__: "0",
                          __VERSION__: "300"
                      };
                      this.state.cond_stack = [];
                      i3 = 0;
                      l1 = this.state.lines.length;
                      while(i3 < l1){
                          this.state.lines[i3] = this.processLine(this.state.lines[i3], i3);
                          i3++;
                      }
                      return this.state.lines.join("\n");
                  },
                  processLine: function processLine1(line1, i3) {
                      var d7, matches1, raw1, e1, sub1, cond1;
                      matches1 = line1.match(/^([ \t]*)#(.*)$/);
                      if (!matches1) {
                          if (this.state.cond_stack.length != 0 && !this.state.cond_stack.slice(-1)[0]) return "";
                          line1 = this.processDefines(line1, i3);
                          return line1;
                      }
                      raw1 = matches1[2];
                      if (raw1.match(/^\s*$/)) return "";
                      var lmatches1 = raw1.split(/\s+/);
                      try {
                          switch(lmatches1[0]){
                              case "define":
                              case "undef":
                              case "ifdef":
                              case "endif":
                                  this[lmatches1[0]](line1, lmatches1);
                                  return "";
                          }
                          throw new Error("Invalid directive");
                      } catch (e1) {
                          e1.lineNumber = i3 + 1;
                          e1.columnNumber = matches1[1].length + 1;
                          throw e1;
                      }
                  },
                  processDefines: function processDefines1(line1, i3) {
                      this.state.defines.__LINE__ = i3 + 1;
                      for(var d7 in this.state.defines)//easy global replace
                      line1 = line1.split(d7).join(this.state.defines[d7]);
                      return line1;
                  },
                  define: function define1(line1, matches1) {
                      if (matches1.length <= 1 || matches1.length > 3) throw new Error("Syntax error in #define");
                      this.state.defines[matches1[1]] = matches1[2] || "";
                  },
                  undef: function undef1(line1, matches1) {
                      if (matches1.length != 2) throw new Error("Syntax error in #undef");
                      delete this.state.defines[matches1[1]];
                  },
                  ifdef: function ifdef1(line1, matches1) {
                      var def1;
                      def1 = !!this.state.defines[matches1[1]];
                      this.state.cond_stack.push(def1);
                  },
                  endif: function endif1(line1, matches1) {
                      if (this.state.cond_stack.length) this.state.cond_stack.pop();
                      else throw new Error("unmatched #endif");
                  }
              };
              /*
        Copyright (c) 2011 Cimaron Shanahan
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of
        this software and associated documentation files (the "Software"), to deal in
        the Software without restriction, including without limitation the rights to
        use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
        the Software, and to permit persons to whom the Software is furnished to do so,
        subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
        FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
        COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
        IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
        CONNECTION WITH THE SOFTWARE OR THE USE		 OR OTHER DEALINGS IN THE SOFTWARE.
        */ function Type(name1, size1, slots1, base1) {
                  this.name = name1;
                  this.size = size1;
                  this.slots = slots1;
                  this.swizzle = size1 / slots1 != 4 ? "xyzw".slice(0, size1 / slots1) : "";
                  this.base = base1 || name1;
              }
              /**
         * Do a cast on a constant
         *
         * @param   string   val    Value to cast
         * @param   string   from   From type
         * @param   string   to     To type
         *
         * @return  string
         */ Type.castTo = function(val1, from1, to1) {
                  var f321;
                  switch(to1){
                      case "int":
                          return "" + parseInt(val1);
                      case "float":
                          //Should we keep maximum precision, or use the following to force to 32bit precision??
                          /*
              f32 = new Float32Array(1);
              f32[0] = parseFloat(val);
              return "" + f32[0];
              */ return "" + parseFloat(val1);
                      case "bool":
                          return parseFloat(val1) ? "1" : "0";
                  }
                  return val1;
              };
              /**
         * Determine if can cast from one type to another
         *
         * @param   string   from   From type
         * @param   string   to     To type
         *
         * @return  bool
         */ Type.canCast = function(from1, to1) {
                  var t15, t21;
                  t15 = types[from1];
                  t21 = types[to1];
                  return t15.size === 1 && t21.size === 1;
              };
              var types = {
                  _void: new Type("void", 1, 1),
                  bool: new Type("bool", 1, 1),
                  int: new Type("int", 1, 1),
                  float: new Type("float", 1, 1),
                  vec2: new Type("vec2", 2, 1, "float"),
                  vec3: new Type("vec3", 3, 1, "float"),
                  vec4: new Type("vec4", 4, 1, "float"),
                  bvec2: new Type("bvec2", 2, 1, "bool"),
                  bvec3: new Type("bvec3", 3, 1, "bool"),
                  bvec4: new Type("bvec4", 4, 1, "bool"),
                  ivec2: new Type("ivec2", 2, 1, "int"),
                  ivec3: new Type("ivec3", 3, 1, "int"),
                  ivec4: new Type("ivec4", 4, 1, "int"),
                  mat2: new Type("mat2", 4, 2, "float"),
                  mat3: new Type("mat3", 9, 3, "float"),
                  mat4: new Type("mat4", 16, 4, "float"),
                  sampler2D: new Type("sampler2D", 1, 1),
                  samplerCube: new Type("samplerCube", 1, 1)
              }; //Compatibility
              types["void"] = types._void;
              /*
        Copyright (c) 2011 Cimaron Shanahan
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of
        this software and associated documentation files (the "Software"), to deal in
        the Software without restriction, including without limitation the rights to
        use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
        the Software, and to permit persons to whom the Software is furnished to do so,
        subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
        FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
        COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
        IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
        CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        */ /**
         * SymbolTableEntry constructor
         */ function SymbolTableEntry(name1, typedef1) {
                  this.depth = null;
                  this.typedef = typedef1; //Variable name
                  this.name = name1; //Type
                  this.type = null; //Base type (if array)
                  this.base_type = null; //Function definition
                  this.definition = []; //Qualifier
                  this.qualifier = null; //IR name
                  this.out = name1; //Constant value
                  this.constant = null; //Array size
                  this.size = null; //Temp vars for IR generation
                  this.code = null;
                  this.Ast = null;
              }
              SymbolTableEntry.typedef = {
                  variable: 0,
                  func: 1,
                  type: 2
              };
              SymbolTableEntry.prototype.getType = function() {
                  return types[this.type];
              };
              /**
         * symbol_table constructor
         */ function SymbolTable() {
                  this.table = {};
                  this.depth = 0;
              }
              SymbolTable.prototype = {};
              var proto = SymbolTable.prototype;
              /**
         * 
         */ proto.push_scope = function() {
                  this.depth++;
              };
              /**
         * 
         */ proto.pop_scope = function() {
                  var n3, t4;
                  for(n3 in this.table)if (this.table.hasOwnProperty(n3)) {
                      t4 = this.table[n3];
                      while(t4[0] && t4[0].depth === this.depth)t4.splice(0, 1);
                      if (t4.length === 0) delete this.table[n3];
                  }
                  this.depth--;
              };
              /**
         * 
         */ proto.name_declared_this_scope = function(name1) {
                  var e1 = this.get_entry(name1);
                  return e1 && e1.depth === this.depth;
              };
              /**
         * 
         */ proto.add_variable = function(name1, type1) {
                  var entry1 = new SymbolTableEntry(name1, SymbolTableEntry.typedef.variable);
                  entry1.type = type1;
                  return this._add_entry(entry1);
              };
              /**
         * 
         */ proto.add_type = function(name1, t4) {
                  var entry1 = new SymbolTableEntry(name1, SymbolTableEntry.typedef.type);
                  entry1.definition = t4;
                  return this._add_entry(entry1);
              };
              /**
         * 
         */ proto.add_function = function(name1, type1, def1) {
                  var entry1;
                  entry1 = new SymbolTableEntry(name1, SymbolTableEntry.typedef.func);
                  entry1.type = type1;
                  if (def1) entry1.definition = def1;
                  return this._add_entry(entry1);
              };
              /**
         * 
         */ proto.get_variable = function(name1) {
                  var entry1 = this.get_entry(name1, SymbolTableEntry.typedef.variable);
                  return entry1;
              };
              /**
         * 
         */ proto.get_type = function(name1) {
                  var entry1 = this.get_entry(name1, SymbolTableEntry.typedef.type);
                  return entry1;
              };
              /**
         * 
         */ proto.get_function = function(name1, def1) {
                  var entry1 = this.get_entry(name1, SymbolTableEntry.typedef.func, def1);
                  return entry1;
              };
              /**
         * @protected
         */ proto._match_definition = function(def1, entry1) {
                  var i3;
                  if (!def1) return true;
                  if (def1.length !== entry1.length) return false;
                  for(i3 = 0; i3 < def1.length; i3++){
                      if (def1[i3] !== entry1[i3]) return false;
                  }
                  return true;
              };
              /**
         * @protected
         */ proto._add_entry = function(entry1) {
                  if (!this.table[entry1.name]) this.table[entry1.name] = [];
                  this.table[entry1.name].splice(0, 0, entry1);
                  entry1.depth = this.depth;
                  return entry1;
              };
              /**
         * @protected
         */ proto.get_entry = function(name1, typedef1, def1) {
                  var t4, i3, entry1;
                  t4 = this.table[name1] || []; //Look for 'void' instead of empty definition list
                  if (def1 && def1.length == 0) def1 = [
                      "void"
                  ];
                  for(i3 = 0; i3 < t4.length; i3++){
                      entry1 = t4[i3]; //Not type of variable we're looking for
                      if (entry1.typedef !== typedef1) continue;
                       //Normal variable
                      if (typedef1 !== SymbolTableEntry.typedef.func) return entry1;
                       //Match any function definition
                      if (!def1) return entry1;
                       //Match specific function definition
                      if (def1.join(",") === entry1.definition.join(",")) return entry1;
                  }
                  return null;
              };
              /*
        Copyright (c) 2011 Cimaron Shanahan
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of
        this software and associated documentation files (the "Software"), to deal in
        the Software without restriction, including without limitation the rights to
        use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
        the Software, and to permit persons to whom the Software is furnished to do so,
        subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
        FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
        COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
        IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
        CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        */ /**
         * Base class of all abstract syntax tree nodes
         */ function AstNode() {
                  //public:
                  this.location = {
                      first_line: 0,
                      first_column: 0,
                      last_line: 0,
                      last_column: 0
                  }; //The following are used during IR generation
                  this.Dest = null;
                  this.Type = null;
                  this.Const = false;
              }
              var proto = AstNode.prototype; //public:
              proto.getLocation = function() {
                  return this.location;
              };
              proto.setLocation = function(loc1) {
                  this.location.first_line = loc1.first_line;
                  this.location.first_column = loc1.first_column;
                  this.location.last_line = loc1.last_line;
                  this.location.last_column = loc1.last_column;
              };
              /**
         * Return string representation of node
         *
         * @return  string
         */ proto.toString = function() {
                  return this.constructor.name;
              };
              proto.ir = function(state1, irs1) {}; //inverse of operators
              var ast_operators = [
                  "=",
                  "POS",
                  "NEG",
                  "+",
                  "-",
                  "*",
                  "/",
                  "%",
                  "<<",
                  ">>",
                  "<",
                  ">",
                  "<=",
                  ">=",
                  "==",
                  "!=",
                  "&",
                  "^",
                  "|",
                  "~",
                  "&&",
                  "^^",
                  "||",
                  "!",
                  "*=",
                  "/=",
                  "%=",
                  "+=",
                  "-=",
                  "<<=",
                  ">>=",
                  "&=",
                  "^=",
                  "|=",
                  "?:",
                  "++x",
                  "--x",
                  "x++",
                  "x--",
                  ".",
                  "[]",
                  "()",
                  "ident",
                  "float",
                  "int",
                  "bool"
              ];
              var ast_precision = {
                  none: 0,
                  highp: 1,
                  mediump: 2,
                  lowp: 3
              };
              /**
         * AST Type Specifier Class
         */ function AstTypeSpecifier(specifier1) {
                  AstNode.apply(this);
                  this.type_specifier = null;
                  this.type_name = null;
                  this.structure = null;
                  this.is_array = 0;
                  this.array_size = null;
                  this.precision = 2;
                  this.is_precision_statement = null;
                  if (AstTypeSpecifier[_typeof(specifier1)]) AstTypeSpecifier[_typeof(specifier1)].call(this, specifier1);
              }
              util.inherits(AstTypeSpecifier, AstNode);
              proto = AstTypeSpecifier.prototype; //overloaded constructors
              AstTypeSpecifier.number = function(specifier1) {
                  this.type_specifier = specifier1;
                  this.precision = ast_precision.none;
                  this.is_precision_statement = false;
                  this.type_name = types[specifier1].name;
              };
              AstTypeSpecifier.string = function(name1) {
                  this.type_specifier = types[name1];
                  this.type_name = name1;
                  this.is_array = false;
                  this.precision = ast_precision.none;
                  this.is_precision_statement = false;
              };
              AstTypeSpecifier.object = function(s10) {
                  this.type_specifier = types.struct;
                  this.type_name = s10.name;
                  this.structure = s10;
                  this.is_array = false;
                  this.precision = ast_precision.none;
                  this.is_precision_statement = false;
              };
              /**
         * Return string representation of node
         *
         * @return  string
         */ proto.toString = function() {
                  var i3, prec1;
                  if (this.is_precision_statement) {
                      for(i3 in ast_precision)if (ast_precision.hasOwnProperty(i3) && ast_precision[i3] === this.precision) {
                          prec1 = i3;
                          break;
                      }
                      return util.format("precision %s %s;\n", prec1, this.type_name);
                  }
                  return (this.type_specifier === types.struct ? this.structure : this.type_name) + (this.is_array ? util.format("[%s]", this.array_size || "") : "");
              };
              /**
         * AST Function Class
         */ function AstFunction() {
                  AstNode.apply(this);
                  this.return_type = null;
                  this.identifier = null;
                  this.parameters = [];
                  this.entry = null;
              }
              util.inherits(AstFunction, AstNode);
              proto = AstFunction.prototype;
              /**
         * Return string representation of node
         *
         * @return  string
         */ proto.toString = function() {
                  return util.format("%s %s(%s)", this.return_type, this.identifier, this.parameters.join(", "));
              };
              /**
         * AST Expression Class
         */ function AstExpression(oper1, ex01, ex11, ex21) {
                  AstNode.apply(this);
                  this.oper = oper1;
                  this.grouped = false;
                  this.subexpressions = [
                      null,
                      null,
                      null
                  ];
                  this.primary_expression = {};
                  this.expressions = [];
                  if (ast_operators.indexOf(this.oper) === -1) {
                      this.oper = "ident";
                      this.primary_expression.identifier = oper1;
                  } else {
                      this.subexpressions[0] = ex01;
                      this.subexpressions[1] = ex11;
                      this.subexpressions[2] = ex21;
                  }
              }
              util.inherits(AstExpression, AstNode);
              proto = AstExpression.prototype;
              /**
         * Return string representation of node
         *
         * @return  string
         */ proto.toString = function() {
                  var output1;
                  switch(this.oper){
                      case "=":
                      case "+":
                      case "-":
                      case "*":
                      case "/":
                      case "%":
                      case "<<":
                      case ">>":
                      case "<":
                      case ">":
                      case "<=":
                      case ">=":
                      case "==":
                      case "!=":
                      case "&":
                      case "^":
                      case "|":
                      case "~":
                      case "&&":
                      case "^^":
                      case "||":
                      case "*=":
                      case "/=":
                      case "%=":
                      case "+=":
                      case "-=":
                      case "<<=":
                      case ">>=":
                      case "&=":
                      case "^=":
                      case "|=":
                          output1 = util.format("%s %s %s", this.subexpressions[0], this.oper, this.subexpressions[1]);
                          break;
                      case ".":
                          output1 = util.format("%s.%s", this.subexpressions[0], this.primary_expression.identifier);
                          break;
                      case "POS":
                          output1 = util.format("+%s", this.subexpressions[0]);
                          break;
                      case "NEG":
                          output1 = util.format("-%s", this.subexpressions[0]);
                          break;
                      case "~":
                      case "!":
                          output1 = util.format("%s%s", this.oper, this.subexpressions[0]);
                          break;
                      case "++x":
                      case "--x":
                          output1 = util.format("%s%s", this.oper.replace("x", ""), this.subexpressions[0]);
                          break;
                      case "x++":
                      case "x--":
                          output1 = util.format("%s%s", this.subexpressions[0], this.oper.replace("x", ""));
                          break;
                      case "?:":
                          output1 = util.format("%s ? %s : %s", this.subexpressions[0], this.subexpressions[1], this.subexpressions[2]);
                          break;
                      case "[]":
                          output1 = util.format("%s[%s]", this.subexpressions[0], this.subexpressions[1]);
                          break;
                      case "()":
                          output1 = util.format("%s(%s)", this.subexpressions[0], this.expressions.join(", "));
                          break;
                      case "ident":
                          output1 = util.format("%s", this.primary_expression.identifier);
                          break;
                      case "float":
                          output1 = util.format("%s", this.primary_expression.float_constant);
                          break;
                      case "int":
                          output1 = util.format("%s", this.primary_expression.int_constant);
                          break;
                      case "bool":
                          output1 = util.format("%s", this.primary_expression.bool_constant ? "true" : "false");
                          break;
                  }
                  return this.grouped ? util.format("(%s)", output1) : output1;
              };
              /**
         * AST Fully Specified Type Class
         */ function AstFullySpecifiedType() {
                  AstNode.apply(this);
                  this.qualifier = [];
                  this.specifier = null;
              }
              util.inherits(AstFullySpecifiedType, AstNode);
              proto = AstFullySpecifiedType.prototype;
              /**
         * Return string representation of node
         *
         * @return  string
         */ proto.toString = function() {
                  var output1;
                  output1 = this.qualifier.slice(0);
                  output1.push(this.specifier);
                  return output1.join(" ");
              };
              /**
         * AST Declaration Class
         */ function AstDeclaration(identifier1, is_array1, array_size1, initializer1) {
                  AstNode.apply(this);
                  this.identifier = identifier1;
                  this.is_array = is_array1;
                  this.array_size = array_size1;
                  this.initializer = initializer1;
              }
              util.inherits(AstDeclaration, AstNode);
              proto = AstDeclaration.prototype;
              /**
         * Return string representation of node
         *
         * @return  string
         */ proto.toString = function() {
                  return this.identifier + (this.is_array ? util.format("[%s]", this.array_size === undefined ? "" : this.array_size) : "") + (this.initializer ? util.format(" = %s", this.initializer) : "");
              };
              /**
         * AST Declarator List Class
         */ function AstDeclaratorList(type1) {
                  AstNode.apply(this);
                  this.type = type1;
                  this.declarations = [];
                  this.invariant = 0;
              }
              util.inherits(AstDeclaratorList, AstNode);
              proto = AstDeclaratorList.prototype;
              /**
         * Return string representation of node
         *
         * @return  string
         */ proto.toString = function() {
                  return util.format("%s %s;\n", this.type || "invariant ", this.declarations.join(", "));
              };
              /**
         * AST Parameter Declarator Class
         */ function AstParameterDeclarator() {
                  AstNode.apply(this);
                  this.type = null;
                  this.identifier = null;
                  this.is_array = false;
                  this.array_size = 0;
                  this.formal_parameter = null;
                  this.is_void = null;
              }
              util.inherits(AstParameterDeclarator, AstNode);
              proto = AstParameterDeclarator.prototype;
              /**
         * Return string representation of node
         *
         * @return  string
         */ proto.toString = function() {
                  return this.type + (this.identifier ? " " + this.identifier : "") + (this.is_array ? util.format("[%s]", this.array_size) : "");
              };
              /**
         * AST Expression Statement Class
         */ function AstExpressionStatement(ex3) {
                  AstNode.apply(this);
                  this.expression = ex3;
              }
              util.inherits(AstExpressionStatement, AstNode);
              proto = AstExpressionStatement.prototype;
              /**
         * Return string representation of node
         *
         * @return  string
         */ proto.toString = function() {
                  return util.format("%s;\n", this.expression || "");
              };
              /**
         * AST Compound Statement Class
         */ function AstCompoundStatement(new_scope1, statements1) {
                  AstNode.apply(this);
                  this.new_scope = new_scope1;
                  if (statements1) this.statements = statements1;
                  else this.statements = [];
              }
              util.inherits(AstCompoundStatement, AstNode);
              proto = AstCompoundStatement.prototype;
              /**
         * Return string representation of node
         *
         * @return  string
         */ proto.toString = function() {
                  var str1, stmts1, indent1;
                  AstCompoundStatement._depth++;
                  indent1 = new Array(AstCompoundStatement._depth).join("  ");
                  stmts1 = indent1 + "  " + this.statements.join(indent1 + "  ");
                  str1 = "\n" + indent1 + "{\n" + stmts1 + indent1 + "}\n";
                  AstCompoundStatement._depth--;
                  return str1;
              }; //Used for toString indentation
              AstCompoundStatement._depth = 0;
              /**
         * AST Function Definition Class
         */ function AstFunctionDefinition() {
                  AstNode.apply(this);
                  this.proto_type = null;
                  this.body = null;
              }
              util.inherits(AstFunctionDefinition, AstNode);
              proto = AstFunctionDefinition.prototype;
              /**
         * Return string representation of node
         *
         * @return  string
         */ proto.toString = function() {
                  return util.format("%s %s", this.proto_type, this.body);
              };
              /**
         * AST Function Definition Class
         */ function AstExpressionBin(oper1, ex01, ex11) {
                  AstExpression.apply(this, [
                      oper1,
                      ex01,
                      ex11
                  ]);
              }
              util.inherits(AstExpressionBin, AstExpression);
              proto = AstExpressionBin.prototype;
              /**
         * AST Function Expression Class
         */ function AstFunctionExpression(arg1) {
                  AstExpression.apply(this);
                  this.cons = false;
                  if (arg1.constructor.name === "AstExpression") {
                      this.cons = false;
                      AstExpression.call(this, "()", arg1);
                  } else if (arg1.constructor.name === "AstTypeSpecifier") {
                      this.cons = true;
                      AstExpression.call(this, "()", arg1);
                  }
              }
              util.inherits(AstFunctionExpression, AstExpression);
              proto = AstFunctionExpression.prototype;
              proto.is_constructor = function() {
                  return this.cons;
              };
              proto.toString = function() {
                  return util.format("%s(%s)", this.subexpressions[0], this.expressions.join(", "));
              };
              /**
         * AST Selection Statement Class
         */ function AstSelectionStatement(condition1, then_statement1, else_statement1) {
                  AstNode.apply(this);
                  this.condition = condition1;
                  this.then_statement = then_statement1;
                  this.else_statement = else_statement1;
              }
              util.inherits(AstSelectionStatement, AstNode);
              proto = AstSelectionStatement.prototype;
              /**
         * Return string representation of node
         *
         * @return  string
         */ proto.toString = function() {
                  return util.format("if (%s) %s %s", this.condition, this.then_statement, this.else_statement ? util.format("else %s", this.else_statement) : "");
              };
              /**
         * AST Struct Specifier Class
         */ function AstStructSpecifier(identifier1, declarator_list1) {
                  AstNode.apply(this);
                  this.name = null;
                  this.declarations = [];
                  if (identifier1 === null) {
                      identifier1 = util.format("#anon_struct%d", AstStructSpecifier.anon_count);
                      AstStructSpecifier.anon_count++;
                  }
                  this.name = identifier1;
                  this.declarations = declarator_list1.declarations;
              }
              AstStructSpecifier.anon_count = 1;
              util.inherits(AstStructSpecifier, AstNode);
              proto = AstStructSpecifier.prototype;
              /**
         * AST Jump 
         */ function AstJumpStatement(mode1, return_value1) {
                  AstNode.apply(this);
                  this.opt_return_value = null;
                  this.mode = mode1;
                  if (mode1 === "return") this.opt_return_value = return_value1;
              }
              util.inherits(AstJumpStatement, AstNode);
              proto = AstJumpStatement.prototype;
              /**
         * Return string representation of node
         *
         * @return  string
         */ proto.toString = function() {
                  switch(this.mode){
                      case "continue":
                      case "break":
                      case "discard":
                      case "debugger":
                          return this.mode + ";\n";
                      case "return":
                          return util.format("return%s;\n", this.opt_return_value ? " " + this.opt_return_value : "");
                  }
              };
              glsl.ast = {
                  Node: AstNode,
                  TypeSpecifier: AstTypeSpecifier,
                  Function: AstFunction,
                  Expression: AstExpression,
                  FullySpecifiedType: AstFullySpecifiedType,
                  Declaration: AstDeclaration,
                  DeclaratorList: AstDeclaratorList,
                  ParameterDeclarator: AstParameterDeclarator,
                  ExpressionStatement: AstExpressionStatement,
                  CompoundStatement: AstCompoundStatement,
                  FunctionDefinition: AstFunctionDefinition,
                  ExpressionBin: AstExpressionBin,
                  FunctionExpression: AstFunctionExpression,
                  SelectionStatement: AstSelectionStatement,
                  StructSpecifier: AstStructSpecifier,
                  JumpStatement: AstJumpStatement
              };
              /*
        Copyright (c) 2011 Cimaron Shanahan
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of
        this software and associated documentation files (the "Software"), to deal in
        the Software without restriction, including without limitation the rights to
        use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
        the Software, and to permit persons to whom the Software is furnished to do so,
        subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
        FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
        COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
        IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
        CONNECTION WITH THE SOFTWARE OR THE USE		 OR OTHER DEALINGS IN THE SOFTWARE.
        */ var builtin = {
                  vars: {
                      vertex: [
                          {
                              position: 0,
                              type: "vec4",
                              name: "gl_Position",
                              out: "result@0"
                          },
                          {
                              position: 1,
                              type: "float",
                              name: "gl_PointSize",
                              out: "result@1"
                          }
                      ],
                      fragment: [
                          {
                              position: 0,
                              type: "vec4",
                              name: "gl_FragColor",
                              out: "result@0"
                          }
                      ]
                  },
                  /**
           * List of instructions for operators
           * 
           * Denoted by operator, then by definition of param types to output type
           */ oper: {
                      "!": {
                          "bool:bool": [
                              "SEQ %1.x %2.x 0.0"
                          ]
                      },
                      "+": {
                          "int,int:int": [
                              "ADD %1.x %2.x %3.x"
                          ],
                          "float,float:float": [
                              "ADD %1.x %2.x %3.x"
                          ],
                          "float,vec2:vec2": [
                              "ADD %1.xy %2.x %3.xy"
                          ],
                          "float,vec3:vec3": [
                              "ADD %1.xyz %2.x %3.xyz"
                          ],
                          "float,vec4:vec4": [
                              "ADD %1 %2.x %3"
                          ],
                          "vec2,float:vec2": [
                              "ADD %1.xy %2.xy %3.x"
                          ],
                          "vec3,float:vec3": [
                              "ADD %1.xyz %2.xyz %3.x"
                          ],
                          "vec4,float:vec4": [
                              "ADD %1 %2 %3.x"
                          ],
                          "vec2,vec2:vec2": [
                              "ADD %1.xy %2.xy %3.xy"
                          ],
                          "vec3,vec3:vec3": [
                              "ADD %1.xyz %2.xyz %3.xyz"
                          ],
                          "vec4,vec4:vec4": [
                              "ADD %1 %2 %3"
                          ]
                      },
                      "-": {
                          "int,int:int": [
                              "SUB %1.x %2.x %3.x"
                          ],
                          "float,float:float": [
                              "SUB %1.x %2.x %3.x"
                          ],
                          "float,vec2:vec2": [
                              "SUB %1.xy %2.x %3.xy"
                          ],
                          "float,vec3:vec3": [
                              "SUB %1.xyz %2.x %3.xyz"
                          ],
                          "float,vec4:vec4": [
                              "SUB %1 %2.x %3"
                          ],
                          "vec2,float:vec2": [
                              "SUB %1.xy %2.xy %3.x"
                          ],
                          "vec3,float:vec3": [
                              "SUB %1.xyz %2.xyz %3.x"
                          ],
                          "vec4,float:vec4": [
                              "SUB %1 %2 %3.x"
                          ],
                          "vec2,vec2:vec2": [
                              "SUB %1.xy %2.xy %3.xy"
                          ],
                          "vec3,vec3:vec3": [
                              "SUB %1.xyz %2.xyz %3.xyz"
                          ],
                          "vec4,vec4:vec4": [
                              "SUB %1 %2 %3"
                          ]
                      },
                      "*": {
                          "int,int:int": [
                              "MUL %1.x %2.x %3.x"
                          ],
                          "float,float:float": [
                              "MUL %1.x %2.x %3.x"
                          ],
                          "float,vec2:vec2": [
                              "MUL %1.xy %2.x %3.xy"
                          ],
                          "float,vec3:vec3": [
                              "MUL %1.xyz %2.x %3.xyz"
                          ],
                          "float,vec4:vec4": [
                              "MUL %1 %2.x %3"
                          ],
                          "vec2,float:vec2": [
                              "MUL %1.xy %2.xy %3.x"
                          ],
                          "vec3,float:vec3": [
                              "MUL %1.xyz %2.xyz %3.x"
                          ],
                          "vec4,float:vec4": [
                              "MUL %1 %2 %3.x"
                          ],
                          "vec2,vec2:vec2": [
                              "MUL %1.xy %2.xy %3.xy"
                          ],
                          "vec3,vec3:vec3": [
                              "MUL %1.xyz %2.xyz %3.xyz"
                          ],
                          "vec4,vec4:vec4": [
                              "MUL %1 %2 %3"
                          ],
                          "mat3,vec3:vec3": [
                              "MUL %1.xyz %2.xyz %3.x",
                              "MAD %1.xyz %2@1.xyz %3.y %1",
                              "MAD %1.xyz %2@2.xyz %3.z %1"
                          ],
                          "mat4,vec4:vec4": [
                              "MUL %1 %2 %3.x",
                              "MAD %1 %2@1 %3.y %1",
                              "MAD %1 %2@2 %3.z %1",
                              "MAD %1 %2@3 %3.w %1"
                          ],
                          "mat4,mat4:mat4": [
                              "MUL %1 %2 %3.x",
                              "MAD %1 %2@1 %3.y %1",
                              "MAD %1 %2@2 %3.z %1",
                              "MAD %1 %2@3 %3.w %1",
                              "MUL %1@1 %2 %3@1.x",
                              "MAD %1@1 %2@1 %3@1.y %1@1",
                              "MAD %1@1 %2@2 %3@1.z %1@1",
                              "MAD %1@1 %2@3 %3@1.w %1@1",
                              "MUL %1@2 %2 %3@2.x",
                              "MAD %1@2 %2@1 %3@2.y %1@2",
                              "MAD %1@2 %2@2 %3@2.z %1@2",
                              "MAD %1@2 %2@3 %3@2.w %1@2",
                              "MUL %1@3 %2 %3@3.x",
                              "MAD %1@3 %2@1 %3@3.y %1@3",
                              "MAD %1@3 %2@2 %3@3.z %1@3",
                              "MAD %1@3 %2@3 %3@3.w %1@3"
                          ]
                      },
                      "/": {
                          "int,int:int": [
                              "DIV %1.x %2.x %3.x"
                          ],
                          "float,float:float": [
                              "DIV %1.x %2.x %3.x"
                          ],
                          "float,vec2:vec2": [
                              "DIV %1.xy %2.x %3.xy"
                          ],
                          "float,vec3:vec3": [
                              "DIV %1.xyz %2.x %3.xyz"
                          ],
                          "float,vec4:vec4": [
                              "DIV %1 %2.x %3"
                          ],
                          "vec2,float:vec2": [
                              "DIV %1.xy %2.xy %3.x"
                          ],
                          "vec3,float:vec3": [
                              "DIV %1.xyz %2.xyz %3.x"
                          ],
                          "vec4,float:vec4": [
                              "DIV %1 %2 %3.x"
                          ],
                          "vec2,vec2:vec2": [
                              "DIV %1.xy %2.xy %3.xy"
                          ],
                          "vec3,vec3:vec3": [
                              "DIV %1.xyz %2.xyz %3.xyz"
                          ],
                          "vec4,vec4:vec4": [
                              "DIV %1 %2 %3"
                          ]
                      },
                      "<": {
                          "int,int:bool": [
                              "SLT %1.x %2.x %3.x"
                          ],
                          "float,float:bool": [
                              "SLT %1.x %2.x %3.x"
                          ]
                      },
                      ">": {
                          "int,int:bool": [
                              "SGT %1.x %2.x %3.x"
                          ],
                          "float,float:bool": [
                              "SGT %1.x %2.x %3.x"
                          ]
                      },
                      "<=": {
                          "int,int:bool": [
                              "SLE %1.x %2.x %3.x"
                          ],
                          "float,float:bool": [
                              "SLE %1.x %2.x %3.x"
                          ]
                      },
                      ">=": {
                          "int,int:bool": [
                              "SGE %1.x %2.x %3.x"
                          ],
                          "float,float:bool": [
                              "SGE %1.x %2.x %3.x"
                          ]
                      },
                      "==": {
                          "int,int:bool": [
                              "SEQ %1.x %2.x %3.x"
                          ],
                          "float,float:bool": [
                              "SEQ %1.x %2.x %3.x"
                          ]
                      },
                      "!=": {
                          "int,int:bool": [
                              "SNE %1.x %2.x %3.x"
                          ],
                          "float,float:bool": [
                              "SNE %1.x %2.x %3.x"
                          ]
                      },
                      "&&": {
                          "bool,bool:bool": [
                              "AND %1.x %2.x %3.x",
                              "AND %1.x %1.x 1"
                          ]
                      },
                      "^^": {
                          "bool,bool:bool": [
                              "XOR %1.x %2.x %3.x",
                              "AND %1.x %1.x 1"
                          ]
                      },
                      "||": {
                          "bool,bool:bool": [
                              "OR %1.x %2.x %3.x",
                              "AND %1.x %1.x 1"
                          ]
                      }
                  },
                  /**
           * List of instructions for built in functions
           * 
           * Denoted by function name, then by definition of param types to output type
           */ func: {
                      "abs": {
                          "float:float": [
                              "ABS %1.x %2.x"
                          ],
                          "vec2:vec2": [
                              "ABS %1.xy %2.xy"
                          ],
                          "vec3:vec3": [
                              "ABS %1.xyz %2.xyz"
                          ],
                          "vec4:vec4": [
                              "ABS %1 %2"
                          ]
                      },
                      "ceil": {
                          "float:float": [
                              "CEIL %1.x %2.x"
                          ],
                          "vec2:vec2": [
                              "CEIL %1.xy %2.xy"
                          ],
                          "vec3:vec3": [
                              "CEIL %1.xyz %2.xyz"
                          ],
                          "vec4:vec4": [
                              "CEIL %1 %2"
                          ]
                      },
                      "clamp": {
                          "float,float,float:float": [
                              "MAX %1.x %2.x %3.x",
                              "MIN %1.x %1.x %4.x"
                          ],
                          "vec2,float,float:vec2": [
                              "MAX %1.xy %2.xy %3.x",
                              "MIN %1.xy %1.xy %4.x"
                          ],
                          "vec3,float,float:vec3": [
                              "MAX %1.xyz %2.xyz %3.x",
                              "MIN %1.xyz %1.xyz %4.x"
                          ],
                          "vec4,float,float:vec4": [
                              "MAX %1 %2 %3.x",
                              "MIN %1 %1 %4.x"
                          ],
                          "vec2,vec2,vec2:vec2": [
                              "MAX %1.xy %2.xy %3.xy",
                              "MIN %1.xy %1.xy %4.xy"
                          ],
                          "vec3,vec3,vec3:vec3": [
                              "MAX %1.xyz %2.xyz %3.xyz",
                              "MIN %1.xyz %1.xyz %4.xyz"
                          ],
                          "vec4,vec4,vec4:vec4": [
                              "MAX %1 %2 %3",
                              "MIN %1 %1 %4"
                          ]
                      },
                      "cos": {
                          "float:float": [
                              "COS %1.x %2.x"
                          ],
                          "vec2:vec2": [
                              "COS %1.xy %2.xy"
                          ],
                          "vec3:vec3": [
                              "COS %1.xyz %2.xyz"
                          ],
                          "vec4:vec4": [
                              "COS %1 %2"
                          ]
                      },
                      "degrees": {
                          "float:float": [
                              "MUL %1.x %2.x " + 180 / Math.PI
                          ],
                          "vec2:vec2": [
                              "MUL %1.xy %2.xy " + 180 / Math.PI
                          ],
                          "vec3:vec3": [
                              "MUL %1.xyz %2.xyz " + 180 / Math.PI
                          ],
                          "vec4:vec4": [
                              "MUL %1 %2 " + 180 / Math.PI
                          ]
                      },
                      "dot": {
                          "vec2,vec2:float": [
                              "DP2 %1.x %2.xy %3.xy"
                          ],
                          "vec3,vec3:float": [
                              "DP3 %1.x %2.xyz %3.xyz"
                          ],
                          "vec4,vec4:float": [
                              "DP4 %1.x %2 %3"
                          ]
                      },
                      "floor": {
                          "float:float": [
                              "FLR %1.x %2.x"
                          ],
                          "vec2:vec2": [
                              "FLR %1.xy %2.xy"
                          ],
                          "vec3:vec3": [
                              "FLR %1.xyz %2.xyz"
                          ],
                          "vec4:vec4": [
                              "FLR %1 %2"
                          ]
                      },
                      "fract": {
                          "float:float": [
                              "FRC %1.x %2.x"
                          ],
                          "vec2:vec2": [
                              "FRC %1.xy %2.xy"
                          ],
                          "vec3:vec3": [
                              "FRC %1.xyz %2.xyz"
                          ],
                          "vec4:vec4": [
                              "FRC %1 %2"
                          ]
                      },
                      "max": {
                          "float,float:float": [
                              "MAX %1.x %2.x %3.x"
                          ],
                          "vec2,float:vec2": [
                              "MAX %1.xy %2.xy %3.x"
                          ],
                          "vec3,float:vec3": [
                              "MAX %1.xyz %2.xyz %3.x"
                          ],
                          "vec4,float:vec4": [
                              "MAX %1 %2 %3.x"
                          ],
                          "vec2,vec2:vec2": [
                              "MAX %1.xy %2.xy %3.xy"
                          ],
                          "vec3,vec3:vec3": [
                              "MAX %1.xyz %2.xyz %3.xyz"
                          ],
                          "vec4,vec4:vec4": [
                              "MAX %1 %2 %3"
                          ]
                      },
                      "min": {
                          "float,float:float": [
                              "MIN %1.x %2.x %3.x"
                          ],
                          "vec2,float:vec2": [
                              "MIN %1.xy %2.xy %3.x"
                          ],
                          "vec3,float:vec3": [
                              "MIN %1.xyz %2.xyz %3.x"
                          ],
                          "vec4,float:vec4": [
                              "MIN %1 %2 %3.x"
                          ],
                          "vec2,vec2:vec2": [
                              "MIN %1.xy %2.xy %3.xy"
                          ],
                          "vec3,vec3:vec3": [
                              "MIN %1.xyz %2.xyz %3.xyz"
                          ],
                          "vec4,vec4:vec4": [
                              "MIN %1 %2 %3"
                          ]
                      },
                      "mix": {
                          "float,float,float:float": [
                              "MAD %1.x -%2.x %4.x %2.x",
                              "MAD %1.x %3.x %4.x %1.x"
                          ],
                          "vec2,vec2,float:vec2": [
                              "MAD %1.xy -%2.xy %4.x %2.xy",
                              "MAD %1.xy %3.xy %4.x %1.xy"
                          ],
                          "vec3,vec3,float:vec3": [
                              "MAD %1.xyz -%2.xyz %4.x %2.xyz",
                              "MAD %1.xyz %3.xyz %4.x %1.xyz"
                          ],
                          "vec4,vec4,float:vec4": [
                              "MAD %1 -%2 %4.x %2",
                              "MAD %1 %3 %4.x %1"
                          ],
                          "vec2,vec2,vec2:vec2": [
                              "MAD %1.xy -%2.xy %4.xy %2.xy",
                              "MAD %1.xy %3.xy %4.xy %1.xy"
                          ],
                          "vec3,vec3,vec3:vec3": [
                              "MAD %1.xyz -%2.xyz %4.xyz %2.xyz",
                              "MAD %1.xyz %3.xyz %4.xyz %1.xyz"
                          ],
                          "vec4,vec4,vec4:vec4": [
                              "MAD %1 -%2 %4 %2",
                              "MAD %1 %3 %4 %1"
                          ]
                      },
                      "mod": {
                          "float,float:float": [
                              "MOD %1.x %2.x %3.x"
                          ],
                          "vec2,float:vec2": [
                              "MOD %1.xy %2.xy %3.x"
                          ],
                          "vec3,float:vec3": [
                              "MOD %1.xyz %2.xyz %3.x"
                          ],
                          "vec4,float:vec4": [
                              "MOD %1 %2 %3.x"
                          ],
                          "vec2,vec2:vec2": [
                              "MOD %1.xy %2.xy %3.xy"
                          ],
                          "vec3,vec3:vec3": [
                              "MOD %1.xyz %2.xyz %3.xyz"
                          ],
                          "vec4,vec4:vec4": [
                              "MOD %1 %2 %3"
                          ]
                      },
                      "normalize": {
                          "vec3:vec3": [
                              "DP3 %1.x %2 %2",
                              "RSQ %1.x %1.x",
                              "MUL %1.xyz %2.xyz %1.x"
                          ],
                          "vec4:vec4": [
                              "DP4 %1.x %2 %2",
                              "RSQ %1.x %1.x",
                              "MUL %1 %2 %1.x"
                          ]
                      },
                      "pow": {
                          "float,float:float": [
                              "POW %1.x %2.x %3.x"
                          ]
                      },
                      "reflect": {
                          "vec3,vec3:vec3": [
                              "DP3 %1.x %3 %2",
                              "MUL %1.xyz %3 %1.x",
                              "MAD %1.xyz -%1 2.0 %2"
                          ]
                      },
                      "radians": {
                          "float:float": [
                              "MUL %1.x %2.x " + Math.PI / 180
                          ],
                          "vec2:vec2": [
                              "MUL %1.xy %2.xy " + Math.PI / 180
                          ],
                          "vec3:vec3": [
                              "MUL %1.xyz %2.xyz " + Math.PI / 180
                          ],
                          "vec4:vec4": [
                              "MUL %1 %2 " + Math.PI / 180
                          ]
                      },
                      "sign": {
                          "float:float": [
                              "SGT %t1.x %2.x 0",
                              "SLT %t1.y %2.x 0",
                              "ADD %1.x %t1.x -%t1.y"
                          ],
                          "vec2:vec2": [
                              "SGT %t1.xy %2.xy 0",
                              "SLT %t1.zw %2.zw 0",
                              "ADD %1.xy %t1.xy -%t1.zw"
                          ],
                          "vec3:vec3": [
                              "SGT %t1.xyz %2.xyz 0",
                              "SLT %t2.xyz %2.xyz 0",
                              "ADD %1.xyz %t1.xyz -%t2.xyz"
                          ],
                          "vec4:vec4": [
                              "SGT %t1 %2 0",
                              "SLT %t2 %2 0",
                              "ADD %1 %t1 -%t2"
                          ]
                      },
                      "sin": {
                          "float:float": [
                              "SIN %1.x %2.x"
                          ],
                          "vec2:vec2": [
                              "SIN %1.xy %2.xy"
                          ],
                          "vec3:vec3": [
                              "SIN %1.xyz %2.xyz"
                          ],
                          "vec4:vec4": [
                              "SIN %1 %2"
                          ]
                      },
                      "step": {
                          "float,float:float": [
                              "SGE %1.x %3.x %2.x"
                          ],
                          "float,vec2:vec2": [
                              "SGE %1.xy %3.x %2.xy"
                          ],
                          "float,vec3:vec3": [
                              "SGE %1.xyz %3.x %2.xyz"
                          ],
                          "float,vec4:vec4": [
                              "SGE %1 %3.x %2"
                          ],
                          "vec2,vec2:vec2": [
                              "SGE %1.xy %3.xy %2.xy"
                          ],
                          "vec3,vec3:vec3": [
                              "SGE %1.xyz %3.xyz %2.xyz"
                          ],
                          "vec4,vec4:vec4": [
                              "SGE %1 %3 %3"
                          ]
                      },
                      "tan": {
                          "float:float": [
                              "TAN %1.x %2.x"
                          ],
                          "vec2:vec2": [
                              "TAN %1.xy %2.xy"
                          ],
                          "vec3:vec3": [
                              "TAN %1.xyz %2.xyz"
                          ],
                          "vec4:vec4": [
                              "TAN %1 %2"
                          ]
                      },
                      "texture2D": {
                          "sampler2D,vec2:vec4": [
                              'TEX %1 %3 %2 "2D"'
                          ]
                      }
                  }
              };
              function _builtinParseType(str1) {
                  var parts1, ret1;
                  parts1 = str1.split(":");
                  parts1[0] = parts1[0].split(",");
                  ret1 = {
                      src: parts1[0],
                      dest: parts1[1]
                  };
                  return ret1;
              }
              function symbol_table_init(table1, target1) {
                  var i3, j1, vars1, v4, entry1, types1, name1;
                  vars1 = target1 === glsl.target.vertex ? builtin.vars.vertex : builtin.vars.fragment;
                  for(i3 = 0; i3 < vars1.length; i3++){
                      v4 = vars1[i3];
                      entry1 = table1.add_variable(v4.name, v4.type);
                      entry1.position = v4.position;
                      entry1.out = v4.out;
                  }
                  vars1 = builtin.func;
                  for(name1 in vars1){
                      v4 = vars1[name1];
                      for(j1 in v4){
                          types1 = _builtinParseType(j1);
                          entry1 = table1.add_function(name1, types1.dest, types1.src);
                          entry1.code = v4[j1];
                      }
                  }
              }
              /* parser generated by jison 0.4.15 */ /*
          Returns a Parser object of the following structure:
        
          Parser: {
            yy: {}
          }
        
          Parser.prototype: {
            yy: {},
            trace: function(),
            symbols_: {associative list: name ==> number},
            terminals_: {associative list: number ==> name},
            productions_: [...],
            performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
            table: [...],
            defaultActions: {...},
            parseError: function(str, hash),
            parse: function(input),
        
            lexer: {
                EOF: 1,
                parseError: function(str, hash),
                setInput: function(input),
                input: function(),
                unput: function(str),
                more: function(),
                less: function(n),
                pastInput: function(),
                upcomingInput: function(),
                showPosition: function(),
                test_match: function(regex_match_array, rule_index),
                next: function(),
                lex: function(),
                begin: function(condition),
                popState: function(),
                _currentRules: function(),
                topState: function(),
                pushState: function(condition),
        
                options: {
                    ranges: boolean           (optional: true ==> token location info will include a .range[] member)
                    flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
                    backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
                },
        
                performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
                rules: [...],
                conditions: {associative list: name ==> set},
            }
          }
        
        
          token location info (@$, _$, etc.): {
            first_line: n,
            last_line: n,
            first_column: n,
            last_column: n,
            range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
          }
        
        
          the parseError function receives a 'hash' object with these members for lexer and parser errors: {
            text:        (matched text)
            token:       (the produced terminal token, if any)
            line:        (yylineno)
          }
          while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
            loc:         (yylloc)
            expected:    (string describing the set of expected tokens)
            recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
          }
        */ var parser = function() {
                  var o5 = function o5(k1, v4, _o1, l1) {
                      for(_o1 = _o1 || {}, l1 = k1.length; l1--; _o1[k1[l1]] = v4);
                      return _o1;
                  }, $V03 = [
                      13,
                      14,
                      15,
                      16,
                      17,
                      21,
                      22,
                      47,
                      108,
                      120,
                      121,
                      125,
                      128,
                      132,
                      133,
                      134,
                      135,
                      137,
                      138,
                      139,
                      140,
                      144,
                      145,
                      146,
                      147,
                      148,
                      149,
                      150,
                      151,
                      152,
                      153,
                      154,
                      155,
                      156,
                      157,
                      158,
                      159,
                      160,
                      161,
                      162,
                      163,
                      164,
                      165,
                      166,
                      167,
                      168,
                      169
                  ], $V13 = [
                      1,
                      18
                  ], $V23 = [
                      1,
                      19
                  ], $V33 = [
                      1,
                      20
                  ], $V43 = [
                      1,
                      21
                  ], $V53 = [
                      1,
                      22
                  ], $V63 = [
                      1,
                      53
                  ], $V73 = [
                      1,
                      54
                  ], $V83 = [
                      1,
                      17
                  ], $V93 = [
                      1,
                      44
                  ], $Va3 = [
                      1,
                      45
                  ], $Vb3 = [
                      1,
                      28
                  ], $Vc3 = [
                      1,
                      47
                  ], $Vd2 = [
                      1,
                      48
                  ], $Ve2 = [
                      1,
                      49
                  ], $Vf2 = [
                      1,
                      50
                  ], $Vg2 = [
                      1,
                      40
                  ], $Vh2 = [
                      1,
                      41
                  ], $Vi2 = [
                      1,
                      42
                  ], $Vj2 = [
                      1,
                      43
                  ], $Vk2 = [
                      1,
                      46
                  ], $Vl2 = [
                      1,
                      55
                  ], $Vm2 = [
                      1,
                      56
                  ], $Vn2 = [
                      1,
                      57
                  ], $Vo2 = [
                      1,
                      58
                  ], $Vp2 = [
                      1,
                      59
                  ], $Vq2 = [
                      1,
                      60
                  ], $Vr2 = [
                      1,
                      61
                  ], $Vs2 = [
                      1,
                      62
                  ], $Vt2 = [
                      1,
                      63
                  ], $Vu2 = [
                      1,
                      64
                  ], $Vv2 = [
                      1,
                      65
                  ], $Vw2 = [
                      1,
                      66
                  ], $Vx2 = [
                      1,
                      67
                  ], $Vy2 = [
                      1,
                      68
                  ], $Vz2 = [
                      1,
                      69
                  ], $VA2 = [
                      1,
                      70
                  ], $VB2 = [
                      1,
                      71
                  ], $VC2 = [
                      1,
                      72
                  ], $VD2 = [
                      1,
                      73
                  ], $VE2 = [
                      1,
                      74
                  ], $VF2 = [
                      1,
                      75
                  ], $VG2 = [
                      1,
                      76
                  ], $VH2 = [
                      1,
                      37
                  ], $VI2 = [
                      1,
                      38
                  ], $VJ2 = [
                      1,
                      39
                  ], $VK2 = [
                      1,
                      77
                  ], $VL2 = [
                      5,
                      13,
                      14,
                      15,
                      16,
                      17,
                      21,
                      47,
                      108,
                      120,
                      121,
                      125,
                      128,
                      132,
                      133,
                      134,
                      135,
                      137,
                      138,
                      139,
                      140,
                      144,
                      145,
                      146,
                      147,
                      148,
                      149,
                      150,
                      151,
                      152,
                      153,
                      154,
                      155,
                      156,
                      157,
                      158,
                      159,
                      160,
                      161,
                      162,
                      163,
                      164,
                      165,
                      166,
                      167,
                      168,
                      169
                  ], $VM2 = [
                      1,
                      82
                  ], $VN2 = [
                      1,
                      83
                  ], $VO2 = [
                      1,
                      84
                  ], $VP2 = [
                      1,
                      86
                  ], $VQ2 = [
                      1,
                      87
                  ], $VR2 = [
                      49,
                      106
                  ], $VS2 = [
                      21,
                      47,
                      144,
                      145,
                      146,
                      147,
                      148,
                      149,
                      150,
                      151,
                      152,
                      153,
                      154,
                      155,
                      156,
                      157,
                      158,
                      159,
                      160,
                      161,
                      162,
                      163,
                      164,
                      165,
                      166,
                      167,
                      168,
                      169
                  ], $VT2 = [
                      2,
                      121
                  ], $VU2 = [
                      1,
                      101
                  ], $VV2 = [
                      1,
                      102
                  ], $VW2 = [
                      1,
                      103
                  ], $VX2 = [
                      1,
                      100
                  ], $VY2 = [
                      2,
                      159
                  ], $VZ2 = [
                      21,
                      25,
                      26,
                      49,
                      106
                  ], $V_2 = [
                      2,
                      141
                  ], $V$2 = [
                      21,
                      25,
                      26,
                      30,
                      32,
                      49,
                      106
                  ], $V011 = [
                      21,
                      47,
                      144,
                      145,
                      146,
                      147,
                      148,
                      149,
                      150,
                      151,
                      152,
                      153,
                      154,
                      155,
                      156,
                      157,
                      158,
                      159,
                      160,
                      161,
                      162,
                      163,
                      164,
                      165,
                      169
                  ], $V111 = [
                      21,
                      47,
                      120,
                      121,
                      135,
                      137,
                      138,
                      139,
                      140,
                      144,
                      145,
                      146,
                      147,
                      148,
                      149,
                      150,
                      151,
                      152,
                      153,
                      154,
                      155,
                      156,
                      157,
                      158,
                      159,
                      160,
                      161,
                      162,
                      163,
                      164,
                      165,
                      166,
                      167,
                      168,
                      169
                  ], $V211 = [
                      21,
                      25,
                      26,
                      30,
                      32,
                      34,
                      49,
                      106
                  ], $V311 = [
                      2,
                      177
                  ], $V411 = [
                      2,
                      12
                  ], $V511 = [
                      11,
                      23,
                      30,
                      32,
                      34,
                      36,
                      38,
                      39,
                      40,
                      49,
                      57,
                      58,
                      62,
                      63,
                      64,
                      67,
                      68,
                      70,
                      71,
                      72,
                      73,
                      75,
                      76,
                      78,
                      80,
                      82,
                      84,
                      86,
                      88,
                      90,
                      92,
                      93,
                      94,
                      95,
                      96,
                      97,
                      98,
                      99,
                      100,
                      101,
                      102,
                      106,
                      170
                  ], $V611 = [
                      5,
                      10,
                      13,
                      14,
                      15,
                      16,
                      17,
                      21,
                      25,
                      26,
                      28,
                      29,
                      30,
                      39,
                      40,
                      47,
                      51,
                      57,
                      58,
                      59,
                      60,
                      106,
                      108,
                      120,
                      121,
                      125,
                      128,
                      132,
                      133,
                      134,
                      135,
                      137,
                      138,
                      139,
                      140,
                      144,
                      145,
                      146,
                      147,
                      148,
                      149,
                      150,
                      151,
                      152,
                      153,
                      154,
                      155,
                      156,
                      157,
                      158,
                      159,
                      160,
                      161,
                      162,
                      163,
                      164,
                      165,
                      166,
                      167,
                      168,
                      169,
                      170,
                      172,
                      189,
                      191,
                      193,
                      194,
                      195,
                      196,
                      197,
                      198,
                      202,
                      203,
                      204,
                      205,
                      206
                  ], $V711 = [
                      1,
                      169
                  ], $V811 = [
                      1,
                      170
                  ], $V911 = [
                      1,
                      171
                  ], $Va11 = [
                      1,
                      172
                  ], $Vb11 = [
                      1,
                      156
                  ], $Vc11 = [
                      1,
                      157
                  ], $Vd11 = [
                      1,
                      182
                  ], $Ve11 = [
                      1,
                      163
                  ], $Vf11 = [
                      1,
                      164
                  ], $Vg11 = [
                      1,
                      165
                  ], $Vh11 = [
                      1,
                      166
                  ], $Vi11 = [
                      1,
                      136
                  ], $Vj11 = [
                      1,
                      127
                  ], $Vk11 = [
                      1,
                      138
                  ], $Vl11 = [
                      1,
                      139
                  ], $Vm11 = [
                      1,
                      140
                  ], $Vn11 = [
                      1,
                      141
                  ], $Vo11 = [
                      1,
                      142
                  ], $Vp11 = [
                      1,
                      143
                  ], $Vq11 = [
                      1,
                      144
                  ], $Vr11 = [
                      1,
                      145
                  ], $Vs11 = [
                      1,
                      146
                  ], $Vt11 = [
                      1,
                      147
                  ], $Vu11 = [
                      1,
                      148
                  ], $Vv11 = [
                      1,
                      149
                  ], $Vw11 = [
                      32,
                      49
                  ], $Vx11 = [
                      10,
                      21,
                      25,
                      26,
                      28,
                      29,
                      30,
                      39,
                      40,
                      47,
                      51,
                      57,
                      58,
                      59,
                      60,
                      106,
                      108,
                      120,
                      121,
                      125,
                      128,
                      132,
                      133,
                      134,
                      135,
                      137,
                      138,
                      139,
                      140,
                      144,
                      145,
                      146,
                      147,
                      148,
                      149,
                      150,
                      151,
                      152,
                      153,
                      154,
                      155,
                      156,
                      157,
                      158,
                      159,
                      160,
                      161,
                      162,
                      163,
                      164,
                      165,
                      166,
                      167,
                      168,
                      169,
                      170,
                      172,
                      189,
                      193,
                      194,
                      195,
                      196,
                      197,
                      198,
                      202,
                      203,
                      204,
                      205,
                      206
                  ], $Vy11 = [
                      10,
                      21,
                      25,
                      26,
                      28,
                      29,
                      30,
                      39,
                      40,
                      47,
                      51,
                      57,
                      58,
                      59,
                      60,
                      106,
                      108,
                      120,
                      121,
                      125,
                      128,
                      132,
                      133,
                      134,
                      135,
                      137,
                      138,
                      139,
                      140,
                      144,
                      145,
                      146,
                      147,
                      148,
                      149,
                      150,
                      151,
                      152,
                      153,
                      154,
                      155,
                      156,
                      157,
                      158,
                      159,
                      160,
                      161,
                      162,
                      163,
                      164,
                      165,
                      166,
                      167,
                      168,
                      169,
                      170,
                      172,
                      189,
                      191,
                      193,
                      194,
                      195,
                      196,
                      197,
                      198,
                      202,
                      203,
                      204,
                      205,
                      206
                  ], $Vz11 = [
                      1,
                      216
                  ], $VA11 = [
                      23,
                      32,
                      36,
                      49,
                      106
                  ], $VB11 = [
                      23,
                      32,
                      36,
                      49,
                      57,
                      58,
                      62,
                      63,
                      64,
                      67,
                      68,
                      70,
                      71,
                      72,
                      73,
                      75,
                      76,
                      78,
                      80,
                      82,
                      84,
                      86,
                      88,
                      90,
                      106
                  ], $VC11 = [
                      2,
                      58
                  ], $VD11 = [
                      23,
                      32,
                      36,
                      49,
                      57,
                      58,
                      62,
                      63,
                      64,
                      67,
                      68,
                      70,
                      71,
                      72,
                      73,
                      75,
                      76,
                      78,
                      80,
                      82,
                      84,
                      86,
                      88,
                      90,
                      92,
                      93,
                      94,
                      95,
                      96,
                      97,
                      98,
                      99,
                      100,
                      101,
                      102,
                      106
                  ], $VE11 = [
                      1,
                      251
                  ], $VF11 = [
                      23,
                      32,
                      36,
                      49,
                      88,
                      90,
                      106
                  ], $VG11 = [
                      1,
                      252
                  ], $VH11 = [
                      23,
                      32,
                      34,
                      36,
                      38,
                      39,
                      40,
                      49,
                      57,
                      58,
                      62,
                      63,
                      64,
                      67,
                      68,
                      70,
                      71,
                      72,
                      73,
                      75,
                      76,
                      78,
                      80,
                      82,
                      84,
                      86,
                      88,
                      90,
                      92,
                      93,
                      94,
                      95,
                      96,
                      97,
                      98,
                      99,
                      100,
                      101,
                      102,
                      106
                  ], $VI11 = [
                      10,
                      21,
                      25,
                      26,
                      28,
                      29,
                      30,
                      39,
                      40,
                      47,
                      51,
                      57,
                      58,
                      59,
                      60,
                      144,
                      145,
                      146,
                      147,
                      148,
                      149,
                      150,
                      151,
                      152,
                      153,
                      154,
                      155,
                      156,
                      157,
                      158,
                      159,
                      160,
                      161,
                      162,
                      163,
                      164,
                      165,
                      166,
                      167,
                      168,
                      169
                  ], $VJ11 = [
                      23,
                      32,
                      36,
                      49,
                      86,
                      88,
                      90,
                      106
                  ], $VK11 = [
                      1,
                      253
                  ], $VL11 = [
                      23,
                      32,
                      36,
                      49,
                      84,
                      86,
                      88,
                      90,
                      106
                  ], $VM11 = [
                      1,
                      256
                  ], $VN11 = [
                      23,
                      32,
                      36,
                      49,
                      82,
                      84,
                      86,
                      88,
                      90,
                      106
                  ], $VO11 = [
                      1,
                      257
                  ], $VP11 = [
                      23,
                      32,
                      36,
                      49,
                      80,
                      82,
                      84,
                      86,
                      88,
                      90,
                      106
                  ], $VQ11 = [
                      1,
                      261
                  ], $VR11 = [
                      23,
                      32,
                      36,
                      49,
                      78,
                      80,
                      82,
                      84,
                      86,
                      88,
                      90,
                      106
                  ], $VS11 = [
                      1,
                      264
                  ], $VT11 = [
                      1,
                      265
                  ], $VU11 = [
                      10,
                      21,
                      25,
                      26,
                      28,
                      29,
                      30,
                      32,
                      39,
                      40,
                      47,
                      51,
                      57,
                      58,
                      59,
                      60,
                      144,
                      145,
                      146,
                      147,
                      148,
                      149,
                      150,
                      151,
                      152,
                      153,
                      154,
                      155,
                      156,
                      157,
                      158,
                      159,
                      160,
                      161,
                      162,
                      163,
                      164,
                      165,
                      166,
                      167,
                      168,
                      169
                  ], $VV11 = [
                      23,
                      32,
                      36,
                      49,
                      75,
                      76,
                      78,
                      80,
                      82,
                      84,
                      86,
                      88,
                      90,
                      106
                  ], $VW11 = [
                      1,
                      266
                  ], $VX11 = [
                      1,
                      267
                  ], $VY11 = [
                      1,
                      268
                  ], $VZ11 = [
                      1,
                      269
                  ], $V_11 = [
                      23,
                      32,
                      36,
                      49,
                      70,
                      71,
                      72,
                      73,
                      75,
                      76,
                      78,
                      80,
                      82,
                      84,
                      86,
                      88,
                      90,
                      106
                  ], $V$11 = [
                      1,
                      270
                  ], $V021 = [
                      1,
                      271
                  ], $V121 = [
                      23,
                      32,
                      36,
                      49,
                      67,
                      68,
                      70,
                      71,
                      72,
                      73,
                      75,
                      76,
                      78,
                      80,
                      82,
                      84,
                      86,
                      88,
                      90,
                      106
                  ], $V221 = [
                      1,
                      272
                  ], $V321 = [
                      1,
                      273
                  ], $V421 = [
                      23,
                      32,
                      36,
                      49,
                      57,
                      58,
                      67,
                      68,
                      70,
                      71,
                      72,
                      73,
                      75,
                      76,
                      78,
                      80,
                      82,
                      84,
                      86,
                      88,
                      90,
                      106
                  ], $V521 = [
                      1,
                      274
                  ], $V621 = [
                      1,
                      275
                  ], $V721 = [
                      1,
                      276
                  ], $V821 = [
                      21,
                      47,
                      144,
                      145,
                      146,
                      147,
                      148,
                      149,
                      150,
                      151,
                      152,
                      153,
                      154,
                      155,
                      156,
                      157,
                      158,
                      159,
                      160,
                      161,
                      162,
                      163,
                      164,
                      165,
                      166,
                      167,
                      168,
                      169,
                      172
                  ], $V921 = [
                      1,
                      306
                  ], $Va21 = [
                      30,
                      34
                  ], $Vb21 = [
                      32,
                      106
                  ], $Vc21 = [
                      10,
                      21,
                      25,
                      26,
                      28,
                      29,
                      30,
                      39,
                      40,
                      47,
                      51,
                      57,
                      58,
                      59,
                      60,
                      106,
                      120,
                      121,
                      125,
                      128,
                      132,
                      133,
                      134,
                      135,
                      137,
                      138,
                      139,
                      140,
                      144,
                      145,
                      146,
                      147,
                      148,
                      149,
                      150,
                      151,
                      152,
                      153,
                      154,
                      155,
                      156,
                      157,
                      158,
                      159,
                      160,
                      161,
                      162,
                      163,
                      164,
                      165,
                      166,
                      167,
                      168,
                      169
                  ];
                  var parser1 = {
                      trace: function trace1() {},
                      yy: {},
                      symbols_: {
                          "error": 2,
                          "glsl-start": 3,
                          "translation_unit": 4,
                          "EOF": 5,
                          "version_statement": 6,
                          "extension_statement_list": 7,
                          "external_declaration_list": 8,
                          "VERSION": 9,
                          "INTCONSTANT": 10,
                          "EOL": 11,
                          "pragma_statement": 12,
                          "PRAGMA_DEBUG_ON": 13,
                          "PRAGMA_DEBUG_OFF": 14,
                          "PRAGMA_OPTIMIZE_ON": 15,
                          "PRAGMA_OPTIMIZE_OFF": 16,
                          "PRAGMA_INVARIANT_ALL": 17,
                          "extension_statement": 18,
                          "any_identifier": 19,
                          "variable_identifier": 20,
                          "TYPE_IDENTIFIER": 21,
                          "EXTENSION": 22,
                          ":": 23,
                          "external_declaration": 24,
                          "IDENTIFIER": 25,
                          "NEW_IDENTIFIER": 26,
                          "primary_expression": 27,
                          "FLOATCONSTANT": 28,
                          "BOOLCONSTANT": 29,
                          "(": 30,
                          "expression": 31,
                          ")": 32,
                          "postfix_expression": 33,
                          "[": 34,
                          "integer_expression": 35,
                          "]": 36,
                          "function_call": 37,
                          ".": 38,
                          "++": 39,
                          "--": 40,
                          "function_call_or_method": 41,
                          "function_call_generic": 42,
                          "method_call_generic": 43,
                          "function_call_header_with_parameters": 44,
                          "function_call_header_no_parameters": 45,
                          "function_call_header": 46,
                          "VOID": 47,
                          "assignment_expression": 48,
                          ",": 49,
                          "type_specifier": 50,
                          "FIELD_SELECTION": 51,
                          "method_call_header_with_parameters": 52,
                          "method_call_header_no_parameters": 53,
                          "method_call_header": 54,
                          "unary_expression": 55,
                          "unary_operator": 56,
                          "+": 57,
                          "-": 58,
                          "!": 59,
                          "~": 60,
                          "multiplicative_expression": 61,
                          "*": 62,
                          "/": 63,
                          "%": 64,
                          "additive_expression": 65,
                          "shift_expression": 66,
                          "<<": 67,
                          ">>": 68,
                          "relational_expression": 69,
                          "<": 70,
                          ">": 71,
                          "<=": 72,
                          ">=": 73,
                          "equality_expression": 74,
                          "==": 75,
                          "!=": 76,
                          "and_expression": 77,
                          "&": 78,
                          "exclusive_or_expression": 79,
                          "^": 80,
                          "inclusive_or_expression": 81,
                          "|": 82,
                          "logical_and_expression": 83,
                          "&&": 84,
                          "logical_xor_expression": 85,
                          "^^": 86,
                          "logical_or_expression": 87,
                          "||": 88,
                          "conditional_expression": 89,
                          "?": 90,
                          "assignment_operator": 91,
                          "=": 92,
                          "*=": 93,
                          "/=": 94,
                          "%=": 95,
                          "+=": 96,
                          "-=": 97,
                          "<<=": 98,
                          ">>=": 99,
                          "&=": 100,
                          "^=": 101,
                          "|=": 102,
                          "constant_expression": 103,
                          "declaration": 104,
                          "function_prototype": 105,
                          ";": 106,
                          "init_declarator_list": 107,
                          "PRECISION": 108,
                          "precision_qualifier": 109,
                          "type_specifier_no_prec": 110,
                          "function_declarator": 111,
                          "function_header": 112,
                          "function_header_with_parameters": 113,
                          "parameter_declaration": 114,
                          "fully_specified_type": 115,
                          "parameter_declarator": 116,
                          "parameter_type_qualifier": 117,
                          "parameter_qualifier": 118,
                          "parameter_type_specifier": 119,
                          "IN": 120,
                          "OUT": 121,
                          "INOUT": 122,
                          "single_declaration": 123,
                          "initializer": 124,
                          "INVARIANT": 125,
                          "type_qualifier": 126,
                          "layout_qualifier": 127,
                          "LAYOUT": 128,
                          "layout_qualifier_id_list": 129,
                          "layout_qualifier_id": 130,
                          "interpolation_qualifier": 131,
                          "SMOOTH": 132,
                          "FLAT": 133,
                          "NOPERSPECTIVE": 134,
                          "CONST": 135,
                          "storage_qualifier": 136,
                          "ATTRIBUTE": 137,
                          "VARYING": 138,
                          "CENTROID": 139,
                          "UNIFORM": 140,
                          "type_specifier_nonarray": 141,
                          "basic_type_specifier_nonarray": 142,
                          "struct_specifier": 143,
                          "FLOAT": 144,
                          "DOUBLE": 145,
                          "INT": 146,
                          "BOOL": 147,
                          "VEC2": 148,
                          "VEC3": 149,
                          "VEC4": 150,
                          "BVEC2": 151,
                          "BVEC3": 152,
                          "BVEC4": 153,
                          "IVEC2": 154,
                          "IVEC3": 155,
                          "IVEC4": 156,
                          "MAT2X2": 157,
                          "MAT3X3": 158,
                          "MAT4X4": 159,
                          "SAMPLER1D": 160,
                          "SAMPLER2D": 161,
                          "SAMPLER3D": 162,
                          "SAMPLERCUBE": 163,
                          "SAMPLER1DSHADOW": 164,
                          "SAMPLER2DSHADOW": 165,
                          "HIGHP": 166,
                          "MEDIUMP": 167,
                          "LOWP": 168,
                          "STRUCT": 169,
                          "{": 170,
                          "struct_declaration_list": 171,
                          "}": 172,
                          "struct_declaration": 173,
                          "struct_declarator_list": 174,
                          "struct_declarator": 175,
                          "declaration_statement": 176,
                          "statement": 177,
                          "compound_statement": 178,
                          "simple_statement": 179,
                          "expression_statement": 180,
                          "selection_statement": 181,
                          "switch_statement": 182,
                          "case_label": 183,
                          "iteration_statement": 184,
                          "jump_statement": 185,
                          "statement_list": 186,
                          "statement_no_new_scope": 187,
                          "compound_statement_no_new_scope": 188,
                          "IF": 189,
                          "selection_rest_statement": 190,
                          "ELSE": 191,
                          "condition": 192,
                          "SWITCH": 193,
                          "CASE": 194,
                          "DEFAULT": 195,
                          "WHILE": 196,
                          "DO": 197,
                          "FOR": 198,
                          "for_init_statement": 199,
                          "for_rest_statement": 200,
                          "conditionopt": 201,
                          "CONTINUE": 202,
                          "BREAK": 203,
                          "RETURN": 204,
                          "DISCARD": 205,
                          "DEBUGGER": 206,
                          "function_definition": 207,
                          "$accept": 0,
                          "$end": 1
                      },
                      terminals_: {
                          2: "error",
                          5: "EOF",
                          9: "VERSION",
                          10: "INTCONSTANT",
                          11: "EOL",
                          13: "PRAGMA_DEBUG_ON",
                          14: "PRAGMA_DEBUG_OFF",
                          15: "PRAGMA_OPTIMIZE_ON",
                          16: "PRAGMA_OPTIMIZE_OFF",
                          17: "PRAGMA_INVARIANT_ALL",
                          21: "TYPE_IDENTIFIER",
                          22: "EXTENSION",
                          23: ":",
                          25: "IDENTIFIER",
                          26: "NEW_IDENTIFIER",
                          28: "FLOATCONSTANT",
                          29: "BOOLCONSTANT",
                          30: "(",
                          32: ")",
                          34: "[",
                          36: "]",
                          38: ".",
                          39: "++",
                          40: "--",
                          47: "VOID",
                          49: ",",
                          51: "FIELD_SELECTION",
                          57: "+",
                          58: "-",
                          59: "!",
                          60: "~",
                          62: "*",
                          63: "/",
                          64: "%",
                          67: "<<",
                          68: ">>",
                          70: "<",
                          71: ">",
                          72: "<=",
                          73: ">=",
                          75: "==",
                          76: "!=",
                          78: "&",
                          80: "^",
                          82: "|",
                          84: "&&",
                          86: "^^",
                          88: "||",
                          90: "?",
                          92: "=",
                          93: "*=",
                          94: "/=",
                          95: "%=",
                          96: "+=",
                          97: "-=",
                          98: "<<=",
                          99: ">>=",
                          100: "&=",
                          101: "^=",
                          102: "|=",
                          106: ";",
                          108: "PRECISION",
                          120: "IN",
                          121: "OUT",
                          122: "INOUT",
                          125: "INVARIANT",
                          128: "LAYOUT",
                          132: "SMOOTH",
                          133: "FLAT",
                          134: "NOPERSPECTIVE",
                          135: "CONST",
                          137: "ATTRIBUTE",
                          138: "VARYING",
                          139: "CENTROID",
                          140: "UNIFORM",
                          144: "FLOAT",
                          145: "DOUBLE",
                          146: "INT",
                          147: "BOOL",
                          148: "VEC2",
                          149: "VEC3",
                          150: "VEC4",
                          151: "BVEC2",
                          152: "BVEC3",
                          153: "BVEC4",
                          154: "IVEC2",
                          155: "IVEC3",
                          156: "IVEC4",
                          157: "MAT2X2",
                          158: "MAT3X3",
                          159: "MAT4X4",
                          160: "SAMPLER1D",
                          161: "SAMPLER2D",
                          162: "SAMPLER3D",
                          163: "SAMPLERCUBE",
                          164: "SAMPLER1DSHADOW",
                          165: "SAMPLER2DSHADOW",
                          166: "HIGHP",
                          167: "MEDIUMP",
                          168: "LOWP",
                          169: "STRUCT",
                          170: "{",
                          172: "}",
                          189: "IF",
                          191: "ELSE",
                          193: "SWITCH",
                          194: "CASE",
                          195: "DEFAULT",
                          196: "WHILE",
                          197: "DO",
                          198: "FOR",
                          202: "CONTINUE",
                          203: "BREAK",
                          204: "RETURN",
                          205: "DISCARD",
                          206: "DEBUGGER"
                      },
                      productions_: [
                          0,
                          [
                              3,
                              2
                          ],
                          [
                              4,
                              3
                          ],
                          [
                              6,
                              0
                          ],
                          [
                              6,
                              3
                          ],
                          [
                              12,
                              2
                          ],
                          [
                              12,
                              2
                          ],
                          [
                              12,
                              2
                          ],
                          [
                              12,
                              2
                          ],
                          [
                              12,
                              2
                          ],
                          [
                              7,
                              0
                          ],
                          [
                              7,
                              2
                          ],
                          [
                              19,
                              1
                          ],
                          [
                              19,
                              1
                          ],
                          [
                              18,
                              5
                          ],
                          [
                              8,
                              1
                          ],
                          [
                              8,
                              2
                          ],
                          [
                              20,
                              1
                          ],
                          [
                              20,
                              1
                          ],
                          [
                              27,
                              1
                          ],
                          [
                              27,
                              1
                          ],
                          [
                              27,
                              1
                          ],
                          [
                              27,
                              1
                          ],
                          [
                              27,
                              3
                          ],
                          [
                              33,
                              1
                          ],
                          [
                              33,
                              4
                          ],
                          [
                              33,
                              1
                          ],
                          [
                              33,
                              3
                          ],
                          [
                              33,
                              2
                          ],
                          [
                              33,
                              2
                          ],
                          [
                              35,
                              1
                          ],
                          [
                              37,
                              1
                          ],
                          [
                              41,
                              1
                          ],
                          [
                              41,
                              3
                          ],
                          [
                              42,
                              2
                          ],
                          [
                              42,
                              2
                          ],
                          [
                              45,
                              2
                          ],
                          [
                              45,
                              1
                          ],
                          [
                              44,
                              2
                          ],
                          [
                              44,
                              3
                          ],
                          [
                              46,
                              2
                          ],
                          [
                              46,
                              2
                          ],
                          [
                              46,
                              1
                          ],
                          [
                              43,
                              2
                          ],
                          [
                              43,
                              2
                          ],
                          [
                              53,
                              2
                          ],
                          [
                              53,
                              1
                          ],
                          [
                              52,
                              2
                          ],
                          [
                              52,
                              3
                          ],
                          [
                              54,
                              2
                          ],
                          [
                              55,
                              1
                          ],
                          [
                              55,
                              2
                          ],
                          [
                              55,
                              2
                          ],
                          [
                              55,
                              2
                          ],
                          [
                              56,
                              1
                          ],
                          [
                              56,
                              1
                          ],
                          [
                              56,
                              1
                          ],
                          [
                              56,
                              1
                          ],
                          [
                              61,
                              1
                          ],
                          [
                              61,
                              3
                          ],
                          [
                              61,
                              3
                          ],
                          [
                              61,
                              3
                          ],
                          [
                              65,
                              1
                          ],
                          [
                              65,
                              3
                          ],
                          [
                              65,
                              3
                          ],
                          [
                              66,
                              1
                          ],
                          [
                              66,
                              3
                          ],
                          [
                              66,
                              3
                          ],
                          [
                              69,
                              1
                          ],
                          [
                              69,
                              3
                          ],
                          [
                              69,
                              3
                          ],
                          [
                              69,
                              3
                          ],
                          [
                              69,
                              3
                          ],
                          [
                              74,
                              1
                          ],
                          [
                              74,
                              3
                          ],
                          [
                              74,
                              3
                          ],
                          [
                              77,
                              1
                          ],
                          [
                              77,
                              3
                          ],
                          [
                              79,
                              1
                          ],
                          [
                              79,
                              3
                          ],
                          [
                              81,
                              1
                          ],
                          [
                              81,
                              3
                          ],
                          [
                              83,
                              1
                          ],
                          [
                              83,
                              3
                          ],
                          [
                              85,
                              1
                          ],
                          [
                              85,
                              3
                          ],
                          [
                              87,
                              1
                          ],
                          [
                              87,
                              3
                          ],
                          [
                              89,
                              1
                          ],
                          [
                              89,
                              5
                          ],
                          [
                              48,
                              1
                          ],
                          [
                              48,
                              3
                          ],
                          [
                              91,
                              1
                          ],
                          [
                              91,
                              1
                          ],
                          [
                              91,
                              1
                          ],
                          [
                              91,
                              1
                          ],
                          [
                              91,
                              1
                          ],
                          [
                              91,
                              1
                          ],
                          [
                              91,
                              1
                          ],
                          [
                              91,
                              1
                          ],
                          [
                              91,
                              1
                          ],
                          [
                              91,
                              1
                          ],
                          [
                              91,
                              1
                          ],
                          [
                              31,
                              1
                          ],
                          [
                              31,
                              3
                          ],
                          [
                              103,
                              1
                          ],
                          [
                              104,
                              2
                          ],
                          [
                              104,
                              2
                          ],
                          [
                              104,
                              4
                          ],
                          [
                              105,
                              2
                          ],
                          [
                              111,
                              1
                          ],
                          [
                              111,
                              1
                          ],
                          [
                              113,
                              2
                          ],
                          [
                              113,
                              3
                          ],
                          [
                              112,
                              3
                          ],
                          [
                              116,
                              2
                          ],
                          [
                              116,
                              5
                          ],
                          [
                              114,
                              3
                          ],
                          [
                              114,
                              2
                          ],
                          [
                              114,
                              3
                          ],
                          [
                              114,
                              2
                          ],
                          [
                              118,
                              0
                          ],
                          [
                              118,
                              1
                          ],
                          [
                              118,
                              1
                          ],
                          [
                              118,
                              1
                          ],
                          [
                              119,
                              1
                          ],
                          [
                              107,
                              1
                          ],
                          [
                              107,
                              3
                          ],
                          [
                              107,
                              5
                          ],
                          [
                              107,
                              6
                          ],
                          [
                              107,
                              7
                          ],
                          [
                              107,
                              8
                          ],
                          [
                              107,
                              5
                          ],
                          [
                              123,
                              1
                          ],
                          [
                              123,
                              2
                          ],
                          [
                              123,
                              4
                          ],
                          [
                              123,
                              5
                          ],
                          [
                              123,
                              6
                          ],
                          [
                              123,
                              7
                          ],
                          [
                              123,
                              4
                          ],
                          [
                              123,
                              2
                          ],
                          [
                              115,
                              1
                          ],
                          [
                              115,
                              2
                          ],
                          [
                              127,
                              4
                          ],
                          [
                              129,
                              1
                          ],
                          [
                              129,
                              3
                          ],
                          [
                              130,
                              1
                          ],
                          [
                              130,
                              3
                          ],
                          [
                              131,
                              1
                          ],
                          [
                              131,
                              1
                          ],
                          [
                              131,
                              1
                          ],
                          [
                              117,
                              1
                          ],
                          [
                              126,
                              1
                          ],
                          [
                              126,
                              1
                          ],
                          [
                              126,
                              2
                          ],
                          [
                              126,
                              1
                          ],
                          [
                              126,
                              2
                          ],
                          [
                              126,
                              2
                          ],
                          [
                              126,
                              3
                          ],
                          [
                              126,
                              1
                          ],
                          [
                              136,
                              1
                          ],
                          [
                              136,
                              1
                          ],
                          [
                              136,
                              1
                          ],
                          [
                              136,
                              2
                          ],
                          [
                              136,
                              1
                          ],
                          [
                              136,
                              1
                          ],
                          [
                              136,
                              2
                          ],
                          [
                              136,
                              2
                          ],
                          [
                              136,
                              1
                          ],
                          [
                              50,
                              1
                          ],
                          [
                              50,
                              2
                          ],
                          [
                              110,
                              1
                          ],
                          [
                              110,
                              3
                          ],
                          [
                              110,
                              4
                          ],
                          [
                              141,
                              1
                          ],
                          [
                              141,
                              1
                          ],
                          [
                              141,
                              1
                          ],
                          [
                              142,
                              1
                          ],
                          [
                              142,
                              1
                          ],
                          [
                              142,
                              1
                          ],
                          [
                              142,
                              1
                          ],
                          [
                              142,
                              1
                          ],
                          [
                              142,
                              1
                          ],
                          [
                              142,
                              1
                          ],
                          [
                              142,
                              1
                          ],
                          [
                              142,
                              1
                          ],
                          [
                              142,
                              1
                          ],
                          [
                              142,
                              1
                          ],
                          [
                              142,
                              1
                          ],
                          [
                              142,
                              1
                          ],
                          [
                              142,
                              1
                          ],
                          [
                              142,
                              1
                          ],
                          [
                              142,
                              1
                          ],
                          [
                              142,
                              1
                          ],
                          [
                              142,
                              1
                          ],
                          [
                              142,
                              1
                          ],
                          [
                              142,
                              1
                          ],
                          [
                              142,
                              1
                          ],
                          [
                              142,
                              1
                          ],
                          [
                              142,
                              1
                          ],
                          [
                              109,
                              1
                          ],
                          [
                              109,
                              1
                          ],
                          [
                              109,
                              1
                          ],
                          [
                              143,
                              5
                          ],
                          [
                              143,
                              4
                          ],
                          [
                              171,
                              1
                          ],
                          [
                              171,
                              2
                          ],
                          [
                              173,
                              3
                          ],
                          [
                              174,
                              1
                          ],
                          [
                              174,
                              3
                          ],
                          [
                              175,
                              1
                          ],
                          [
                              175,
                              4
                          ],
                          [
                              124,
                              1
                          ],
                          [
                              176,
                              1
                          ],
                          [
                              177,
                              1
                          ],
                          [
                              177,
                              1
                          ],
                          [
                              179,
                              1
                          ],
                          [
                              179,
                              1
                          ],
                          [
                              179,
                              1
                          ],
                          [
                              179,
                              1
                          ],
                          [
                              179,
                              1
                          ],
                          [
                              179,
                              1
                          ],
                          [
                              179,
                              1
                          ],
                          [
                              178,
                              2
                          ],
                          [
                              178,
                              3
                          ],
                          [
                              187,
                              1
                          ],
                          [
                              187,
                              1
                          ],
                          [
                              188,
                              2
                          ],
                          [
                              188,
                              3
                          ],
                          [
                              186,
                              1
                          ],
                          [
                              186,
                              2
                          ],
                          [
                              180,
                              1
                          ],
                          [
                              180,
                              2
                          ],
                          [
                              181,
                              5
                          ],
                          [
                              190,
                              3
                          ],
                          [
                              190,
                              1
                          ],
                          [
                              192,
                              1
                          ],
                          [
                              192,
                              4
                          ],
                          [
                              182,
                              5
                          ],
                          [
                              183,
                              3
                          ],
                          [
                              183,
                              2
                          ],
                          [
                              184,
                              5
                          ],
                          [
                              184,
                              7
                          ],
                          [
                              184,
                              6
                          ],
                          [
                              199,
                              1
                          ],
                          [
                              199,
                              1
                          ],
                          [
                              201,
                              1
                          ],
                          [
                              201,
                              0
                          ],
                          [
                              200,
                              2
                          ],
                          [
                              200,
                              3
                          ],
                          [
                              185,
                              2
                          ],
                          [
                              185,
                              2
                          ],
                          [
                              185,
                              2
                          ],
                          [
                              185,
                              3
                          ],
                          [
                              185,
                              2
                          ],
                          [
                              185,
                              2
                          ],
                          [
                              24,
                              1
                          ],
                          [
                              24,
                              1
                          ],
                          [
                              24,
                              1
                          ],
                          [
                              207,
                              2
                          ]
                      ],
                      performAction: function anonymous1(yytext1, yyleng1, yylineno1, yy1, yystate1, $$1, _$1) {
                          /* this == yyval */ var $01 = $$1.length - 1;
                          switch(yystate1){
                              case 1:
                                  return $$1[$01 - 1];
                              case 15:
                              case 16:
                                  if ($$1[$01] !== null) yy1.state.addAstNode($$1[$01]);
                                  break;
                              case 19:
                                  this.$ = new AstExpression("ident");
                                  this.$.setLocation(_$1[$01]);
                                  this.$.primary_expression.identifier = $$1[$01];
                                  break;
                              case 20:
                                  this.$ = new AstExpression("int");
                                  this.$.setLocation(_$1[$01]);
                                  this.$.primary_expression.int_constant = $$1[$01];
                                  this.$.primary_expression.type = "int";
                                  break;
                              case 21:
                                  this.$ = new AstExpression("float");
                                  this.$.setLocation(_$1[$01]);
                                  this.$.primary_expression.float_constant = $$1[$01];
                                  this.$.primary_expression.type = "float";
                                  break;
                              case 22:
                                  this.$ = new AstExpression("bool");
                                  this.$.setLocation(_$1[$01]);
                                  this.$.primary_expression.bool_constant = $$1[$01];
                                  this.$.primary_expression.type = "bool";
                                  break;
                              case 23:
                                  this.$ = $$1[$01 - 1];
                                  this.$.grouped = true;
                                  break;
                              case 25:
                                  this.$ = new AstExpression("[]", $$1[$01 - 3], $$1[$01 - 1]);
                                  this.$.setLocation(_$1[$01 - 3]);
                                  break;
                              case 27:
                                  this.$ = new AstExpression(".", $$1[$01 - 2]);
                                  this.$.setLocation(_$1[$01 - 2]);
                                  this.$.primary_expression.identifier = $$1[$01];
                                  break;
                              case 28:
                                  this.$ = new AstExpression("x++", $$1[$01 - 1]);
                                  this.$.setLocation(_$1[$01 - 1]);
                                  break;
                              case 29:
                                  this.$ = new AstExpression("x--", $$1[$01 - 1]);
                                  this.$.setLocation(_$1[$01 - 1]);
                                  break;
                              case 38:
                                  this.$ = $$1[$01 - 1];
                                  this.$.setLocation(_$1[$01 - 1]);
                                  this.$.expressions.push($$1[$01]);
                                  break;
                              case 39:
                                  this.$ = $$1[$01 - 2];
                                  this.$.setLocation(_$1[$01 - 2]);
                                  this.$.expressions.push($$1[$01]);
                                  break;
                              case 40:
                                  this.$ = new AstFunctionExpression($$1[$01 - 1]);
                                  this.$.setLocation(_$1[$01 - 1]);
                                  break;
                              case 41:
                                  var callee1 = new AstExpression($$1[$01 - 1]);
                                  this.$ = new AstFunctionExpression(callee1);
                                  this.$.setLocation(_$1[$01 - 1]);
                                  break;
                              case 51:
                                  this.$ = new AstExpression("++x", $$1[$01]);
                                  this.$.setLocation(_$1[$01 - 1]);
                                  break;
                              case 52:
                                  this.$ = new AstExpression("--x", $$1[$01]);
                                  this.$.setLocation(_$1[$01 - 1]);
                                  break;
                              case 53:
                                  this.$ = new AstExpression($$1[$01 - 1], $$1[$01]);
                                  this.$.setLocation(_$1[$01 - 1]);
                                  break;
                              case 54:
                                  this.$ = "POS";
                                  break;
                              case 55:
                                  this.$ = "NEG";
                                  break;
                              case 59:
                              case 60:
                              case 61:
                              case 63:
                              case 64:
                              case 66:
                              case 67:
                              case 69:
                              case 70:
                              case 71:
                              case 72:
                              case 74:
                              case 75:
                              case 77:
                              case 79:
                              case 81:
                              case 83:
                              case 85:
                              case 87:
                                  this.$ = new AstExpressionBin($$1[$01 - 1], $$1[$01 - 2], $$1[$01]);
                                  this.$.setLocation(_$1[$01 - 2]);
                                  break;
                              case 89:
                                  this.$ = new AstExpression($$1[$01 - 3], $$1[$01 - 4], $$1[$01 - 2], $$1[$01]);
                                  this.$.setLocation(_$1[$01 - 4]);
                                  break;
                              case 91:
                                  this.$ = new AstExpression($$1[$01 - 1], $$1[$01 - 2], $$1[$01]);
                                  this.$.setLocation(_$1[$01 - 2]);
                                  break;
                              case 103:
                                  this.$ = $$1[$01];
                                  break;
                              case 104:
                                  if ($$1[$01 - 2].oper !== $$1[$01 - 1]) {
                                      this.$ = new AstExpression($$1[$01 - 1]);
                                      this.$.setLocation(_$1[$01 - 2]);
                                      this.$.expressions.push($$1[$01 - 2]);
                                  } else this.$ = $$1[$01 - 2];
                                  this.$.expressions.push($$1[$01]);
                                  break;
                              case 106:
                                  yy1.state.symbols.pop_scope();
                                  this.$ = $$1[$01 - 1];
                                  break;
                              case 107:
                                  this.$ = $$1[$01 - 1];
                                  break;
                              case 108:
                                  $$1[$01 - 1].precision = $$1[$01 - 2];
                                  $$1[$01 - 1].is_precision_statement = true;
                                  this.$ = $$1[$01 - 1];
                                  break;
                              case 112:
                                  this.$ = $$1[$01 - 1];
                                  this.$.parameters.push($$1[$01]);
                                  break;
                              case 113:
                                  this.$ = $$1[$01 - 2];
                                  this.$.parameters.push($$1[$01]);
                                  break;
                              case 114:
                                  this.$ = new AstFunction();
                                  this.$.setLocation(_$1[$01 - 2]);
                                  this.$.return_type = $$1[$01 - 2];
                                  this.$.identifier = $$1[$01 - 1]; //Check for duplicates
                                  if ($$1[$01 - 1] == "main") {
                                      if (yy1.state.symbols.get_function($$1[$01 - 1])) {
                                          var e1 = new Error("Cannot define main() more than once");
                                          e1.lineNumber = _$1[$01 - 2].first_line;
                                          e1.columnNumber = _$1[$01 - 2].first_column;
                                          throw e1;
                                      }
                                  }
                                  this.$.entry = yy1.state.symbols.add_function($$1[$01 - 1], $$1[$01 - 2].specifier.type_name);
                                  this.$.entry.Ast = this.$;
                                  yy1.state.symbols.push_scope();
                                  break;
                              case 115:
                                  this.$ = new AstParameterDeclarator();
                                  this.$.setLocation(_$1[$01 - 1]);
                                  this.$.type = new AstFullySpecifiedType();
                                  this.$.type.setLocation(_$1[$01 - 1]);
                                  this.$.type.specifier = $$1[$01 - 1];
                                  this.$.identifier = $$1[$01];
                                  break;
                              case 117:
                                  $$1[$01 - 2].concat($$1[$01 - 1]);
                                  this.$ = $$1[$01];
                                  this.$.type.qualifier = $$1[$01 - 2];
                                  break;
                              case 118:
                                  this.$ = $$1[$01];
                                  this.$.type.qualifier = $$1[$01 - 1];
                                  break;
                              case 119:
                                  $$1[$01 - 2].concat($$1[$01 - 1]);
                                  this.$ = new AstParameterDeclarator();
                                  this.$.setLocation(_$1[$01 - 2]);
                                  this.$.type = new AstFullySpecifiedType();
                                  this.$.type.qualifier = $$1[$01 - 2];
                                  this.$.type.specifier = $$1[$01];
                                  break;
                              case 120:
                                  this.$ = new AstParameterDeclarator();
                                  this.$.setLocation(_$1[$01 - 1]);
                                  this.$.type = new AstFullySpecifiedType();
                                  this.$.type.qualifier = $$1[$01 - 1];
                                  this.$.type.specifier = $$1[$01];
                                  break;
                              case 121:
                                  this.$ = [];
                                  break;
                              case 122:
                                  this.$ = [
                                      "in"
                                  ];
                                  break;
                              case 123:
                                  this.$ = [
                                      "out"
                                  ];
                                  break;
                              case 124:
                                  this.$ = [
                                      "inout"
                                  ];
                                  break;
                              case 127:
                                  var decl1 = new AstDeclaration($$1[$01], false);
                                  decl1.setLocation(_$1[$01 - 2]);
                                  this.$ = $$1[$01 - 2];
                                  this.$.declarations.push(decl1);
                                  break;
                              case 129:
                                  var decl1 = new AstDeclaration($$1[$01 - 3], true, $$1[$01 - 1]);
                                  decl1.setLocation(_$1[$01 - 5]);
                                  this.$ = $$1[$01 - 5];
                                  this.$.declarations.push(decl1);
                                  break;
                              case 132:
                                  var decl1 = new AstDeclaration($$1[$01 - 2], false, null, $$1[$01]);
                                  decl1.setLocation(_$1[$01 - 4]);
                                  this.$ = $$1[$01 - 4];
                                  this.$.declarations.push(decl1);
                                  break;
                              case 133:
                                  if ($$1[$01].specifier.type_specifier !== types.struct) {
                                      yy1.state.addError("empty declaration list", _$1[$01].first_line, _$1[$01].first_column);
                                      return 0;
                                  }
                                  this.$ = new AstDeclaratorList($$1[$01]);
                                  this.$.setLocation(_$1[$01]);
                                  break;
                              case 134:
                                  var decl1 = new AstDeclaration($$1[$01], false);
                                  decl1.setLocation(_$1[$01]);
                                  this.$ = new AstDeclaratorList($$1[$01 - 1]);
                                  this.$.setLocation(_$1[$01 - 1]);
                                  this.$.declarations.push(decl1);
                                  break;
                              case 135:
                                  var decl1 = new AstDeclaration($$1[$01 - 2], true);
                                  decl1.setLocation(_$1[$01 - 2]);
                                  this.$ = new AstDeclaratorList($$1[$01 - 3]);
                                  this.$.setLocation(_$1[$01 - 3]);
                                  this.$.declarations.push(decl1);
                                  break;
                              case 136:
                                  var decl1 = new AstDeclaration($$1[$01 - 3], true, $$1[$01 - 1]);
                                  decl1.setLocation(_$1[$01 - 3]);
                                  this.$ = new AstDeclaratorList($$1[$01 - 4]);
                                  this.$.setLocation(_$1[$01 - 4]);
                                  this.$.declarations.push(decl1);
                                  break;
                              case 137:
                                  var decl1 = new AstDeclaration($$1[$01 - 4], true, null, $$1[$01]);
                                  decl1.setLocation(_$1[$01 - 4]);
                                  this.$ = new AstDeclaratorList($$1[$01 - 5]);
                                  this.$.setLocation(_$1[$01 - 5]);
                                  this.$.declarations.push(decl1);
                                  break;
                              case 138:
                                  var decl1 = new AstDeclaration($$1[$01 - 5], true, $$1[$01 - 3], $$1[$01]);
                                  decl1.setLocation(_$1[$01 - 5]);
                                  this.$ = new AstDeclaratorList($$1[$01 - 6]);
                                  this.$.setLocation(_$1[$01 - 6]);
                                  this.$.declarations.push(decl1);
                                  break;
                              case 139:
                                  var decl1 = new AstDeclaration($$1[$01 - 2], false, null, $$1[$01]);
                                  decl1.setLocation(_$1[$01 - 2]);
                                  this.$ = new AstDeclaratorList($$1[$01 - 3]);
                                  this.$.setLocation(_$1[$01 - 3]);
                                  this.$.declarations.push(decl1);
                                  break;
                              case 141:
                                  this.$ = new AstFullySpecifiedType();
                                  this.$.setLocation(_$1[$01]);
                                  this.$.specifier = $$1[$01];
                                  break;
                              case 142:
                                  this.$ = new AstFullySpecifiedType();
                                  this.$.setLocation(_$1[$01 - 1]);
                                  this.$.qualifier = $$1[$01 - 1];
                                  this.$.specifier = $$1[$01];
                                  break;
                              case 143:
                                  this.$ = $$1[$01 - 1];
                                  break;
                              case 151:
                              case 160:
                                  this.$ = [
                                      "const"
                                  ];
                                  break;
                              case 161:
                                  this.$ = [
                                      "attribute"
                                  ];
                                  break;
                              case 162:
                                  this.$ = [
                                      "varying"
                                  ];
                                  break;
                              case 163:
                                  this.$ = [
                                      "centroid",
                                      "varying"
                                  ];
                                  break;
                              case 164:
                                  this.$ = [
                                      "in"
                                  ];
                                  break;
                              case 165:
                                  this.$ = [
                                      "out"
                                  ];
                                  break;
                              case 166:
                                  this.$ = [
                                      "centroid",
                                      "in"
                                  ];
                                  break;
                              case 167:
                                  this.$ = [
                                      "centroid",
                                      "out"
                                  ];
                                  break;
                              case 168:
                                  this.$ = [
                                      "uniform"
                                  ];
                                  break;
                              case 169:
                                  this.$ = $$1[$01];
                                  break;
                              case 170:
                                  this.$ = $$1[$01];
                                  this.$.precision = $$1[$01 - 1];
                                  break;
                              case 174:
                              case 175:
                              case 176:
                                  this.$ = new AstTypeSpecifier($$1[$01]);
                                  this.$.setLocation(_$1[$01]);
                                  break;
                              case 200:
                                  this.$ = ast_precision.highp;
                                  break;
                              case 201:
                                  this.$ = ast_precision.mediump;
                                  break;
                              case 202:
                                  this.$ = ast_precision.lowp;
                                  break;
                              case 203:
                                  this.$ = new AstStructSpecifier($$1[$01 - 3], $$1[$01 - 1]);
                                  this.$.setLocation(_$1[$01 - 4]);
                                  yy1.state.symbols.add_type($$1[$01 - 3], types._void);
                                  break;
                              case 205:
                                  this.$ = [
                                      $$1[$01]
                                  ];
                                  break;
                              case 206:
                                  this.$ = $$1[$01 - 1];
                                  this.$.push($$1[$01]);
                                  break;
                              case 207:
                                  var type1 = new AstFullySpecifiedType();
                                  type1.setLocation(_$1[$01 - 2]);
                                  type1.specifier = $$1[$01 - 2];
                                  this.$ = new AstDeclaratorList(type1);
                                  this.$.setLocation(_$1[$01 - 2]);
                                  this.$.declarations = $$1[$01 - 1];
                                  break;
                              case 210:
                                  this.$ = new AstDeclaration($$1[$01], false);
                                  this.$.setLocation(_$1[$01]);
                                  yy1.state.symbols.add_variable($$1[$01]);
                                  break;
                              case 219:
                              case 220:
                              case 258:
                                  this.$ = null;
                                  break;
                              case 223:
                                  this.$ = new AstCompoundStatement(true);
                                  this.$.setLocation(_$1[$01 - 1]);
                                  break;
                              case 224:
                                  yy1.state.symbols.push_scope();
                                  this.$ = new AstCompoundStatement(true, $$1[$01 - 1]);
                                  this.$.setLocation(_$1[$01 - 2]);
                                  yy1.state.symbols.pop_scope();
                                  break;
                              case 228:
                                  this.$ = new AstCompoundStatement(false, $$1[$01 - 1]);
                                  this.$.setLocation(_$1[$01 - 2]);
                                  break;
                              case 229:
                                  if ($$1[$01] === null) yy1.state.addError("<nil> statement", _$1[$01].first_line, _$1[$01].first_column);
                                  else this.$ = [
                                      $$1[$01]
                                  ];
                                  break;
                              case 230:
                                  if ($$1[$01] === null) yy1.state.addError("<nil> statement", _$1[$01 - 1].first_line, _$1[$01 - 1].first_column);
                                  this.$ = $$1[$01 - 1];
                                  this.$.push($$1[$01]);
                                  break;
                              case 232:
                                  this.$ = new AstExpressionStatement($$1[$01 - 1]);
                                  this.$.setLocation(_$1[$01 - 1]);
                                  break;
                              case 233:
                                  this.$ = new AstSelectionStatement($$1[$01 - 2], $$1[$01].then_statement, $$1[$01].else_statement);
                                  this.$.setLocation(_$1[$01 - 4]);
                                  break;
                              case 234:
                                  this.$ = {};
                                  this.$.then_statement = $$1[$01 - 2];
                                  this.$.else_statement = $$1[$01];
                                  break;
                              case 235:
                                  this.$.then_statement = $$1[$01];
                                  break;
                              case 250:
                                  this.$ = new AstJumpStatement("continue");
                                  this.$.setLocation(_$1[$01 - 1]);
                                  break;
                              case 251:
                                  this.$ = new AstJumpStatement("break");
                                  this.$.setLocation(_$1[$01 - 1]);
                                  break;
                              case 252:
                                  this.$ = new AstJumpStatement("return");
                                  this.$.setLocation(_$1[$01 - 1]);
                                  break;
                              case 253:
                                  this.$ = new AstJumpStatement("return", $$1[$01 - 1]);
                                  this.$.setLocation(_$1[$01 - 2]);
                                  break;
                              case 254:
                                  /* Fragment shader only.*/ this.$ = new AstJumpStatement("discard");
                                  this.$.setLocation(_$1[$01 - 1]);
                                  break;
                              case 255:
                                  this.$ = new AstJumpStatement("debugger");
                                  this.$.setLocation(_$1[$01 - 1]);
                                  break;
                              case 256:
                              case 257:
                                  this.$ = $$1[$01];
                                  break;
                              case 259:
                                  this.$ = new AstFunctionDefinition();
                                  this.$.setLocation(_$1[$01 - 1]);
                                  this.$.proto_type = $$1[$01 - 1];
                                  this.$.body = $$1[$01];
                                  yy1.state.symbols.pop_scope();
                                  break;
                          }
                      },
                      table: [
                          o5($V03, [
                              2,
                              3
                          ], {
                              3: 1,
                              4: 2,
                              6: 3,
                              9: [
                                  1,
                                  4
                              ]
                          }),
                          {
                              1: [
                                  3
                              ]
                          },
                          {
                              5: [
                                  1,
                                  5
                              ]
                          },
                          o5($V03, [
                              2,
                              10
                          ], {
                              7: 6
                          }),
                          {
                              10: [
                                  1,
                                  7
                              ]
                          },
                          {
                              1: [
                                  2,
                                  1
                              ]
                          },
                          {
                              8: 8,
                              12: 14,
                              13: $V13,
                              14: $V23,
                              15: $V33,
                              16: $V43,
                              17: $V53,
                              18: 9,
                              21: $V63,
                              22: [
                                  1,
                                  11
                              ],
                              24: 10,
                              47: $V73,
                              50: 29,
                              104: 13,
                              105: 15,
                              107: 16,
                              108: $V83,
                              109: 32,
                              110: 31,
                              111: 23,
                              112: 25,
                              113: 26,
                              115: 27,
                              120: $V93,
                              121: $Va3,
                              123: 24,
                              125: $Vb3,
                              126: 30,
                              127: 34,
                              128: $Vc3,
                              131: 35,
                              132: $Vd2,
                              133: $Ve2,
                              134: $Vf2,
                              135: $Vg2,
                              136: 33,
                              137: $Vh2,
                              138: $Vi2,
                              139: $Vj2,
                              140: $Vk2,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2,
                              207: 12
                          },
                          {
                              11: [
                                  1,
                                  78
                              ]
                          },
                          {
                              5: [
                                  2,
                                  2
                              ],
                              12: 14,
                              13: $V13,
                              14: $V23,
                              15: $V33,
                              16: $V43,
                              17: $V53,
                              21: $V63,
                              24: 79,
                              47: $V73,
                              50: 29,
                              104: 13,
                              105: 15,
                              107: 16,
                              108: $V83,
                              109: 32,
                              110: 31,
                              111: 23,
                              112: 25,
                              113: 26,
                              115: 27,
                              120: $V93,
                              121: $Va3,
                              123: 24,
                              125: $Vb3,
                              126: 30,
                              127: 34,
                              128: $Vc3,
                              131: 35,
                              132: $Vd2,
                              133: $Ve2,
                              134: $Vf2,
                              135: $Vg2,
                              136: 33,
                              137: $Vh2,
                              138: $Vi2,
                              139: $Vj2,
                              140: $Vk2,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2,
                              207: 12
                          },
                          o5($V03, [
                              2,
                              11
                          ]),
                          o5($VL2, [
                              2,
                              15
                          ]),
                          {
                              19: 80,
                              20: 81,
                              21: $VM2,
                              25: $VN2,
                              26: $VO2
                          },
                          o5($VL2, [
                              2,
                              256
                          ]),
                          o5($VL2, [
                              2,
                              257
                          ]),
                          o5($VL2, [
                              2,
                              258
                          ]),
                          {
                              106: $VP2,
                              170: $VQ2,
                              188: 85
                          },
                          {
                              49: [
                                  1,
                                  89
                              ],
                              106: [
                                  1,
                                  88
                              ]
                          },
                          {
                              109: 90,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2
                          },
                          {
                              11: [
                                  1,
                                  91
                              ]
                          },
                          {
                              11: [
                                  1,
                                  92
                              ]
                          },
                          {
                              11: [
                                  1,
                                  93
                              ]
                          },
                          {
                              11: [
                                  1,
                                  94
                              ]
                          },
                          {
                              11: [
                                  1,
                                  95
                              ]
                          },
                          {
                              32: [
                                  1,
                                  96
                              ]
                          },
                          o5($VR2, [
                              2,
                              126
                          ]),
                          o5($VS2, $VT2, {
                              114: 97,
                              117: 98,
                              118: 99,
                              32: [
                                  2,
                                  110
                              ],
                              120: $VU2,
                              121: $VV2,
                              122: $VW2,
                              135: $VX2
                          }),
                          {
                              32: [
                                  2,
                                  111
                              ],
                              49: [
                                  1,
                                  104
                              ]
                          },
                          o5($VR2, [
                              2,
                              133
                          ], {
                              19: 105,
                              20: 106,
                              21: $VM2,
                              25: $VN2,
                              26: $VO2
                          }),
                          o5($VS2, $VY2, {
                              20: 107,
                              136: 108,
                              131: 109,
                              25: $VN2,
                              26: $VO2,
                              120: $V93,
                              121: $Va3,
                              132: $Vd2,
                              133: $Ve2,
                              134: $Vf2,
                              135: $Vg2,
                              137: $Vh2,
                              138: $Vi2,
                              139: $Vj2,
                              140: $Vk2
                          }),
                          o5($VZ2, $V_2),
                          {
                              21: $V63,
                              47: $V73,
                              50: 110,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          o5($V$2, [
                              2,
                              169
                          ]),
                          {
                              21: $V63,
                              47: $V73,
                              110: 111,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              169: $VK2
                          },
                          o5($VS2, [
                              2,
                              152
                          ]),
                          o5($VS2, [
                              2,
                              153
                          ], {
                              136: 112,
                              120: $V93,
                              121: $Va3,
                              135: $Vg2,
                              137: $Vh2,
                              138: $Vi2,
                              139: $Vj2,
                              140: $Vk2
                          }),
                          o5($VS2, [
                              2,
                              155
                          ], {
                              136: 113,
                              120: $V93,
                              121: $Va3,
                              135: $Vg2,
                              137: $Vh2,
                              138: $Vi2,
                              139: $Vj2,
                              140: $Vk2
                          }),
                          o5($V$2, [
                              2,
                              171
                          ], {
                              34: [
                                  1,
                                  114
                              ]
                          }),
                          o5($V011, [
                              2,
                              200
                          ]),
                          o5($V011, [
                              2,
                              201
                          ]),
                          o5($V011, [
                              2,
                              202
                          ]),
                          o5($VS2, [
                              2,
                              160
                          ]),
                          o5($VS2, [
                              2,
                              161
                          ]),
                          o5($VS2, [
                              2,
                              162
                          ]),
                          {
                              120: [
                                  1,
                                  116
                              ],
                              121: [
                                  1,
                                  117
                              ],
                              138: [
                                  1,
                                  115
                              ]
                          },
                          o5($VS2, [
                              2,
                              164
                          ]),
                          o5($VS2, [
                              2,
                              165
                          ]),
                          o5($VS2, [
                              2,
                              168
                          ]),
                          {
                              30: [
                                  1,
                                  118
                              ]
                          },
                          o5($V111, [
                              2,
                              148
                          ]),
                          o5($V111, [
                              2,
                              149
                          ]),
                          o5($V111, [
                              2,
                              150
                          ]),
                          o5($V211, [
                              2,
                              174
                          ]),
                          o5($V211, [
                              2,
                              175
                          ]),
                          o5($V211, [
                              2,
                              176
                          ]),
                          o5($V211, $V311),
                          o5($V211, [
                              2,
                              178
                          ]),
                          o5($V211, [
                              2,
                              179
                          ]),
                          o5($V211, [
                              2,
                              180
                          ]),
                          o5($V211, [
                              2,
                              181
                          ]),
                          o5($V211, [
                              2,
                              182
                          ]),
                          o5($V211, [
                              2,
                              183
                          ]),
                          o5($V211, [
                              2,
                              184
                          ]),
                          o5($V211, [
                              2,
                              185
                          ]),
                          o5($V211, [
                              2,
                              186
                          ]),
                          o5($V211, [
                              2,
                              187
                          ]),
                          o5($V211, [
                              2,
                              188
                          ]),
                          o5($V211, [
                              2,
                              189
                          ]),
                          o5($V211, [
                              2,
                              190
                          ]),
                          o5($V211, [
                              2,
                              191
                          ]),
                          o5($V211, [
                              2,
                              192
                          ]),
                          o5($V211, [
                              2,
                              193
                          ]),
                          o5($V211, [
                              2,
                              194
                          ]),
                          o5($V211, [
                              2,
                              195
                          ]),
                          o5($V211, [
                              2,
                              196
                          ]),
                          o5($V211, [
                              2,
                              197
                          ]),
                          o5($V211, [
                              2,
                              198
                          ]),
                          o5($V211, [
                              2,
                              199
                          ]),
                          {
                              19: 119,
                              20: 81,
                              21: $VM2,
                              25: $VN2,
                              26: $VO2,
                              170: [
                                  1,
                                  120
                              ]
                          },
                          o5($V03, [
                              2,
                              4
                          ]),
                          o5($VL2, [
                              2,
                              16
                          ]),
                          {
                              23: [
                                  1,
                                  121
                              ]
                          },
                          o5([
                              11,
                              23,
                              32,
                              34,
                              49,
                              92,
                              106,
                              170
                          ], $V411),
                          o5([
                              11,
                              23,
                              32,
                              34,
                              36,
                              38,
                              39,
                              40,
                              49,
                              57,
                              58,
                              62,
                              63,
                              64,
                              67,
                              68,
                              70,
                              71,
                              72,
                              73,
                              75,
                              76,
                              78,
                              80,
                              82,
                              84,
                              86,
                              88,
                              90,
                              92,
                              93,
                              94,
                              95,
                              96,
                              97,
                              98,
                              99,
                              100,
                              101,
                              102,
                              106,
                              170
                          ], [
                              2,
                              13
                          ]),
                          o5($V511, [
                              2,
                              17
                          ]),
                          o5($V511, [
                              2,
                              18
                          ]),
                          o5($VL2, [
                              2,
                              259
                          ]),
                          o5($V611, [
                              2,
                              106
                          ]),
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              31: 137,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 151,
                              50: 159,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              104: 135,
                              105: 150,
                              106: $Vi11,
                              107: 16,
                              108: $V83,
                              109: 32,
                              110: 31,
                              111: 23,
                              112: 25,
                              113: 26,
                              115: 27,
                              120: $V93,
                              121: $Va3,
                              123: 24,
                              125: $Vb3,
                              126: 30,
                              127: 34,
                              128: $Vc3,
                              131: 35,
                              132: $Vd2,
                              133: $Ve2,
                              134: $Vf2,
                              135: $Vg2,
                              136: 33,
                              137: $Vh2,
                              138: $Vi2,
                              139: $Vj2,
                              140: $Vk2,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2,
                              170: $Vj11,
                              172: [
                                  1,
                                  122
                              ],
                              176: 128,
                              177: 124,
                              178: 125,
                              179: 126,
                              180: 129,
                              181: 130,
                              182: 131,
                              183: 132,
                              184: 133,
                              185: 134,
                              186: 123,
                              189: $Vk11,
                              193: $Vl11,
                              194: $Vm11,
                              195: $Vn11,
                              196: $Vo11,
                              197: $Vp11,
                              198: $Vq11,
                              202: $Vr11,
                              203: $Vs11,
                              204: $Vt11,
                              205: $Vu11,
                              206: $Vv11
                          },
                          o5($V611, [
                              2,
                              107
                          ]),
                          {
                              19: 187,
                              20: 81,
                              21: $VM2,
                              25: $VN2,
                              26: $VO2
                          },
                          {
                              21: $V63,
                              47: $V73,
                              110: 188,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              169: $VK2
                          },
                          o5($VL2, [
                              2,
                              5
                          ]),
                          o5($VL2, [
                              2,
                              6
                          ]),
                          o5($VL2, [
                              2,
                              7
                          ]),
                          o5($VL2, [
                              2,
                              8
                          ]),
                          o5($VL2, [
                              2,
                              9
                          ]),
                          o5([
                              106,
                              170
                          ], [
                              2,
                              109
                          ]),
                          o5($Vw11, [
                              2,
                              112
                          ]),
                          o5($VS2, $VT2, {
                              118: 189,
                              120: $VU2,
                              121: $VV2,
                              122: $VW2
                          }),
                          {
                              21: $V63,
                              47: $V73,
                              50: 192,
                              109: 32,
                              110: 31,
                              116: 190,
                              119: 191,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          o5([
                              21,
                              47,
                              120,
                              121,
                              122,
                              144,
                              145,
                              146,
                              147,
                              148,
                              149,
                              150,
                              151,
                              152,
                              153,
                              154,
                              155,
                              156,
                              157,
                              158,
                              159,
                              160,
                              161,
                              162,
                              163,
                              164,
                              165,
                              166,
                              167,
                              168,
                              169
                          ], [
                              2,
                              151
                          ]),
                          o5($VS2, [
                              2,
                              122
                          ]),
                          o5($VS2, [
                              2,
                              123
                          ]),
                          o5($VS2, [
                              2,
                              124
                          ]),
                          o5($VS2, $VT2, {
                              117: 98,
                              118: 99,
                              114: 193,
                              120: $VU2,
                              121: $VV2,
                              122: $VW2,
                              135: $VX2
                          }),
                          o5($VR2, [
                              2,
                              134
                          ], {
                              34: [
                                  1,
                                  194
                              ],
                              92: [
                                  1,
                                  195
                              ]
                          }),
                          o5([
                              34,
                              49,
                              92,
                              106
                          ], $V411, {
                              30: [
                                  1,
                                  196
                              ]
                          }),
                          o5($VR2, [
                              2,
                              140
                          ]),
                          o5($VS2, [
                              2,
                              157
                          ]),
                          {
                              120: $V93,
                              121: $Va3,
                              135: $Vg2,
                              136: 197,
                              137: $Vh2,
                              138: $Vi2,
                              139: $Vj2,
                              140: $Vk2
                          },
                          o5($VZ2, [
                              2,
                              142
                          ]),
                          o5($V$2, [
                              2,
                              170
                          ]),
                          o5($VS2, [
                              2,
                              154
                          ]),
                          o5($VS2, [
                              2,
                              156
                          ]),
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              36: [
                                  1,
                                  198
                              ],
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              50: 202,
                              51: $Vd11,
                              55: 201,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 200,
                              103: 199,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          o5($VS2, [
                              2,
                              163
                          ]),
                          o5($VS2, [
                              2,
                              166
                          ]),
                          o5($VS2, [
                              2,
                              167
                          ]),
                          {
                              19: 205,
                              20: 81,
                              21: $VM2,
                              25: $VN2,
                              26: $VO2,
                              129: 203,
                              130: 204
                          },
                          {
                              170: [
                                  1,
                                  206
                              ]
                          },
                          {
                              21: $V63,
                              47: $V73,
                              50: 209,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2,
                              171: 207,
                              173: 208
                          },
                          {
                              19: 210,
                              20: 81,
                              21: $VM2,
                              25: $VN2,
                              26: $VO2
                          },
                          o5($V611, [
                              2,
                              227
                          ]),
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              31: 137,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 151,
                              50: 159,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              104: 135,
                              105: 150,
                              106: $Vi11,
                              107: 16,
                              108: $V83,
                              109: 32,
                              110: 31,
                              111: 23,
                              112: 25,
                              113: 26,
                              115: 27,
                              120: $V93,
                              121: $Va3,
                              123: 24,
                              125: $Vb3,
                              126: 30,
                              127: 34,
                              128: $Vc3,
                              131: 35,
                              132: $Vd2,
                              133: $Ve2,
                              134: $Vf2,
                              135: $Vg2,
                              136: 33,
                              137: $Vh2,
                              138: $Vi2,
                              139: $Vj2,
                              140: $Vk2,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2,
                              170: $Vj11,
                              172: [
                                  1,
                                  211
                              ],
                              176: 128,
                              177: 212,
                              178: 125,
                              179: 126,
                              180: 129,
                              181: 130,
                              182: 131,
                              183: 132,
                              184: 133,
                              185: 134,
                              189: $Vk11,
                              193: $Vl11,
                              194: $Vm11,
                              195: $Vn11,
                              196: $Vo11,
                              197: $Vp11,
                              198: $Vq11,
                              202: $Vr11,
                              203: $Vs11,
                              204: $Vt11,
                              205: $Vu11,
                              206: $Vv11
                          },
                          o5($Vx11, [
                              2,
                              229
                          ]),
                          o5($Vy11, [
                              2,
                              214
                          ]),
                          o5($Vy11, [
                              2,
                              215
                          ]),
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              31: 137,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 151,
                              50: 159,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              104: 135,
                              105: 150,
                              106: $Vi11,
                              107: 16,
                              108: $V83,
                              109: 32,
                              110: 31,
                              111: 23,
                              112: 25,
                              113: 26,
                              115: 27,
                              120: $V93,
                              121: $Va3,
                              123: 24,
                              125: $Vb3,
                              126: 30,
                              127: 34,
                              128: $Vc3,
                              131: 35,
                              132: $Vd2,
                              133: $Ve2,
                              134: $Vf2,
                              135: $Vg2,
                              136: 33,
                              137: $Vh2,
                              138: $Vi2,
                              139: $Vj2,
                              140: $Vk2,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2,
                              170: $Vj11,
                              172: [
                                  1,
                                  213
                              ],
                              176: 128,
                              177: 124,
                              178: 125,
                              179: 126,
                              180: 129,
                              181: 130,
                              182: 131,
                              183: 132,
                              184: 133,
                              185: 134,
                              186: 214,
                              189: $Vk11,
                              193: $Vl11,
                              194: $Vm11,
                              195: $Vn11,
                              196: $Vo11,
                              197: $Vp11,
                              198: $Vq11,
                              202: $Vr11,
                              203: $Vs11,
                              204: $Vt11,
                              205: $Vu11,
                              206: $Vv11
                          },
                          o5($Vy11, [
                              2,
                              216
                          ]),
                          o5($Vy11, [
                              2,
                              217
                          ]),
                          o5($Vy11, [
                              2,
                              218
                          ]),
                          o5($Vy11, [
                              2,
                              219
                          ]),
                          o5($Vy11, [
                              2,
                              220
                          ]),
                          o5($Vy11, [
                              2,
                              221
                          ]),
                          o5($Vy11, [
                              2,
                              222
                          ]),
                          o5($Vy11, [
                              2,
                              213
                          ]),
                          o5($Vy11, [
                              2,
                              231
                          ]),
                          {
                              49: $Vz11,
                              106: [
                                  1,
                                  215
                              ]
                          },
                          {
                              30: [
                                  1,
                                  217
                              ]
                          },
                          {
                              30: [
                                  1,
                                  218
                              ]
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              31: 219,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 151,
                              50: 202,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              23: [
                                  1,
                                  220
                              ]
                          },
                          {
                              30: [
                                  1,
                                  221
                              ]
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              31: 137,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 151,
                              50: 159,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              104: 135,
                              105: 150,
                              106: $Vi11,
                              107: 16,
                              108: $V83,
                              109: 32,
                              110: 31,
                              111: 23,
                              112: 25,
                              113: 26,
                              115: 27,
                              120: $V93,
                              121: $Va3,
                              123: 24,
                              125: $Vb3,
                              126: 30,
                              127: 34,
                              128: $Vc3,
                              131: 35,
                              132: $Vd2,
                              133: $Ve2,
                              134: $Vf2,
                              135: $Vg2,
                              136: 33,
                              137: $Vh2,
                              138: $Vi2,
                              139: $Vj2,
                              140: $Vk2,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2,
                              170: $Vj11,
                              176: 128,
                              177: 222,
                              178: 125,
                              179: 126,
                              180: 129,
                              181: 130,
                              182: 131,
                              183: 132,
                              184: 133,
                              185: 134,
                              189: $Vk11,
                              193: $Vl11,
                              194: $Vm11,
                              195: $Vn11,
                              196: $Vo11,
                              197: $Vp11,
                              198: $Vq11,
                              202: $Vr11,
                              203: $Vs11,
                              204: $Vt11,
                              205: $Vu11,
                              206: $Vv11
                          },
                          {
                              30: [
                                  1,
                                  223
                              ]
                          },
                          {
                              106: [
                                  1,
                                  224
                              ]
                          },
                          {
                              106: [
                                  1,
                                  225
                              ]
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              31: 227,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 151,
                              50: 202,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              106: [
                                  1,
                                  226
                              ],
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              106: [
                                  1,
                                  228
                              ]
                          },
                          {
                              106: [
                                  1,
                                  229
                              ]
                          },
                          {
                              106: $VP2
                          },
                          o5($VA11, [
                              2,
                              103
                          ]),
                          o5($VA11, [
                              2,
                              90
                          ]),
                          o5($VB11, $VC11, {
                              91: 230,
                              92: [
                                  1,
                                  231
                              ],
                              93: [
                                  1,
                                  232
                              ],
                              94: [
                                  1,
                                  233
                              ],
                              95: [
                                  1,
                                  234
                              ],
                              96: [
                                  1,
                                  235
                              ],
                              97: [
                                  1,
                                  236
                              ],
                              98: [
                                  1,
                                  237
                              ],
                              99: [
                                  1,
                                  238
                              ],
                              100: [
                                  1,
                                  239
                              ],
                              101: [
                                  1,
                                  240
                              ],
                              102: [
                                  1,
                                  241
                              ]
                          }),
                          o5($VA11, [
                              2,
                              88
                          ], {
                              88: [
                                  1,
                                  243
                              ],
                              90: [
                                  1,
                                  242
                              ]
                          }),
                          o5($VD11, [
                              2,
                              50
                          ], {
                              34: [
                                  1,
                                  244
                              ],
                              38: [
                                  1,
                                  245
                              ],
                              39: [
                                  1,
                                  246
                              ],
                              40: [
                                  1,
                                  247
                              ]
                          }),
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              50: 202,
                              51: $Vd11,
                              55: 248,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              50: 202,
                              51: $Vd11,
                              55: 249,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              50: 202,
                              51: $Vd11,
                              55: 250,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          o5($VZ2, $V_2, {
                              30: $VE11
                          }),
                          o5($VF11, [
                              2,
                              86
                          ], {
                              86: $VG11
                          }),
                          o5($VH11, [
                              2,
                              24
                          ]),
                          o5($VH11, [
                              2,
                              26
                          ]),
                          o5($VI11, [
                              2,
                              54
                          ]),
                          o5($VI11, [
                              2,
                              55
                          ]),
                          o5($VI11, [
                              2,
                              56
                          ]),
                          o5($VI11, [
                              2,
                              57
                          ]),
                          o5($VJ11, [
                              2,
                              84
                          ], {
                              84: $VK11
                          }),
                          o5($VH11, [
                              2,
                              19
                          ], {
                              30: [
                                  1,
                                  254
                              ]
                          }),
                          o5($VH11, [
                              2,
                              20
                          ]),
                          o5($VH11, [
                              2,
                              21
                          ]),
                          o5($VH11, [
                              2,
                              22
                          ]),
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              31: 255,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 151,
                              50: 202,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          o5($VH11, [
                              2,
                              31
                          ]),
                          o5($VL11, [
                              2,
                              82
                          ], {
                              82: $VM11
                          }),
                          o5($VH11, [
                              2,
                              32
                          ]),
                          o5($VN11, [
                              2,
                              80
                          ], {
                              80: $VO11
                          }),
                          {
                              32: [
                                  1,
                                  258
                              ],
                              49: [
                                  1,
                                  259
                              ]
                          },
                          {
                              32: [
                                  1,
                                  260
                              ]
                          },
                          o5($VP11, [
                              2,
                              78
                          ], {
                              78: $VQ11
                          }),
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              32: [
                                  2,
                                  37
                              ],
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: [
                                  1,
                                  263
                              ],
                              48: 262,
                              50: 202,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          o5($VR11, [
                              2,
                              76
                          ], {
                              75: $VS11,
                              76: $VT11
                          }),
                          o5($VU11, [
                              2,
                              42
                          ]),
                          o5($VV11, [
                              2,
                              73
                          ], {
                              70: $VW11,
                              71: $VX11,
                              72: $VY11,
                              73: $VZ11
                          }),
                          o5($V_11, [
                              2,
                              68
                          ], {
                              67: $V$11,
                              68: $V021
                          }),
                          o5($V121, [
                              2,
                              65
                          ], {
                              57: $V221,
                              58: $V321
                          }),
                          o5($V421, [
                              2,
                              62
                          ], {
                              62: $V521,
                              63: $V621,
                              64: $V721
                          }),
                          o5($VR2, [
                              2,
                              127
                          ], {
                              34: [
                                  1,
                                  277
                              ],
                              92: [
                                  1,
                                  278
                              ]
                          }),
                          {
                              106: [
                                  1,
                                  279
                              ]
                          },
                          {
                              21: $V63,
                              47: $V73,
                              50: 192,
                              109: 32,
                              110: 31,
                              116: 280,
                              119: 281,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          o5($Vw11, [
                              2,
                              118
                          ]),
                          o5($Vw11, [
                              2,
                              120
                          ]),
                          o5($Vw11, [
                              2,
                              125
                          ], {
                              20: 81,
                              19: 282,
                              21: $VM2,
                              25: $VN2,
                              26: $VO2
                          }),
                          o5($Vw11, [
                              2,
                              113
                          ]),
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              36: [
                                  1,
                                  283
                              ],
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              50: 202,
                              51: $Vd11,
                              55: 201,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 200,
                              103: 284,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 286,
                              50: 202,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              109: 32,
                              110: 31,
                              124: 285,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          o5([
                              21,
                              32,
                              47,
                              120,
                              121,
                              122,
                              135,
                              144,
                              145,
                              146,
                              147,
                              148,
                              149,
                              150,
                              151,
                              152,
                              153,
                              154,
                              155,
                              156,
                              157,
                              158,
                              159,
                              160,
                              161,
                              162,
                              163,
                              164,
                              165,
                              166,
                              167,
                              168,
                              169
                          ], [
                              2,
                              114
                          ]),
                          o5($VS2, [
                              2,
                              158
                          ]),
                          o5($V$2, [
                              2,
                              172
                          ]),
                          {
                              36: [
                                  1,
                                  287
                              ]
                          },
                          {
                              36: [
                                  2,
                                  105
                              ]
                          },
                          o5($VB11, $VC11),
                          {
                              30: $VE11
                          },
                          {
                              32: [
                                  1,
                                  288
                              ],
                              49: [
                                  1,
                                  289
                              ]
                          },
                          o5($Vw11, [
                              2,
                              144
                          ]),
                          o5($Vw11, [
                              2,
                              146
                          ], {
                              92: [
                                  1,
                                  290
                              ]
                          }),
                          {
                              21: $V63,
                              47: $V73,
                              50: 209,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2,
                              171: 291,
                              173: 208
                          },
                          {
                              21: $V63,
                              47: $V73,
                              50: 209,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2,
                              172: [
                                  1,
                                  292
                              ],
                              173: 293
                          },
                          o5($V821, [
                              2,
                              205
                          ]),
                          {
                              19: 296,
                              20: 81,
                              21: $VM2,
                              25: $VN2,
                              26: $VO2,
                              174: 294,
                              175: 295
                          },
                          {
                              11: [
                                  1,
                                  297
                              ]
                          },
                          o5($V611, [
                              2,
                              228
                          ]),
                          o5($Vx11, [
                              2,
                              230
                          ]),
                          o5($Vy11, [
                              2,
                              223
                          ]),
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              31: 137,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 151,
                              50: 159,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              104: 135,
                              105: 150,
                              106: $Vi11,
                              107: 16,
                              108: $V83,
                              109: 32,
                              110: 31,
                              111: 23,
                              112: 25,
                              113: 26,
                              115: 27,
                              120: $V93,
                              121: $Va3,
                              123: 24,
                              125: $Vb3,
                              126: 30,
                              127: 34,
                              128: $Vc3,
                              131: 35,
                              132: $Vd2,
                              133: $Ve2,
                              134: $Vf2,
                              135: $Vg2,
                              136: 33,
                              137: $Vh2,
                              138: $Vi2,
                              139: $Vj2,
                              140: $Vk2,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2,
                              170: $Vj11,
                              172: [
                                  1,
                                  298
                              ],
                              176: 128,
                              177: 212,
                              178: 125,
                              179: 126,
                              180: 129,
                              181: 130,
                              182: 131,
                              183: 132,
                              184: 133,
                              185: 134,
                              189: $Vk11,
                              193: $Vl11,
                              194: $Vm11,
                              195: $Vn11,
                              196: $Vo11,
                              197: $Vp11,
                              198: $Vq11,
                              202: $Vr11,
                              203: $Vs11,
                              204: $Vt11,
                              205: $Vu11,
                              206: $Vv11
                          },
                          o5($Vy11, [
                              2,
                              232
                          ]),
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 299,
                              50: 202,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              31: 300,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 151,
                              50: 202,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              31: 301,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 151,
                              50: 202,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              23: [
                                  1,
                                  302
                              ],
                              49: $Vz11
                          },
                          o5($Vy11, [
                              2,
                              240
                          ]),
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              31: 304,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 151,
                              50: 159,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              109: 32,
                              110: 31,
                              115: 305,
                              120: $V93,
                              121: $Va3,
                              125: $V921,
                              126: 30,
                              127: 34,
                              128: $Vc3,
                              131: 35,
                              132: $Vd2,
                              133: $Ve2,
                              134: $Vf2,
                              135: $Vg2,
                              136: 33,
                              137: $Vh2,
                              138: $Vi2,
                              139: $Vj2,
                              140: $Vk2,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2,
                              192: 303
                          },
                          {
                              196: [
                                  1,
                                  307
                              ]
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              31: 137,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 151,
                              50: 159,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              104: 135,
                              105: 150,
                              106: $Vi11,
                              107: 16,
                              108: $V83,
                              109: 32,
                              110: 31,
                              111: 23,
                              112: 25,
                              113: 26,
                              115: 27,
                              120: $V93,
                              121: $Va3,
                              123: 24,
                              125: $Vb3,
                              126: 30,
                              127: 34,
                              128: $Vc3,
                              131: 35,
                              132: $Vd2,
                              133: $Ve2,
                              134: $Vf2,
                              135: $Vg2,
                              136: 33,
                              137: $Vh2,
                              138: $Vi2,
                              139: $Vj2,
                              140: $Vk2,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2,
                              176: 310,
                              180: 309,
                              199: 308
                          },
                          o5($Vy11, [
                              2,
                              250
                          ]),
                          o5($Vy11, [
                              2,
                              251
                          ]),
                          o5($Vy11, [
                              2,
                              252
                          ]),
                          {
                              49: $Vz11,
                              106: [
                                  1,
                                  311
                              ]
                          },
                          o5($Vy11, [
                              2,
                              254
                          ]),
                          o5($Vy11, [
                              2,
                              255
                          ]),
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 312,
                              50: 202,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          o5($VI11, [
                              2,
                              92
                          ]),
                          o5($VI11, [
                              2,
                              93
                          ]),
                          o5($VI11, [
                              2,
                              94
                          ]),
                          o5($VI11, [
                              2,
                              95
                          ]),
                          o5($VI11, [
                              2,
                              96
                          ]),
                          o5($VI11, [
                              2,
                              97
                          ]),
                          o5($VI11, [
                              2,
                              98
                          ]),
                          o5($VI11, [
                              2,
                              99
                          ]),
                          o5($VI11, [
                              2,
                              100
                          ]),
                          o5($VI11, [
                              2,
                              101
                          ]),
                          o5($VI11, [
                              2,
                              102
                          ]),
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              31: 313,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 151,
                              50: 202,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              50: 202,
                              51: $Vd11,
                              55: 201,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 314,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              31: 316,
                              33: 155,
                              35: 315,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 151,
                              50: 202,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              19: 317,
                              20: 319,
                              21: $VM2,
                              25: $VN2,
                              26: $VO2,
                              43: 318,
                              52: 320,
                              53: 321,
                              54: 322
                          },
                          o5($VH11, [
                              2,
                              28
                          ]),
                          o5($VH11, [
                              2,
                              29
                          ]),
                          o5($VD11, [
                              2,
                              51
                          ]),
                          o5($VD11, [
                              2,
                              52
                          ]),
                          o5($VD11, [
                              2,
                              53
                          ]),
                          o5($VU11, [
                              2,
                              40
                          ]),
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              50: 202,
                              51: $Vd11,
                              55: 201,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 323,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              50: 202,
                              51: $Vd11,
                              55: 201,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 324,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          o5($VU11, [
                              2,
                              41
                          ]),
                          {
                              32: [
                                  1,
                                  325
                              ],
                              49: $Vz11
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              50: 202,
                              51: $Vd11,
                              55: 201,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 326,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              50: 202,
                              51: $Vd11,
                              55: 201,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 327,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          o5($VH11, [
                              2,
                              34
                          ]),
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 328,
                              50: 202,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          o5($VH11, [
                              2,
                              35
                          ]),
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              50: 202,
                              51: $Vd11,
                              55: 201,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 329,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          o5($Vw11, [
                              2,
                              38
                          ]),
                          o5($Va21, $V311, {
                              32: [
                                  2,
                                  36
                              ]
                          }),
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              50: 202,
                              51: $Vd11,
                              55: 201,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 330,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              50: 202,
                              51: $Vd11,
                              55: 201,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 331,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              50: 202,
                              51: $Vd11,
                              55: 201,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 332,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              50: 202,
                              51: $Vd11,
                              55: 201,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 333,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              50: 202,
                              51: $Vd11,
                              55: 201,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 334,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              50: 202,
                              51: $Vd11,
                              55: 201,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 335,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              50: 202,
                              51: $Vd11,
                              55: 201,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 336,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              50: 202,
                              51: $Vd11,
                              55: 201,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 337,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              50: 202,
                              51: $Vd11,
                              55: 201,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 338,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              50: 202,
                              51: $Vd11,
                              55: 201,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 339,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              50: 202,
                              51: $Vd11,
                              55: 340,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              50: 202,
                              51: $Vd11,
                              55: 341,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              50: 202,
                              51: $Vd11,
                              55: 342,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              36: [
                                  1,
                                  343
                              ],
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              50: 202,
                              51: $Vd11,
                              55: 201,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 200,
                              103: 344,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 286,
                              50: 202,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              109: 32,
                              110: 31,
                              124: 345,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          o5($V611, [
                              2,
                              108
                          ]),
                          o5($Vw11, [
                              2,
                              117
                          ]),
                          o5($Vw11, [
                              2,
                              119
                          ]),
                          o5($Vw11, [
                              2,
                              115
                          ], {
                              34: [
                                  1,
                                  346
                              ]
                          }),
                          o5($VR2, [
                              2,
                              135
                          ], {
                              92: [
                                  1,
                                  347
                              ]
                          }),
                          {
                              36: [
                                  1,
                                  348
                              ]
                          },
                          o5($VR2, [
                              2,
                              139
                          ]),
                          o5([
                              32,
                              49,
                              106
                          ], [
                              2,
                              212
                          ]),
                          o5($V$2, [
                              2,
                              173
                          ]),
                          o5($V111, [
                              2,
                              143
                          ]),
                          {
                              19: 205,
                              20: 81,
                              21: $VM2,
                              25: $VN2,
                              26: $VO2,
                              130: 349
                          },
                          {
                              10: [
                                  1,
                                  350
                              ]
                          },
                          {
                              21: $V63,
                              47: $V73,
                              50: 209,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2,
                              172: [
                                  1,
                                  351
                              ],
                              173: 293
                          },
                          o5($V211, [
                              2,
                              204
                          ]),
                          o5($V821, [
                              2,
                              206
                          ]),
                          {
                              49: [
                                  1,
                                  353
                              ],
                              106: [
                                  1,
                                  352
                              ]
                          },
                          o5($VR2, [
                              2,
                              208
                          ]),
                          o5($VR2, [
                              2,
                              210
                          ], {
                              34: [
                                  1,
                                  354
                              ]
                          }),
                          o5($V03, [
                              2,
                              14
                          ]),
                          o5($Vy11, [
                              2,
                              224
                          ]),
                          o5($VA11, [
                              2,
                              104
                          ]),
                          {
                              32: [
                                  1,
                                  355
                              ],
                              49: $Vz11
                          },
                          {
                              32: [
                                  1,
                                  356
                              ],
                              49: $Vz11
                          },
                          o5($Vy11, [
                              2,
                              239
                          ]),
                          {
                              32: [
                                  1,
                                  357
                              ]
                          },
                          o5($Vb21, [
                              2,
                              236
                          ], {
                              49: $Vz11
                          }),
                          {
                              19: 358,
                              20: 81,
                              21: $VM2,
                              25: $VN2,
                              26: $VO2
                          },
                          o5($VS2, $VY2, {
                              136: 108,
                              131: 109,
                              120: $V93,
                              121: $Va3,
                              132: $Vd2,
                              133: $Ve2,
                              134: $Vf2,
                              135: $Vg2,
                              137: $Vh2,
                              138: $Vi2,
                              139: $Vj2,
                              140: $Vk2
                          }),
                          {
                              30: [
                                  1,
                                  359
                              ]
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              31: 304,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 151,
                              50: 159,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              106: [
                                  2,
                                  247
                              ],
                              109: 32,
                              110: 31,
                              115: 305,
                              120: $V93,
                              121: $Va3,
                              125: $V921,
                              126: 30,
                              127: 34,
                              128: $Vc3,
                              131: 35,
                              132: $Vd2,
                              133: $Ve2,
                              134: $Vf2,
                              135: $Vg2,
                              136: 33,
                              137: $Vh2,
                              138: $Vi2,
                              139: $Vj2,
                              140: $Vk2,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2,
                              192: 362,
                              200: 360,
                              201: 361
                          },
                          o5($Vc21, [
                              2,
                              244
                          ]),
                          o5($Vc21, [
                              2,
                              245
                          ]),
                          o5($Vy11, [
                              2,
                              253
                          ]),
                          o5($VA11, [
                              2,
                              91
                          ]),
                          {
                              23: [
                                  1,
                                  363
                              ],
                              49: $Vz11
                          },
                          o5($VF11, [
                              2,
                              87
                          ], {
                              86: $VG11
                          }),
                          {
                              36: [
                                  1,
                                  364
                              ]
                          },
                          {
                              36: [
                                  2,
                                  30
                              ],
                              49: $Vz11
                          },
                          o5($VH11, [
                              2,
                              27
                          ]),
                          o5($VH11, [
                              2,
                              33
                          ]),
                          o5($VH11, $V411, {
                              30: [
                                  1,
                                  365
                              ]
                          }),
                          {
                              32: [
                                  1,
                                  366
                              ],
                              49: [
                                  1,
                                  367
                              ]
                          },
                          {
                              32: [
                                  1,
                                  368
                              ]
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              32: [
                                  2,
                                  46
                              ],
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: [
                                  1,
                                  370
                              ],
                              48: 369,
                              50: 202,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          o5($VJ11, [
                              2,
                              85
                          ], {
                              84: $VK11
                          }),
                          o5($VL11, [
                              2,
                              83
                          ], {
                              82: $VM11
                          }),
                          o5($VH11, [
                              2,
                              23
                          ]),
                          o5($VN11, [
                              2,
                              81
                          ], {
                              80: $VO11
                          }),
                          o5($VP11, [
                              2,
                              79
                          ], {
                              78: $VQ11
                          }),
                          o5($Vw11, [
                              2,
                              39
                          ]),
                          o5($VR11, [
                              2,
                              77
                          ], {
                              75: $VS11,
                              76: $VT11
                          }),
                          o5($VV11, [
                              2,
                              74
                          ], {
                              70: $VW11,
                              71: $VX11,
                              72: $VY11,
                              73: $VZ11
                          }),
                          o5($VV11, [
                              2,
                              75
                          ], {
                              70: $VW11,
                              71: $VX11,
                              72: $VY11,
                              73: $VZ11
                          }),
                          o5($V_11, [
                              2,
                              69
                          ], {
                              67: $V$11,
                              68: $V021
                          }),
                          o5($V_11, [
                              2,
                              70
                          ], {
                              67: $V$11,
                              68: $V021
                          }),
                          o5($V_11, [
                              2,
                              71
                          ], {
                              67: $V$11,
                              68: $V021
                          }),
                          o5($V_11, [
                              2,
                              72
                          ], {
                              67: $V$11,
                              68: $V021
                          }),
                          o5($V121, [
                              2,
                              66
                          ], {
                              57: $V221,
                              58: $V321
                          }),
                          o5($V121, [
                              2,
                              67
                          ], {
                              57: $V221,
                              58: $V321
                          }),
                          o5($V421, [
                              2,
                              63
                          ], {
                              62: $V521,
                              63: $V621,
                              64: $V721
                          }),
                          o5($V421, [
                              2,
                              64
                          ], {
                              62: $V521,
                              63: $V621,
                              64: $V721
                          }),
                          o5($VB11, [
                              2,
                              59
                          ]),
                          o5($VB11, [
                              2,
                              60
                          ]),
                          o5($VB11, [
                              2,
                              61
                          ]),
                          o5($VR2, [
                              2,
                              128
                          ], {
                              92: [
                                  1,
                                  371
                              ]
                          }),
                          {
                              36: [
                                  1,
                                  372
                              ]
                          },
                          o5($VR2, [
                              2,
                              132
                          ]),
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              50: 202,
                              51: $Vd11,
                              55: 201,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 200,
                              103: 373,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 286,
                              50: 202,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              109: 32,
                              110: 31,
                              124: 374,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          o5($VR2, [
                              2,
                              136
                          ], {
                              92: [
                                  1,
                                  375
                              ]
                          }),
                          o5($Vw11, [
                              2,
                              145
                          ]),
                          o5($Vw11, [
                              2,
                              147
                          ]),
                          o5($V211, [
                              2,
                              203
                          ]),
                          o5($V821, [
                              2,
                              207
                          ]),
                          {
                              19: 296,
                              20: 81,
                              21: $VM2,
                              25: $VN2,
                              26: $VO2,
                              175: 376
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              50: 202,
                              51: $Vd11,
                              55: 201,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 200,
                              103: 377,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              31: 137,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 151,
                              50: 159,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              104: 135,
                              105: 150,
                              106: $Vi11,
                              107: 16,
                              108: $V83,
                              109: 32,
                              110: 31,
                              111: 23,
                              112: 25,
                              113: 26,
                              115: 27,
                              120: $V93,
                              121: $Va3,
                              123: 24,
                              125: $Vb3,
                              126: 30,
                              127: 34,
                              128: $Vc3,
                              131: 35,
                              132: $Vd2,
                              133: $Ve2,
                              134: $Vf2,
                              135: $Vg2,
                              136: 33,
                              137: $Vh2,
                              138: $Vi2,
                              139: $Vj2,
                              140: $Vk2,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2,
                              170: $Vj11,
                              176: 128,
                              177: 379,
                              178: 125,
                              179: 126,
                              180: 129,
                              181: 130,
                              182: 131,
                              183: 132,
                              184: 133,
                              185: 134,
                              189: $Vk11,
                              190: 378,
                              193: $Vl11,
                              194: $Vm11,
                              195: $Vn11,
                              196: $Vo11,
                              197: $Vp11,
                              198: $Vq11,
                              202: $Vr11,
                              203: $Vs11,
                              204: $Vt11,
                              205: $Vu11,
                              206: $Vv11
                          },
                          {
                              170: $Vj11,
                              178: 380
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              31: 137,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 151,
                              50: 159,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              104: 135,
                              105: 150,
                              106: $Vi11,
                              107: 16,
                              108: $V83,
                              109: 32,
                              110: 31,
                              111: 23,
                              112: 25,
                              113: 26,
                              115: 27,
                              120: $V93,
                              121: $Va3,
                              123: 24,
                              125: $Vb3,
                              126: 30,
                              127: 34,
                              128: $Vc3,
                              131: 35,
                              132: $Vd2,
                              133: $Ve2,
                              134: $Vf2,
                              135: $Vg2,
                              136: 33,
                              137: $Vh2,
                              138: $Vi2,
                              139: $Vj2,
                              140: $Vk2,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2,
                              170: $VQ2,
                              176: 128,
                              179: 383,
                              180: 129,
                              181: 130,
                              182: 131,
                              183: 132,
                              184: 133,
                              185: 134,
                              187: 381,
                              188: 382,
                              189: $Vk11,
                              193: $Vl11,
                              194: $Vm11,
                              195: $Vn11,
                              196: $Vo11,
                              197: $Vp11,
                              198: $Vq11,
                              202: $Vr11,
                              203: $Vs11,
                              204: $Vt11,
                              205: $Vu11,
                              206: $Vv11
                          },
                          {
                              92: [
                                  1,
                                  384
                              ]
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              31: 385,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 151,
                              50: 202,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              32: [
                                  1,
                                  386
                              ]
                          },
                          {
                              106: [
                                  1,
                                  387
                              ]
                          },
                          {
                              106: [
                                  2,
                                  246
                              ]
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 388,
                              50: 202,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          o5($VH11, [
                              2,
                              25
                          ]),
                          o5($VU11, [
                              2,
                              49
                          ]),
                          o5($VH11, [
                              2,
                              43
                          ]),
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 389,
                              50: 202,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          o5($VH11, [
                              2,
                              44
                          ]),
                          o5($Vw11, [
                              2,
                              47
                          ]),
                          o5($Va21, $V311, {
                              32: [
                                  2,
                                  45
                              ]
                          }),
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 286,
                              50: 202,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              109: 32,
                              110: 31,
                              124: 390,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          o5($VR2, [
                              2,
                              129
                          ], {
                              92: [
                                  1,
                                  391
                              ]
                          }),
                          {
                              36: [
                                  1,
                                  392
                              ]
                          },
                          o5($VR2, [
                              2,
                              137
                          ]),
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 286,
                              50: 202,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              109: 32,
                              110: 31,
                              124: 393,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          o5($VR2, [
                              2,
                              209
                          ]),
                          {
                              36: [
                                  1,
                                  394
                              ]
                          },
                          o5($Vy11, [
                              2,
                              233
                          ]),
                          o5($Vx11, [
                              2,
                              235
                          ], {
                              191: [
                                  1,
                                  395
                              ]
                          }),
                          o5($Vy11, [
                              2,
                              238
                          ]),
                          o5($Vy11, [
                              2,
                              241
                          ]),
                          o5($Vy11, [
                              2,
                              225
                          ]),
                          o5($Vy11, [
                              2,
                              226
                          ]),
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 286,
                              50: 202,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              109: 32,
                              110: 31,
                              124: 396,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          {
                              32: [
                                  1,
                                  397
                              ],
                              49: $Vz11
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              31: 137,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 151,
                              50: 159,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              104: 135,
                              105: 150,
                              106: $Vi11,
                              107: 16,
                              108: $V83,
                              109: 32,
                              110: 31,
                              111: 23,
                              112: 25,
                              113: 26,
                              115: 27,
                              120: $V93,
                              121: $Va3,
                              123: 24,
                              125: $Vb3,
                              126: 30,
                              127: 34,
                              128: $Vc3,
                              131: 35,
                              132: $Vd2,
                              133: $Ve2,
                              134: $Vf2,
                              135: $Vg2,
                              136: 33,
                              137: $Vh2,
                              138: $Vi2,
                              139: $Vj2,
                              140: $Vk2,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2,
                              170: $VQ2,
                              176: 128,
                              179: 383,
                              180: 129,
                              181: 130,
                              182: 131,
                              183: 132,
                              184: 133,
                              185: 134,
                              187: 398,
                              188: 382,
                              189: $Vk11,
                              193: $Vl11,
                              194: $Vm11,
                              195: $Vn11,
                              196: $Vo11,
                              197: $Vp11,
                              198: $Vq11,
                              202: $Vr11,
                              203: $Vs11,
                              204: $Vt11,
                              205: $Vu11,
                              206: $Vv11
                          },
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              31: 399,
                              32: [
                                  2,
                                  248
                              ],
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 151,
                              50: 202,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              109: 32,
                              110: 31,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          o5($VA11, [
                              2,
                              89
                          ]),
                          o5($Vw11, [
                              2,
                              48
                          ]),
                          o5($VR2, [
                              2,
                              130
                          ]),
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 286,
                              50: 202,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              109: 32,
                              110: 31,
                              124: 400,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2
                          },
                          o5($Vw11, [
                              2,
                              116
                          ]),
                          o5($VR2, [
                              2,
                              138
                          ]),
                          o5($VR2, [
                              2,
                              211
                          ]),
                          {
                              10: $V711,
                              20: 168,
                              21: $V63,
                              25: $VN2,
                              26: $VO2,
                              27: 161,
                              28: $V811,
                              29: $V911,
                              30: $Va11,
                              31: 137,
                              33: 155,
                              37: 162,
                              39: $Vb11,
                              40: $Vc11,
                              41: 173,
                              42: 175,
                              44: 177,
                              45: 178,
                              46: 180,
                              47: $V73,
                              48: 151,
                              50: 159,
                              51: $Vd11,
                              55: 153,
                              56: 158,
                              57: $Ve11,
                              58: $Vf11,
                              59: $Vg11,
                              60: $Vh11,
                              61: 186,
                              65: 185,
                              66: 184,
                              69: 183,
                              74: 181,
                              77: 179,
                              79: 176,
                              81: 174,
                              83: 167,
                              85: 160,
                              87: 154,
                              89: 152,
                              104: 135,
                              105: 150,
                              106: $Vi11,
                              107: 16,
                              108: $V83,
                              109: 32,
                              110: 31,
                              111: 23,
                              112: 25,
                              113: 26,
                              115: 27,
                              120: $V93,
                              121: $Va3,
                              123: 24,
                              125: $Vb3,
                              126: 30,
                              127: 34,
                              128: $Vc3,
                              131: 35,
                              132: $Vd2,
                              133: $Ve2,
                              134: $Vf2,
                              135: $Vg2,
                              136: 33,
                              137: $Vh2,
                              138: $Vi2,
                              139: $Vj2,
                              140: $Vk2,
                              141: 36,
                              142: 51,
                              143: 52,
                              144: $Vl2,
                              145: $Vm2,
                              146: $Vn2,
                              147: $Vo2,
                              148: $Vp2,
                              149: $Vq2,
                              150: $Vr2,
                              151: $Vs2,
                              152: $Vt2,
                              153: $Vu2,
                              154: $Vv2,
                              155: $Vw2,
                              156: $Vx2,
                              157: $Vy2,
                              158: $Vz2,
                              159: $VA2,
                              160: $VB2,
                              161: $VC2,
                              162: $VD2,
                              163: $VE2,
                              164: $VF2,
                              165: $VG2,
                              166: $VH2,
                              167: $VI2,
                              168: $VJ2,
                              169: $VK2,
                              170: $Vj11,
                              176: 128,
                              177: 401,
                              178: 125,
                              179: 126,
                              180: 129,
                              181: 130,
                              182: 131,
                              183: 132,
                              184: 133,
                              185: 134,
                              189: $Vk11,
                              193: $Vl11,
                              194: $Vm11,
                              195: $Vn11,
                              196: $Vo11,
                              197: $Vp11,
                              198: $Vq11,
                              202: $Vr11,
                              203: $Vs11,
                              204: $Vt11,
                              205: $Vu11,
                              206: $Vv11
                          },
                          o5($Vb21, [
                              2,
                              237
                          ]),
                          {
                              106: [
                                  1,
                                  402
                              ]
                          },
                          o5($Vy11, [
                              2,
                              243
                          ]),
                          {
                              32: [
                                  2,
                                  249
                              ],
                              49: $Vz11
                          },
                          o5($VR2, [
                              2,
                              131
                          ]),
                          o5($Vy11, [
                              2,
                              234
                          ]),
                          o5($Vy11, [
                              2,
                              242
                          ])
                      ],
                      defaultActions: {
                          5: [
                              2,
                              1
                          ],
                          200: [
                              2,
                              105
                          ],
                          362: [
                              2,
                              246
                          ]
                      },
                      parseError: function parseError1(str1, hash3) {
                          if (hash3.recoverable) this.trace(str1);
                          else throw new Error(str1);
                      },
                      parse: function parse1(input1) {
                          var self1 = this, stack1 = [
                              0
                          ], tstack1 = [], vstack1 = [
                              null
                          ], lstack1 = [], table1 = this.table, yytext1 = "", yylineno1 = 0, yyleng1 = 0, recovering1 = 0, TERROR1 = 2, EOF1 = 1;
                          var args1 = lstack1.slice.call(arguments, 1);
                          var lexer1 = Object.create(this.lexer);
                          var sharedState1 = {
                              yy: {}
                          };
                          for(var k1 in this.yy)if (Object.prototype.hasOwnProperty.call(this.yy, k1)) sharedState1.yy[k1] = this.yy[k1];
                          lexer1.setInput(input1, sharedState1.yy);
                          sharedState1.yy.lexer = lexer1;
                          sharedState1.yy.parser = this;
                          if (typeof lexer1.yylloc == "undefined") lexer1.yylloc = {};
                          var yyloc1 = lexer1.yylloc;
                          lstack1.push(yyloc1);
                          var ranges1 = lexer1.options && lexer1.options.ranges;
                          if (typeof sharedState1.yy.parseError === "function") this.parseError = sharedState1.yy.parseError;
                          else this.parseError = Object.getPrototypeOf(this).parseError;
                          function popStack1(n3) {
                              stack1.length = stack1.length - 2 * n3;
                              vstack1.length = vstack1.length - n3;
                              lstack1.length = lstack1.length - n3;
                          }
                          function lex1() {
                              var token1;
                              token1 = lexer1.lex() || EOF1;
                              if (typeof token1 !== "number") token1 = self1.symbols_[token1] || token1;
                              return token1;
                          }
                          var symbol1, preErrorSymbol1, state1, action1, a3, r1, yyval1 = {}, p6, len1, newState1, expected1;
                          while(true){
                              state1 = stack1[stack1.length - 1];
                              if (this.defaultActions[state1]) action1 = this.defaultActions[state1];
                              else {
                                  if (symbol1 === null || typeof symbol1 == "undefined") symbol1 = lex1();
                                  action1 = table1[state1] && table1[state1][symbol1];
                              }
                              if (typeof action1 === "undefined" || !action1.length || !action1[0]) {
                                  var errStr1 = "";
                                  expected1 = [];
                                  for(p6 in table1[state1])if (this.terminals_[p6] && p6 > TERROR1) expected1.push("'" + this.terminals_[p6] + "'");
                                  if (lexer1.showPosition) errStr1 = "Parse error on line " + (yylineno1 + 1) + ":\n" + lexer1.showPosition() + "\nExpecting " + expected1.join(", ") + ", got '" + (this.terminals_[symbol1] || symbol1) + "'";
                                  else errStr1 = "Parse error on line " + (yylineno1 + 1) + ": Unexpected " + (symbol1 == EOF1 ? "end of input" : "'" + (this.terminals_[symbol1] || symbol1) + "'");
                                  this.parseError(errStr1, {
                                      text: lexer1.match,
                                      token: this.terminals_[symbol1] || symbol1,
                                      line: lexer1.yylineno,
                                      loc: yyloc1,
                                      expected: expected1
                                  });
                              }
                              if (action1[0] instanceof Array && action1.length > 1) throw new Error("Parse Error: multiple actions possible at state: " + state1 + ", token: " + symbol1);
                              switch(action1[0]){
                                  case 1:
                                      stack1.push(symbol1);
                                      vstack1.push(lexer1.yytext);
                                      lstack1.push(lexer1.yylloc);
                                      stack1.push(action1[1]);
                                      symbol1 = null;
                                      if (!preErrorSymbol1) {
                                          yyleng1 = lexer1.yyleng;
                                          yytext1 = lexer1.yytext;
                                          yylineno1 = lexer1.yylineno;
                                          yyloc1 = lexer1.yylloc;
                                          if (recovering1 > 0) recovering1--;
                                      } else {
                                          symbol1 = preErrorSymbol1;
                                          preErrorSymbol1 = null;
                                      }
                                      break;
                                  case 2:
                                      len1 = this.productions_[action1[1]][1];
                                      yyval1.$ = vstack1[vstack1.length - len1];
                                      yyval1._$ = {
                                          first_line: lstack1[lstack1.length - (len1 || 1)].first_line,
                                          last_line: lstack1[lstack1.length - 1].last_line,
                                          first_column: lstack1[lstack1.length - (len1 || 1)].first_column,
                                          last_column: lstack1[lstack1.length - 1].last_column
                                      };
                                      if (ranges1) yyval1._$.range = [
                                          lstack1[lstack1.length - (len1 || 1)].range[0],
                                          lstack1[lstack1.length - 1].range[1]
                                      ];
                                      r1 = this.performAction.apply(yyval1, [
                                          yytext1,
                                          yyleng1,
                                          yylineno1,
                                          sharedState1.yy,
                                          action1[1],
                                          vstack1,
                                          lstack1
                                      ].concat(args1));
                                      if (typeof r1 !== "undefined") return r1;
                                      if (len1) {
                                          stack1 = stack1.slice(0, -1 * len1 * 2);
                                          vstack1 = vstack1.slice(0, -1 * len1);
                                          lstack1 = lstack1.slice(0, -1 * len1);
                                      }
                                      stack1.push(this.productions_[action1[1]][0]);
                                      vstack1.push(yyval1.$);
                                      lstack1.push(yyval1._$);
                                      newState1 = table1[stack1[stack1.length - 2]][stack1[stack1.length - 1]];
                                      stack1.push(newState1);
                                      break;
                                  case 3:
                                      return true;
                              }
                          }
                          return true;
                      }
                  };
                  function Parser1() {
                      this.yy = {};
                  }
                  Parser1.prototype = parser1;
                  parser1.Parser = Parser1;
                  return new Parser1();
              }();
              if (typeof commonjsRequire !== "undefined" && true) {
                  exports.parser = parser;
                  exports.Parser = parser.Parser;
                  exports.parse = function() {
                      return parser.parse.apply(parser, arguments);
                  };
              }
              /* generated by jison-lex 0.3.4 */ var lexer = function() {
                  var lexer1 = {
                      EOF: 1,
                      parseError: function parseError1(str1, hash3) {
                          if (this.yy.parser) this.yy.parser.parseError(str1, hash3);
                          else throw new Error(str1);
                      },
                      // resets the lexer, sets new input
                      setInput: function setInput1(input1, yy1) {
                          this.yy = yy1 || this.yy || {};
                          this._input = input1;
                          this._more = this._backtrack = this.done = false;
                          this.yylineno = this.yyleng = 0;
                          this.yytext = this.matched = this.match = "";
                          this.conditionStack = [
                              "INITIAL"
                          ];
                          this.yylloc = {
                              first_line: 1,
                              first_column: 0,
                              last_line: 1,
                              last_column: 0
                          };
                          if (this.options.ranges) this.yylloc.range = [
                              0,
                              0
                          ];
                          this.offset = 0;
                          return this;
                      },
                      // consumes and returns one char from the input
                      input: function input1() {
                          var ch1 = this._input[0];
                          this.yytext += ch1;
                          this.yyleng++;
                          this.offset++;
                          this.match += ch1;
                          this.matched += ch1;
                          var lines1 = ch1.match(/(?:\r\n?|\n).*/g);
                          if (lines1) {
                              this.yylineno++;
                              this.yylloc.last_line++;
                          } else this.yylloc.last_column++;
                          if (this.options.ranges) this.yylloc.range[1]++;
                          this._input = this._input.slice(1);
                          return ch1;
                      },
                      // unshifts one char (or a string) into the input
                      unput: function unput1(ch1) {
                          var len1 = ch1.length;
                          var lines1 = ch1.split(/(?:\r\n?|\n)/g);
                          this._input = ch1 + this._input;
                          this.yytext = this.yytext.substr(0, this.yytext.length - len1); //this.yyleng -= len;
                          this.offset -= len1;
                          var oldLines1 = this.match.split(/(?:\r\n?|\n)/g);
                          this.match = this.match.substr(0, this.match.length - 1);
                          this.matched = this.matched.substr(0, this.matched.length - 1);
                          if (lines1.length - 1) this.yylineno -= lines1.length - 1;
                          var r1 = this.yylloc.range;
                          this.yylloc = {
                              first_line: this.yylloc.first_line,
                              last_line: this.yylineno + 1,
                              first_column: this.yylloc.first_column,
                              last_column: lines1 ? (lines1.length === oldLines1.length ? this.yylloc.first_column : 0) + oldLines1[oldLines1.length - lines1.length].length - lines1[0].length : this.yylloc.first_column - len1
                          };
                          if (this.options.ranges) this.yylloc.range = [
                              r1[0],
                              r1[0] + this.yyleng - len1
                          ];
                          this.yyleng = this.yytext.length;
                          return this;
                      },
                      // When called from action, caches matched text and appends it on next action
                      more: function more1() {
                          this._more = true;
                          return this;
                      },
                      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
                      reject: function reject1() {
                          if (this.options.backtrack_lexer) this._backtrack = true;
                          else return this.parseError("Lexical error on line " + (this.yylineno + 1) + ". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n" + this.showPosition(), {
                              text: "",
                              token: null,
                              line: this.yylineno
                          });
                          return this;
                      },
                      // retain first n characters of the match
                      less: function less1(n3) {
                          this.unput(this.match.slice(n3));
                      },
                      // displays already matched input, i.e. for error messages
                      pastInput: function pastInput1() {
                          var past1 = this.matched.substr(0, this.matched.length - this.match.length);
                          return (past1.length > 20 ? "..." : "") + past1.substr(-20).replace(/\n/g, "");
                      },
                      // displays upcoming input, i.e. for error messages
                      upcomingInput: function upcomingInput1() {
                          var next1 = this.match;
                          if (next1.length < 20) next1 += this._input.substr(0, 20 - next1.length);
                          return (next1.substr(0, 20) + (next1.length > 20 ? "..." : "")).replace(/\n/g, "");
                      },
                      // displays the character position where the lexing error occurred, i.e. for error messages
                      showPosition: function showPosition1() {
                          var pre1 = this.pastInput();
                          var c4 = new Array(pre1.length + 1).join("-");
                          return pre1 + this.upcomingInput() + "\n" + c4 + "^";
                      },
                      // test the lexed token: return FALSE when not a match, otherwise return token
                      test_match: function test_match1(match1, indexed_rule1) {
                          var token1, lines1, backup1;
                          if (this.options.backtrack_lexer) {
                              // save context
                              backup1 = {
                                  yylineno: this.yylineno,
                                  yylloc: {
                                      first_line: this.yylloc.first_line,
                                      last_line: this.last_line,
                                      first_column: this.yylloc.first_column,
                                      last_column: this.yylloc.last_column
                                  },
                                  yytext: this.yytext,
                                  match: this.match,
                                  matches: this.matches,
                                  matched: this.matched,
                                  yyleng: this.yyleng,
                                  offset: this.offset,
                                  _more: this._more,
                                  _input: this._input,
                                  yy: this.yy,
                                  conditionStack: this.conditionStack.slice(0),
                                  done: this.done
                              };
                              if (this.options.ranges) backup1.yylloc.range = this.yylloc.range.slice(0);
                          }
                          lines1 = match1[0].match(/(?:\r\n?|\n).*/g);
                          if (lines1) this.yylineno += lines1.length;
                          this.yylloc = {
                              first_line: this.yylloc.last_line,
                              last_line: this.yylineno + 1,
                              first_column: this.yylloc.last_column,
                              last_column: lines1 ? lines1[lines1.length - 1].length - lines1[lines1.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match1[0].length
                          };
                          this.yytext += match1[0];
                          this.match += match1[0];
                          this.matches = match1;
                          this.yyleng = this.yytext.length;
                          if (this.options.ranges) this.yylloc.range = [
                              this.offset,
                              this.offset += this.yyleng
                          ];
                          this._more = false;
                          this._backtrack = false;
                          this._input = this._input.slice(match1[0].length);
                          this.matched += match1[0];
                          token1 = this.performAction.call(this, this.yy, this, indexed_rule1, this.conditionStack[this.conditionStack.length - 1]);
                          if (this.done && this._input) this.done = false;
                          if (token1) return token1;
                          else if (this._backtrack) {
                              // recover context
                              for(var k1 in backup1)this[k1] = backup1[k1];
                              return false; // rule action called reject() implying the next rule should be tested instead.
                          }
                          return false;
                      },
                      // return next match in input
                      next: function next1() {
                          if (this.done) return this.EOF;
                          if (!this._input) this.done = true;
                          var token1, match1, tempMatch1, index3;
                          if (!this._more) {
                              this.yytext = "";
                              this.match = "";
                          }
                          var rules1 = this._currentRules();
                          for(var i3 = 0; i3 < rules1.length; i3++){
                              tempMatch1 = this._input.match(this.rules[rules1[i3]]);
                              if (tempMatch1 && (!match1 || tempMatch1[0].length > match1[0].length)) {
                                  match1 = tempMatch1;
                                  index3 = i3;
                                  if (this.options.backtrack_lexer) {
                                      token1 = this.test_match(tempMatch1, rules1[i3]);
                                      if (token1 !== false) return token1;
                                      else if (this._backtrack) {
                                          match1 = false;
                                          continue; // rule action called reject() implying a rule MISmatch.
                                      } else // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                      return false;
                                  } else if (!this.options.flex) break;
                              }
                          }
                          if (match1) {
                              token1 = this.test_match(match1, rules1[index3]);
                              if (token1 !== false) return token1;
                               // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                              return false;
                          }
                          if (this._input === "") return this.EOF;
                          else return this.parseError("Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\n" + this.showPosition(), {
                              text: "",
                              token: null,
                              line: this.yylineno
                          });
                      },
                      // return next match that has a token
                      lex: function lex1() {
                          var r1 = this.next();
                          if (r1) return r1;
                          else return this.lex();
                      },
                      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
                      begin: function begin1(condition1) {
                          this.conditionStack.push(condition1);
                      },
                      // pop the previously active lexer condition state off the condition stack
                      popState: function popState1() {
                          var n3 = this.conditionStack.length - 1;
                          if (n3 > 0) return this.conditionStack.pop();
                          else return this.conditionStack[0];
                      },
                      // produce the lexer rule set which is active for the currently active lexer condition state
                      _currentRules: function _currentRules1() {
                          if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                          else return this.conditions["INITIAL"].rules;
                      },
                      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
                      topState: function topState1(n3) {
                          n3 = this.conditionStack.length - 1 - Math.abs(n3 || 0);
                          if (n3 >= 0) return this.conditionStack[n3];
                          else return "INITIAL";
                      },
                      // alias for begin(condition)
                      pushState: function pushState1(condition1) {
                          this.begin(condition1);
                      },
                      // return the number of states currently on the stack
                      stateStackSize: function stateStackSize1() {
                          return this.conditionStack.length;
                      },
                      options: {
                          "moduleName": ""
                      },
                      performAction: function anonymous1(yy1, yy_1, $avoiding_name_collisions1, YY_START1) {
                          var YYSTATE1 = YY_START1;
                          switch($avoiding_name_collisions1){
                              case 0:
                                  break;
                              case 1:
                                  break;
                              case 2:
                                  this.begin("PP");
                                  return "VERSION";
                              case 3:
                                  this.begin("PP");
                                  return "EXTENSION";
                              case 4:
                                  /* Eat characters until the first digit is
                   * encountered
                   */ var ptr1 = 0;
                                  while(yy_1.yytext.slice(0, 1) < "0" || yy_1.yytext.slice(0, 1) > "9")ptr1++;
                                  /* Subtract one from the line number because
                   * yy_.yylineno is zero-based instead of
                   * one-based.
                   */ yy_1.yylineno = parseInt(yy_1.yytext.slice(0, 1), 10) - 1;
                                  yy_1.yylloc.source = parseInt(yy_1.yytext.slice(0), 10);
                                  break;
                              case 5:
                                  /* Eat characters until the first digit is
                   * encountered
                   */ var ptr1 = 0;
                                  while(yy_1.yytext.slice(0, 1) < "0" || yy_1.yytext.slice(0, 1) > "9")ptr1++;
                                  /* Subtract one from the line number because
                   * yy_.yylineno is zero-based instead of
                   * one-based.
                   */ yy_1.yylineno = parseInt(yy_1.yytext.slice(0, 1), 10) - 1;
                                  break;
                              case 6:
                                  this.begin("PP");
                                  return "PRAGMA_DEBUG_ON";
                              case 7:
                                  this.begin("PP");
                                  return "PRAGMA_DEBUG_OFF";
                              case 8:
                                  this.begin("PP");
                                  return "PRAGMA_OPTIMIZE_ON";
                              case 9:
                                  this.begin("PP");
                                  return "PRAGMA_OPTIMIZE_OFF";
                              case 10:
                                  this.begin("PP");
                                  return "PRAGMA_INVARIANT_ALL";
                              case 11:
                                  this.begin("PRAGMA");
                                  break;
                              case 12:
                                  this.begin("INITIAL");
                                  yy_1.yylineno++;
                                  yycolumn = 0;
                                  break;
                              case 13:
                                  break;
                              case 14:
                                  break;
                              case 15:
                                  break;
                              case 16:
                                  return ":";
                              case 17:
                                  yylval.identifier = strdup(yy_1.yytext);
                                  return "IDENTIFIER";
                              case 18:
                                  yylval.n = parseInt(yy_1.yytext);
                                  return "INTCONSTANT";
                              case 19:
                                  this.begin("INITIAL");
                                  yy_1.yylineno++;
                                  yycolumn = 0;
                                  return "EOL";
                              case 20:
                                  break;
                              case 21:
                                  return "ATTRIBUTE";
                              case 22:
                                  return "CONST";
                              case 23:
                                  return "BOOL";
                              case 24:
                                  return "FLOAT";
                              case 25:
                                  return "INT";
                              case 26:
                                  return "BREAK";
                              case 27:
                                  return "CONTINUE";
                              case 28:
                                  return "DO";
                              case 29:
                                  return "WHILE";
                              case 30:
                                  return "ELSE";
                              case 31:
                                  return "FOR";
                              case 32:
                                  return "IF";
                              case 33:
                                  return "DISCARD";
                              case 34:
                                  return "RETURN";
                              case 35:
                                  return "DEBUGGER";
                              case 36:
                                  return "BVEC2";
                              case 37:
                                  return "BVEC3";
                              case 38:
                                  return "BVEC4";
                              case 39:
                                  return "IVEC2";
                              case 40:
                                  return "IVEC3";
                              case 41:
                                  return "IVEC4";
                              case 42:
                                  return "VEC2";
                              case 43:
                                  return "VEC3";
                              case 44:
                                  return "VEC4";
                              case 45:
                                  return "MAT2X2";
                              case 46:
                                  return "MAT3X3";
                              case 47:
                                  return "MAT4X4";
                              case 48:
                                  return "IN";
                              case 49:
                                  return "OUT";
                              case 50:
                                  return "INOUT";
                              case 51:
                                  return "UNIFORM";
                              case 52:
                                  return "VARYING";
                              case 53:
                                  return "INVARIANT";
                              case 54:
                                  return "FLAT";
                              case 55:
                                  return "SMOOTH";
                              case 56:
                                  return "SAMPLER1D";
                              case 57:
                                  return "SAMPLER2D";
                              case 58:
                                  return "SAMPLER3D";
                              case 59:
                                  return "SAMPLERCUBE";
                              case 60:
                                  return "SAMPLER1DSHADOW";
                              case 61:
                                  return "SAMPLER2DSHADOW";
                              case 62:
                                  return "STRUCT";
                              case 63:
                                  return "VOID";
                              case 64:
                                  break;
                              case 65:
                                  return "++";
                              case 66:
                                  return "--";
                              case 67:
                                  return "<=";
                              case 68:
                                  return ">=";
                              case 69:
                                  return "==";
                              case 70:
                                  return "!=";
                              case 71:
                                  return "&&";
                              case 72:
                                  return "||";
                              case 73:
                                  return "^^";
                              case 74:
                                  return "<<";
                              case 75:
                                  return ">>";
                              case 76:
                                  return "*=";
                              case 77:
                                  return "/=";
                              case 78:
                                  return "+=";
                              case 79:
                                  return "%=";
                              case 80:
                                  return "<<=";
                              case 81:
                                  return ">>=";
                              case 82:
                                  return "&=";
                              case 83:
                                  return "^=";
                              case 84:
                                  return "|=";
                              case 85:
                                  return "-=";
                              case 86:
                                  this.yylval = parseFloat(yy_1.yytext);
                                  return "FLOATCONSTANT";
                              case 87:
                                  this.yylval = parseFloat(yy_1.yytext);
                                  return "FLOATCONSTANT";
                              case 88:
                                  this.yylval = parseFloat(yy_1.yytext);
                                  return "FLOATCONSTANT";
                              case 89:
                                  this.yylval = parseFloat(yy_1.yytext);
                                  return "FLOATCONSTANT";
                              case 90:
                                  this.yylval = parseFloat(yy_1.yytext);
                                  return "FLOATCONSTANT";
                              case 91:
                                  this.yylval = parseInt(yy_1.yytext + 2, 16);
                                  return "INTCONSTANT";
                              case 92:
                                  this.yylval = parseInt(yy_1.yytext, 8);
                                  return "INTCONSTANT";
                              case 93:
                                  this.yylval = parseInt(yy_1.yytext);
                                  return "INTCONSTANT";
                              case 94:
                                  this.yylval = 1;
                                  return "BOOLCONSTANT";
                              case 95:
                                  this.yylval = 0;
                                  return "BOOLCONSTANT";
                              case 96:
                                  return "ASM";
                              case 97:
                                  return "CLASS";
                              case 98:
                                  return "UNION";
                              case 99:
                                  return "ENUM";
                              case 100:
                                  return "TYPEDEF";
                              case 101:
                                  return "TEMPLATE";
                              case 102:
                                  return "THIS";
                              case 103:
                                  return "PACKED";
                              case 104:
                                  return "GOTO";
                              case 105:
                                  return "SWITCH";
                              case 106:
                                  return "DEFAULT";
                              case 107:
                                  return "INLINE";
                              case 108:
                                  return "NOINLINE";
                              case 109:
                                  return "VOLATILE";
                              case 110:
                                  return "PUBLIC";
                              case 111:
                                  return "STATIC";
                              case 112:
                                  return "EXTERN";
                              case 113:
                                  return "EXTERNAL";
                              case 114:
                                  return "INTERFACE";
                              case 115:
                                  return "LONG";
                              case 116:
                                  return "SHORT";
                              case 117:
                                  return "DOUBLE";
                              case 118:
                                  return "HALF";
                              case 119:
                                  return "FIXED";
                              case 120:
                                  return "UNSIGNED";
                              case 121:
                                  return "INPUT";
                              case 122:
                                  return "OUTPUT";
                              case 123:
                                  return "HVEC2";
                              case 124:
                                  return "HVEC3";
                              case 125:
                                  return "HVEC4";
                              case 126:
                                  return "DVEC2";
                              case 127:
                                  return "DVEC3";
                              case 128:
                                  return "DVEC4";
                              case 129:
                                  return "FVEC2";
                              case 130:
                                  return "FVEC3";
                              case 131:
                                  return "FVEC4";
                              case 132:
                                  return "SAMPLER2DRECT";
                              case 133:
                                  return "SAMPLER3DRECT";
                              case 134:
                                  return "SAMPLER2DRECTSHADOW";
                              case 135:
                                  return "SIZEOF";
                              case 136:
                                  return "CAST";
                              case 137:
                                  return "NAMESPACE";
                              case 138:
                                  return "USING";
                              case 139:
                                  return "LOWP";
                              case 140:
                                  return "MEDIUMP";
                              case 141:
                                  return "HIGHP";
                              case 142:
                                  return "PRECISION";
                              case 143:
                                  yy1.yylval = yy_1.yytext;
                                  return yy1.state.classify_identifier(yy1.state, yy_1.yytext);
                              case 144:
                                  return yy_1.yytext;
                              case 145:
                                  return "EOF";
                          }
                      },
                      rules: [
                          /^(?:[ \r\t]+)/,
                          /^(?:[ \t]*#[ \t]*$)/,
                          /^(?:[ \t]*#[ \t]*version\b)/,
                          /^(?:[ \t]*#[ \t]*extension\b)/,
                          /^(?:(^([ \t]*)([ \t]*))line([ \t]+)((([1-9][0-9]*)|([xX][0-9a-fA-F]+)|([0-7]*)))([ \t]+)((([1-9][0-9]*)|([xX][0-9a-fA-F]+)|([0-7]*)))([ \t]*)$)/,
                          /^(?:(^([ \t]*)([ \t]*))line([ \t]+)((([1-9][0-9]*)|([xX][0-9a-fA-F]+)|([0-7]*)))([ \t]*)$)/,
                          /^(?:([ \t]*)#([ \t]*)pragma([ \t]+)debug([ \t]*)\(([ \t]*)on([ \t]*)\))/,
                          /^(?:([ \t]*)#([ \t]*)pragma([ \t]+)debug([ \t]*)\(([ \t]*)off([ \t]*)\))/,
                          /^(?:([ \t]*)#([ \t]*)pragma([ \t]+)optimize([ \t]*)\(([ \t]*)on([ \t]*)\))/,
                          /^(?:([ \t]*)#([ \t]*)pragma([ \t]+)optimize([ \t]*)\(([ \t]*)off([ \t]*)\))/,
                          /^(?:([ \t]*)#([ \t]*)pragma([ \t]+)STDGL([ \t]+)invariant([ \t]*)\(([ \t]*)all([ \t]*)\))/,
                          /^(?:([ \t]*)#([ \t]*)pragma([ \t]+))/,
                          /^(?:[\n])/,
                          /^(?:.)/,
                          /^(?:\/\/[^\n]*)/,
                          /^(?:[ \t\r]*)/,
                          /^(?::)/,
                          /^(?:[_a-zA-Z][_a-zA-Z0-9]*)/,
                          /^(?:[1-9][0-9]*)/,
                          /^(?:[\n])/,
                          /^(?:[\n])/,
                          /^(?:attribute\b)/,
                          /^(?:const\b)/,
                          /^(?:bool\b)/,
                          /^(?:float\b)/,
                          /^(?:int\b)/,
                          /^(?:break\b)/,
                          /^(?:continue\b)/,
                          /^(?:do\b)/,
                          /^(?:while\b)/,
                          /^(?:else\b)/,
                          /^(?:for\b)/,
                          /^(?:if\b)/,
                          /^(?:discard\b)/,
                          /^(?:return\b)/,
                          /^(?:debugger\b)/,
                          /^(?:bvec2\b)/,
                          /^(?:bvec3\b)/,
                          /^(?:bvec4\b)/,
                          /^(?:ivec2\b)/,
                          /^(?:ivec3\b)/,
                          /^(?:ivec4\b)/,
                          /^(?:vec2\b)/,
                          /^(?:vec3\b)/,
                          /^(?:vec4\b)/,
                          /^(?:mat2\b)/,
                          /^(?:mat3\b)/,
                          /^(?:mat4\b)/,
                          /^(?:in\b)/,
                          /^(?:out\b)/,
                          /^(?:inout\b)/,
                          /^(?:uniform\b)/,
                          /^(?:varying\b)/,
                          /^(?:invariant\b)/,
                          /^(?:flat\b)/,
                          /^(?:smooth\b)/,
                          /^(?:sampler1D\b)/,
                          /^(?:sampler2D\b)/,
                          /^(?:sampler3D\b)/,
                          /^(?:samplerCube\b)/,
                          /^(?:sampler1DShadow\b)/,
                          /^(?:sampler2DShadow\b)/,
                          /^(?:struct\b)/,
                          /^(?:void\b)/,
                          /^(?:layout\b)/,
                          /^(?:\+\+)/,
                          /^(?:--)/,
                          /^(?:<=)/,
                          /^(?:>=)/,
                          /^(?:==)/,
                          /^(?:!=)/,
                          /^(?:&&)/,
                          /^(?:\|\|)/,
                          /^(?:\^\^)/,
                          /^(?:<<)/,
                          /^(?:>>)/,
                          /^(?:\*=)/,
                          /^(?:\/=)/,
                          /^(?:\+=)/,
                          /^(?:%=)/,
                          /^(?:<<=)/,
                          /^(?:>>=)/,
                          /^(?:&=)/,
                          /^(?:\^=)/,
                          /^(?:\|=)/,
                          /^(?:-=)/,
                          /^(?:[0-9]+\.[0-9]+([eE][+-]?[0-9]+)?[fF]?)/,
                          /^(?:\.[0-9]+([eE][+-]?[0-9]+)?[fF]?)/,
                          /^(?:[0-9]+\.([eE][+-]?[0-9]+)?[fF]?)/,
                          /^(?:[0-9]+[eE][+-]?[0-9]+[fF]?)/,
                          /^(?:[0-9]+[fF])/,
                          /^(?:0[xX][0-9a-fA-F]+)/,
                          /^(?:0[0-7]*)/,
                          /^(?:[1-9][0-9]*)/,
                          /^(?:true\b)/,
                          /^(?:false\b)/,
                          /^(?:asm\b)/,
                          /^(?:class\b)/,
                          /^(?:union\b)/,
                          /^(?:enum\b)/,
                          /^(?:typedef\b)/,
                          /^(?:template\b)/,
                          /^(?:this\b)/,
                          /^(?:packed\b)/,
                          /^(?:goto\b)/,
                          /^(?:switch\b)/,
                          /^(?:default\b)/,
                          /^(?:inline\b)/,
                          /^(?:noinline\b)/,
                          /^(?:volatile\b)/,
                          /^(?:public\b)/,
                          /^(?:static\b)/,
                          /^(?:extern\b)/,
                          /^(?:external\b)/,
                          /^(?:interface\b)/,
                          /^(?:long\b)/,
                          /^(?:short\b)/,
                          /^(?:double\b)/,
                          /^(?:half\b)/,
                          /^(?:fixed\b)/,
                          /^(?:unsigned\b)/,
                          /^(?:input\b)/,
                          /^(?:output\b)/,
                          /^(?:hvec2\b)/,
                          /^(?:hvec3\b)/,
                          /^(?:hvec4\b)/,
                          /^(?:dvec2\b)/,
                          /^(?:dvec3\b)/,
                          /^(?:dvec4\b)/,
                          /^(?:fvec2\b)/,
                          /^(?:fvec3\b)/,
                          /^(?:fvec4\b)/,
                          /^(?:sampler2DRect\b)/,
                          /^(?:sampler3DRect\b)/,
                          /^(?:sampler2DRectShadow\b)/,
                          /^(?:sizeof\b)/,
                          /^(?:cast\b)/,
                          /^(?:namespace\b)/,
                          /^(?:using\b)/,
                          /^(?:lowp\b)/,
                          /^(?:mediump\b)/,
                          /^(?:highp\b)/,
                          /^(?:precision\b)/,
                          /^(?:[_a-zA-Z][_a-zA-Z0-9]*)/,
                          /^(?:.)/,
                          /^(?:$)/
                      ],
                      conditions: {
                          "PRAGMA": {
                              "rules": [
                                  0,
                                  1,
                                  2,
                                  3,
                                  4,
                                  5,
                                  6,
                                  7,
                                  8,
                                  9,
                                  10,
                                  11,
                                  12,
                                  13,
                                  20,
                                  21,
                                  22,
                                  23,
                                  24,
                                  25,
                                  26,
                                  27,
                                  28,
                                  29,
                                  30,
                                  31,
                                  32,
                                  33,
                                  34,
                                  35,
                                  36,
                                  37,
                                  38,
                                  39,
                                  40,
                                  41,
                                  42,
                                  43,
                                  44,
                                  45,
                                  46,
                                  47,
                                  48,
                                  49,
                                  50,
                                  51,
                                  52,
                                  53,
                                  54,
                                  55,
                                  56,
                                  57,
                                  58,
                                  59,
                                  60,
                                  61,
                                  62,
                                  63,
                                  64,
                                  65,
                                  66,
                                  67,
                                  68,
                                  69,
                                  70,
                                  71,
                                  72,
                                  73,
                                  74,
                                  75,
                                  76,
                                  77,
                                  78,
                                  79,
                                  80,
                                  81,
                                  82,
                                  83,
                                  84,
                                  85,
                                  86,
                                  87,
                                  88,
                                  89,
                                  90,
                                  91,
                                  92,
                                  93,
                                  94,
                                  95,
                                  96,
                                  97,
                                  98,
                                  99,
                                  100,
                                  101,
                                  102,
                                  103,
                                  104,
                                  105,
                                  106,
                                  107,
                                  108,
                                  109,
                                  110,
                                  111,
                                  112,
                                  113,
                                  114,
                                  115,
                                  116,
                                  117,
                                  118,
                                  119,
                                  120,
                                  121,
                                  122,
                                  123,
                                  124,
                                  125,
                                  126,
                                  127,
                                  128,
                                  129,
                                  130,
                                  131,
                                  132,
                                  133,
                                  134,
                                  135,
                                  136,
                                  137,
                                  138,
                                  139,
                                  140,
                                  141,
                                  142,
                                  143,
                                  144,
                                  145
                              ],
                              "inclusive": true
                          },
                          "PP": {
                              "rules": [
                                  0,
                                  1,
                                  2,
                                  3,
                                  4,
                                  5,
                                  6,
                                  7,
                                  8,
                                  9,
                                  10,
                                  11,
                                  14,
                                  15,
                                  16,
                                  17,
                                  18,
                                  19,
                                  20,
                                  21,
                                  22,
                                  23,
                                  24,
                                  25,
                                  26,
                                  27,
                                  28,
                                  29,
                                  30,
                                  31,
                                  32,
                                  33,
                                  34,
                                  35,
                                  36,
                                  37,
                                  38,
                                  39,
                                  40,
                                  41,
                                  42,
                                  43,
                                  44,
                                  45,
                                  46,
                                  47,
                                  48,
                                  49,
                                  50,
                                  51,
                                  52,
                                  53,
                                  54,
                                  55,
                                  56,
                                  57,
                                  58,
                                  59,
                                  60,
                                  61,
                                  62,
                                  63,
                                  64,
                                  65,
                                  66,
                                  67,
                                  68,
                                  69,
                                  70,
                                  71,
                                  72,
                                  73,
                                  74,
                                  75,
                                  76,
                                  77,
                                  78,
                                  79,
                                  80,
                                  81,
                                  82,
                                  83,
                                  84,
                                  85,
                                  86,
                                  87,
                                  88,
                                  89,
                                  90,
                                  91,
                                  92,
                                  93,
                                  94,
                                  95,
                                  96,
                                  97,
                                  98,
                                  99,
                                  100,
                                  101,
                                  102,
                                  103,
                                  104,
                                  105,
                                  106,
                                  107,
                                  108,
                                  109,
                                  110,
                                  111,
                                  112,
                                  113,
                                  114,
                                  115,
                                  116,
                                  117,
                                  118,
                                  119,
                                  120,
                                  121,
                                  122,
                                  123,
                                  124,
                                  125,
                                  126,
                                  127,
                                  128,
                                  129,
                                  130,
                                  131,
                                  132,
                                  133,
                                  134,
                                  135,
                                  136,
                                  137,
                                  138,
                                  139,
                                  140,
                                  141,
                                  142,
                                  143,
                                  144,
                                  145
                              ],
                              "inclusive": true
                          },
                          "INITIAL": {
                              "rules": [
                                  0,
                                  1,
                                  2,
                                  3,
                                  4,
                                  5,
                                  6,
                                  7,
                                  8,
                                  9,
                                  10,
                                  11,
                                  20,
                                  21,
                                  22,
                                  23,
                                  24,
                                  25,
                                  26,
                                  27,
                                  28,
                                  29,
                                  30,
                                  31,
                                  32,
                                  33,
                                  34,
                                  35,
                                  36,
                                  37,
                                  38,
                                  39,
                                  40,
                                  41,
                                  42,
                                  43,
                                  44,
                                  45,
                                  46,
                                  47,
                                  48,
                                  49,
                                  50,
                                  51,
                                  52,
                                  53,
                                  54,
                                  55,
                                  56,
                                  57,
                                  58,
                                  59,
                                  60,
                                  61,
                                  62,
                                  63,
                                  64,
                                  65,
                                  66,
                                  67,
                                  68,
                                  69,
                                  70,
                                  71,
                                  72,
                                  73,
                                  74,
                                  75,
                                  76,
                                  77,
                                  78,
                                  79,
                                  80,
                                  81,
                                  82,
                                  83,
                                  84,
                                  85,
                                  86,
                                  87,
                                  88,
                                  89,
                                  90,
                                  91,
                                  92,
                                  93,
                                  94,
                                  95,
                                  96,
                                  97,
                                  98,
                                  99,
                                  100,
                                  101,
                                  102,
                                  103,
                                  104,
                                  105,
                                  106,
                                  107,
                                  108,
                                  109,
                                  110,
                                  111,
                                  112,
                                  113,
                                  114,
                                  115,
                                  116,
                                  117,
                                  118,
                                  119,
                                  120,
                                  121,
                                  122,
                                  123,
                                  124,
                                  125,
                                  126,
                                  127,
                                  128,
                                  129,
                                  130,
                                  131,
                                  132,
                                  133,
                                  134,
                                  135,
                                  136,
                                  137,
                                  138,
                                  139,
                                  140,
                                  141,
                                  142,
                                  143,
                                  144,
                                  145
                              ],
                              "inclusive": true
                          }
                      }
                  };
                  return lexer1;
              }();
              /*
        Copyright (c) 2011 Cimaron Shanahan
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of
        this software and associated documentation files (the "Software"), to deal in
        the Software without restriction, including without limitation the rights to
        use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
        the Software, and to permit persons to whom the Software is furnished to do so,
        subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
        FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
        COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
        IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
        CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        */ /**
         * GLSL Parser Class
         */ function GlslParser() {
                  //Jison Global
                  this.jison = parser;
                  this.jison.lexer = lexer;
              }
              var proto = GlslParser.prototype;
              /**
         * Parse Program
         */ proto.parse = function(state1) {
                  var result1;
                  this.jison.yy = {
                      test: 1,
                      state: state1
                  };
                  try {
                      this.jison.parse(state1.getTranslationUnit());
                  } catch (e1) {
                      state1.addError(e1.message, e1.lineNumber, e1.columnNumber);
                      return false;
                  }
                  return true;
              };
              glsl.parser = new GlslParser();
              /**
         * External Parse
         *
         * @param   string   src        Source code
         * @param   object   options    Compilation options
         *
         * @return  object
         */ glsl.parse = function(src2, options1) {
                  var state1, result1, irs1;
                  state1 = new GlslState(options1);
                  state1.setSource(src2); //Preprocess
                  result1 = this.preprocessor.process(state1); //Parse into AST
                  if (result1) result1 = this.parser.parse(state1);
                  if (result1) state1.status = true;
                  return state1;
              };
              /*
        Copyright (c) 2011 Cimaron Shanahan
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of
        this software and associated documentation files (the "Software"), to deal in
        the Software without restriction, including without limitation the rights to
        use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
        the Software, and to permit persons to whom the Software is furnished to do so,
        subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
        FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
        COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
        IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
        CONNECTION WITH THE SOFTWARE OR THE USE		 OR OTHER DEALINGS IN THE SOFTWARE.
        */ /**
         * Constructs a program's object code from an ast and symbol table
         *
         * @param   string     The error message
         * @param   AstNode    The error AstNode
         *
         * @return  string
         */ glsl.generate = function(state1) {
                  var irs1, ast1, i3, main1;
                  irs1 = new Ir(state1.options.target);
                  ast1 = state1.getAst();
                  try {
                      for(i3 = 0; i3 < ast1.length; i3++)ast1[i3].ir(state1, irs1);
                      main1 = state1.symbols.get_function("main"); //Accept main, but warn if params not void
                      if (main1.definition.join(",") !== "void") state1.addWarning("main() should take no parameters");
                      state1.symbols.add_variable("<returned>", irs1.getTemp(main1.getType().slots));
                      if (main1.type != "void") state1.addWarning("main() should be type void");
                      if (!main1) {
                          state1.addError("main() is not defined");
                          return false;
                      }
                      main1.Ast.body.ir(state1, irs1);
                  } catch (e1) {
                      if (!e1.ir) e1.message = "compiler error: " + e1.message;
                      state1.addError(e1.message, e1.lineNumber, e1.columnNumber);
                      return false;
                  }
                  state1.setIR(irs1);
                  return true;
              };
              /**
         * Constructs an error message
         *
         * @param   string     The error message
         * @param   AstNode    The error AstNode
         *
         * @return  string
         */ AstNode.prototype.ir_error = function(message1) {
                  var e1 = new IrError();
                  if (this.location) {
                      e1.lineNumber = this.location.first_line;
                      e1.columnNumber = this.location.first_column;
                      e1.message = message1;
                  }
                  throw e1;
              };
              /**
         * Default IR
         */ AstNode.prototype.irx = function(state1, irs1) {
                  this.ir_error(util.format("Can't generate ir for %s", this.typeOf()));
              };
              /**
         * Constructs a type specifier code block
         *
         * @param   object   state    parser state
         */ AstTypeSpecifier.prototype.ir = function(state1, irs1) {
                  if (this.is_precision_statement) return;
                   //	this.ir_error("Cannot generate type specifier");
              };
              /**
         * Constructs a declaration list
         *
         * @param   object   state   GLSL state
         * @param   object   irs     IR representation
         */ AstDeclaratorList.prototype.ir = function(state1, irs1) {
                  var i3;
                  for(i3 = 0; i3 < this.declarations.length; i3++)this.declarations[i3].ir(state1, irs1, this.type);
              };
              /**
         * Constructs a declaration
         *
         * @param   object   state   GLSL state
         * @param   object   irs     IR representation
         */ AstDeclaration.prototype.ir = function(state1, irs1, type1) {
                  var qualifier1, name1, entry1, constant1, assign1, lhs1, size1;
                  if (type1.qualifier) qualifier1 = type1.qualifier;
                  name1 = this.identifier; //add symbol table entry
                  entry1 = state1.symbols.add_variable(name1);
                  entry1.type = type1.specifier.type_name;
                  entry1.qualifier = qualifier1;
                  if (qualifier1.indexOf("uniform") !== -1) entry1.out = irs1.getUniform(entry1);
                  else if (qualifier1.indexOf("attribute") !== -1) entry1.out = irs1.getAttribute(entry1);
                  else if (qualifier1.indexOf("varying") !== -1) entry1.out = irs1.getVarying(entry1);
                  else entry1.out = irs1.getTemp(entry1.getType().slots);
                  constant1 = qualifier1 === "const";
                  if (this.is_array) {
                      this.array_size.ir(state1, irs1);
                      if (this.array_size.Type != "int") this.ir_error("array size must be an integer");
                      if (!this.array_size.Const) this.ir_error("array size must be constant");
                      size1 = parseInt(this.array_size.Dest);
                      if (size1 < 1) this.ir_error("array size cannot be less than 1");
                      entry1.size = size1; //Change the type of the entry so that expressions without indexing will fail
                      entry1.base_type = entry1.type;
                      entry1.type += "[]";
                  }
                  if (this.initializer) {
                      //@todo: generate constants at compile time (this may be able to be taken care of in the generator)
                      if (constant1) ;
                      else {
                          lhs1 = new AstExpression("ident");
                          lhs1.primary_expression.identifier = name1;
                          assign1 = new AstExpression("=", lhs1, this.initializer);
                          assign1.setLocation(this.location);
                          assign1.ir(state1, irs1);
                      }
                  } else if (constant1) this.ir_error("Declaring const without initialier");
              };
              /**
         * Constructs a function definition block
         *
         * @param   object   state   GLSL state
         * @param   object   irs     IR representation
         */ AstFunctionDefinition.prototype.ir = function(state1, irs1) {
                  //handle function proto
                  this.proto_type.ir(state1, irs1);
                  this.proto_type.entry.Ast = this;
              };
              /**
         * Constructs a function header code block
         *
         * @param   object   state   GLSL state
         * @param   object   irs     IR representation
         */ AstFunction.prototype.ir = function(state1, irs1) {
                  var i3;
                  if (this.parameters.length == 0) this.entry.definition.push("void");
                   //generate param list
                  for(i3 = 0; i3 < this.parameters.length; i3++)this.entry.definition.push(this.parameters[i3].type.specifier.type_name);
              };
              /**
         * Constructs a compound statement code block
         *
         * @param   object   state   GLSL state
         * @param   object   irs     IR representation
         */ AstCompoundStatement.prototype.ir = function(state1, irs1) {
                  var i3, stmt1, retd_entry1, maybe_returned1;
                  retd_entry1 = state1.symbols.get_variable("<returned>");
                  maybe_returned1 = false;
                  for(i3 = 0; i3 < this.statements.length; i3++){
                      stmt1 = this.statements[i3];
                      stmt1.ir(state1, irs1);
                      if (stmt1 instanceof AstJumpStatement && stmt1.mode == "return") {
                          //Returning from block, set return status, and skip following instructions in block (unreachable)
                          retd_entry1.Passed = true;
                          irs1.push(new IrInstruction("MOV", retd_entry1.out + ".x", "1.0"));
                          break;
                      }
                      if (!maybe_returned1 && retd_entry1.Passed) {
                          maybe_returned1 = true;
                          irs1.push(new IrInstruction("IF", retd_entry1.out + ".x"));
                      }
                  }
                  if (maybe_returned1) irs1.push(new IrInstruction("ENDIF"));
              };
              /**
         * Constructs an expression statement code block
         *
         * @param   object   state   GLSL state
         * @param   object   irs     IR representation
         */ AstExpressionStatement.prototype.ir = function(state1, irs1) {
                  this.expression.ir(state1, irs1);
              };
              /**
         * Constructs an expression code block
         *
         * @param   object   state   GLSL state
         * @param   object   irs     IR representation
         */ AstExpression.prototype.ir = function(state1, irs1) {
                  var i3; //simple (variable, or value)
                  for(i3 in this.primary_expression)return this.ir_simple(state1, irs1);
                   //operator
                  if (this.oper) return this.ir_op(state1, irs1);
                   //cast
                  if (this.constructor.name == "AstTypeSpecifier") {
                      this.Type = this.type_specifier;
                      return;
                  }
                  this.ir_error("Could not translate unknown expression type");
              };
              /**
         * Constructs an operator expression code block
         *
         * @param   object   state   GLSL state
         * @param   object   irs     IR representation
         */ AstExpression.prototype.ir_op = function(state1, irs1) {
                  var se1, temp1, ops1;
                  if (se1 = this.subexpressions) {
                      se1[0] && se1[0].ir(state1, irs1);
                      se1[1] && se1[1].ir(state1, irs1);
                      se1[2] && se1[2].ir(state1, irs1);
                  }
                  switch(this.oper){
                      //case '+=':
                      case "=":
                          this.ir_assign(state1, irs1);
                          break;
                      case "POS":
                          //useless
                          this.Dest = se1[0].Dest;
                          this.Type = se1[0].Type;
                          break;
                      case "NEG":
                          if (se1[0].Dest.substring(0, 1) != "-") this.Dest = "-" + se1[0].Dest;
                          else this.Dest = se1[0].Dest.substring(1);
                          this.Type = se1[0].Type;
                          if (se1[0].Const) this.Const = se1[0].Const;
                          break;
                      //Arithmetic
                      case "+":
                      case "-":
                      case "*":
                      case "/":
                      case "%":
                      case "&":
                      case "^":
                      case "|":
                      case "~":
                      case "<<":
                      case ">>":
                          this.ir_generate(state1, irs1, 2, true);
                          break;
                      //Boolean
                      case "<":
                      case ">":
                      case "<=":
                      case ">=":
                      case "==":
                      case "!=":
                      case "&&":
                      case "^^":
                      case "||":
                          this.ir_generate(state1, irs1, 2);
                          break;
                      case "!":
                          this.ir_generate(state1, irs1, 1);
                          break;
                      /*
            case '*=':
            case '/=':
            case '%=':
            case '+=':
            case '-=':
            case '<<=':
            case '>>=':
            case '&=':
            case '^=':
            case '|=':
                break;
            case '?:':
                break;
            */ //Increment / Decrement
                      case "++x":
                      case "--x":
                      case "x++":
                      case "x--":
                          this.ir_incdec(state1, irs1);
                          break;
                      //case '.': break;
                      case "[]":
                          this.ir_arr_index(state1, irs1);
                          break;
                      /*
            case 'VAR':
            case 'int':
            case 'float':
            case 'bool':
                ir_expression_simple(e, se);
                break;
            */ default:
                          this.ir_error(util.format("Could not translate unknown expression %s (%s)", this, this.oper));
                  }
              };
              /**
         * Constructs an assignment expression
         *
         * @param   object   state   GLSL state
         * @param   object   irs     IR representation
         */ AstExpression.prototype.ir_assign = function(state1, irs1, skip_comment1) {
                  var cond1, ir1, temp1, size1, slots1, swz1, i3, entry1, lhs1, rhs1, com1;
                  lhs1 = this.subexpressions[0];
                  rhs1 = this.subexpressions[1];
                  if (lhs1.Type != rhs1.Type || rhs1.Const) this.ir_cast.apply(rhs1, [
                      state1,
                      irs1,
                      lhs1.Type
                  ]);
                  this.Type = lhs1.Type;
                  if (lhs1.Entry && lhs1.Entry.constant) this.ir_error(util.format("Cannot assign value to constant %s", lhs1.Dest));
                  if (!skip_comment1) {
                      com1 = util.format("%s => %s %s <%s>", rhs1.Dest, lhs1.Type, lhs1.Dest, lhs1.toString());
                      irs1.push(new IrComment(com1, this.location));
                  }
                  size1 = types[this.Type].size;
                  slots1 = types[this.Type].slots; //get the swizzle for each slot
                  swz1 = Ir.swizzles[0].substring(0, 4 - (slots1 * 4 - size1) / slots1); //all components are used up in all slots
                  if (swz1 == Ir.swizzles[0]) swz1 = "";
                  for(i3 = 0; i3 < slots1; i3++){
                      /*
            if (cond && !local) {
                ir = new IR('CMP', se[0].Dest, "-" + cond, se[1].Dest, se[0].Dest);
                ir.addOffset(i);
                ir.setSwizzle(swz);
                irs.push(ir);
                    } else {
            */ ir1 = new IrInstruction("MOV", lhs1.Dest, rhs1.Dest);
                      ir1.addOffset(i3);
                      ir1.setSwizzle(swz1);
                      irs1.push(ir1);
                  /*
            }
            */ }
              };
              /**
         * Constructs a cast operation
         */ AstExpression.prototype.ir_cast = function(state1, irs1, type1) {
                  //Can cast to type?
                  if (Type.canCast(this.Type, type1)) {
                      //Simple case, constant
                      if (this.Const) {
                          this.Dest = Type.castTo(this.Dest, this.Type, type1);
                          this.Type = type1;
                      } else //@todo: generate cast instructions
                      this.ir_error(util.format("Could not assign value of type %s to %s", this.Type, type1));
                  } else this.ir_error(util.format("Could not assign value of type %s to %s", this.Type, type1));
              };
              /**
         * Constructs a simple expression code block
         *
         * @param   object   state   GLSL state
         * @param   object   irs     IR representation
         */ AstExpression.prototype.ir_simple = function(state1, irs1) {
                  var name1, entry1, t4;
                  if (this.oper == ".") {
                      this.ir_field(state1, irs1);
                      return;
                  } //identifier
                  if (name1 = this.primary_expression.identifier) {
                      //lookup identifier in symbol table
                      entry1 = state1.symbols.get_variable(name1) || state1.symbols.get_function(name1);
                      if (!entry1) this.ir_error(util.format("%s is undefined", name1));
                      this.Type = entry1.type;
                      this.Entry = entry1;
                      if (entry1.constant) this.Dest = entry1.constant;
                      else this.Dest = entry1.out;
                      return;
                  } //float constant
                  if (this.primary_expression.type == "float") {
                      this.Type = "float";
                      this.Dest = this.primary_expression.float_constant;
                      this.Const = true;
                      return;
                  } //int constant
                  if (this.primary_expression.type == "int") {
                      this.Type = "int";
                      this.Dest = this.primary_expression.int_constant;
                      this.Const = true;
                      return;
                  }
                  this.ir_error("Cannot translate unknown simple expression type");
              };
              /**
         * Constructs the code for an expression
         *
         * @param   object   state   GLSL state
         * @param   object   irs     IR representation
         */ AstExpression.prototype.ir_generate = function(state, irs, len, arith) {
                  var table, se, oprd_types, dest, i, j, def, match, comment, cnst;
                  if (!(table = builtin.oper[this.oper])) this.ir_error(util.format("Could not generate operation %s", this.oper));
                  se = this.subexpressions; //Fold constants
                  if (state.options.opt.fold_constants && arith) {
                      if (se[0].Const && se[1].Const) {
                          cnst = eval(se[0].Dest + this.oper + se[1].Dest); //If the calculation results in an error, resume normal IR generation and let it be handled at runtime
                          if (Number.isFinite(cnst)) {
                              this.Dest = "" + cnst;
                              this.Type = "float";
                              this.Const = true;
                              return;
                          }
                      }
                  }
                  oprd_types = [];
                  dest = [];
                  for(i = 0; i < len; i++){
                      oprd_types.push(se[i].Type);
                      dest.push(se[i].Dest);
                  }
                  def = new RegExp(oprd_types.join(",") + ":(.*)");
                  for(j in table){
                      if (match = j.match(def)) break;
                  }
                  if (!match) this.ir_error(util.format("Could not apply operation %s to %s", this.oper, oprd_types.join(", ")));
                  this.Type = match[1];
                  this.Dest = irs.getTemp(types[this.Type].slots);
                  dest.splice(0, 0, this.Dest);
                  len;
                  if (len == 1) comment = util.format("(%s %s %s) => %s %s", this.oper, se[0].Type, se[0].Dest, this.Type, this.Dest);
                  else if (len == 2) comment = util.format("(%s %s %s %s %s) => %s %s", se[0].Type, se[0].Dest, this.oper, se[1].Type, se[1].Dest, this.Type, this.Dest);
                  else if (len == 3) comment = util.format("(%s %s ? %s %s : %s %s) => %s %s", se[0].Type, se[0].Dest, se[1].Type, se[1].Dest, se[2].Type, se[2].Dest, this.Type, this.Dest);
                  irs.push(new IrComment(comment, this.location));
                  irs.build(table[j], dest);
              };
              /**
         * Constructs an pre/post increment/decrement expression
         *
         * @param   object   state   GLSL state
         * @param   object   irs     IR representation
         */ AstExpression.prototype.ir_incdec = function(state1, irs1) {
                  var se1, op1, ins1, post1, type1, i3, ir1;
                  se1 = this.subexpressions[0];
                  op1 = this.oper.replace("x", "");
                  ins1 = op1 === "++" ? "ADD" : "SUB";
                  post1 = this.oper.indexOf("x") === 0;
                  type1 = types[se1.Type]; //Type check: base type must be int or float
                  if (type1.base != "int" && type1.base != "float") this.ir_error(util.format("Could not apply operation %s to %s", op1, se1.Type));
                  this.Type = se1.Type;
                  if (post1) //For post increment, the returned happens before the increment, so we need a temp to store it
                  this.Dest = irs1.getTemp(type1.slots);
                  else this.Dest = se1.Dest;
                  irs1.push(new IrComment(util.format("(%s%s) => %s %s", post1 ? se1.Dest : op1, post1 ? op1 : se1.Dest, this.Type, this.Dest), this.location));
                  for(i3 = 0; i3 < type1.slots; i3++){
                      if (post1) {
                          this.Dest = irs1.getTemp(type1.slots);
                          ir1 = new IrInstruction("MOV", this.Dest, se1.Dest);
                          ir1.addOffset(i3);
                          ir1.setSwizzle(type1.swizzle);
                          irs1.push(ir1);
                      }
                      ir1 = new IrInstruction(ins1, se1.Dest, se1.Dest, "1.0");
                      ir1.addOffset(i3);
                      ir1.setSwizzle(type1.swizzle);
                      irs1.push(ir1);
                  }
              };
              /**
         * Constructs an array index expression
         *
         * @param   object   state   GLSL state
         * @param   object   irs     IR representation
         */ AstExpression.prototype.ir_arr_index = function(state1, irs1) {
                  var arr1, idx1, entry1, size1, cnst1, oprd1;
                  arr1 = this.subexpressions[0];
                  idx1 = this.subexpressions[1];
                  entry1 = arr1.Entry; //Ensure array index is integer
                  if (idx1.Type != "int") this.ir_error("array index out of bounds");
                   //@todo: Need to implement array indexing syntax for vector components
                  if (!entry1.size) this.ir_error("cannot index a non-array value");
                   //@todo: Need to implement array indexing for matrices
                  if (types[entry1.base_type].slots > 1) this.ir_error("array indexing for matrices not implemented yet");
                  this.Type = entry1.base_type; //If constant index, we can do some additional error checking
                  if (idx1.Const) {
                      cnst1 = parseInt(idx1.Dest);
                      if (cnst1 < 0 || cnst1 >= entry1.size) this.ir_error("array index out of bounds");
                      oprd1 = new IrOperand(arr1.Dest);
                      oprd1.index = cnst1;
                      this.Dest = oprd1.toString();
                  } else //@todo: variable indexing is permitted by spec, but behavior is undefined for out of bounds
                  this.ir_error("variable indexing not implemented yet");
              };
              /**
         * Constructs a function expression
         *
         * @param   object   state   GLSL state
         * @param   object   irs     IR representation
         */ AstFunctionExpression.prototype.ir = function(state1, irs1) {
                  var i3, e1, name1, entry1, ret_entry1, retd_entry1, call_types1, operands1, param1, proto1, loc1;
                  if (this.cons) return this.ir_constructor(state1, irs1);
                  name1 = this.subexpressions[0].primary_expression.identifier;
                  operands1 = [];
                  call_types1 = [];
                  for(i3 = 0; i3 < this.expressions.length; i3++){
                      e1 = this.expressions[i3];
                      e1.ir(state1, irs1);
                      call_types1.push(e1.Type);
                      operands1.push(e1.Dest);
                  }
                  entry1 = state1.symbols.get_function(name1, call_types1);
                  if (!entry1) this.ir_error(util.format("Function %s(%s) is not defined", name1, call_types1.join(", ")));
                  this.Type = entry1.type;
                  this.Dest = irs1.getTemp(entry1.getType().slots);
                  irs1.push(new IrComment(util.format("%s(%s) => %s %s", name1, operands1.join(", "), this.Type, this.Dest), this.location));
                  if (entry1.code) {
                      //Use function template
                      operands1.unshift(this.Dest);
                      irs1.build(entry1.code, operands1);
                  } else if (entry1.Ast) {
                      //Rebuild inline function from AST
                      state1.symbols.push_scope(); //Enter vars into local symbol table
                      proto1 = entry1.Ast.proto_type;
                      for(i3 = 0; i3 < proto1.parameters.length; i3++){
                          param1 = proto1.parameters[i3];
                          loc1 = state1.symbols.add_variable(param1.identifier, param1.type.specifier.type_name);
                          loc1.out = irs1.getTemp(loc1.getType().slots); //Add MOV operation from called param to local param
                          irs1.push(new IrComment(util.format("PARAM %s => %s %s", operands1[i3], loc1.out, param1.type.specifier.type_name), param1.location)); //Piggy-back off assignment generation
                          lhs = new AstExpression("<param>");
                          lhs.setLocation(this.getLocation());
                          lhs.Type = loc1.type;
                          lhs.Dest = loc1.out;
                          assign = new AstExpression("=", lhs, this.expressions[i3]);
                          assign.setLocation(this.getLocation());
                          assign.ir_assign(state1, irs1, true);
                      } //Create a return entry for the new call scope
                      ret_entry1 = state1.symbols.add_variable("<return>", this.Type);
                      ret_entry1.out = this.Dest;
                      retd_entry1 = state1.symbols.add_variable("<returned>", "bool");
                      retd_entry1.out = irs1.getTemp(retd_entry1.getType().slots);
                      entry1.Ast.body.ir(state1, irs1);
                      state1.symbols.pop_scope();
                  }
              };
              /**
         * Constructs a type constructor
         *
         * @param   object   state   GLSL state
         * @param   object   irs     IR representation
         */ AstFunctionExpression.prototype.ir_constructor = function(state1, irs1) {
                  var type1, comment_text1, comment1, i3, expr1, src_expr1, src_i1, src_c1, oprd1, dest1;
                  type1 = this.subexpressions[0].type_specifier;
                  this.Type = type1.name;
                  this.Dest = irs1.getTemp(type1.slots);
                  comment_text1 = [];
                  comment1 = new IrComment("", this.location);
                  irs1.push(comment1); //Prepare components
                  for(i3 = 0; i3 < this.expressions.length; i3++){
                      expr1 = this.expressions[i3];
                      if (expr1) {
                          expr1.ir(state1, irs1);
                          comment_text1.push(expr1.Dest);
                      }
                  }
                  src_expr1 = this.expressions[0];
                  src_i1 = 0; //Source expression index
                  src_c1 = 0; //Component of source expression
                  for(dest_i = 0; dest_i < type1.size; dest_i++){
                      if (!src_expr1) this.ir_error("Not enough parameters to constructor");
                       //@todo: need to add support for > vec4
                      if (types[src_expr1.Type].size > 4) this.ir_error("Matrix components not implemented yet");
                       //compute destination
                      dest1 = util.format("%s.%s", this.Dest, Ir.swizzles[0][dest_i]); //compute source
                      oprd1 = new IrOperand(src_expr1.Dest);
                      if (!oprd1.swizzle) oprd1.swizzle = Ir.swizzles[0][src_c1];
                      irs1.push(new IrInstruction("MOV", dest1, oprd1.toString()));
                      src_c1++; //Get next source component expression
                      if (src_c1 >= types[src_expr1.Type].size) {
                          if (this.expressions[src_i1 + 1]) {
                              src_i1++;
                              src_expr1 = this.expressions[src_i1];
                              src_c1 = 0;
                          }
                      }
                  }
                  comment1.comment = util.format("%s(%s) => %s %s", this.Type, comment_text1.join(", "), this.Type, this.Dest);
              };
              /**
         * Constructs a field selection code block
         *
         * @param   object   state   GLSL state
         * @param   object   irs     IR representation
         */ AstExpression.prototype.ir_field = function(state1, irs1) {
                  var field1, swz1, base1, se1; //pick swizzle set
                  field1 = this.primary_expression.identifier;
                  se1 = this.subexpressions[0];
                  se1.ir(state1, irs1);
                  if (Ir.isSwizzle(field1)) {
                      base1 = types[se1.Type].base;
                      if (field1.length > 1) {
                          if (base1 == "int") base1 = "ivec" + field1.length;
                          if (base1 == "bool") base1 = "bvec" + field1.length;
                          if (base1 == "float") base1 = "vec" + field1.length;
                      }
                      this.Type = base1;
                      if (field1.length > 4 || !this.Type) this.ir_error(util.format("Invalid field selection %s.%s", se1, field1));
                      this.Dest = util.format("%s.%s", se1.Dest, Ir.normalizeSwizzle(field1));
                  }
              };
              /**
         * Constructs a selection statement
         *
         * @param   ast_node    Statement
         */ AstSelectionStatement.prototype.ir = function(state1, irs1) {
                  var ir1, cond1;
                  this.condition.ir(state1, irs1); //@todo: add a check that condition is bool type?
                  irs1.push(new IrComment(util.format("if %s then", this.condition.Dest), this.location)); //set a flag based on the result
                  ir1 = new IrInstruction("IF", this.condition.Dest);
                  if ([
                      "bool",
                      "int",
                      "float"
                  ].indexOf(this.condition.Type) === -1) this.ir_error("boolean expression expected");
                  if (!ir1.d.swizzle) ir1.d.swizzle = "x";
                  irs1.push(ir1);
                  this.then_statement.ir(state1, irs1);
                  if (this.else_statement) {
                      irs1.push(new IrInstruction("ELSE"));
                      this.else_statement.ir(state1, irs1);
                  }
                  irs1.push(new IrInstruction("ENDIF"));
              };
              /**
         * Constructs a jump statement
         *
         * Note: jump semantics are a bit different in glsl as there is no true "jumping":
         * functions are inlined, loops are unrolled, etc.
         *
         * @param   ast_node    Statement
         */ AstJumpStatement.prototype.ir = function(state1, irs1) {
                  var ret1, ret_entry1, assign1, lhs1;
                  switch(this.mode){
                      case "return":
                          ret1 = this.opt_return_value;
                          if (ret1) {
                              ret1.ir(state1, irs1);
                              ret_entry1 = state1.symbols.get_variable("<return>"); //@todo: need to compare return value type with current function type
                              irs1.push(new IrComment(util.format("return => %s %s", ret1.Dest, ret1.Type), this.location)); //Piggy-back off assignment generation
                              lhs1 = new AstExpression("<return>");
                              lhs1.setLocation(this.getLocation());
                              lhs1.Type = ret1.Type;
                              lhs1.Dest = ret_entry1.out;
                              assign1 = new AstExpression("=", lhs1, ret1);
                              assign1.setLocation(this.getLocation());
                              assign1.ir_assign(state1, irs1, true);
                          } else irs1.push(new IrComment("return", this.location));
                          break;
                      case "debugger":
                          irs1.push(new IrComment("debugger", this.location));
                          irs1.push(new IrInstruction("DBGR"));
                          break;
                      default:
                  }
              };
              /*
        Copyright (c) 2011 Cimaron Shanahan
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of
        this software and associated documentation files (the "Software"), to deal in
        the Software without restriction, including without limitation the rights to
        use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
        the Software, and to permit persons to whom the Software is furnished to do so,
        subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
        FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
        COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
        IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
        CONNECTION WITH THE SOFTWARE OR THE USE		 OR OTHER DEALINGS IN THE SOFTWARE.
        */ /**
         * IR Class
         *
         * Stores IR code tree
         */ function Ir(target1) {
                  this.target = target1;
                  this.symbols = {
                      uniform: {
                          next: 0,
                          entries: {}
                      },
                      attribute: {
                          next: 0,
                          entries: {}
                      },
                      varying: {
                          next: 0,
                          entries: {}
                      },
                      temp: {
                          next: 0
                      }
                  };
                  this.code = [];
                  this.last = null;
              }
              Ir.prototype.getTemp = function(n3) {
                  var t4;
                  n3 = n3 || 1;
                  t4 = "temp@" + this.symbols.temp.next;
                  this.symbols.temp.next += n3;
                  return t4;
              };
              /**
         * Add a symbol table entry into the local symbol table and return a new IR identifier
         *
         * @param   object   entry   Symbol table entry
         *
         * @return  string
         */ Ir.prototype.getUniform = function(entry1) {
                  var table1 = this.symbols.uniform, out1;
                  if (!table1.entries[entry1.name]) {
                      table1.entries[entry1.name] = entry1;
                      entry1.out = "uniform@" + table1.next;
                      table1.next += entry1.getType().slots;
                  }
                  return entry1.out;
              };
              /**
         * Add a symbol table entry into the local symbol table and return a new IR identifier
         *
         * @param   object   entry   Symbol table entry
         *
         * @return  string
         */ Ir.prototype.getAttribute = function(entry1) {
                  var table1 = this.symbols.attribute, out1;
                  if (!table1.entries[entry1.name]) {
                      table1.entries[entry1.name] = entry1;
                      entry1.out = "attribute@" + table1.next;
                      table1.next += entry1.getType().slots;
                  }
                  return entry1.out;
              };
              /**
         * Add a symbol table entry into the local symbol table and return a new IR identifier
         *
         * @param   object   entry   Symbol table entry
         *
         * @return  string
         */ Ir.prototype.getVarying = function(entry1) {
                  var table1 = this.symbols.varying, out1;
                  if (!table1.entries[entry1.name]) {
                      table1.entries[entry1.name] = entry1;
                      entry1.out = "varying@" + table1.next;
                      table1.next += entry1.getType().slots;
                  }
                  return entry1.out;
              };
              Ir.prototype.get = function(i3) {
                  return this.code[i3];
              };
              Ir.prototype.push = function(ir1) {
                  this.code.push(ir1);
                  this.last = ir1;
              };
              Ir.isSwizzle = function(swz1) {
                  if (swz1.match(/[xyzw]+/)) return true;
                  if (swz1.match(/[rgba]+/)) return true;
                  if (swz1.match(/[stpq]+/)) return true;
              };
              Ir.normalizeSwizzle = function(swz1) {
                  var n3;
                  if (!this.isSwizzle(swz1)) return null;
                  n3 = swz1.replace(/[rs]/g, "x").replace(/[gt]/g, "y").replace(/[bp]/g, "z").replace(/[aq]/g, "w");
                  return n3;
              };
              Ir.swizzles = [
                  "xyzw",
                  "rgba",
                  "stpq"
              ];
              /**
         * Replaces all instances of an operand name and base index in all instructions after start
         *
         * @param   integer     Starting instruction number
         * @param   string      Old name to search for
         * @param   string      New name to replace with
         * @param   integer     Add offset
         * @param   boolean     True if replacing with a completely new operand
         */ Ir.prototype.replaceName = function(start1, old1, nw1, index3, repl1) {
                  var i3, j1, ir1, f1, name1, neg_const1;
                  neg_const1 = old1.match(/^\-([0-9]+\.[0-9]+)/);
                  if (neg_const1) {
                      old1 = neg_const1[1];
                      neg_const1 = true;
                  }
                  for(i3 = start1; i3 < this.code.length; i3++){
                      ir1 = this.code[i3]; //foreach each operand field
                      for(j1 = 0; j1 < IR.operands.length; j1++){
                          f1 = IR.operands[j1];
                          if (ir1[f1] && ir1[f1].name == old1) {
                              if (repl1) ir1[f1] = new Ir.Operand(ir1[f1].neg + nw1);
                              else {
                                  ir1[f1].name = nw1;
                                  ir1[f1].addOffset(index3);
                              }
                              if (neg_const1 && ir1[f1].neg) ir1[f1].neg = "";
                          }
                      }
                  }
              };
              Ir.prototype.toString = function() {
                  return this.code.join("\n");
              };
              /**
         * Builds instructions from code table record
         *
         * @param   array       List of instruction strings
         * @param   array       List of operands
         */ Ir.prototype.build = function(code1, oprds1) {
                  var dest1, i3, j1, k1, o5, n3, t4, oprd1, ir1, new_swz1, temps1; //Parse operands
                  for(i3 = 0; i3 < oprds1.length; i3++){
                      oprd1 = new IrOperand(oprds1[i3]);
                      if (oprd1.swizzle) {
                          //need a new temp to move the swizzle so our code pattern works
                          new_swz1 = Ir.swizzles[0].substring(0, oprd1.swizzle.length);
                          if (oprd1.swizzle != new_swz1) {
                              dest1 = this.getTemp();
                              ir1 = new IrInstruction("MOV", util.format("%s.%s", dest1, new_swz1), oprd1.full);
                              this.push(ir1);
                              oprd1 = new IrOperand(dest1);
                          }
                      }
                      oprds1[i3] = oprd1;
                  }
                  temps1 = []; //Merge template with passed operands
                  for(i3 = 0; i3 < code1.length; i3++){
                      ir1 = new IrInstruction(code1[i3]); //For each operand
                      for(j1 = 0; j1 < IrInstruction.operands.length; j1++){
                          o5 = IrInstruction.operands[j1];
                          oprd1 = ir1[o5];
                          if (!oprd1) break;
                           //Normal src/dest
                          n3 = oprd1.name.match(/%(\d+)/);
                          if (n3) {
                              n3 = parseInt(n3[1]);
                              ir1[o5] = new IrOperand(oprds1[n3 - 1].toString());
                              ir1[o5].addOffset(oprd1.address);
                              ir1[o5].swizzle = oprd1.swizzle;
                              ir1[o5].neg = oprd1.neg;
                          } //Need temp
                          t4 = oprd1.name.match(/%t(\d+)/);
                          if (t4) {
                              //Build up enough temps
                              t4 = parseInt(t4[1]);
                              while(temps1.length < t4)temps1.push(this.getTemp());
                              t4 = temps1[t4 - 1].split("@");
                              oprd1.name = t4[0];
                              oprd1.address = t4[1];
                              oprd1.full = oprd1.toString();
                          }
                      }
                      this.push(ir1);
                  }
              };
              /**
         * Ir Error Class
         *
         * Used to differentiate between a compilation error and a compiler error
         */ function IrError(msg1) {
                  this.msg = msg1;
                  this.ir = true;
              }
              IrError.prototype = Error.prototype;
              /*
        Copyright (c) 2011 Cimaron Shanahan
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of
        this software and associated documentation files (the "Software"), to deal in
        the Software without restriction, including without limitation the rights to
        use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
        the Software, and to permit persons to whom the Software is furnished to do so,
        subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
        FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
        COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
        IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
        CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        */ /**
         * IR Instruction Class
         *
         * Represents a single assembly-like instruction
         */ function IrInstruction(op1, d7, s11, s21, s31) {
                  var args1;
                  this.str = null;
                  this.line = null;
                  if (arguments.length == 1) {
                      args1 = op1.split(/[\s,]/);
                      op1 = args1[0];
                      d7 = args1[1];
                      s11 = args1[2];
                      s21 = args1[3];
                      s31 = args1[4];
                  }
                  this.op = op1;
                  this.d = this.operand(d7);
                  this.s1 = this.operand(s11);
                  this.s2 = this.operand(s21);
                  this.s3 = this.operand(s31);
              }
              IrInstruction.operands = [
                  "d",
                  "s1",
                  "s2",
                  "s3"
              ];
              IrInstruction.prototype.operand = function(opr1) {
                  return opr1 ? new IrOperand(opr1) : "";
              };
              /**
         * Adds the offset to all operands
         *
         * @param   integer    The offset to set
         */ IrInstruction.prototype.addOffset = function(offset2) {
                  var i3, o5;
                  for(i3 = 0; i3 < IrInstruction.operands.length; i3++){
                      o5 = IrInstruction.operands[i3];
                      if (this[o5]) this[o5].addOffset(offset2);
                  }
              };
              /**
         * Set the swizzle components on all operands
         *
         * @param   string    The swizzle to set
         */ IrInstruction.prototype.setSwizzle = function(swz1) {
                  var i3, o5;
                  for(i3 = 0; i3 < IrInstruction.operands.length; i3++){
                      o5 = IrInstruction.operands[i3];
                      if (this[o5] && !this[o5].swizzle) this[o5].swizzle = swz1;
                  }
              };
              /**
         * toString method
         *
         * @return  string
         */ IrInstruction.prototype.toString = function() {
                  var out1;
                  out1 = util.format("%s%s%s%s%s;", this.op, this.d ? " " + this.d : "", this.s1 ? ", " + this.s1 : "", this.s2 ? ", " + this.s2 : "", this.s3 ? ", " + this.s3 : "");
                  return out1;
              };
              /**
         * IR Comment Class
         *
         * Represents a single comment
         */ function IrComment(comment1, loc1) {
                  this.comment = comment1;
                  this.loc = loc1;
              }
              IrComment.prototype.toString = function() {
                  var c4 = this.comment;
                  if (this.loc) c4 = util.format("%s [%s:%s-%s:%s]", c4, this.loc.first_line, this.loc.first_column, this.loc.last_line, this.loc.last_column);
                  c4 = "\n# " + c4;
                  return c4;
              };
              /**
         * IR Operand Class
         *
         * Represents a single operand
         */ function IrOperand(str1, raw1) {
                  this.full = "";
                  this.neg = "";
                  this.name = "";
                  this.address = "";
                  this.swizzle = "";
                  this.number = "";
                  this.raw = "";
                  this.index = "";
                  if (raw1) {
                      this.full = str1;
                      this.raw = str1;
                  } else this.parse(str1);
              }
              /**
         * Parses operand string
         *
         * @param   string    string that represents a single variable
         */ IrOperand.prototype.parse = function(str1) {
                  var parts1, regex1;
                  if (!str1) return;
                  if (!isNaN(parseFloat(str1))) {
                      this.raw = str1;
                      return;
                  } //neg
                  regex1 = "(-)?"; //name (include '%' for our code substitution rules)
                  regex1 += "([\\w%]+)"; //number
                  regex1 += "(?:@(\\d+))?"; //index
                  regex1 += "(?:\\[(\\d+)\\])?"; //swizzle
                  regex1 += "(?:\\.([xyzw]+))?";
                  regex1 = new RegExp("^" + regex1 + "$");
                  if (parts1 = str1.match(regex1)) {
                      this.neg = parts1[1] || "";
                      this.name = parts1[2];
                      this.address = parseInt(parts1[3]) || 0;
                      this.index = parseInt(parts1[4]) || 0;
                      this.swizzle = parts1[5] || "";
                  } else if (parts1 = str1.match(/^"(.*)"$/)) this.raw = parts1[1];
                  else this.raw = str1;
                  this.full = this.toString();
              };
              /**
         * Adds an offset
         *
         * @param   integer    Offset to add
         */ IrOperand.prototype.addOffset = function(offset2) {
                  this.address = this.address || 0;
                  this.address += offset2;
              };
              /**
         * toString method
         *
         * @return  string
         */ IrOperand.prototype.toString = function() {
                  var str1;
                  if (this.raw) str1 = this.raw;
                  else str1 = this.neg + this.name + ("@" + this.address) + (this.index !== "" ? "[" + this.index + "]" : "") + (this.swizzle ? "." + this.swizzle : "");
                  return str1;
              };
              /*
        Copyright (c) 2014 Cimaron Shanahan
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of
        this software and associated documentation files (the "Software"), to deal in
        the Software without restriction, including without limitation the rights to
        use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
        the Software, and to permit persons to whom the Software is furnished to do so,
        subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
        FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
        COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
        IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
        CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        */ /**
         * GlslProgramJavascript class
         */ function GlslProgramJavascript() {
                  this.vertex_code = [];
                  this.fragment_code = [];
                  this.symbols = new GlslProgramJavascriptVars();
                  this.context = new GlslProgramJavascriptContext();
                  this.library = {
                      tex: function tex1(dest1, i3, sampler1, src2, j1, dim1) {
                          dest1[i3] = 0;
                          dest1[i3 + 1] = 0;
                          dest1[i3 + 2] = 0;
                          dest1[i3 + 3] = 1;
                      }
                  };
                  this.vertex = null;
                  this.shader = null;
              }
              var proto = GlslProgramJavascript.prototype;
              GlslProgramJavascript.translation_table = {
                  "ABS": "%1.* = Math.abs(%2.*);",
                  "ADD": "%1.* = %2.* + %3.*;",
                  "AND": "%1.* = %2.* & %3.*;",
                  //'ARL' : false,
                  "CEIL": "%1.* = Math.ceil(%2.*);",
                  "CMP": "%1.* = (%2.* < 0.0) ? %3.* : %4.*;",
                  "COS": "%1.* = Math.cos(%2.*);",
                  "DIV": "%1.* = %2.* / %3.*;",
                  "DBGR": "debugger;",
                  "DP2": "%1.x = (%2.x * %3.x) + (%2.y * %3.y);",
                  "DP3": "%1.x = (%2.x * %3.x) + (%2.y * %3.y) + (%2.z * %3.z);",
                  "DP4": "%1.x = (%2.x * %3.x) + (%2.y * %3.y) + (%2.z * %3.z) + (%2.w * %3.w);",
                  //'DPH' : '%1.* = (%2.x * %3.x + %2.y * %3.y + %2.z + %3.z + %3.w);',
                  //'DST' : '%1.* = [1, %2.y * %3.y, %2.z, %3.w];',
                  "ELSE": "} else {",
                  "ENDIF": "}",
                  "FLR": "%1.* = Math.floor(%2.*);",
                  "FRC": "%1.* = %2.* - Math.floor(%2.*);",
                  "IF": "if (%1.x) {",
                  "MAD": "%1.* = (%2.* * %3.*) + %4.*;",
                  "MAX": "%1.* = Math.max(%2.*, %3.*);",
                  "MIN": "%1.* = Math.min(%2.*, %3.*);",
                  "MOD": "%1.* = %2.* % %3.*;",
                  "MOV": "%1.* = %2.*;",
                  "MUL": "%1.* = %2.* * %3.*;",
                  "OR": "%1.* = %2.* | %3.*;",
                  "POW": "%1.x = Math.pow(%2.x, %3.x);",
                  "RET": "return;",
                  "RSQ": "%1.* = (1.0 / Math.sqrt(%2.*));",
                  "SEQ": "%1.* = (%2.* === %3.*) ? 1.0 : 0.0;",
                  "SGE": "%1.* = (%2.* >=  %3.*) ? 1.0 : 0.0;",
                  "SGT": "%1.* = (%2.* >   %3.*) ? 1.0 : 0.0;",
                  "SIN": "%1.* = Math.sin(%2.*);",
                  "SLE": "%1.* = (%2.* <=  %3.*) ? 1.0 : 0.0;",
                  "SLT": "%1.* = (%2.* <   %3.*) ? 1.0 : 0.0;",
                  "SNE": "%1.* = (%2.* !== %3.*) ? 1.0 : 0.0;",
                  "SUB": "%1.* = %2.* - %3.*;",
                  "TAN": "%1.* = Math.tan(%2.*);",
                  //Non-standard opcode for NV_gpu
                  "TEX": "tex(%1, %4, %2, %5, %3.x, 0);",
                  //%4 = address of %1, %5 = address of %2
                  "XOR": "%1.* = %2.* ^ %3.*;"
              };
              /**
         * Return string representation of program
         *
         * @param   int   target   target
         *
         * @return  string
         */ proto.toString = function(target1) {
                  if (target1 === glsl.target.fragment) return this.fragment_code.join("\n");
                  else if (target1 === glsl.target.vertex) return this.vertex_code.join("\n");
                  else return this.current.join("\n");
              };
              /**
         * Translates IR code into a javascript representation
         *
         * @return  bool      true if there were no errors
         */ proto.addObjectCode = function(object1, target1) {
                  var i3, errors1; //optimize(irs, symbols);
                  this.mergeSymbols(object1);
                  this.current = [];
                  for(i3 = 0; i3 < object1.code.length; i3++)try {
                      this.instruction(object1.code[i3]);
                  } catch (e1) {
                      this.error = util.format("%s at %s:%s", e1.message, e1.lineNumber, e1.columnNumber);
                      return false;
                  }
                  if (target1 == glsl.target.vertex) this.vertex_code = this.current;
                  else if (target1 == glsl.target.fragment) this.fragment_code = this.current;
                  return true;
              };
              /**
         * Merge symbol code into program table
         */ proto.mergeSymbols = function(object1) {
                  var s10, t4, n3, entry1, sym1, start1, slots1, comp1;
                  for(s10 in object1.symbols){
                      t4 = object1.symbols[s10].entries;
                      for(n3 in t4){
                          entry1 = t4[n3];
                          start1 = parseInt(entry1.out.split("@")[1]);
                          slots1 = entry1.getType().slots;
                          comp1 = entry1.getType().size / slots1;
                          if (s10 == "uniform") {
                              sym1 = this.symbols.addUniform(entry1.name, start1, slots1, comp1);
                              if (this.findSymbolCollision(this.symbols.uniform, sym1)) this.rewriteSymbol(this.symbols.uniform, sym1, object1);
                          } else if (s10 == "attribute") this.symbols.addAttribute(entry1.name, start1, slots1, comp1);
                          else if (s10 == "varying") this.symbols.addVarying(entry1.name, start1, slots1, comp1);
                      }
                  }
              };
              /**
         * Scan symbol table to find collisions
         */ proto.findSymbolCollision = function(table1, symbol1) {
                  var i3, my_start1, my_end1, start1, end1;
                  my_start1 = symbol1.pos;
                  my_end1 = my_start1 + symbol1.slots - 1;
                  for(i3 in table1){
                      if (i3 == symbol1.name) continue;
                      start1 = table1[i3].pos;
                      end1 = start1 + table1[i3].slots - 1;
                      if (my_start1 >= start1 && my_start1 <= end1 || my_end1 >= start1 && my_end1 <= end1) return true;
                  }
                  return false;
              };
              /**
         * Rewrite symbol table entry position in code
         */ proto.findNewSymbolPosition = function(table1, symbol1) {
                  var i3, size1, addresses1, last1, next1;
                  addresses1 = []; //find new address
                  for(i3 in table1){
                      if (symbol1.name == i3) continue;
                       //start address
                      addresses1.push(table1[i3].pos); //end address
                      addresses1.push(table1[i3].pos + table1[i3].slots - 1);
                  }
                  addresses1.sort(); //Can insert at beginning
                  if (addresses1[0] >= symbol1.slots) return 0;
                   //Can insert in between
                  for(i3 = 1; i3 < addresses1.length; i3 += 2){
                      last1 = addresses1[i3];
                      next1 = addresses1[i3];
                      if (next1 - last1 - 1 > symbol1.slots) return last1 + 1;
                  } //Can insert at end
                  return addresses1.slice(-1)[0] + 1;
              };
              /**
         * Rewrite symbol table entry position in code
         */ proto.rewriteSymbol = function(table1, symbol1, object1) {
                  var pos1, old_start1, old_end1, diff1, i3, ins1;
                  old_start1 = symbol1.pos;
                  old_end1 = old_start1 + symbol1.slots - 1;
                  symbol1.pos = this.findNewSymbolPosition(table1, symbol1);
                  diff1 = symbol1.pos - old_start1;
                  for(i3 = 0; i3 < object1.code.length; i3++){
                      ins1 = object1.code[i3];
                      if (!(ins1 instanceof IrInstruction)) continue;
                      this.rewriteOperandAddress(ins1.d, old_start1, old_end1, diff1, symbol1);
                      this.rewriteOperandAddress(ins1.s1, old_start1, old_end1, diff1, symbol1);
                      this.rewriteOperandAddress(ins1.s2, old_start1, old_end1, diff1, symbol1);
                      this.rewriteOperandAddress(ins1.s3, old_start1, old_end1, diff1, symbol1);
                  }
              };
              /**
         * Rewrite symbol table entry position in code
         */ proto.rewriteOperandAddress = function(oprd1, old_start1, old_end1, diff1, symbol1) {
                  var diff1;
                  if (!oprd1) return;
                  if (oprd1.name != symbol1.type) return;
                  if (oprd1.address >= old_start1 && oprd1.address <= old_end1) oprd1.address += diff1;
              };
              /**
         * Build a program
         *
         * @return  function
         */ proto.build = function() {
                  var module1, shaders1;
                  module1 = new Function("stdlib", "foreign", "heap", '//"use asm";\nvar\nuniform_f32   = new stdlib.Float32Array(heap,   0, 128),\nattribute_f32 = new stdlib.Float32Array(heap, 512, 128),\nvarying_f32   = new stdlib.Float32Array(heap, 1024, 128),\nresult_f32    = new stdlib.Float32Array(heap, 1536, 128),\ntemp_f32      = new stdlib.Float32Array(heap, 2048, 128),\njstemp        = new stdlib.Float32Array(heap, 2544,   4),\ntex           = foreign.tex;\n;\nfunction vs() {\n' + this.vertex_code.join("\n") + "\n" + "}\n" + "function fs() {\n" + this.fragment_code.join("\n") + "\n" + "}\n" + "return { fragment : fs, vertex : vs };");
                  shaders1 = module1(window, this.library, this.context.heap);
                  this.vertex = shaders1.vertex;
                  this.fragment = shaders1.fragment;
              };
              /**
         * Translates ASM instruction into output format
         *
         * @param   string    string that represents a single instruction
         */ proto.instruction = function(ins1) {
                  var tpl1, dest1, src2, i3, j1, k1, code1, js1;
                  if (ins1 instanceof IrComment) {
                      this.current.push("// " + ins1.toString().replace("\n", ""));
                      return;
                  }
                  this.current.push("// " + ins1.toString());
                  if (!(tpl1 = GlslProgramJavascript.translation_table[ins1.op])) throw new Error(util.format("Could not translate opcode '%s'", ins1.op));
                   //variables
                  dest1 = this.buildComponents(ins1.d, true);
                  if (!dest1) {
                      this.current.push(tpl1);
                      return;
                  }
                  src2 = [];
                  src2.push(this.buildComponents(ins1.s1));
                  src2.push(this.buildComponents(ins1.s2));
                  src2.push(this.buildComponents(ins1.s3));
                  if (ins1.op == "TEX") {
                      js1 = tpl1.replace(/%1/g, dest1.name);
                      js1 = js1.replace(/%2/g, src2[0].name);
                      js1 = this.replaceOperand(js1, "%3", src2[1], 0);
                      js1 = js1.replace(/%4/g, dest1.start);
                      js1 = js1.replace(/%5/g, src2[0].start);
                      this.current.push(js1);
                      this.current.push("");
                      return;
                  }
                  this.generateTemp(dest1, src2, tpl1);
                  for(i3 = 0; i3 < dest1.components.length; i3++){
                      js1 = this.replaceOperand(tpl1, "%1", dest1, i3);
                      for(j1 = 0; j1 < 3; j1++)if (src2[j1]) js1 = this.replaceOperand(js1, "%" + (j1 + 2), src2[j1], i3);
                      this.current.push(js1);
                  }
                  this.current.push("");
              };
              /**
         * Replace an operand into code template
         *
         * @param   string   tpl    Template
         * @param   string   from   Template operand
         * @param   object   op     Operand info
         * @param   int      n      Current component iteration  
         */ proto.replaceOperand = function(tpl1, from1, op1, n3) {
                  var i3, out1, name1, addr1, swz1 = [
                      "x",
                      "y",
                      "z",
                      "w"
                  ];
                  if (op1.raw) name1 = op1.name;
                  else if (op1.jstemp && op1.jstemp[n3]) {
                      name1 = "jstemp";
                      addr1 = n3;
                  } else {
                      name1 = op1.name;
                      if (op1.components) addr1 = op1.start + op1.components[n3];
                  }
                  if (op1.components) out1 = tpl1.replace(from1 + ".*", util.format("%s[%s]", name1, addr1));
                  else out1 = tpl1.replace(from1 + ".*", name1);
                  for(i3 = 0; i3 < swz1.length; i3++)out1 = out1.replace(new RegExp(from1 + "." + swz1[i3], "g"), util.format("%s[%s]", name1, op1.start + i3));
                  return out1;
              };
              /**
         * Prepares info on IR operand
         *
         * @param   IrOperand   opr    Operand
         * @param   bool        dest   Is destination?
         *
         * @return  object
         */ proto.buildComponents = function(opr1, dest1) {
                  var i3, swz1, out1;
                  if (!opr1) return null;
                  out1 = {};
                  if (opr1.raw) {
                      out1.name = opr1.raw;
                      out1.raw = true;
                      return out1;
                  }
                  out1.name = opr1.neg + opr1.name + "_f32";
                  out1.start = 4 * opr1.address + 4 * opr1.index;
                  out1.components = [];
                  out1.jstemp = []; //generate array representation of swizzle components, expanding if necessary
                  swz1 = opr1.swizzle || "xyzw";
                  swz1 = swz1.split("");
                  for(i3 = 0; i3 < 4; i3++){
                      //exact swizzle specified and less than 4 components, grab last one
                      if (swz1.length <= i3) {
                          if (!dest1) {
                              //repeat last one
                              out1.components.push(out1.components[i3 - 1]);
                              out1.jstemp.push(null);
                          }
                      } else {
                          out1.components.push("xyzw".indexOf(swz1[i3]));
                          out1.jstemp.push(null);
                      }
                  }
                  return out1;
              };
              proto.generateTemp = function(dest1, src2, tpl1) {
                  var i3, c4, op1, written1;
                  for(i3 = 0; i3 < dest1.components.length; i3++){
                      written1 = dest1.components.slice(0, i3);
                      for(c4 = 0; c4 < src2.length; c4++){
                          op1 = src2[c4];
                          if (op1 && op1.name == dest1.name && op1.start == dest1.start && written1.indexOf(op1.components[i3]) != -1) {
                              op1.jstemp[i3] = true;
                              this.current.push(util.format("jstemp[%s] = %s[%s]", i3, op1.name, op1.start + op1.components[i3]));
                          }
                      }
                  } //console.log(tpl, dest, src);
              //debugger;
              };
              /**
         * Get Uniform Location
         *
         * @param   string   name   Name
         *
         * @return  int
         */ proto.getUniformLocation = function(name1) {
                  if (this.symbols.uniform[name1]) return this.symbols.uniform[name1].start;
                  return false;
              };
              /**
         * Get Uniform Size
         *
         * @param   string   name   Name
         *
         * @return  int
         */ proto.getUniformSize = function(name1) {
                  if (this.symbols.uniform[name1]) return this.symbols.uniform[name1].size;
                  return false;
              };
              /**
         * Set Uniform data
         * 
         * @param   string   name   Name
         * @param   array    data   Data
         */ proto.setUniformData = function(name1, data1) {
                  var i3, l1, s10, d7;
                  d7 = data1.length;
                  l1 = this.getUniformSize(name1);
                  s10 = this.getUniformLocation(name1);
                  if (l1 === false) return;
                  this.context.uniform_f32.set(data1, i3 + s10);
              };
              /**
         * Get Attribute Location
         *
         * @param   string   name   Name
         *
         * @return  int
         */ proto.getAttributeLocation = function(name1) {
                  if (this.symbols.attribute[name1]) return this.symbols.attribute[name1].start;
                  return false;
              };
              /**
         * Get Attribute Size
         *
         * @param   string   name   Name
         *
         * @return  int
         */ proto.getAttributeSize = function(name1) {
                  if (this.symbols.attribute[name1]) return this.symbols.attribute[name1].size;
                  return false;
              };
              /**
         * Set Attribute data
         * 
         * @param   string   name   Name
         * @param   array    data   Data
         */ proto.setAttributeData = function(name1, data1) {
                  var i3, l1, s10, d7;
                  d7 = data1.length;
                  l1 = this.getAttributeSize(name1);
                  s10 = this.getAttributeLocation(name1);
                  if (l1 === false) return;
                  this.context.attribute_f32.set(data1, i3 + s10);
              };
              /**
         * Get result data
         *
         * @param   int   start   Start pos
         * @param   int   size    Size
         *
         * @return  array
         */ proto.getResultData = function(start1, size1) {
                  var res1;
                  res1 = Array.prototype.slice.apply(this.context.result_f32, [
                      start1,
                      size1
                  ]);
                  return res1;
              };
              /**
         * Set TEX lookup function
         *
         * 
         */ proto.setTexFunction = function(func1) {
                  this.library.tex = func1;
              };
              glsl.program = GlslProgramJavascript;
              /*
        Copyright (c) 2011 Cimaron Shanahan
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of
        this software and associated documentation files (the "Software"), to deal in
        the Software without restriction, including without limitation the rights to
        use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
        the Software, and to permit persons to whom the Software is furnished to do so,
        subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
        FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
        COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
        IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
        CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        */ /**
         * GlslProgramJavascriptContext class
         */ function GlslProgramJavascriptContext() {
                  this.heap = new ArrayBuffer(2560);
                  this.uniform_f32 = new Float32Array(this.heap, 0, 128);
                  this.attribute_f32 = new Float32Array(this.heap, 512, 128);
                  this.varying_f32 = new Float32Array(this.heap, 1024, 128);
                  this.result_f32 = new Float32Array(this.heap, 1536, 128);
              }
              var proto = GlslProgramJavascriptContext.prototype;
              /*
        Copyright (c) 2011 Cimaron Shanahan
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of
        this software and associated documentation files (the "Software"), to deal in
        the Software without restriction, including without limitation the rights to
        use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
        the Software, and to permit persons to whom the Software is furnished to do so,
        subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
        FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
        COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
        IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
        CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        */ /**
         * GlslProgramJavascriptVars Class
         */ function GlslProgramJavascriptVars() {
                  this.uniform = {};
                  this.attribute = {};
                  this.varying = {};
              }
              var proto = GlslProgramJavascriptVars.prototype;
              /**
         * Add uniform variable
         */ proto.addUniform = function(name1, pos1, slots1, comp1) {
                  this.uniform[name1] = new GlslProgramJavascriptVar(name1, pos1, slots1, comp1, "uniform");
                  return this.uniform[name1];
              };
              /**
         * Add attribute variable
         */ proto.addAttribute = function(name1, pos1, slots1, comp1) {
                  this.attribute[name1] = new GlslProgramJavascriptVar(name1, pos1, slots1, comp1, "attribute");
                  return this.attribute[name1];
              };
              /**
         * Add varying variable
         */ proto.addVarying = function(name1, pos1, slots1, comp1) {
                  this.varying[name1] = new GlslProgramJavascriptVar(name1, pos1, slots1, comp1, "varying");
                  return this.varying[name1];
              };
              /**
         * GlslProgramJavascriptVar Class
         */ function GlslProgramJavascriptVar(name1, pos1, slots1, comp1, type1) {
                  this.name = name1;
                  this.pos = pos1;
                  this.slots = slots1;
                  this.components = comp1;
                  this.type = type1;
              } //this.glsl = glsl;
              module.exports = glsl;
          })();
      });
      var ast$1 = createCommonjsModule(function(module1, exports1) {
          "use strict";
          Object.defineProperty(exports1, "__esModule", {
              value: true
          });
          exports1.makeEveryOtherGenerator = exports1.makeGenerator = exports1.visit = exports1.evaluate = void 0;
          var isNode1 = function(node1) {
              return !!(node1 === null || node1 === void 0 ? void 0 : node1.type);
          };
          var isTraversable1 = function(node1) {
              return isNode1(node1) || Array.isArray(node1);
          };
          var evaluate1 = function(ast1, visitors1) {
              var visit1 = function(node1) {
                  var visitor1 = visitors1[node1.type];
                  if (!visitor1) throw new Error("No evaluate() visitor for " + node1.type);
                  return visitors1[node1.type](node1, visit1);
              };
              return visit1(ast1);
          };
          exports1.evaluate = evaluate1;
          var makePath1 = function(node1, parent1, parentPath1, key1, index3) {
              return {
                  node: node1,
                  parent: parent1,
                  parentPath: parentPath1,
                  key: key1,
                  index: index3,
                  skip: function() {
                      this.skipped = true;
                  },
                  remove: function() {
                      this.removed = true;
                  },
                  replaceWith: function(replacer1) {
                      this.replaced = replacer1;
                  },
                  findParent: function(test1) {
                      return !parentPath1 ? parentPath1 : test1(parentPath1) ? parentPath1 : parentPath1.findParent(test1);
                  }
              };
          };
          /**
     * Apply the visitor pattern to an AST that conforms to this compiler's spec
     */ var visit1 = function(ast1, visitors1) {
              var visitNode1 = function(node1, parent1, parentPath1, key1, index3) {
                  var _a1;
                  var visitor1 = visitors1[node1.type];
                  var path1 = makePath1(node1, parent1, parentPath1, key1, index3);
                  if (visitor1 === null || visitor1 === void 0 ? void 0 : visitor1.enter) {
                      visitor1.enter(path1);
                      if (path1.removed) {
                          if (!key1 || !parent1) throw new Error("Asked to remove " + node1.id + " but no parent key was present in " + (parent1 === null || parent1 === void 0 ? void 0 : parent1.id));
                          if (typeof index3 === "number") parent1[key1].splice(index3, 1);
                          else parent1[key1] = null;
                          return path1;
                      }
                      if (path1.replaced) {
                          if (!key1 || !parent1) throw new Error("Asked to remove " + node1.id + " but no parent key was present in " + (parent1 === null || parent1 === void 0 ? void 0 : parent1.id));
                          if (typeof index3 === "number") parent1[key1].splice(index3, 1, path1.replaced);
                          else parent1[key1] = path1.replaced;
                      }
                      if (path1.skipped) return path1;
                  }
                  Object.entries(node1).filter(function(_a1) {
                      var nodeKey1 = _a1[0], nodeValue1 = _a1[1];
                      return isTraversable1(nodeValue1);
                  }).forEach(function(_a1) {
                      var nodeKey1 = _a1[0], nodeValue1 = _a1[1];
                      if (Array.isArray(nodeValue1)) for(var i3 = 0, offset2 = 0; i3 - offset2 < nodeValue1.length; i3++){
                          var child1 = nodeValue1[i3 - offset2];
                          var res1 = visitNode1(child1, node1, path1, nodeKey1, i3 - offset2);
                          if (res1 === null || res1 === void 0 ? void 0 : res1.removed) offset2 += 1;
                      }
                      else visitNode1(nodeValue1, node1, path1, nodeKey1);
                  });
                  (_a1 = visitor1 === null || visitor1 === void 0 ? void 0 : visitor1.exit) === null || _a1 === void 0 || _a1.call(visitor1, path1);
              // visitor?.exit?.(node, parent, key, index);
              };
              return visitNode1(ast1);
          };
          exports1.visit = visit1;
          /**
     * Stringify an AST
     */ var makeGenerator1 = function(generators1) {
              var gen1 = function(ast1) {
                  return typeof ast1 === "string" ? ast1 : ast1 === null || ast1 === undefined ? "" : Array.isArray(ast1) ? ast1.map(gen1).join("") : ast1.type in generators1 ? generators1[ast1.type](ast1) : "NO GENERATOR FOR " + ast1.type + ast1;
              };
              return gen1;
          };
          exports1.makeGenerator = makeGenerator1;
          var makeEveryOtherGenerator1 = function(generate1) {
              var everyOther1 = function(nodes1, eo1) {
                  return nodes1.reduce(function(output1, node1, index3) {
                      return output1 + generate1(node1) + (index3 === nodes1.length - 1 ? "" : generate1(eo1[index3]));
                  }, "");
              };
              return everyOther1;
          };
          exports1.makeEveryOtherGenerator = makeEveryOtherGenerator1;
      });
      var ast$2 = /*@__PURE__*/ getDefaultExportFromCjs(ast$1);
      "use strict";
      var generators = {
          program: function(node1) {
              return generate(node1.ws) + generate(node1.program);
          },
          preprocessor: function(node1) {
              return generate(node1.line) + generate(node1._);
          },
          keyword: function(node1) {
              return generate(node1.token) + generate(node1.whitespace);
          },
          precision: function(node1) {
              return generate(node1.prefix) + generate(node1.qualifier) + generate(node1.specifier);
          },
          // Statements
          expression_statement: function(node1) {
              return generate(node1.expression) + generate(node1.semi);
          },
          if_statement: function(node1) {
              return generate(node1.if) + generate(node1.lp) + generate(node1.condition) + generate(node1.rp) + generate(node1.body) + generate(node1.else);
          },
          switch_statement: function(node1) {
              return generate(node1.switch) + generate(node1.lp) + generate(node1.expression) + generate(node1.rp) + generate(node1.lb) + generate(node1.cases) + generate(node1.rb);
          },
          break_statement: function(node1) {
              return generate(node1.break) + generate(node1.semi);
          },
          do_statement: function(node1) {
              return generate(node1.do) + generate(node1.body) + generate(node1.while) + generate(node1.lp) + generate(node1.expression) + generate(node1.rp) + generate(node1.semi);
          },
          continue_statement: function(node1) {
              return generate(node1.continue) + generate(node1.semi);
          },
          return_statement: function(node1) {
              return generate(node1.return) + generate(node1.expression) + generate(node1.semi);
          },
          discard_statement: function(node1) {
              return generate(node1.discard) + generate(node1.semi);
          },
          while_statement: function(node1) {
              return generate(node1.while) + generate(node1.lp) + generate(node1.condition) + generate(node1.rp) + generate(node1.body);
          },
          for_statement: function(node1) {
              return generate(node1.for) + generate(node1.lp) + generate(node1.init) + generate(node1.initSemi) + generate(node1.condition) + generate(node1.conditionSemi) + generate(node1.operation) + generate(node1.rp) + generate(node1.body);
          },
          condition_expression: function(node1) {
              return generate(node1.specified_type) + generate(node1.identifier) + generate(node1.declarator) + generate(node1.op) + generate(node1.initializer);
          },
          declaration_statement: function(node1) {
              return generate(node1.declaration) + generate(node1.semi);
          },
          fully_specified_type: function(node1) {
              return generate(node1.qualifiers) + generate(node1.specifier);
          },
          layout_qualifier: function(node1) {
              return generate(node1.layout) + generate(node1.lp) + generateWithEveryOther(node1.qualifiers, node1.commas) + generate(node1.rp);
          },
          layout_qualifier_id: function(node1) {
              return generate(node1.identifier) + generate(node1.operator) + generate(node1.expression);
          },
          switch_case: function(node1) {
              return generate(node1.case) + generate(node1.test) + generate(node1.colon) + generate(node1.statements);
          },
          default_case: function(node1) {
              return generate(node1.default) + generate(node1.colon) + generate(node1.statements);
          },
          declaration: function(node1) {
              return generate(node1.specified_type) + generate(node1.identifier) + generate(node1.quantifier) + generate(node1.operator) + generate(node1.initializer);
          },
          declarator_list: function(node1) {
              return generate(node1.specified_type) + generateWithEveryOther(node1.declarations, node1.commas);
          },
          declarator: function(node1) {
              return generate(node1.specified_type) + generate(node1.identifier) + generate(node1.qualifiers) + generate(node1.quantifier);
          },
          type_specifier: function(node1) {
              return generate(node1.specifier) + generate(node1.quantifier) + generate(node1.declarations);
          },
          array_specifiers: function(node1) {
              return generate(node1.specifiers);
          },
          array_specifier: function(node1) {
              return generate(node1.lb) + generate(node1.expression) + generate(node1.rb);
          },
          identifier: function(node1) {
              return node1.identifier + generate(node1.whitespace);
          },
          function: function(node1) {
              return generate(node1["prototype"]) + generate(node1.body) + generate(node1.rp);
          },
          function_header: function(node1) {
              return generate(node1.returnType) + generate(node1.name) + generate(node1.lp);
          },
          function_prototype: function(node1) {
              return generate(node1.header.returnType) + generate(node1.header.name) + generate(node1.header.lp) + (node1.parameters ? generateWithEveryOther(node1.parameters, node1.commas) : "") + generate(node1.rp);
          },
          parameter_declaration: function(node1) {
              return generate(node1.qualifier) + generate(node1.declaration);
          },
          compound_statement: function(node1) {
              return generate(node1.lb) + generate(node1.statements) + generate(node1.rb);
          },
          function_call: function(node1) {
              return generate(node1.identifier) + generate(node1.lp) + generate(node1.args) + generate(node1.rp);
          },
          parameter_declarator: function(node1) {
              return generate(node1.qualifier) + generate(node1.specifier) + generate(node1.identifier) + generate(node1.quantifier);
          },
          postfix: function(node1) {
              return generate(node1.expr) + generate(node1.postfix);
          },
          quantifier: function(node1) {
              return generate(node1.lb) + generate(node1.expr) + generate(node1.rb);
          },
          quantified_identifier: function(node1) {
              return generate(node1.identifier) + generate(node1.quantifier);
          },
          field_selection: function(node1) {
              return generate(node1.dot) + generate(node1.selection);
          },
          subroutine_qualifier: function(node1) {
              return generate(node1.subroutine) + generate(node1.lp) + generate(node1.type_names) + generate(node1.commas) + generate(node1.rp);
          },
          assignment: function(node1) {
              return generate(node1.left) + generate(node1.operator) + generate(node1.right);
          },
          ternary: function(node1) {
              return generate(node1.expr) + generate(node1.question) + generate(node1.left) + generate(node1.colon) + generate(node1.right);
          },
          binary: function(node1) {
              return generate(node1.left) + generate(node1.operator) + generate(node1.right);
          },
          group: function(node1) {
              return generate(node1.lp) + generate(node1.expression) + generate(node1.rp);
          },
          unary: function(node1) {
              return generate(node1.operator) + generate(node1.expression);
          },
          float_constant: function(node1) {
              return generate(node1.token) + generate(node1.whitespace);
          },
          double_constant: function(node1) {
              return generate(node1.token) + generate(node1.whitespace);
          },
          int_constant: function(node1) {
              return generate(node1.token) + generate(node1.whitespace);
          },
          uint_constant: function(node1) {
              return generate(node1.token) + generate(node1.whitespace);
          },
          bool_constant: function(node1) {
              return generate(node1.token) + generate(node1.whitespace);
          },
          literal: function(node1) {
              return generate(node1.literal) + generate(node1.whitespace);
          },
          struct: function(node1) {
              return generate(node1.struct) + generate(node1.typeName) + generate(node1.lb) + generate(node1.declarations) + generate(node1.rb);
          },
          struct_declaration: function(node1) {
              return generate(node1.declaration) + generate(node1.semi);
          },
          interface_declarator: function(node1) {
              return generate(node1.qualifiers) + generate(node1.interface_type) + generate(node1.lp) + generate(node1.declarations) + generate(node1.rp) + generate(node1.identifier);
          },
          struct_declarator: function(node1) {
              return generate(node1.specified_type) + generateWithEveryOther(node1.declarations, node1.commas);
          },
          initializer_list: function(node1) {
              return generate(node1.lb) + generateWithEveryOther(node1.initializers, node1.commas) + generate(node1.rb);
          },
          qualifier_declarator: function(node1) {
              return generate(node1.qualifiers) + generateWithEveryOther(node1.declarations, node1.commas);
          }
      };
      var generate = (0, ast$1.makeGenerator)(generators);
      var generateWithEveryOther = (0, ast$1.makeEveryOtherGenerator)(generate);
      var _default = generate;
      var generator = /*#__PURE__*/ Object.defineProperty({
          default: _default
      }, "__esModule", {
          value: true
      });
      // Generated by Peggy 1.2.0.
      //
      // https://peggyjs.org/
      "use strict";
      function peg$subclass(child1, parent1) {
          function C1() {
              this.constructor = child1;
          }
          C1.prototype = parent1.prototype;
          child1.prototype = new C1();
      }
      function peg$SyntaxError(message1, expected1, found1, location1) {
          var self1 = Error.call(this, message1);
          if (Object.setPrototypeOf) Object.setPrototypeOf(self1, peg$SyntaxError.prototype);
          self1.expected = expected1;
          self1.found = found1;
          self1.location = location1;
          self1.name = "SyntaxError";
          return self1;
      }
      peg$subclass(peg$SyntaxError, Error);
      function peg$padEnd(str1, targetLength1, padString1) {
          padString1 = padString1 || " ";
          if (str1.length > targetLength1) return str1;
          targetLength1 -= str1.length;
          padString1 += padString1.repeat(targetLength1);
          return str1 + padString1.slice(0, targetLength1);
      }
      peg$SyntaxError.prototype.format = function(sources1) {
          var str1 = "Error: " + this.message;
          if (this.location) {
              var src2 = null;
              var k1;
              for(k1 = 0; k1 < sources1.length; k1++)if (sources1[k1].source === this.location.source) {
                  src2 = sources1[k1].text.split(/\r\n|\n|\r/g);
                  break;
              }
              var s10 = this.location.start;
              var loc1 = this.location.source + ":" + s10.line + ":" + s10.column;
              if (src2) {
                  var e1 = this.location.end;
                  var filler1 = peg$padEnd("", s10.line.toString().length);
                  var line1 = src2[s10.line - 1];
                  var last1 = s10.line === e1.line ? e1.column : line1.length + 1;
                  str1 += "\n --> " + loc1 + "\n" + filler1 + " |\n" + s10.line + " | " + line1 + "\n" + filler1 + " | " + peg$padEnd("", s10.column - 1) + peg$padEnd("", last1 - s10.column, "^");
              } else str1 += "\n at " + loc1;
          }
          return str1;
      };
      peg$SyntaxError.buildMessage = function(expected1, found1) {
          var DESCRIBE_EXPECTATION_FNS1 = {
              literal: function(expectation1) {
                  return '"' + literalEscape1(expectation1.text) + '"';
              },
              class: function(expectation1) {
                  var escapedParts1 = expectation1.parts.map(function(part1) {
                      return Array.isArray(part1) ? classEscape1(part1[0]) + "-" + classEscape1(part1[1]) : classEscape1(part1);
                  });
                  return "[" + (expectation1.inverted ? "^" : "") + escapedParts1 + "]";
              },
              any: function() {
                  return "any character";
              },
              end: function() {
                  return "end of input";
              },
              other: function(expectation1) {
                  return expectation1.description;
              }
          };
          function hex1(ch1) {
              return ch1.charCodeAt(0).toString(16).toUpperCase();
          }
          function literalEscape1(s10) {
              return s10.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch1) {
                  return "\\x0" + hex1(ch1);
              }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch1) {
                  return "\\x" + hex1(ch1);
              });
          }
          function classEscape1(s10) {
              return s10.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch1) {
                  return "\\x0" + hex1(ch1);
              }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch1) {
                  return "\\x" + hex1(ch1);
              });
          }
          function describeExpectation1(expectation1) {
              return DESCRIBE_EXPECTATION_FNS1[expectation1.type](expectation1);
          }
          function describeExpected1(expected1) {
              var descriptions1 = expected1.map(describeExpectation1);
              var i3, j1;
              descriptions1.sort();
              if (descriptions1.length > 0) {
                  for(i3 = 1, j1 = 1; i3 < descriptions1.length; i3++)if (descriptions1[i3 - 1] !== descriptions1[i3]) {
                      descriptions1[j1] = descriptions1[i3];
                      j1++;
                  }
                  descriptions1.length = j1;
              }
              switch(descriptions1.length){
                  case 1:
                      return descriptions1[0];
                  case 2:
                      return descriptions1[0] + " or " + descriptions1[1];
                  default:
                      return descriptions1.slice(0, -1).join(", ") + ", or " + descriptions1[descriptions1.length - 1];
              }
          }
          function describeFound1(found1) {
              return found1 ? '"' + literalEscape1(found1) + '"' : "end of input";
          }
          return "Expected " + describeExpected1(expected1) + " but " + describeFound1(found1) + " found.";
      };
      function peg$parse(input1, options1) {
          options1 = options1 !== undefined ? options1 : {};
          var peg$FAILED1 = {};
          var peg$source1 = options1.grammarSource;
          var peg$startRuleFunctions1 = {
              start: peg$parsestart1
          };
          var peg$startRuleFunction1 = peg$parsestart1;
          var peg$c01 = "attribute";
          var peg$c1100 = "varying";
          var peg$c214 = "const";
          var peg$c310 = "bool";
          var peg$c410 = "float";
          var peg$c510 = "double";
          var peg$c610 = "int";
          var peg$c710 = "uint";
          var peg$c810 = "break";
          var peg$c910 = "continue";
          var peg$c1010 = "do";
          var peg$c1110 = "else";
          var peg$c1210 = "for";
          var peg$c1310 = "if";
          var peg$c1410 = "discard";
          var peg$c1510 = "return";
          var peg$c1610 = "switch";
          var peg$c1710 = "case";
          var peg$c1810 = "default";
          var peg$c1910 = "subroutine";
          var peg$c2010 = "bvec2";
          var peg$c215 = "bvec3";
          var peg$c221 = "bvec4";
          var peg$c231 = "ivec2";
          var peg$c241 = "ivec3";
          var peg$c251 = "ivec4";
          var peg$c261 = "uvec2";
          var peg$c271 = "uvec3";
          var peg$c281 = "uvec4";
          var peg$c291 = "vec2";
          var peg$c301 = "vec3";
          var peg$c311 = "vec4";
          var peg$c321 = "mat2";
          var peg$c331 = "mat3";
          var peg$c341 = "mat4";
          var peg$c351 = "centroid";
          var peg$c361 = "in";
          var peg$c371 = "out";
          var peg$c381 = "inout";
          var peg$c391 = "uniform";
          var peg$c401 = "patch";
          var peg$c411 = "sample";
          var peg$c421 = "buffer";
          var peg$c431 = "shared";
          var peg$c441 = "coherent";
          var peg$c451 = "volatile";
          var peg$c461 = "restrict";
          var peg$c471 = "readonly";
          var peg$c481 = "writeonly";
          var peg$c491 = "dvec2";
          var peg$c501 = "dvec3";
          var peg$c511 = "dvec4";
          var peg$c521 = "dmat2";
          var peg$c531 = "dmat3";
          var peg$c541 = "dmat4";
          var peg$c551 = "noperspective";
          var peg$c561 = "flat";
          var peg$c571 = "smooth";
          var peg$c581 = "layout";
          var peg$c591 = "mat2x2";
          var peg$c601 = "mat2x3";
          var peg$c611 = "mat2x4";
          var peg$c621 = "mat3x2";
          var peg$c631 = "mat3x3";
          var peg$c641 = "mat3x4";
          var peg$c651 = "mat4x2";
          var peg$c661 = "mat4x3";
          var peg$c671 = "mat4x4";
          var peg$c681 = "dmat2x2";
          var peg$c691 = "dmat2x3";
          var peg$c701 = "dmat2x4";
          var peg$c711 = "dmat3x2";
          var peg$c721 = "dmat3x3";
          var peg$c731 = "dmat3x4";
          var peg$c741 = "dmat4x2";
          var peg$c751 = "dmat4x3";
          var peg$c761 = "dmat4x4";
          var peg$c771 = "atomic_uint";
          var peg$c781 = "sampler1D";
          var peg$c791 = "sampler2D";
          var peg$c801 = "sampler3D";
          var peg$c811 = "samplerCube";
          var peg$c821 = "sampler1DShadow";
          var peg$c831 = "sampler2DShadow";
          var peg$c841 = "samplerCubeShadow";
          var peg$c851 = "sampler1DArray";
          var peg$c861 = "sampler2DArray";
          var peg$c871 = "sampler1DArrayShadow";
          var peg$c881 = "sampler2DArrayshadow";
          var peg$c891 = "isampler1D";
          var peg$c901 = "isampler2D";
          var peg$c911 = "isampler3D";
          var peg$c921 = "isamplerCube";
          var peg$c931 = "isampler1Darray";
          var peg$c941 = "isampler2DArray";
          var peg$c951 = "usampler1D";
          var peg$c961 = "usampler2D";
          var peg$c971 = "usampler3D";
          var peg$c981 = "usamplerCube";
          var peg$c991 = "usampler1DArray";
          var peg$c1001 = "usampler2DArray";
          var peg$c1011 = "sampler2DRect";
          var peg$c1021 = "sampler2DRectshadow";
          var peg$c1031 = "isampler2DRect";
          var peg$c1041 = "usampler2DRect";
          var peg$c1051 = "samplerBuffer";
          var peg$c1061 = "isamplerBuffer";
          var peg$c1071 = "usamplerBuffer";
          var peg$c1081 = "samplerCubeArray";
          var peg$c1091 = "samplerCubeArrayShadow";
          var peg$c1101 = "isamplerCubeArray";
          var peg$c1111 = "usamplerCubeArray";
          var peg$c1121 = "sampler2DMS";
          var peg$c1131 = "isampler2DMS";
          var peg$c1141 = "usampler2DMS";
          var peg$c1151 = "sampler2DMSArray";
          var peg$c1161 = "isampler2DMSArray";
          var peg$c1171 = "usampler2DMSArray";
          var peg$c1181 = "image1D";
          var peg$c1191 = "iimage1D";
          var peg$c1201 = "uimage1D";
          var peg$c1211 = "image2D";
          var peg$c1221 = "iimage2D";
          var peg$c1231 = "uimage2D";
          var peg$c1241 = "image3D";
          var peg$c1251 = "iimage3D";
          var peg$c1261 = "uimage3D";
          var peg$c1271 = "image2DRect";
          var peg$c1281 = "iimage2DRect";
          var peg$c1291 = "uimage2DRect";
          var peg$c1301 = "imageCube";
          var peg$c1311 = "iimageCube";
          var peg$c1321 = "uimageCube";
          var peg$c1331 = "imageBuffer";
          var peg$c1341 = "iimageBuffer";
          var peg$c1351 = "uimageBuffer";
          var peg$c1361 = "image1DArray";
          var peg$c1371 = "iimage1DArray";
          var peg$c1381 = "uimage1DArray";
          var peg$c1391 = "image2DArray";
          var peg$c1401 = "iimage2DArray";
          var peg$c1411 = "uimage2DArray";
          var peg$c1421 = "imageCubeArray";
          var peg$c1431 = "iimageCubeArray";
          var peg$c1441 = "uimageCubeArray";
          var peg$c1451 = "image2DMS";
          var peg$c1461 = "iimage2DMS";
          var peg$c1471 = "uimage2DMS";
          var peg$c1481 = "image2DMArray";
          var peg$c1491 = "iimage2DMSArray";
          var peg$c1501 = "uimage2DMSArray";
          var peg$c1511 = "struct";
          var peg$c1521 = "void";
          var peg$c1531 = "while";
          var peg$c1541 = "invariant";
          var peg$c1551 = "precise";
          var peg$c1561 = "highp";
          var peg$c1571 = "mediump";
          var peg$c1581 = "lowp";
          var peg$c1591 = "precision";
          var peg$c1601 = "true";
          var peg$c1611 = "false";
          var peg$c1621 = "<<";
          var peg$c1631 = ">>";
          var peg$c1641 = "++";
          var peg$c1651 = "--";
          var peg$c1661 = "<=";
          var peg$c1671 = ">=";
          var peg$c1681 = "==";
          var peg$c1691 = "!=";
          var peg$c1701 = "&&";
          var peg$c1711 = "||";
          var peg$c1721 = "^^";
          var peg$c1731 = "*=";
          var peg$c1741 = "/=";
          var peg$c1751 = "+=";
          var peg$c1761 = "%=";
          var peg$c1771 = "<<=";
          var peg$c1781 = ">>=";
          var peg$c1791 = "&=";
          var peg$c1801 = "^=";
          var peg$c1811 = "|=";
          var peg$c1821 = "-=";
          var peg$c1831 = "(";
          var peg$c1841 = ")";
          var peg$c1851 = "[";
          var peg$c1861 = "]";
          var peg$c1871 = "{";
          var peg$c1881 = "}";
          var peg$c1891 = ".";
          var peg$c1901 = ",";
          var peg$c1911 = ":";
          var peg$c1921 = "=";
          var peg$c1931 = ";";
          var peg$c1941 = "!";
          var peg$c1951 = "-";
          var peg$c1961 = "~";
          var peg$c1971 = "+";
          var peg$c1981 = "*";
          var peg$c1991 = "/";
          var peg$c2001 = "%";
          var peg$c2011 = "<";
          var peg$c2021 = ">";
          var peg$c2031 = "|";
          var peg$c2041 = "^";
          var peg$c2051 = "&";
          var peg$c2061 = "?";
          var peg$c2071 = "0";
          var peg$c2081 = "lf";
          var peg$c2091 = "LF";
          var peg$c2101 = "#";
          var peg$c2111 = "//";
          var peg$c2121 = "/*";
          var peg$c2131 = "*/";
          var peg$r01 = /^[A-Za-z_]/;
          var peg$r13 = /^[A-Za-z_0-9]/;
          var peg$r21 = /^[uU]/;
          var peg$r31 = /^[1-9]/;
          var peg$r41 = /^[0-7]/;
          var peg$r51 = /^[xX]/;
          var peg$r61 = /^[0-9a-fA-F]/;
          var peg$r71 = /^[0-9]/;
          var peg$r81 = /^[eE]/;
          var peg$r91 = /^[+\-]/;
          var peg$r101 = /^[fF]/;
          var peg$r111 = /^[^\n]/;
          var peg$r121 = /^[ \t\n\r]/;
          var peg$e01 = peg$literalExpectation1("attribute", false);
          var peg$e1100 = peg$literalExpectation1("varying", false);
          var peg$e253 = peg$literalExpectation1("const", false);
          var peg$e310 = peg$literalExpectation1("bool", false);
          var peg$e410 = peg$literalExpectation1("float", false);
          var peg$e510 = peg$literalExpectation1("double", false);
          var peg$e610 = peg$literalExpectation1("int", false);
          var peg$e710 = peg$literalExpectation1("uint", false);
          var peg$e810 = peg$literalExpectation1("break", false);
          var peg$e910 = peg$literalExpectation1("continue", false);
          var peg$e1010 = peg$literalExpectation1("do", false);
          var peg$e1110 = peg$literalExpectation1("else", false);
          var peg$e1210 = peg$literalExpectation1("for", false);
          var peg$e1310 = peg$literalExpectation1("if", false);
          var peg$e1410 = peg$literalExpectation1("discard", false);
          var peg$e1510 = peg$literalExpectation1("return", false);
          var peg$e1610 = peg$literalExpectation1("switch", false);
          var peg$e1710 = peg$literalExpectation1("case", false);
          var peg$e1810 = peg$literalExpectation1("default", false);
          var peg$e1910 = peg$literalExpectation1("subroutine", false);
          var peg$e2010 = peg$literalExpectation1("bvec2", false);
          var peg$e2110 = peg$literalExpectation1("bvec3", false);
          var peg$e2210 = peg$literalExpectation1("bvec4", false);
          var peg$e2310 = peg$literalExpectation1("ivec2", false);
          var peg$e2410 = peg$literalExpectation1("ivec3", false);
          var peg$e254 = peg$literalExpectation1("ivec4", false);
          var peg$e261 = peg$literalExpectation1("uvec2", false);
          var peg$e271 = peg$literalExpectation1("uvec3", false);
          var peg$e281 = peg$literalExpectation1("uvec4", false);
          var peg$e291 = peg$literalExpectation1("vec2", false);
          var peg$e301 = peg$literalExpectation1("vec3", false);
          var peg$e311 = peg$literalExpectation1("vec4", false);
          var peg$e321 = peg$literalExpectation1("mat2", false);
          var peg$e331 = peg$literalExpectation1("mat3", false);
          var peg$e341 = peg$literalExpectation1("mat4", false);
          var peg$e351 = peg$literalExpectation1("centroid", false);
          var peg$e361 = peg$literalExpectation1("in", false);
          var peg$e371 = peg$literalExpectation1("out", false);
          var peg$e381 = peg$literalExpectation1("inout", false);
          var peg$e391 = peg$literalExpectation1("uniform", false);
          var peg$e401 = peg$literalExpectation1("patch", false);
          var peg$e411 = peg$literalExpectation1("sample", false);
          var peg$e421 = peg$literalExpectation1("buffer", false);
          var peg$e431 = peg$literalExpectation1("shared", false);
          var peg$e441 = peg$literalExpectation1("coherent", false);
          var peg$e451 = peg$literalExpectation1("volatile", false);
          var peg$e461 = peg$literalExpectation1("restrict", false);
          var peg$e471 = peg$literalExpectation1("readonly", false);
          var peg$e481 = peg$literalExpectation1("writeonly", false);
          var peg$e491 = peg$literalExpectation1("dvec2", false);
          var peg$e501 = peg$literalExpectation1("dvec3", false);
          var peg$e511 = peg$literalExpectation1("dvec4", false);
          var peg$e521 = peg$literalExpectation1("dmat2", false);
          var peg$e531 = peg$literalExpectation1("dmat3", false);
          var peg$e541 = peg$literalExpectation1("dmat4", false);
          var peg$e551 = peg$literalExpectation1("noperspective", false);
          var peg$e561 = peg$literalExpectation1("flat", false);
          var peg$e571 = peg$literalExpectation1("smooth", false);
          var peg$e581 = peg$literalExpectation1("layout", false);
          var peg$e591 = peg$literalExpectation1("mat2x2", false);
          var peg$e601 = peg$literalExpectation1("mat2x3", false);
          var peg$e611 = peg$literalExpectation1("mat2x4", false);
          var peg$e621 = peg$literalExpectation1("mat3x2", false);
          var peg$e631 = peg$literalExpectation1("mat3x3", false);
          var peg$e641 = peg$literalExpectation1("mat3x4", false);
          var peg$e651 = peg$literalExpectation1("mat4x2", false);
          var peg$e661 = peg$literalExpectation1("mat4x3", false);
          var peg$e671 = peg$literalExpectation1("mat4x4", false);
          var peg$e681 = peg$literalExpectation1("dmat2x2", false);
          var peg$e691 = peg$literalExpectation1("dmat2x3", false);
          var peg$e701 = peg$literalExpectation1("dmat2x4", false);
          var peg$e711 = peg$literalExpectation1("dmat3x2", false);
          var peg$e721 = peg$literalExpectation1("dmat3x3", false);
          var peg$e731 = peg$literalExpectation1("dmat3x4", false);
          var peg$e741 = peg$literalExpectation1("dmat4x2", false);
          var peg$e751 = peg$literalExpectation1("dmat4x3", false);
          var peg$e761 = peg$literalExpectation1("dmat4x4", false);
          var peg$e771 = peg$literalExpectation1("atomic_uint", false);
          var peg$e781 = peg$literalExpectation1("sampler1D", false);
          var peg$e791 = peg$literalExpectation1("sampler2D", false);
          var peg$e801 = peg$literalExpectation1("sampler3D", false);
          var peg$e811 = peg$literalExpectation1("samplerCube", false);
          var peg$e821 = peg$literalExpectation1("sampler1DShadow", false);
          var peg$e831 = peg$literalExpectation1("sampler2DShadow", false);
          var peg$e841 = peg$literalExpectation1("samplerCubeShadow", false);
          var peg$e851 = peg$literalExpectation1("sampler1DArray", false);
          var peg$e861 = peg$literalExpectation1("sampler2DArray", false);
          var peg$e871 = peg$literalExpectation1("sampler1DArrayShadow", false);
          var peg$e881 = peg$literalExpectation1("sampler2DArrayshadow", false);
          var peg$e891 = peg$literalExpectation1("isampler1D", false);
          var peg$e901 = peg$literalExpectation1("isampler2D", false);
          var peg$e911 = peg$literalExpectation1("isampler3D", false);
          var peg$e921 = peg$literalExpectation1("isamplerCube", false);
          var peg$e931 = peg$literalExpectation1("isampler1Darray", false);
          var peg$e941 = peg$literalExpectation1("isampler2DArray", false);
          var peg$e951 = peg$literalExpectation1("usampler1D", false);
          var peg$e961 = peg$literalExpectation1("usampler2D", false);
          var peg$e971 = peg$literalExpectation1("usampler3D", false);
          var peg$e981 = peg$literalExpectation1("usamplerCube", false);
          var peg$e991 = peg$literalExpectation1("usampler1DArray", false);
          var peg$e1001 = peg$literalExpectation1("usampler2DArray", false);
          var peg$e1011 = peg$literalExpectation1("sampler2DRect", false);
          var peg$e1021 = peg$literalExpectation1("sampler2DRectshadow", false);
          var peg$e1031 = peg$literalExpectation1("isampler2DRect", false);
          var peg$e1041 = peg$literalExpectation1("usampler2DRect", false);
          var peg$e1051 = peg$literalExpectation1("samplerBuffer", false);
          var peg$e1061 = peg$literalExpectation1("isamplerBuffer", false);
          var peg$e1071 = peg$literalExpectation1("usamplerBuffer", false);
          var peg$e1081 = peg$literalExpectation1("samplerCubeArray", false);
          var peg$e1091 = peg$literalExpectation1("samplerCubeArrayShadow", false);
          var peg$e1101 = peg$literalExpectation1("isamplerCubeArray", false);
          var peg$e1111 = peg$literalExpectation1("usamplerCubeArray", false);
          var peg$e1121 = peg$literalExpectation1("sampler2DMS", false);
          var peg$e1131 = peg$literalExpectation1("isampler2DMS", false);
          var peg$e1141 = peg$literalExpectation1("usampler2DMS", false);
          var peg$e1151 = peg$literalExpectation1("sampler2DMSArray", false);
          var peg$e1161 = peg$literalExpectation1("isampler2DMSArray", false);
          var peg$e1171 = peg$literalExpectation1("usampler2DMSArray", false);
          var peg$e1181 = peg$literalExpectation1("image1D", false);
          var peg$e1191 = peg$literalExpectation1("iimage1D", false);
          var peg$e1201 = peg$literalExpectation1("uimage1D", false);
          var peg$e1211 = peg$literalExpectation1("image2D", false);
          var peg$e1221 = peg$literalExpectation1("iimage2D", false);
          var peg$e1231 = peg$literalExpectation1("uimage2D", false);
          var peg$e1241 = peg$literalExpectation1("image3D", false);
          var peg$e1251 = peg$literalExpectation1("iimage3D", false);
          var peg$e1261 = peg$literalExpectation1("uimage3D", false);
          var peg$e1271 = peg$literalExpectation1("image2DRect", false);
          var peg$e1281 = peg$literalExpectation1("iimage2DRect", false);
          var peg$e1291 = peg$literalExpectation1("uimage2DRect", false);
          var peg$e1301 = peg$literalExpectation1("imageCube", false);
          var peg$e1311 = peg$literalExpectation1("iimageCube", false);
          var peg$e1321 = peg$literalExpectation1("uimageCube", false);
          var peg$e1331 = peg$literalExpectation1("imageBuffer", false);
          var peg$e1341 = peg$literalExpectation1("iimageBuffer", false);
          var peg$e1351 = peg$literalExpectation1("uimageBuffer", false);
          var peg$e1361 = peg$literalExpectation1("image1DArray", false);
          var peg$e1371 = peg$literalExpectation1("iimage1DArray", false);
          var peg$e1381 = peg$literalExpectation1("uimage1DArray", false);
          var peg$e1391 = peg$literalExpectation1("image2DArray", false);
          var peg$e1401 = peg$literalExpectation1("iimage2DArray", false);
          var peg$e1411 = peg$literalExpectation1("uimage2DArray", false);
          var peg$e1421 = peg$literalExpectation1("imageCubeArray", false);
          var peg$e1431 = peg$literalExpectation1("iimageCubeArray", false);
          var peg$e1441 = peg$literalExpectation1("uimageCubeArray", false);
          var peg$e1451 = peg$literalExpectation1("image2DMS", false);
          var peg$e1461 = peg$literalExpectation1("iimage2DMS", false);
          var peg$e1471 = peg$literalExpectation1("uimage2DMS", false);
          var peg$e1481 = peg$literalExpectation1("image2DMArray", false);
          var peg$e1491 = peg$literalExpectation1("iimage2DMSArray", false);
          var peg$e1501 = peg$literalExpectation1("uimage2DMSArray", false);
          var peg$e1511 = peg$literalExpectation1("struct", false);
          var peg$e1521 = peg$literalExpectation1("void", false);
          var peg$e1531 = peg$literalExpectation1("while", false);
          var peg$e1541 = peg$literalExpectation1("invariant", false);
          var peg$e1551 = peg$literalExpectation1("precise", false);
          var peg$e1561 = peg$literalExpectation1("highp", false);
          var peg$e1571 = peg$literalExpectation1("mediump", false);
          var peg$e1581 = peg$literalExpectation1("lowp", false);
          var peg$e1591 = peg$literalExpectation1("precision", false);
          var peg$e1601 = peg$literalExpectation1("true", false);
          var peg$e1611 = peg$literalExpectation1("false", false);
          var peg$e1621 = peg$otherExpectation1("keyword");
          var peg$e1631 = peg$literalExpectation1("<<", false);
          var peg$e1641 = peg$literalExpectation1(">>", false);
          var peg$e1651 = peg$literalExpectation1("++", false);
          var peg$e1661 = peg$literalExpectation1("--", false);
          var peg$e1671 = peg$literalExpectation1("<=", false);
          var peg$e1681 = peg$literalExpectation1(">=", false);
          var peg$e1691 = peg$literalExpectation1("==", false);
          var peg$e1701 = peg$literalExpectation1("!=", false);
          var peg$e1711 = peg$literalExpectation1("&&", false);
          var peg$e1721 = peg$literalExpectation1("||", false);
          var peg$e1731 = peg$literalExpectation1("^^", false);
          var peg$e1741 = peg$literalExpectation1("*=", false);
          var peg$e1751 = peg$literalExpectation1("/=", false);
          var peg$e1761 = peg$literalExpectation1("+=", false);
          var peg$e1771 = peg$literalExpectation1("%=", false);
          var peg$e1781 = peg$literalExpectation1("<<=", false);
          var peg$e1791 = peg$literalExpectation1(">>=", false);
          var peg$e1801 = peg$literalExpectation1("&=", false);
          var peg$e1811 = peg$literalExpectation1("^=", false);
          var peg$e1821 = peg$literalExpectation1("|=", false);
          var peg$e1831 = peg$literalExpectation1("-=", false);
          var peg$e1841 = peg$literalExpectation1("(", false);
          var peg$e1851 = peg$literalExpectation1(")", false);
          var peg$e1861 = peg$literalExpectation1("[", false);
          var peg$e1871 = peg$literalExpectation1("]", false);
          var peg$e1881 = peg$literalExpectation1("{", false);
          var peg$e1891 = peg$literalExpectation1("}", false);
          var peg$e1901 = peg$literalExpectation1(".", false);
          var peg$e1911 = peg$literalExpectation1(",", false);
          var peg$e1921 = peg$literalExpectation1(":", false);
          var peg$e1931 = peg$literalExpectation1("=", false);
          var peg$e1941 = peg$literalExpectation1(";", false);
          var peg$e1951 = peg$literalExpectation1("!", false);
          var peg$e1961 = peg$literalExpectation1("-", false);
          var peg$e1971 = peg$literalExpectation1("~", false);
          var peg$e1981 = peg$literalExpectation1("+", false);
          var peg$e1991 = peg$literalExpectation1("*", false);
          var peg$e2001 = peg$literalExpectation1("/", false);
          var peg$e2011 = peg$literalExpectation1("%", false);
          var peg$e2021 = peg$literalExpectation1("<", false);
          var peg$e2031 = peg$literalExpectation1(">", false);
          var peg$e2041 = peg$literalExpectation1("|", false);
          var peg$e2051 = peg$literalExpectation1("^", false);
          var peg$e2061 = peg$literalExpectation1("&", false);
          var peg$e2071 = peg$literalExpectation1("?", false);
          var peg$e2081 = peg$classExpectation1([
              [
                  "A",
                  "Z"
              ],
              [
                  "a",
                  "z"
              ],
              "_"
          ], false, false);
          var peg$e2091 = peg$classExpectation1([
              [
                  "A",
                  "Z"
              ],
              [
                  "a",
                  "z"
              ],
              "_",
              [
                  "0",
                  "9"
              ]
          ], false, false);
          var peg$e2101 = peg$classExpectation1([
              "u",
              "U"
          ], false, false);
          var peg$e2111 = peg$classExpectation1([
              [
                  "1",
                  "9"
              ]
          ], false, false);
          var peg$e2121 = peg$literalExpectation1("0", false);
          var peg$e2131 = peg$classExpectation1([
              [
                  "0",
                  "7"
              ]
          ], false, false);
          var peg$e2141 = peg$classExpectation1([
              "x",
              "X"
          ], false, false);
          var peg$e2151 = peg$classExpectation1([
              [
                  "0",
                  "9"
              ],
              [
                  "a",
                  "f"
              ],
              [
                  "A",
                  "F"
              ]
          ], false, false);
          var peg$e2161 = peg$classExpectation1([
              [
                  "0",
                  "9"
              ]
          ], false, false);
          var peg$e2171 = peg$otherExpectation1("exponent");
          var peg$e2181 = peg$classExpectation1([
              "e",
              "E"
          ], false, false);
          var peg$e2191 = peg$classExpectation1([
              "+",
              "-"
          ], false, false);
          var peg$e2201 = peg$classExpectation1([
              "f",
              "F"
          ], false, false);
          var peg$e2211 = peg$literalExpectation1("lf", false);
          var peg$e2221 = peg$literalExpectation1("LF", false);
          var peg$e2231 = peg$otherExpectation1("primary expression");
          var peg$e2241 = peg$otherExpectation1("unary expression");
          var peg$e2251 = peg$otherExpectation1("equality expression");
          var peg$e2261 = peg$otherExpectation1("and expression");
          var peg$e2271 = peg$otherExpectation1("asignment");
          var peg$e2281 = peg$otherExpectation1("expression");
          var peg$e2291 = peg$otherExpectation1("precision statement");
          var peg$e2301 = peg$otherExpectation1("function prototype");
          var peg$e2311 = peg$otherExpectation1("function header");
          var peg$e2321 = peg$otherExpectation1("function parameters");
          var peg$e2331 = peg$otherExpectation1("parameter declaration");
          var peg$e2341 = peg$otherExpectation1("parameter declarator");
          var peg$e2351 = peg$otherExpectation1("single type qualifier");
          var peg$e2361 = peg$otherExpectation1("interpolation qualifier");
          var peg$e2371 = peg$otherExpectation1("storage qualifier");
          var peg$e2381 = peg$otherExpectation1("type specifier");
          var peg$e2391 = peg$otherExpectation1("array specifier");
          var peg$e2401 = peg$otherExpectation1("precision qualifier");
          var peg$e2411 = peg$otherExpectation1("struct specifier");
          var peg$e2421 = peg$otherExpectation1("iteration statement");
          var peg$e2431 = peg$otherExpectation1("jump statement");
          var peg$e2441 = peg$otherExpectation1("prepocessor");
          var peg$e2451 = peg$literalExpectation1("#", false);
          var peg$e2461 = peg$classExpectation1([
              "\n"
          ], true, false);
          var peg$e2471 = peg$otherExpectation1("whitespace");
          var peg$e2481 = peg$literalExpectation1("//", false);
          var peg$e2491 = peg$literalExpectation1("/*", false);
          var peg$e2501 = peg$literalExpectation1("*/", false);
          var peg$e2511 = peg$anyExpectation1();
          var peg$e2521 = peg$classExpectation1([
              " ",
              "	",
              "\n",
              "\r"
          ], false, false);
          var peg$f01 = function(ws1, program1) {
              return {
                  type: "program",
                  ws: ws1,
                  program: program1,
                  scopes: scopes1
              };
          };
          var peg$f110 = function(token1, t4) {
              return node1("keyword", {
                  token: token1,
                  whitespace: t4
              });
          };
          var peg$f210 = function(token1, _1) {
              return node1("float_constant", {
                  token: token1,
                  whitespace: _1
              });
          };
          var peg$f310 = function(token1, _1) {
              return node1("double_constant", {
                  token: token1,
                  whitespace: _1
              });
          };
          var peg$f410 = function(token1, _1) {
              return node1("int_constant", {
                  token: token1,
                  whitespace: _1
              });
          };
          var peg$f510 = function(token1, _1) {
              return node1("uint_constant", {
                  token: token1,
                  whitespace: _1
              });
          };
          var peg$f610 = function(token1, _1) {
              return node1("bool_constant", {
                  token: token1,
                  whitespace: _1
              });
          };
          var peg$f77 = function(token1, _1) {
              return node1("literal", {
                  literal: token1,
                  whitespace: _1
              });
          };
          var peg$f81 = function(identifier1, _1) {
              return node1("identifier", {
                  identifier: identifier1,
                  whitespace: _1
              });
          };
          var peg$f91 = function(ident1) {
              const { identifier: identifier1 } = ident1;
              // We do scope checking and parsing all in one pass. In the case of calling an
              // undefined function, here, we don't know that we're in a function, so we
              // can't warn appropriately. If we return false for the missing typename, the
              // program won't parse, since the function call node won't match since it uses
              // type_name for the function_identifier. So all we can do here is go on our
              // merry way if the type isn't known.
              // This only applies to structs. I'm not sure if it's right. Because TYPE_NAME
              // is used in lots of places, it's easier to put this check here.
              let found1;
              if (found1 = findTypeScope1(scope1, identifier1)) addTypeReference1(found1, identifier1, ident1);
              return ident1;
          };
          var peg$f101 = function(lp1, expression1, rp1) {
              return node1("group", {
                  lp: lp1,
                  expression: expression1,
                  rp: rp1
              });
          };
          var peg$f111 = function(ident1) {
              const { identifier: identifier1 } = ident1;
              addBindingReference1(scope1, identifier1, ident1);
              return ident1;
          };
          var peg$f121 = function(body1) {
              // Postfix becomes a left associative tree
              return body1.flat().reduceRight((postfix1, expr1)=>postfix1 ? node1("postfix", {
                      expr: expr1,
                      postfix: postfix1
                  }) : expr1);
          };
          var peg$f131 = function(lb1, expr1, rb1) {
              return node1("quantifier", {
                  lb: lb1,
                  expr: expr1,
                  rb: rb1
              });
          };
          var peg$f141 = function(dot1, selection1) {
              return node1("field_selection", {
                  dot: dot1,
                  selection: selection1
              });
          };
          var peg$f151 = function(identifier1, args1, rp1) {
              // Warning: This may be brittle. The langauge spec says that a
              // function_call name is a "type_specifier" which can be "float[3](...)"
              // or a TYPE_NAME. If it's a TYPE_NAME, it will have an identifier, so
              // add it to the referenced scope. If it's a constructor (the "float"
              // case) it won't, so don't add a reference ot it
              const fnName1 = identifier1.identifier.type === "postfix" ? identifier1.identifier.expr.identifier.specifier.identifier : identifier1.identifier.specifier.identifier;
              const n3 = node1("function_call", {
                  ...identifier1,
                  args: args1,
                  rp: rp1
              });
              // struct constructors are stored in scope types, not scope functions,
              // skip them (the isDeclaredType check)
              if (fnName1 && !isDeclaredType1(scope1, fnName1) && !builtIns1.has(fnName1)) {
                  if (!isDeclaredFunction1(scope1, fnName1)) warn1(`Warning: Function "${fnName1}" has not been declared`);
                  addFunctionReference1(scope1, fnName1, n3);
              }
              return n3;
          };
          var peg$f161 = function(v4) {
              return [
                  v4
              ];
          };
          var peg$f171 = function(head1, tail1) {
              // For convenience, we don't store commas as trees, but rather flatten
              // into an array
              return [
                  head1,
                  ...tail1.flat()
              ];
          };
          var peg$f181 = function(head1, suffix1, lp1) {
              return {
                  head: [
                      head1,
                      suffix1
                  ],
                  lp: lp1
              };
          };
          var peg$f191 = function(identifier1) {
              return {
                  lp: identifier1.lp,
                  identifier: [
                      identifier1.head
                  ].flat().reduceRight((postfix1, expr1)=>postfix1 ? node1("postfix", {
                          expr: expr1,
                          postfix: postfix1
                      }) : expr1)
              };
          };
          var peg$f201 = function(identifier1, lp1, args1, rp1) {
              return node1("function_call", {
                  identifier: identifier1,
                  lp: lp1,
                  args: args1,
                  rp: rp1
              });
          };
          var peg$f211 = function(operator1, expression1) {
              return node1("unary", {
                  operator: operator1,
                  expression: expression1
              });
          };
          var peg$f221 = function(head1, tail1) {
              return leftAssociate1(head1, tail1);
          };
          var peg$f231 = function(expr1, question1, left1, colon1, right1) {
              return {
                  question: question1,
                  left: left1,
                  right: right1,
                  colon: colon1
              };
          };
          var peg$f241 = function(expr1, suffix1) {
              // ? and : operators are right associative, which happens automatically
              // in pegjs grammar
              return suffix1 ? node1("ternary", {
                  expr: expr1,
                  ...suffix1
              }) : expr1;
          };
          var peg$f251 = function(left1, operator1, right1) {
              return node1("assignment", {
                  left: left1,
                  operator: operator1,
                  right: right1
              });
          };
          var peg$f261 = function(declaration1) {
              return node1("declaration_statement", {
                  declaration: declaration1[0],
                  semi: declaration1[1]
              });
          };
          var peg$f271 = function(qualifiers1, head1, tail1) {
              return node1("qualifier_declarator", {
                  qualifiers: qualifiers1,
                  // Head is optional, so remove falsey
                  declarations: xnil1([
                      head1,
                      ...tail1.map((t4)=>t4[1])
                  ]),
                  commas: tail1.map((t4)=>t4[0])
              });
          };
          var peg$f281 = function(qualifiers1, interface_type1, lp1, declarations1, rp1, identifier1) {
              const n3 = node1("interface_declarator", {
                  qualifiers: qualifiers1,
                  interface_type: interface_type1,
                  lp: lp1,
                  declarations: declarations1,
                  rp: rp1,
                  identifier: identifier1
              });
              createBindings1(scope1, [
                  interface_type1.identifier,
                  n3
              ]);
              return n3;
          };
          var peg$f291 = function(prefix1, qualifier1, specifier1) {
              return node1("precision", {
                  prefix: prefix1,
                  qualifier: qualifier1,
                  specifier: specifier1
              });
          };
          var peg$f301 = function(header1, params1, rp1) {
              const bindings1 = (params1?.parameters || [])// Ignore any param without an identifier, aka main(void)
              .filter((p6)=>!!p6.declaration.identifier).map((p6)=>[
                      p6.declaration.identifier.identifier,
                      p6
                  ]);
              createBindings1(scope1, ...bindings1);
              return node1("function_prototype", {
                  header: header1,
                  ...params1,
                  rp: rp1
              });
          };
          var peg$f311 = function(returnType1, name1, lp1) {
              const n3 = node1("function_header", {
                  returnType: returnType1,
                  name: name1,
                  lp: lp1
              });
              addFunctionReference1(scope1, name1.identifier, n3);
              scope1 = pushScope1(makeScope1(name1.identifier, scope1));
              return n3;
          };
          var peg$f321 = function(head1, tail1) {
              return {
                  parameters: [
                      head1,
                      ...tail1.map((t4)=>t4[1])
                  ],
                  commas: tail1.map((t4)=>t4[0])
              };
          };
          var peg$f331 = function(qualifier1, declaration1) {
              return node1("parameter_declaration", {
                  qualifier: qualifier1,
                  declaration: declaration1
              });
          };
          var peg$f341 = function(specifier1, identifier1, quantifier1) {
              return node1("parameter_declarator", {
                  specifier: specifier1,
                  identifier: identifier1,
                  quantifier: quantifier1
              });
          };
          var peg$f351 = function(head1, tail1) {
              const declarations1 = [
                  head1.declaration,
                  ...tail1.map((t4)=>t4[1])
              ].filter((decl1)=>!!decl1.identifier);
              createBindings1(scope1, ...declarations1.map((decl1)=>[
                      decl1.identifier.identifier,
                      decl1
                  ]));
              // TODO: I might need to start storing node parents for easy traversal
              return node1("declarator_list", {
                  specified_type: head1.specified_type,
                  declarations: declarations1,
                  commas: tail1.map((t4)=>t4[0])
              });
          };
          var peg$f361 = function(identifier1, quantifier1, suffix1) {
              const [operator1, initializer1] = suffix1 || [];
              return node1("declaration", {
                  identifier: identifier1,
                  quantifier: quantifier1,
                  operator: operator1,
                  initializer: initializer1
              });
          };
          var peg$f371 = function(specified_type1, suffix1) {
              // No gaurantee of a suffix because fully_specified_type contains a
              // type_specifier which includes structs and type_names (IDENTIFIERs)
              const [identifier1, quantifier1, suffix_tail1] = suffix1 || [];
              const [operator1, initializer1] = suffix_tail1 || [];
              // Break out the specified type so it can be grouped into the
              // declarator_list
              return {
                  declaration: node1("declaration", {
                      identifier: identifier1,
                      quantifier: quantifier1,
                      operator: operator1,
                      initializer: initializer1
                  }),
                  specified_type: specified_type1
              };
          };
          var peg$f381 = function(qualifiers1, specifier1) {
              return node1("fully_specified_type", {
                  qualifiers: qualifiers1,
                  specifier: specifier1
              });
          };
          var peg$f391 = function(layout1, lp1, head1, tail1) {
              return {
                  qualifiers: [
                      head1,
                      ...tail1.map((t4)=>t4[1])
                  ],
                  commas: tail1.map((t4)=>t4[0])
              };
          };
          var peg$f401 = function(layout1, lp1, qualifiers1, rp1) {
              return node1("layout_qualifier", {
                  layout: layout1,
                  lp: lp1,
                  ...qualifiers1,
                  rp: rp1
              });
          };
          var peg$f411 = function(identifier1, tail1) {
              const [operator1, expression1] = tail1 || [];
              return node1("layout_qualifier_id", {
                  identifier: identifier1,
                  operator: operator1,
                  expression: expression1
              });
          };
          var peg$f421 = function(subroutine1, lp1, head1, tail1, rp1) {
              return {
                  lp: lp1,
                  type_names: [
                      head1,
                      ...tail1.map((t4)=>t4[1])
                  ],
                  commas: tail1.map((t4)=>t4[0]),
                  rp: rp1
              };
          };
          var peg$f431 = function(subroutine1, type_names1) {
              return node1("subroutine_qualifier", {
                  subroutine: subroutine1,
                  ...type_names1
              });
          };
          var peg$f441 = function(specifier1, quantifier1) {
              return node1("type_specifier", {
                  specifier: specifier1,
                  quantifier: quantifier1
              });
          };
          var peg$f451 = function(lb1, expression1, rb1) {
              return node1("array_specifier", {
                  lb: lb1,
                  expression: expression1,
                  rb: rb1
              });
          };
          var peg$f461 = function(specifiers1) {
              return node1("array_specifiers", {
                  specifiers: specifiers1
              });
          };
          var peg$f471 = function(struct1, typeName1, lb1, declarations1, rb1) {
              const n3 = node1("struct", {
                  lb: lb1,
                  declarations: declarations1,
                  rb: rb1,
                  struct: struct1,
                  typeName: typeName1
              });
              // Anonymous structs don't get a type name
              if (typeName1) addTypes1(scope1, [
                  typeName1.identifier,
                  n3
              ]);
              return n3;
          };
          var peg$f481 = function(declaration1, semi1) {
              return node1("struct_declaration", {
                  declaration: declaration1,
                  semi: semi1
              });
          };
          var peg$f491 = function(specified_type1, head1, tail1) {
              return node1("struct_declarator", {
                  specified_type: specified_type1,
                  declarations: [
                      head1,
                      ...tail1.map((t4)=>t4[1])
                  ],
                  commas: tail1.map((t4)=>t4[0])
              });
          };
          var peg$f501 = function(identifier1, quantifier1) {
              return node1("quantified_identifier", {
                  identifier: identifier1,
                  quantifier: quantifier1
              });
          };
          var peg$f511 = function(lb1, head1, tail1, trailing1, rb1) {
              // TODO: Scope
              return node1("initializer_list", {
                  lb: lb1,
                  initializers: [
                      head1,
                      ...tail1.map((t4)=>t4[1])
                  ],
                  commas: xnil1(tail1.map((t4)=>t4[0]), trailing1),
                  rb: rb1
              });
          };
          var peg$f521 = function(sym1) {
              // Apparently peggy can't handle an open curly brace in a string
              scope1 = pushScope1(makeScope1(OPEN_CURLY1, scope1));
              return sym1;
          };
          var peg$f531 = function(lb1, statements1, rb1) {
              scope1 = popScope1(scope1);
              return node1("compound_statement", {
                  lb: lb1,
                  statements: (statements1 || []).flat(),
                  rb: rb1
              });
          };
          var peg$f541 = function(lb1, statements1, rb1) {
              return node1("compound_statement", {
                  lb: lb1,
                  statements: (statements1 || []).flat(),
                  rb: rb1
              });
          };
          var peg$f551 = function(expression1, semi1) {
              return node1("expression_statement", {
                  expression: expression1,
                  semi: semi1
              });
          };
          var peg$f561 = function(ifSymbol1, lp1, condition1, rp1, tail1) {
              const [body1, elseBranch1] = tail1;
              return node1("if_statement", {
                  "if": ifSymbol1,
                  body: body1,
                  lp: lp1,
                  condition: condition1,
                  rp: rp1,
                  ...elseBranch1 && {
                      "else": elseBranch1.flat()
                  }
              });
          };
          var peg$f571 = function(switchSymbol1, lp1, expression1, rp1, lb1, statements1, rb1) {
              // TODO: Scope?
              return node1("switch_statement", {
                  switch: switchSymbol1,
                  lp: lp1,
                  expression: expression1,
                  rp: rp1,
                  lb: lb1,
                  cases: groupCases1(statements1),
                  rb: rb1
              });
          };
          var peg$f581 = function(caseSymbol1, test1, colon1) {
              return node1("case_label", {
                  "case": caseSymbol1,
                  test: test1,
                  colon: colon1
              });
          };
          var peg$f591 = function(defaultSymbol1, colon1) {
              return node1("default_label", {
                  default: defaultSymbol1,
                  colon: colon1
              });
          };
          var peg$f601 = function(sym1) {
              scope1 = pushScope1(makeScope1("while", scope1));
              return sym1;
          };
          var peg$f611 = function(whileSymbol1, lp1, condition1, rp1, body1) {
              scope1 = popScope1(scope1);
              return node1("while_statement", {
                  while: whileSymbol1,
                  lp: lp1,
                  condition: condition1,
                  rp: rp1,
                  body: body1
              });
          };
          var peg$f621 = function(doSymbol1, body1, whileSymbol1, lp1, expression1, rp1, semi1) {
              return node1("do_statement", {
                  do: doSymbol1,
                  body: body1,
                  while: whileSymbol1,
                  lp: lp1,
                  expression: expression1,
                  rp: rp1,
                  semi: semi1
              });
          };
          var peg$f631 = function(sym1) {
              scope1 = pushScope1(makeScope1("for", scope1));
              return sym1;
          };
          var peg$f641 = function(forSymbol1, lp1, init1, condition1, conditionSemi1, operation1, rp1, body1) {
              scope1 = popScope1(scope1);
              return node1("for_statement", {
                  "for": forSymbol1,
                  body: body1,
                  lp: lp1,
                  init: init1.expression || init1.declaration,
                  initSemi: init1.semi,
                  condition: condition1,
                  conditionSemi: conditionSemi1,
                  operation: operation1,
                  rp: rp1,
                  body: body1
              });
          };
          var peg$f651 = function(specified_type1, identifier1, op1, initializer1) {
              const n3 = node1("condition_expression", {
                  specified_type: specified_type1,
                  identifier: identifier1,
                  op: op1,
                  initializer: initializer1
              });
              createBindings1(scope1, [
                  identifier1.identifier,
                  n3
              ]);
              return n3;
          };
          var peg$f661 = function(jump1, semi1) {
              return node1("continue_statement", {
                  continue: jump1,
                  semi: semi1
              });
          };
          var peg$f671 = function(jump1, semi1) {
              return node1("break_statement", {
                  break: jump1,
                  semi: semi1
              });
          };
          var peg$f681 = function(jump1, expression1, semi1) {
              return node1("return_statement", {
                  return: jump1,
                  expression: expression1,
                  semi: semi1
              });
          };
          var peg$f691 = function(jump1, semi1) {
              return node1("discard_statement", {
                  discard: jump1,
                  semi: semi1
              });
          };
          var peg$f701 = function(line1, _1) {
              return node1("preprocessor", {
                  line: line1,
                  _: _1
              });
          };
          var peg$f711 = function(prototype1, body1) {
              const n3 = node1("function", {
                  prototype: prototype1,
                  body: body1
              });
              scope1 = popScope1(scope1);
              // addFunctionReference(scope, prototype.header.name.identifier, n);
              return n3;
          };
          var peg$f721 = function(w2, rest1) {
              return collapse1(w2, rest1);
          };
          var peg$f731 = function(a3, x4, cc1) {
              return xnil1(x4, cc1);
          };
          var peg$f741 = function(a3, d7) {
              return xnil1(a3, d7.flat());
          };
          var peg$f751 = function(i3) {
              return i3;
          };
          var peg$f761 = function(_1) {
              return _1;
          };
          var peg$currPos1 = 0;
          var peg$savedPos1 = 0;
          var peg$posDetailsCache1 = [
              {
                  line: 1,
                  column: 1
              }
          ];
          var peg$maxFailPos1 = 0;
          var peg$maxFailExpected1 = [];
          var peg$silentFails1 = 0;
          var peg$resultsCache1 = {};
          var peg$result1;
          if ("startRule" in options1) {
              if (!(options1.startRule in peg$startRuleFunctions1)) throw new Error("Can't start parsing from rule \"" + options1.startRule + '".');
              peg$startRuleFunction1 = peg$startRuleFunctions1[options1.startRule];
          }
          function text1() {
              return input1.substring(peg$savedPos1, peg$currPos1);
          }
          function offset2() {
              return peg$savedPos1;
          }
          function range1() {
              return {
                  source: peg$source1,
                  start: peg$savedPos1,
                  end: peg$currPos1
              };
          }
          function location1() {
              return peg$computeLocation1(peg$savedPos1, peg$currPos1);
          }
          function expected1(description1, location1) {
              location1 = location1 !== undefined ? location1 : peg$computeLocation1(peg$savedPos1, peg$currPos1);
              throw peg$buildStructuredError1([
                  peg$otherExpectation1(description1)
              ], input1.substring(peg$savedPos1, peg$currPos1), location1);
          }
          function error1(message1, location1) {
              location1 = location1 !== undefined ? location1 : peg$computeLocation1(peg$savedPos1, peg$currPos1);
              throw peg$buildSimpleError1(message1, location1);
          }
          function peg$literalExpectation1(text1, ignoreCase1) {
              return {
                  type: "literal",
                  text: text1,
                  ignoreCase: ignoreCase1
              };
          }
          function peg$classExpectation1(parts1, inverted1, ignoreCase1) {
              return {
                  type: "class",
                  parts: parts1,
                  inverted: inverted1,
                  ignoreCase: ignoreCase1
              };
          }
          function peg$anyExpectation1() {
              return {
                  type: "any"
              };
          }
          function peg$endExpectation1() {
              return {
                  type: "end"
              };
          }
          function peg$otherExpectation1(description1) {
              return {
                  type: "other",
                  description: description1
              };
          }
          function peg$computePosDetails1(pos1) {
              var details1 = peg$posDetailsCache1[pos1];
              var p6;
              if (details1) return details1;
              else {
                  p6 = pos1 - 1;
                  while(!peg$posDetailsCache1[p6])p6--;
                  details1 = peg$posDetailsCache1[p6];
                  details1 = {
                      line: details1.line,
                      column: details1.column
                  };
                  while(p6 < pos1){
                      if (input1.charCodeAt(p6) === 10) {
                          details1.line++;
                          details1.column = 1;
                      } else details1.column++;
                      p6++;
                  }
                  peg$posDetailsCache1[pos1] = details1;
                  return details1;
              }
          }
          function peg$computeLocation1(startPos1, endPos1) {
              var startPosDetails1 = peg$computePosDetails1(startPos1);
              var endPosDetails1 = peg$computePosDetails1(endPos1);
              return {
                  source: peg$source1,
                  start: {
                      offset: startPos1,
                      line: startPosDetails1.line,
                      column: startPosDetails1.column
                  },
                  end: {
                      offset: endPos1,
                      line: endPosDetails1.line,
                      column: endPosDetails1.column
                  }
              };
          }
          function peg$fail1(expected1) {
              if (peg$currPos1 < peg$maxFailPos1) return;
              if (peg$currPos1 > peg$maxFailPos1) {
                  peg$maxFailPos1 = peg$currPos1;
                  peg$maxFailExpected1 = [];
              }
              peg$maxFailExpected1.push(expected1);
          }
          function peg$buildSimpleError1(message1, location1) {
              return new peg$SyntaxError(message1, null, null, location1);
          }
          function peg$buildStructuredError1(expected1, found1, location1) {
              return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected1, found1), expected1, found1, location1);
          }
          function peg$parsestart1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 0;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parse_1();
              s21 = peg$parsetranslation_unit1();
              if (s21 !== peg$FAILED1) {
                  peg$savedPos1 = s01;
                  s01 = peg$f01(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseATTRIBUTE1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 1;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 9) === peg$c01) {
                  s11 = peg$c01;
                  peg$currPos1 += 9;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e01);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseVARYING1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 2;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 7) === peg$c1100) {
                  s11 = peg$c1100;
                  peg$currPos1 += 7;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1100);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseCONST1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 3;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 5) === peg$c214) {
                  s11 = peg$c214;
                  peg$currPos1 += 5;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e253);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseBOOL1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 4;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 4) === peg$c310) {
                  s11 = peg$c310;
                  peg$currPos1 += 4;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e310);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseFLOAT1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 5;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 5) === peg$c410) {
                  s11 = peg$c410;
                  peg$currPos1 += 5;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e410);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseDOUBLE1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 6;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 6) === peg$c510) {
                  s11 = peg$c510;
                  peg$currPos1 += 6;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e510);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseINT1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 7;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 3) === peg$c610) {
                  s11 = peg$c610;
                  peg$currPos1 += 3;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e610);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUINT1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 8;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 4) === peg$c710) {
                  s11 = peg$c710;
                  peg$currPos1 += 4;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e710);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseBREAK1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 9;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 5) === peg$c810) {
                  s11 = peg$c810;
                  peg$currPos1 += 5;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e810);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseCONTINUE1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 10;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 8) === peg$c910) {
                  s11 = peg$c910;
                  peg$currPos1 += 8;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e910);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseDO1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 11;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 2) === peg$c1010) {
                  s11 = peg$c1010;
                  peg$currPos1 += 2;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1010);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseELSE1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 12;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 4) === peg$c1110) {
                  s11 = peg$c1110;
                  peg$currPos1 += 4;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1110);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseFOR1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 13;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 3) === peg$c1210) {
                  s11 = peg$c1210;
                  peg$currPos1 += 3;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1210);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIF1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 14;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 2) === peg$c1310) {
                  s11 = peg$c1310;
                  peg$currPos1 += 2;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1310);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseDISCARD1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 15;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 7) === peg$c1410) {
                  s11 = peg$c1410;
                  peg$currPos1 += 7;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1410);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseRETURN1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 16;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 6) === peg$c1510) {
                  s11 = peg$c1510;
                  peg$currPos1 += 6;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1510);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSWITCH1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 17;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 6) === peg$c1610) {
                  s11 = peg$c1610;
                  peg$currPos1 += 6;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1610);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseCASE1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 18;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 4) === peg$c1710) {
                  s11 = peg$c1710;
                  peg$currPos1 += 4;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1710);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseDEFAULT1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 19;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 7) === peg$c1810) {
                  s11 = peg$c1810;
                  peg$currPos1 += 7;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1810);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSUBROUTINE1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 20;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 10) === peg$c1910) {
                  s11 = peg$c1910;
                  peg$currPos1 += 10;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1910);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseBVEC21() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 21;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 5) === peg$c2010) {
                  s11 = peg$c2010;
                  peg$currPos1 += 5;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2010);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseBVEC31() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 22;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 5) === peg$c215) {
                  s11 = peg$c215;
                  peg$currPos1 += 5;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2110);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseBVEC41() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 23;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 5) === peg$c221) {
                  s11 = peg$c221;
                  peg$currPos1 += 5;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2210);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIVEC21() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 24;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 5) === peg$c231) {
                  s11 = peg$c231;
                  peg$currPos1 += 5;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2310);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIVEC31() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 25;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 5) === peg$c241) {
                  s11 = peg$c241;
                  peg$currPos1 += 5;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2410);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIVEC41() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 26;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 5) === peg$c251) {
                  s11 = peg$c251;
                  peg$currPos1 += 5;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e254);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUVEC21() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 27;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 5) === peg$c261) {
                  s11 = peg$c261;
                  peg$currPos1 += 5;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e261);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUVEC31() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 28;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 5) === peg$c271) {
                  s11 = peg$c271;
                  peg$currPos1 += 5;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e271);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUVEC41() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 29;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 5) === peg$c281) {
                  s11 = peg$c281;
                  peg$currPos1 += 5;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e281);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseVEC21() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 30;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 4) === peg$c291) {
                  s11 = peg$c291;
                  peg$currPos1 += 4;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e291);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseVEC31() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 31;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 4) === peg$c301) {
                  s11 = peg$c301;
                  peg$currPos1 += 4;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e301);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseVEC41() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 32;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 4) === peg$c311) {
                  s11 = peg$c311;
                  peg$currPos1 += 4;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e311);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseMAT21() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 33;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 4) === peg$c321) {
                  s11 = peg$c321;
                  peg$currPos1 += 4;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e321);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseMAT31() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 34;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 4) === peg$c331) {
                  s11 = peg$c331;
                  peg$currPos1 += 4;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e331);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseMAT41() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 35;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 4) === peg$c341) {
                  s11 = peg$c341;
                  peg$currPos1 += 4;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e341);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseCENTROID1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 36;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 8) === peg$c351) {
                  s11 = peg$c351;
                  peg$currPos1 += 8;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e351);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIN1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 37;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 2) === peg$c361) {
                  s11 = peg$c361;
                  peg$currPos1 += 2;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e361);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseOUT1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 38;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 3) === peg$c371) {
                  s11 = peg$c371;
                  peg$currPos1 += 3;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e371);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseINOUT1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 39;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 5) === peg$c381) {
                  s11 = peg$c381;
                  peg$currPos1 += 5;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e381);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUNIFORM1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 40;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 7) === peg$c391) {
                  s11 = peg$c391;
                  peg$currPos1 += 7;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e391);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsePATCH1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 41;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 5) === peg$c401) {
                  s11 = peg$c401;
                  peg$currPos1 += 5;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e401);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSAMPLE1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 42;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 6) === peg$c411) {
                  s11 = peg$c411;
                  peg$currPos1 += 6;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e411);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseBUFFER1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 43;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 6) === peg$c421) {
                  s11 = peg$c421;
                  peg$currPos1 += 6;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e421);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSHARED1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 44;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 6) === peg$c431) {
                  s11 = peg$c431;
                  peg$currPos1 += 6;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e431);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseCOHERENT1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 45;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 8) === peg$c441) {
                  s11 = peg$c441;
                  peg$currPos1 += 8;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e441);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseVOLATILE1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 46;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 8) === peg$c451) {
                  s11 = peg$c451;
                  peg$currPos1 += 8;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e451);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseRESTRICT1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 47;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 8) === peg$c461) {
                  s11 = peg$c461;
                  peg$currPos1 += 8;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e461);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseREADONLY1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 48;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 8) === peg$c471) {
                  s11 = peg$c471;
                  peg$currPos1 += 8;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e471);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseWRITEONLY1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 49;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 9) === peg$c481) {
                  s11 = peg$c481;
                  peg$currPos1 += 9;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e481);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseDVEC21() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 50;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 5) === peg$c491) {
                  s11 = peg$c491;
                  peg$currPos1 += 5;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e491);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseDVEC31() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 51;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 5) === peg$c501) {
                  s11 = peg$c501;
                  peg$currPos1 += 5;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e501);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseDVEC41() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 52;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 5) === peg$c511) {
                  s11 = peg$c511;
                  peg$currPos1 += 5;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e511);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseDMAT21() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 53;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 5) === peg$c521) {
                  s11 = peg$c521;
                  peg$currPos1 += 5;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e521);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseDMAT31() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 54;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 5) === peg$c531) {
                  s11 = peg$c531;
                  peg$currPos1 += 5;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e531);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseDMAT41() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 55;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 5) === peg$c541) {
                  s11 = peg$c541;
                  peg$currPos1 += 5;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e541);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseNOPERSPECTIVE1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 56;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 13) === peg$c551) {
                  s11 = peg$c551;
                  peg$currPos1 += 13;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e551);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseFLAT1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 57;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 4) === peg$c561) {
                  s11 = peg$c561;
                  peg$currPos1 += 4;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e561);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSMOOTH1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 58;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 6) === peg$c571) {
                  s11 = peg$c571;
                  peg$currPos1 += 6;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e571);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseLAYOUT1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 59;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 6) === peg$c581) {
                  s11 = peg$c581;
                  peg$currPos1 += 6;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e581);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseMAT2X21() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 60;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 6) === peg$c591) {
                  s11 = peg$c591;
                  peg$currPos1 += 6;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e591);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseMAT2X31() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 61;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 6) === peg$c601) {
                  s11 = peg$c601;
                  peg$currPos1 += 6;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e601);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseMAT2X41() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 62;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 6) === peg$c611) {
                  s11 = peg$c611;
                  peg$currPos1 += 6;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e611);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseMAT3X21() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 63;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 6) === peg$c621) {
                  s11 = peg$c621;
                  peg$currPos1 += 6;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e621);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseMAT3X31() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 64;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 6) === peg$c631) {
                  s11 = peg$c631;
                  peg$currPos1 += 6;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e631);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseMAT3X41() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 65;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 6) === peg$c641) {
                  s11 = peg$c641;
                  peg$currPos1 += 6;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e641);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseMAT4X21() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 66;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 6) === peg$c651) {
                  s11 = peg$c651;
                  peg$currPos1 += 6;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e651);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseMAT4X31() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 67;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 6) === peg$c661) {
                  s11 = peg$c661;
                  peg$currPos1 += 6;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e661);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseMAT4X41() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 68;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 6) === peg$c671) {
                  s11 = peg$c671;
                  peg$currPos1 += 6;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e671);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseDMAT2X21() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 69;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 7) === peg$c681) {
                  s11 = peg$c681;
                  peg$currPos1 += 7;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e681);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseDMAT2X31() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 70;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 7) === peg$c691) {
                  s11 = peg$c691;
                  peg$currPos1 += 7;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e691);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseDMAT2X41() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 71;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 7) === peg$c701) {
                  s11 = peg$c701;
                  peg$currPos1 += 7;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e701);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseDMAT3X21() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 72;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 7) === peg$c711) {
                  s11 = peg$c711;
                  peg$currPos1 += 7;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e711);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseDMAT3X31() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 73;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 7) === peg$c721) {
                  s11 = peg$c721;
                  peg$currPos1 += 7;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e721);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseDMAT3X41() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 74;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 7) === peg$c731) {
                  s11 = peg$c731;
                  peg$currPos1 += 7;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e731);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseDMAT4X21() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 75;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 7) === peg$c741) {
                  s11 = peg$c741;
                  peg$currPos1 += 7;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e741);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseDMAT4X31() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 76;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 7) === peg$c751) {
                  s11 = peg$c751;
                  peg$currPos1 += 7;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e751);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseDMAT4X41() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 77;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 7) === peg$c761) {
                  s11 = peg$c761;
                  peg$currPos1 += 7;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e761);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseATOMIC_UINT1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 78;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 11) === peg$c771) {
                  s11 = peg$c771;
                  peg$currPos1 += 11;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e771);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSAMPLER1D1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 79;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 9) === peg$c781) {
                  s11 = peg$c781;
                  peg$currPos1 += 9;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e781);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSAMPLER2D1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 80;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 9) === peg$c791) {
                  s11 = peg$c791;
                  peg$currPos1 += 9;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e791);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSAMPLER3D1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 81;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 9) === peg$c801) {
                  s11 = peg$c801;
                  peg$currPos1 += 9;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e801);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSAMPLERCUBE1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 82;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 11) === peg$c811) {
                  s11 = peg$c811;
                  peg$currPos1 += 11;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e811);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSAMPLER1DSHADOW1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 83;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 15) === peg$c821) {
                  s11 = peg$c821;
                  peg$currPos1 += 15;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e821);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSAMPLER2DSHADOW1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 84;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 15) === peg$c831) {
                  s11 = peg$c831;
                  peg$currPos1 += 15;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e831);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSAMPLERCUBESHADOW1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 85;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 17) === peg$c841) {
                  s11 = peg$c841;
                  peg$currPos1 += 17;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e841);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSAMPLER1DARRAY1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 86;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 14) === peg$c851) {
                  s11 = peg$c851;
                  peg$currPos1 += 14;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e851);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSAMPLER2DARRAY1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 87;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 14) === peg$c861) {
                  s11 = peg$c861;
                  peg$currPos1 += 14;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e861);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSAMPLER1DARRAYSHADOW1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 88;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 20) === peg$c871) {
                  s11 = peg$c871;
                  peg$currPos1 += 20;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e871);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSAMPLER2DARRAYSHADOW1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 89;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 20) === peg$c881) {
                  s11 = peg$c881;
                  peg$currPos1 += 20;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e881);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseISAMPLER1D1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 90;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 10) === peg$c891) {
                  s11 = peg$c891;
                  peg$currPos1 += 10;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e891);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseISAMPLER2D1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 91;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 10) === peg$c901) {
                  s11 = peg$c901;
                  peg$currPos1 += 10;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e901);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseISAMPLER3D1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 92;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 10) === peg$c911) {
                  s11 = peg$c911;
                  peg$currPos1 += 10;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e911);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseISAMPLERCUBE1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 93;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 12) === peg$c921) {
                  s11 = peg$c921;
                  peg$currPos1 += 12;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e921);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseISAMPLER1DARRAY1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 94;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 15) === peg$c931) {
                  s11 = peg$c931;
                  peg$currPos1 += 15;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e931);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseISAMPLER2DARRAY1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 95;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 15) === peg$c941) {
                  s11 = peg$c941;
                  peg$currPos1 += 15;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e941);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUSAMPLER1D1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 96;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 10) === peg$c951) {
                  s11 = peg$c951;
                  peg$currPos1 += 10;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e951);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUSAMPLER2D1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 97;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 10) === peg$c961) {
                  s11 = peg$c961;
                  peg$currPos1 += 10;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e961);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUSAMPLER3D1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 98;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 10) === peg$c971) {
                  s11 = peg$c971;
                  peg$currPos1 += 10;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e971);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUSAMPLERCUBE1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 99;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 12) === peg$c981) {
                  s11 = peg$c981;
                  peg$currPos1 += 12;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e981);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUSAMPLER1DARRAY1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 100;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 15) === peg$c991) {
                  s11 = peg$c991;
                  peg$currPos1 += 15;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e991);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUSAMPLER2DARRAY1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 101;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 15) === peg$c1001) {
                  s11 = peg$c1001;
                  peg$currPos1 += 15;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1001);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSAMPLER2DRECT1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 102;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 13) === peg$c1011) {
                  s11 = peg$c1011;
                  peg$currPos1 += 13;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1011);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSAMPLER2DRECTSHADOW1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 103;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 19) === peg$c1021) {
                  s11 = peg$c1021;
                  peg$currPos1 += 19;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1021);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseISAMPLER2DRECT1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 104;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 14) === peg$c1031) {
                  s11 = peg$c1031;
                  peg$currPos1 += 14;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1031);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUSAMPLER2DRECT1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 105;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 14) === peg$c1041) {
                  s11 = peg$c1041;
                  peg$currPos1 += 14;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1041);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSAMPLERBUFFER1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 106;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 13) === peg$c1051) {
                  s11 = peg$c1051;
                  peg$currPos1 += 13;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1051);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseISAMPLERBUFFER1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 107;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 14) === peg$c1061) {
                  s11 = peg$c1061;
                  peg$currPos1 += 14;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1061);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUSAMPLERBUFFER1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 108;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 14) === peg$c1071) {
                  s11 = peg$c1071;
                  peg$currPos1 += 14;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1071);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSAMPLERCUBEARRAY1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 109;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 16) === peg$c1081) {
                  s11 = peg$c1081;
                  peg$currPos1 += 16;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1081);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSAMPLERCUBEARRAYSHADOW1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 110;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 22) === peg$c1091) {
                  s11 = peg$c1091;
                  peg$currPos1 += 22;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1091);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseISAMPLERCUBEARRAY1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 111;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 17) === peg$c1101) {
                  s11 = peg$c1101;
                  peg$currPos1 += 17;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1101);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUSAMPLERCUBEARRAY1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 112;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 17) === peg$c1111) {
                  s11 = peg$c1111;
                  peg$currPos1 += 17;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1111);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSAMPLER2DMS1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 113;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 11) === peg$c1121) {
                  s11 = peg$c1121;
                  peg$currPos1 += 11;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1121);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseISAMPLER2DMS1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 114;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 12) === peg$c1131) {
                  s11 = peg$c1131;
                  peg$currPos1 += 12;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1131);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUSAMPLER2DMS1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 115;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 12) === peg$c1141) {
                  s11 = peg$c1141;
                  peg$currPos1 += 12;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1141);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSAMPLER2DMSARRAY1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 116;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 16) === peg$c1151) {
                  s11 = peg$c1151;
                  peg$currPos1 += 16;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1151);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseISAMPLER2DMSARRAY1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 117;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 17) === peg$c1161) {
                  s11 = peg$c1161;
                  peg$currPos1 += 17;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1161);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUSAMPLER2DMSARRAY1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 118;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 17) === peg$c1171) {
                  s11 = peg$c1171;
                  peg$currPos1 += 17;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1171);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIMAGE1D1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 119;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 7) === peg$c1181) {
                  s11 = peg$c1181;
                  peg$currPos1 += 7;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1181);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIIMAGE1D1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 120;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 8) === peg$c1191) {
                  s11 = peg$c1191;
                  peg$currPos1 += 8;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1191);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUIMAGE1D1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 121;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 8) === peg$c1201) {
                  s11 = peg$c1201;
                  peg$currPos1 += 8;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1201);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIMAGE2D1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 122;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 7) === peg$c1211) {
                  s11 = peg$c1211;
                  peg$currPos1 += 7;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1211);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIIMAGE2D1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 123;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 8) === peg$c1221) {
                  s11 = peg$c1221;
                  peg$currPos1 += 8;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1221);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUIMAGE2D1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 124;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 8) === peg$c1231) {
                  s11 = peg$c1231;
                  peg$currPos1 += 8;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1231);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIMAGE3D1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 125;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 7) === peg$c1241) {
                  s11 = peg$c1241;
                  peg$currPos1 += 7;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1241);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIIMAGE3D1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 126;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 8) === peg$c1251) {
                  s11 = peg$c1251;
                  peg$currPos1 += 8;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1251);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUIMAGE3D1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 127;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 8) === peg$c1261) {
                  s11 = peg$c1261;
                  peg$currPos1 += 8;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1261);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIMAGE2DRECT1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 128;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 11) === peg$c1271) {
                  s11 = peg$c1271;
                  peg$currPos1 += 11;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1271);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIIMAGE2DRECT1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 129;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 12) === peg$c1281) {
                  s11 = peg$c1281;
                  peg$currPos1 += 12;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1281);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUIMAGE2DRECT1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 130;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 12) === peg$c1291) {
                  s11 = peg$c1291;
                  peg$currPos1 += 12;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1291);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIMAGECUBE1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 131;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 9) === peg$c1301) {
                  s11 = peg$c1301;
                  peg$currPos1 += 9;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1301);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIIMAGECUBE1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 132;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 10) === peg$c1311) {
                  s11 = peg$c1311;
                  peg$currPos1 += 10;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1311);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUIMAGECUBE1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 133;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 10) === peg$c1321) {
                  s11 = peg$c1321;
                  peg$currPos1 += 10;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1321);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIMAGEBUFFER1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 134;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 11) === peg$c1331) {
                  s11 = peg$c1331;
                  peg$currPos1 += 11;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1331);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIIMAGEBUFFER1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 135;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 12) === peg$c1341) {
                  s11 = peg$c1341;
                  peg$currPos1 += 12;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1341);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUIMAGEBUFFER1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 136;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 12) === peg$c1351) {
                  s11 = peg$c1351;
                  peg$currPos1 += 12;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1351);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIMAGE1DARRAY1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 137;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 12) === peg$c1361) {
                  s11 = peg$c1361;
                  peg$currPos1 += 12;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1361);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIIMAGE1DARRAY1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 138;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 13) === peg$c1371) {
                  s11 = peg$c1371;
                  peg$currPos1 += 13;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1371);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUIMAGE1DARRAY1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 139;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 13) === peg$c1381) {
                  s11 = peg$c1381;
                  peg$currPos1 += 13;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1381);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIMAGE2DARRAY1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 140;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 12) === peg$c1391) {
                  s11 = peg$c1391;
                  peg$currPos1 += 12;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1391);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIIMAGE2DARRAY1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 141;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 13) === peg$c1401) {
                  s11 = peg$c1401;
                  peg$currPos1 += 13;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1401);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUIMAGE2DARRAY1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 142;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 13) === peg$c1411) {
                  s11 = peg$c1411;
                  peg$currPos1 += 13;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1411);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIMAGECUBEARRAY1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 143;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 14) === peg$c1421) {
                  s11 = peg$c1421;
                  peg$currPos1 += 14;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1421);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIIMAGECUBEARRAY1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 144;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 15) === peg$c1431) {
                  s11 = peg$c1431;
                  peg$currPos1 += 15;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1431);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUIMAGECUBEARRAY1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 145;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 15) === peg$c1441) {
                  s11 = peg$c1441;
                  peg$currPos1 += 15;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1441);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIMAGE2DMS1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 146;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 9) === peg$c1451) {
                  s11 = peg$c1451;
                  peg$currPos1 += 9;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1451);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIIMAGE2DMS1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 147;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 10) === peg$c1461) {
                  s11 = peg$c1461;
                  peg$currPos1 += 10;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1461);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUIMAGE2DMS1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 148;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 10) === peg$c1471) {
                  s11 = peg$c1471;
                  peg$currPos1 += 10;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1471);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIMAGE2DMSARRAY1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 149;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 13) === peg$c1481) {
                  s11 = peg$c1481;
                  peg$currPos1 += 13;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1481);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIIMAGE2DMSARRAY1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 150;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 15) === peg$c1491) {
                  s11 = peg$c1491;
                  peg$currPos1 += 15;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1491);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUIMAGE2DMSARRAY1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 151;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 15) === peg$c1501) {
                  s11 = peg$c1501;
                  peg$currPos1 += 15;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1501);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSTRUCT1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 152;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 6) === peg$c1511) {
                  s11 = peg$c1511;
                  peg$currPos1 += 6;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1511);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseVOID1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 153;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 4) === peg$c1521) {
                  s11 = peg$c1521;
                  peg$currPos1 += 4;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1521);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseWHILE1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 154;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 5) === peg$c1531) {
                  s11 = peg$c1531;
                  peg$currPos1 += 5;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1531);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseINVARIANT1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 155;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 9) === peg$c1541) {
                  s11 = peg$c1541;
                  peg$currPos1 += 9;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1541);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsePRECISE1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 156;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 7) === peg$c1551) {
                  s11 = peg$c1551;
                  peg$currPos1 += 7;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1551);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseHIGH_PRECISION1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 157;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 5) === peg$c1561) {
                  s11 = peg$c1561;
                  peg$currPos1 += 5;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1561);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseMEDIUM_PRECISION1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 158;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 7) === peg$c1571) {
                  s11 = peg$c1571;
                  peg$currPos1 += 7;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1571);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseLOW_PRECISION1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 159;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 4) === peg$c1581) {
                  s11 = peg$c1581;
                  peg$currPos1 += 4;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1581);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsePRECISION1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 160;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 9) === peg$c1591) {
                  s11 = peg$c1591;
                  peg$currPos1 += 9;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1591);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseterminal1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f110(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseFLOATCONSTANT1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 161;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parsefloating_constant1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f210(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseDOUBLECONSTANT1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 162;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parsefloating_constant1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f310(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseINTCONSTANT1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 163;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parseinteger_constant1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f410(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseUINTCONSTANT1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 164;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parseinteger_constant1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f510(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseBOOLCONSTANT1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 165;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 4) === peg$c1601) {
                  s11 = peg$c1601;
                  peg$currPos1 += 4;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1601);
              }
              if (s11 === peg$FAILED1) {
                  if (input1.substr(peg$currPos1, 5) === peg$c1611) {
                      s11 = peg$c1611;
                      peg$currPos1 += 5;
                  } else {
                      s11 = peg$FAILED1;
                      if (peg$silentFails1 === 0) peg$fail1(peg$e1611);
                  }
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f610(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsekeyword1() {
              var s01, s11;
              var key1 = peg$currPos1 * 305 + 166;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              peg$silentFails1++;
              s01 = peg$parseATTRIBUTE1();
              if (s01 === peg$FAILED1) {
                  s01 = peg$parseVARYING1();
                  if (s01 === peg$FAILED1) {
                      s01 = peg$parseCONST1();
                      if (s01 === peg$FAILED1) {
                          s01 = peg$parseBOOL1();
                          if (s01 === peg$FAILED1) {
                              s01 = peg$parseFLOAT1();
                              if (s01 === peg$FAILED1) {
                                  s01 = peg$parseDOUBLE1();
                                  if (s01 === peg$FAILED1) {
                                      s01 = peg$parseINT1();
                                      if (s01 === peg$FAILED1) {
                                          s01 = peg$parseUINT1();
                                          if (s01 === peg$FAILED1) {
                                              s01 = peg$parseBREAK1();
                                              if (s01 === peg$FAILED1) {
                                                  s01 = peg$parseCONTINUE1();
                                                  if (s01 === peg$FAILED1) {
                                                      s01 = peg$parseDO1();
                                                      if (s01 === peg$FAILED1) {
                                                          s01 = peg$parseELSE1();
                                                          if (s01 === peg$FAILED1) {
                                                              s01 = peg$parseFOR1();
                                                              if (s01 === peg$FAILED1) {
                                                                  s01 = peg$parseIF1();
                                                                  if (s01 === peg$FAILED1) {
                                                                      s01 = peg$parseDISCARD1();
                                                                      if (s01 === peg$FAILED1) {
                                                                          s01 = peg$parseRETURN1();
                                                                          if (s01 === peg$FAILED1) {
                                                                              s01 = peg$parseSWITCH1();
                                                                              if (s01 === peg$FAILED1) {
                                                                                  s01 = peg$parseCASE1();
                                                                                  if (s01 === peg$FAILED1) {
                                                                                      s01 = peg$parseDEFAULT1();
                                                                                      if (s01 === peg$FAILED1) {
                                                                                          s01 = peg$parseSUBROUTINE1();
                                                                                          if (s01 === peg$FAILED1) {
                                                                                              s01 = peg$parseBVEC21();
                                                                                              if (s01 === peg$FAILED1) {
                                                                                                  s01 = peg$parseBVEC31();
                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                      s01 = peg$parseBVEC41();
                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                          s01 = peg$parseIVEC21();
                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                              s01 = peg$parseIVEC31();
                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                  s01 = peg$parseIVEC41();
                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                      s01 = peg$parseUVEC21();
                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                          s01 = peg$parseUVEC31();
                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                              s01 = peg$parseUVEC41();
                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                  s01 = peg$parseVEC21();
                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                      s01 = peg$parseVEC31();
                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                          s01 = peg$parseVEC41();
                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                              s01 = peg$parseMAT21();
                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                  s01 = peg$parseMAT31();
                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                      s01 = peg$parseMAT41();
                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                          s01 = peg$parseCENTROID1();
                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                              s01 = peg$parseIN1();
                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                  s01 = peg$parseOUT1();
                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                      s01 = peg$parseINOUT1();
                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                          s01 = peg$parseUNIFORM1();
                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                              s01 = peg$parsePATCH1();
                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                  s01 = peg$parseSAMPLE1();
                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                      s01 = peg$parseBUFFER1();
                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                          s01 = peg$parseSHARED1();
                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                              s01 = peg$parseCOHERENT1();
                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                  s01 = peg$parseVOLATILE1();
                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                      s01 = peg$parseRESTRICT1();
                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                          s01 = peg$parseREADONLY1();
                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                              s01 = peg$parseWRITEONLY1();
                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                  s01 = peg$parseDVEC21();
                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                      s01 = peg$parseDVEC31();
                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                          s01 = peg$parseDVEC41();
                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                              s01 = peg$parseDMAT21();
                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                  s01 = peg$parseDMAT31();
                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                      s01 = peg$parseDMAT41();
                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                          s01 = peg$parseNOPERSPECTIVE1();
                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                              s01 = peg$parseFLAT1();
                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                  s01 = peg$parseSMOOTH1();
                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                      s01 = peg$parseLAYOUT1();
                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                          s01 = peg$parseMAT2X21();
                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                              s01 = peg$parseMAT2X31();
                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                  s01 = peg$parseMAT2X41();
                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                      s01 = peg$parseMAT3X21();
                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                          s01 = peg$parseMAT3X31();
                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                              s01 = peg$parseMAT3X41();
                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                  s01 = peg$parseMAT4X21();
                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                      s01 = peg$parseMAT4X31();
                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                          s01 = peg$parseMAT4X41();
                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                              s01 = peg$parseDMAT2X21();
                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                  s01 = peg$parseDMAT2X31();
                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                      s01 = peg$parseDMAT2X41();
                                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                          s01 = peg$parseDMAT3X21();
                                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                              s01 = peg$parseDMAT3X31();
                                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                  s01 = peg$parseDMAT3X41();
                                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                      s01 = peg$parseDMAT4X21();
                                                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                          s01 = peg$parseDMAT4X31();
                                                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                              s01 = peg$parseDMAT4X41();
                                                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                  s01 = peg$parseATOMIC_UINT1();
                                                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                      s01 = peg$parseSAMPLER1D1();
                                                                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                          s01 = peg$parseSAMPLER2D1();
                                                                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                              s01 = peg$parseSAMPLER3D1();
                                                                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                  s01 = peg$parseSAMPLERCUBE1();
                                                                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                      s01 = peg$parseSAMPLER1DSHADOW1();
                                                                                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                          s01 = peg$parseSAMPLER2DSHADOW1();
                                                                                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                              s01 = peg$parseSAMPLERCUBESHADOW1();
                                                                                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                  s01 = peg$parseSAMPLER1DARRAY1();
                                                                                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                      s01 = peg$parseSAMPLER2DARRAY1();
                                                                                                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                          s01 = peg$parseSAMPLER1DARRAYSHADOW1();
                                                                                                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                              s01 = peg$parseSAMPLER2DARRAYSHADOW1();
                                                                                                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                  s01 = peg$parseISAMPLER1D1();
                                                                                                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                      s01 = peg$parseISAMPLER2D1();
                                                                                                                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                          s01 = peg$parseISAMPLER3D1();
                                                                                                                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                              s01 = peg$parseISAMPLERCUBE1();
                                                                                                                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                  s01 = peg$parseISAMPLER1DARRAY1();
                                                                                                                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                      s01 = peg$parseISAMPLER2DARRAY1();
                                                                                                                                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                          s01 = peg$parseUSAMPLER1D1();
                                                                                                                                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                              s01 = peg$parseUSAMPLER2D1();
                                                                                                                                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                  s01 = peg$parseUSAMPLER3D1();
                                                                                                                                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                      s01 = peg$parseUSAMPLERCUBE1();
                                                                                                                                                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                          s01 = peg$parseUSAMPLER1DARRAY1();
                                                                                                                                                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                              s01 = peg$parseUSAMPLER2DARRAY1();
                                                                                                                                                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                  s01 = peg$parseSAMPLER2DRECT1();
                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                      s01 = peg$parseSAMPLER2DRECTSHADOW1();
                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                          s01 = peg$parseISAMPLER2DRECT1();
                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                              s01 = peg$parseUSAMPLER2DRECT1();
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                  s01 = peg$parseSAMPLERBUFFER1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                      s01 = peg$parseISAMPLERBUFFER1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                          s01 = peg$parseUSAMPLERBUFFER1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                              s01 = peg$parseSAMPLERCUBEARRAY1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s01 = peg$parseSAMPLERCUBEARRAYSHADOW1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s01 = peg$parseISAMPLERCUBEARRAY1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s01 = peg$parseUSAMPLERCUBEARRAY1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s01 = peg$parseSAMPLER2DMS1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s01 = peg$parseISAMPLER2DMS1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s01 = peg$parseUSAMPLER2DMS1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s01 = peg$parseSAMPLER2DMSARRAY1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s01 = peg$parseISAMPLER2DMSARRAY1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s01 = peg$parseUSAMPLER2DMSARRAY1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s01 = peg$parseIMAGE1D1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s01 = peg$parseIIMAGE1D1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s01 = peg$parseUIMAGE1D1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s01 = peg$parseIMAGE2D1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
s01 = peg$parseIIMAGE2D1();
if (s01 === peg$FAILED1) {
s01 = peg$parseUIMAGE2D1();
if (s01 === peg$FAILED1) {
s01 = peg$parseIMAGE3D1();
if (s01 === peg$FAILED1) {
s01 = peg$parseIIMAGE3D1();
if (s01 === peg$FAILED1) {
s01 = peg$parseUIMAGE3D1();
if (s01 === peg$FAILED1) {
s01 = peg$parseIMAGE2DRECT1();
if (s01 === peg$FAILED1) {
s01 = peg$parseIIMAGE2DRECT1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
s01 = peg$parseUIMAGE2DRECT1();
if (s01 === peg$FAILED1) {
s01 = peg$parseIMAGECUBE1();
if (s01 === peg$FAILED1) {
s01 = peg$parseIIMAGECUBE1();
if (s01 === peg$FAILED1) {
s01 = peg$parseUIMAGECUBE1();
if (s01 === peg$FAILED1) {
s01 = peg$parseIMAGEBUFFER1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
s01 = peg$parseIIMAGEBUFFER1();
if (s01 === peg$FAILED1) {
s01 = peg$parseUIMAGEBUFFER1();
if (s01 === peg$FAILED1) {
s01 = peg$parseIMAGE1DARRAY1();
if (s01 === peg$FAILED1) {
s01 = peg$parseIIMAGE1DARRAY1();
if (s01 === peg$FAILED1) {
s01 = peg$parseUIMAGE1DARRAY1();
if (s01 === peg$FAILED1) {
s01 = peg$parseIMAGE2DARRAY1();
if (s01 === peg$FAILED1) {
s01 = peg$parseIIMAGE2DARRAY1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
s01 = peg$parseUIMAGE2DARRAY1();
if (s01 === peg$FAILED1) {
s01 = peg$parseIMAGECUBEARRAY1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
s01 = peg$parseIIMAGECUBEARRAY1();
if (s01 === peg$FAILED1) {
s01 = peg$parseUIMAGECUBEARRAY1();
if (s01 === peg$FAILED1) {
s01 = peg$parseIMAGE2DMS1();
if (s01 === peg$FAILED1) {
s01 = peg$parseIIMAGE2DMS1();
if (s01 === peg$FAILED1) {
s01 = peg$parseUIMAGE2DMS1();
if (s01 === peg$FAILED1) {
s01 = peg$parseIMAGE2DMSARRAY1();
if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s01 = peg$parseIIMAGE2DMSARRAY1();
if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s01 = peg$parseUIMAGE2DMSARRAY1();
if (s01 === peg$FAILED1) {
s01 = peg$parseSTRUCT1();
if (s01 === peg$FAILED1) {
s01 = peg$parseVOID1();
if (s01 === peg$FAILED1) {
s01 = peg$parseWHILE1();
if (s01 === peg$FAILED1) {
s01 = peg$parseINVARIANT1();
if (s01 === peg$FAILED1) {
s01 = peg$parsePRECISE1();
if (s01 === peg$FAILED1) {
s01 = peg$parseHIGH_PRECISION1();
if (s01 === peg$FAILED1) {
s01 = peg$parseMEDIUM_PRECISION1();
if (s01 === peg$FAILED1) {
s01 = peg$parseLOW_PRECISION1();
if (s01 === peg$FAILED1) s01 = peg$parsePRECISION1();
}
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                              }
                                                                                                                                                                                                          }
                                                                                                                                                                                                      }
                                                                                                                                                                                                  }
                                                                                                                                                                                              }
                                                                                                                                                                                          }
                                                                                                                                                                                      }
                                                                                                                                                                                  }
                                                                                                                                                                              }
                                                                                                                                                                          }
                                                                                                                                                                      }
                                                                                                                                                                  }
                                                                                                                                                              }
                                                                                                                                                          }
                                                                                                                                                      }
                                                                                                                                                  }
                                                                                                                                              }
                                                                                                                                          }
                                                                                                                                      }
                                                                                                                                  }
                                                                                                                              }
                                                                                                                          }
                                                                                                                      }
                                                                                                                  }
                                                                                                              }
                                                                                                          }
                                                                                                      }
                                                                                                  }
                                                                                              }
                                                                                          }
                                                                                      }
                                                                                  }
                                                                              }
                                                                          }
                                                                      }
                                                                  }
                                                              }
                                                          }
                                                      }
                                                  }
                                              }
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
              peg$silentFails1--;
              if (s01 === peg$FAILED1) {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1621);
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseLEFT_OP1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 167;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 2) === peg$c1621) {
                  s11 = peg$c1621;
                  peg$currPos1 += 2;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1631);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseRIGHT_OP1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 168;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 2) === peg$c1631) {
                  s11 = peg$c1631;
                  peg$currPos1 += 2;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1641);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseINC_OP1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 169;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 2) === peg$c1641) {
                  s11 = peg$c1641;
                  peg$currPos1 += 2;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1651);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseDEC_OP1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 170;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 2) === peg$c1651) {
                  s11 = peg$c1651;
                  peg$currPos1 += 2;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1661);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseLE_OP1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 171;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 2) === peg$c1661) {
                  s11 = peg$c1661;
                  peg$currPos1 += 2;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1671);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseGE_OP1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 172;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 2) === peg$c1671) {
                  s11 = peg$c1671;
                  peg$currPos1 += 2;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1681);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseEQ_OP1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 173;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 2) === peg$c1681) {
                  s11 = peg$c1681;
                  peg$currPos1 += 2;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1691);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseNE_OP1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 174;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 2) === peg$c1691) {
                  s11 = peg$c1691;
                  peg$currPos1 += 2;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1701);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseAND_OP1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 175;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 2) === peg$c1701) {
                  s11 = peg$c1701;
                  peg$currPos1 += 2;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1711);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseOR_OP1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 176;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 2) === peg$c1711) {
                  s11 = peg$c1711;
                  peg$currPos1 += 2;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1721);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseXOR_OP1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 177;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 2) === peg$c1721) {
                  s11 = peg$c1721;
                  peg$currPos1 += 2;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1731);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseMUL_ASSIGN1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 178;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 2) === peg$c1731) {
                  s11 = peg$c1731;
                  peg$currPos1 += 2;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1741);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseDIV_ASSIGN1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 179;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 2) === peg$c1741) {
                  s11 = peg$c1741;
                  peg$currPos1 += 2;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1751);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseADD_ASSIGN1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 180;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 2) === peg$c1751) {
                  s11 = peg$c1751;
                  peg$currPos1 += 2;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1761);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseMOD_ASSIGN1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 181;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 2) === peg$c1761) {
                  s11 = peg$c1761;
                  peg$currPos1 += 2;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1771);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseLEFT_ASSIGN1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 182;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 3) === peg$c1771) {
                  s11 = peg$c1771;
                  peg$currPos1 += 3;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1781);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseRIGHT_ASSIGN1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 183;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 3) === peg$c1781) {
                  s11 = peg$c1781;
                  peg$currPos1 += 3;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1791);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseAND_ASSIGN1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 184;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 2) === peg$c1791) {
                  s11 = peg$c1791;
                  peg$currPos1 += 2;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1801);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseXOR_ASSIGN1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 185;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 2) === peg$c1801) {
                  s11 = peg$c1801;
                  peg$currPos1 += 2;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1811);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseOR_ASSIGN1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 186;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 2) === peg$c1811) {
                  s11 = peg$c1811;
                  peg$currPos1 += 2;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1821);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSUB_ASSIGN1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 187;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.substr(peg$currPos1, 2) === peg$c1821) {
                  s11 = peg$c1821;
                  peg$currPos1 += 2;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1831);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseLEFT_PAREN1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 188;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.charCodeAt(peg$currPos1) === 40) {
                  s11 = peg$c1831;
                  peg$currPos1++;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1841);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseRIGHT_PAREN1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 189;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.charCodeAt(peg$currPos1) === 41) {
                  s11 = peg$c1841;
                  peg$currPos1++;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1851);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseLEFT_BRACKET1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 190;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.charCodeAt(peg$currPos1) === 91) {
                  s11 = peg$c1851;
                  peg$currPos1++;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1861);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseRIGHT_BRACKET1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 191;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.charCodeAt(peg$currPos1) === 93) {
                  s11 = peg$c1861;
                  peg$currPos1++;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1871);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseLEFT_BRACE1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 192;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.charCodeAt(peg$currPos1) === 123) {
                  s11 = peg$c1871;
                  peg$currPos1++;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1881);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseRIGHT_BRACE1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 193;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.charCodeAt(peg$currPos1) === 125) {
                  s11 = peg$c1881;
                  peg$currPos1++;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1891);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseDOT1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 194;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.charCodeAt(peg$currPos1) === 46) {
                  s11 = peg$c1891;
                  peg$currPos1++;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1901);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseCOMMA1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 195;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.charCodeAt(peg$currPos1) === 44) {
                  s11 = peg$c1901;
                  peg$currPos1++;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1911);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseCOLON1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 196;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.charCodeAt(peg$currPos1) === 58) {
                  s11 = peg$c1911;
                  peg$currPos1++;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1921);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseEQUAL1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 197;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.charCodeAt(peg$currPos1) === 61) {
                  s11 = peg$c1921;
                  peg$currPos1++;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1931);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSEMICOLON1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 198;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.charCodeAt(peg$currPos1) === 59) {
                  s11 = peg$c1931;
                  peg$currPos1++;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1941);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseBANG1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 199;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.charCodeAt(peg$currPos1) === 33) {
                  s11 = peg$c1941;
                  peg$currPos1++;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1951);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseDASH1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 200;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.charCodeAt(peg$currPos1) === 45) {
                  s11 = peg$c1951;
                  peg$currPos1++;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1961);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseTILDE1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 201;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.charCodeAt(peg$currPos1) === 126) {
                  s11 = peg$c1961;
                  peg$currPos1++;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1971);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsePLUS1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 202;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.charCodeAt(peg$currPos1) === 43) {
                  s11 = peg$c1971;
                  peg$currPos1++;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1981);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSTAR1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 203;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.charCodeAt(peg$currPos1) === 42) {
                  s11 = peg$c1981;
                  peg$currPos1++;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1991);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseSLASH1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 204;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.charCodeAt(peg$currPos1) === 47) {
                  s11 = peg$c1991;
                  peg$currPos1++;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2001);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsePERCENT1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 205;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.charCodeAt(peg$currPos1) === 37) {
                  s11 = peg$c2001;
                  peg$currPos1++;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2011);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseLEFT_ANGLE1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 206;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.charCodeAt(peg$currPos1) === 60) {
                  s11 = peg$c2011;
                  peg$currPos1++;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2021);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseRIGHT_ANGLE1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 207;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.charCodeAt(peg$currPos1) === 62) {
                  s11 = peg$c2021;
                  peg$currPos1++;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2031);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseVERTICAL_BAR1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 208;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.charCodeAt(peg$currPos1) === 124) {
                  s11 = peg$c2031;
                  peg$currPos1++;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2041);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseCARET1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 209;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.charCodeAt(peg$currPos1) === 94) {
                  s11 = peg$c2041;
                  peg$currPos1++;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2051);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseAMPERSAND1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 210;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.charCodeAt(peg$currPos1) === 38) {
                  s11 = peg$c2051;
                  peg$currPos1++;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2061);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseQUESTION1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 211;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.charCodeAt(peg$currPos1) === 63) {
                  s11 = peg$c2061;
                  peg$currPos1++;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2071);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f77(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseIDENTIFIER1() {
              var s01, s11, s21, s31, s41, s51, s61;
              var key1 = peg$currPos1 * 305 + 212;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$currPos1;
              peg$silentFails1++;
              s21 = peg$parsekeyword1();
              peg$silentFails1--;
              if (s21 === peg$FAILED1) s11 = undefined;
              else {
                  peg$currPos1 = s11;
                  s11 = peg$FAILED1;
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$currPos1;
                  s31 = peg$currPos1;
                  if (peg$r01.test(input1.charAt(peg$currPos1))) {
                      s41 = input1.charAt(peg$currPos1);
                      peg$currPos1++;
                  } else {
                      s41 = peg$FAILED1;
                      if (peg$silentFails1 === 0) peg$fail1(peg$e2081);
                  }
                  if (s41 !== peg$FAILED1) {
                      s51 = [];
                      if (peg$r13.test(input1.charAt(peg$currPos1))) {
                          s61 = input1.charAt(peg$currPos1);
                          peg$currPos1++;
                      } else {
                          s61 = peg$FAILED1;
                          if (peg$silentFails1 === 0) peg$fail1(peg$e2091);
                      }
                      while(s61 !== peg$FAILED1){
                          s51.push(s61);
                          if (peg$r13.test(input1.charAt(peg$currPos1))) {
                              s61 = input1.charAt(peg$currPos1);
                              peg$currPos1++;
                          } else {
                              s61 = peg$FAILED1;
                              if (peg$silentFails1 === 0) peg$fail1(peg$e2091);
                          }
                      }
                      s41 = [
                          s41,
                          s51
                      ];
                      s31 = s41;
                  } else {
                      peg$currPos1 = s31;
                      s31 = peg$FAILED1;
                  }
                  if (s31 !== peg$FAILED1) s21 = input1.substring(s21, peg$currPos1);
                  else s21 = s31;
                  if (s21 !== peg$FAILED1) {
                      s31 = peg$parse_1();
                      peg$savedPos1 = s01;
                      s01 = peg$f81(s21, s31);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseTYPE_NAME1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 213;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$currPos1;
              peg$silentFails1++;
              s21 = peg$parsekeyword1();
              peg$silentFails1--;
              if (s21 === peg$FAILED1) s11 = undefined;
              else {
                  peg$currPos1 = s11;
                  s11 = peg$FAILED1;
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseIDENTIFIER1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f91(s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseinteger_constant1() {
              var s01, s11, s21, s31;
              var key1 = peg$currPos1 * 305 + 214;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$currPos1;
              s21 = peg$parsedecimal_constant1();
              if (s21 !== peg$FAILED1) {
                  s31 = peg$parseinteger_suffix1();
                  if (s31 === peg$FAILED1) s31 = null;
                  s21 = [
                      s21,
                      s31
                  ];
                  s11 = s21;
              } else {
                  peg$currPos1 = s11;
                  s11 = peg$FAILED1;
              }
              if (s11 !== peg$FAILED1) s01 = input1.substring(s01, peg$currPos1);
              else s01 = s11;
              if (s01 === peg$FAILED1) {
                  s01 = peg$currPos1;
                  s11 = peg$currPos1;
                  s21 = peg$parseoctal_constant1();
                  if (s21 !== peg$FAILED1) {
                      s31 = peg$parseinteger_suffix1();
                      if (s31 === peg$FAILED1) s31 = null;
                      s21 = [
                          s21,
                          s31
                      ];
                      s11 = s21;
                  } else {
                      peg$currPos1 = s11;
                      s11 = peg$FAILED1;
                  }
                  if (s11 !== peg$FAILED1) s01 = input1.substring(s01, peg$currPos1);
                  else s01 = s11;
                  if (s01 === peg$FAILED1) {
                      s01 = peg$currPos1;
                      s11 = peg$currPos1;
                      s21 = peg$parsehexadecimal_constant1();
                      if (s21 !== peg$FAILED1) {
                          s31 = peg$parseinteger_suffix1();
                          if (s31 === peg$FAILED1) s31 = null;
                          s21 = [
                              s21,
                              s31
                          ];
                          s11 = s21;
                      } else {
                          peg$currPos1 = s11;
                          s11 = peg$FAILED1;
                      }
                      if (s11 !== peg$FAILED1) s01 = input1.substring(s01, peg$currPos1);
                      else s01 = s11;
                  }
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseinteger_suffix1() {
              var s01;
              var key1 = peg$currPos1 * 305 + 215;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              if (peg$r21.test(input1.charAt(peg$currPos1))) {
                  s01 = input1.charAt(peg$currPos1);
                  peg$currPos1++;
              } else {
                  s01 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2101);
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsedecimal_constant1() {
              var s01, s11, s21, s31, s41;
              var key1 = peg$currPos1 * 305 + 216;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$currPos1;
              if (peg$r31.test(input1.charAt(peg$currPos1))) {
                  s21 = input1.charAt(peg$currPos1);
                  peg$currPos1++;
              } else {
                  s21 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2111);
              }
              if (s21 !== peg$FAILED1) {
                  s31 = [];
                  s41 = peg$parsedigit1();
                  while(s41 !== peg$FAILED1){
                      s31.push(s41);
                      s41 = peg$parsedigit1();
                  }
                  s21 = [
                      s21,
                      s31
                  ];
                  s11 = s21;
              } else {
                  peg$currPos1 = s11;
                  s11 = peg$FAILED1;
              }
              if (s11 !== peg$FAILED1) s01 = input1.substring(s01, peg$currPos1);
              else s01 = s11;
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseoctal_constant1() {
              var s01, s11, s21, s31;
              var key1 = peg$currPos1 * 305 + 217;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.charCodeAt(peg$currPos1) === 48) {
                  s11 = peg$c2071;
                  peg$currPos1++;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2121);
              }
              if (s11 !== peg$FAILED1) {
                  s21 = [];
                  if (peg$r41.test(input1.charAt(peg$currPos1))) {
                      s31 = input1.charAt(peg$currPos1);
                      peg$currPos1++;
                  } else {
                      s31 = peg$FAILED1;
                      if (peg$silentFails1 === 0) peg$fail1(peg$e2131);
                  }
                  while(s31 !== peg$FAILED1){
                      s21.push(s31);
                      if (peg$r41.test(input1.charAt(peg$currPos1))) {
                          s31 = input1.charAt(peg$currPos1);
                          peg$currPos1++;
                      } else {
                          s31 = peg$FAILED1;
                          if (peg$silentFails1 === 0) peg$fail1(peg$e2131);
                      }
                  }
                  s11 = [
                      s11,
                      s21
                  ];
                  s01 = s11;
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsehexadecimal_constant1() {
              var s01, s11, s21, s31, s41;
              var key1 = peg$currPos1 * 305 + 218;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              if (input1.charCodeAt(peg$currPos1) === 48) {
                  s11 = peg$c2071;
                  peg$currPos1++;
              } else {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2121);
              }
              if (s11 !== peg$FAILED1) {
                  if (peg$r51.test(input1.charAt(peg$currPos1))) {
                      s21 = input1.charAt(peg$currPos1);
                      peg$currPos1++;
                  } else {
                      s21 = peg$FAILED1;
                      if (peg$silentFails1 === 0) peg$fail1(peg$e2141);
                  }
                  if (s21 !== peg$FAILED1) {
                      s31 = [];
                      if (peg$r61.test(input1.charAt(peg$currPos1))) {
                          s41 = input1.charAt(peg$currPos1);
                          peg$currPos1++;
                      } else {
                          s41 = peg$FAILED1;
                          if (peg$silentFails1 === 0) peg$fail1(peg$e2151);
                      }
                      while(s41 !== peg$FAILED1){
                          s31.push(s41);
                          if (peg$r61.test(input1.charAt(peg$currPos1))) {
                              s41 = input1.charAt(peg$currPos1);
                              peg$currPos1++;
                          } else {
                              s41 = peg$FAILED1;
                              if (peg$silentFails1 === 0) peg$fail1(peg$e2151);
                          }
                      }
                      s11 = [
                          s11,
                          s21,
                          s31
                      ];
                      s01 = s11;
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsedigit1() {
              var s01;
              var key1 = peg$currPos1 * 305 + 219;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              if (peg$r71.test(input1.charAt(peg$currPos1))) {
                  s01 = input1.charAt(peg$currPos1);
                  peg$currPos1++;
              } else {
                  s01 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2161);
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsefloating_constant1() {
              var s01, s11, s21, s31, s41;
              var key1 = peg$currPos1 * 305 + 220;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$currPos1;
              s21 = peg$parsefractional_constant1();
              if (s21 !== peg$FAILED1) {
                  s31 = peg$parseexponent_part1();
                  if (s31 === peg$FAILED1) s31 = null;
                  s41 = peg$parsefloating_suffix1();
                  if (s41 === peg$FAILED1) s41 = null;
                  s21 = [
                      s21,
                      s31,
                      s41
                  ];
                  s11 = s21;
              } else {
                  peg$currPos1 = s11;
                  s11 = peg$FAILED1;
              }
              if (s11 !== peg$FAILED1) s01 = input1.substring(s01, peg$currPos1);
              else s01 = s11;
              if (s01 === peg$FAILED1) {
                  s01 = peg$currPos1;
                  s11 = peg$currPos1;
                  s21 = peg$parsedigit_sequence1();
                  if (s21 !== peg$FAILED1) {
                      s31 = peg$parseexponent_part1();
                      if (s31 !== peg$FAILED1) {
                          s41 = peg$parsefloating_suffix1();
                          if (s41 === peg$FAILED1) s41 = null;
                          s21 = [
                              s21,
                              s31,
                              s41
                          ];
                          s11 = s21;
                      } else {
                          peg$currPos1 = s11;
                          s11 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s11;
                      s11 = peg$FAILED1;
                  }
                  if (s11 !== peg$FAILED1) s01 = input1.substring(s01, peg$currPos1);
                  else s01 = s11;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsefractional_constant1() {
              var s01, s11, s21, s31, s41;
              var key1 = peg$currPos1 * 305 + 221;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$currPos1;
              s21 = peg$parsedigit_sequence1();
              if (s21 === peg$FAILED1) s21 = null;
              if (input1.charCodeAt(peg$currPos1) === 46) {
                  s31 = peg$c1891;
                  peg$currPos1++;
              } else {
                  s31 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e1901);
              }
              if (s31 !== peg$FAILED1) {
                  s41 = peg$parsedigit_sequence1();
                  if (s41 === peg$FAILED1) s41 = null;
                  s21 = [
                      s21,
                      s31,
                      s41
                  ];
                  s11 = s21;
              } else {
                  peg$currPos1 = s11;
                  s11 = peg$FAILED1;
              }
              if (s11 !== peg$FAILED1) s01 = input1.substring(s01, peg$currPos1);
              else s01 = s11;
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseexponent_part1() {
              var s01, s11, s21, s31, s41;
              var key1 = peg$currPos1 * 305 + 222;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              peg$silentFails1++;
              s01 = peg$currPos1;
              s11 = peg$currPos1;
              if (peg$r81.test(input1.charAt(peg$currPos1))) {
                  s21 = input1.charAt(peg$currPos1);
                  peg$currPos1++;
              } else {
                  s21 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2181);
              }
              if (s21 !== peg$FAILED1) {
                  if (peg$r91.test(input1.charAt(peg$currPos1))) {
                      s31 = input1.charAt(peg$currPos1);
                      peg$currPos1++;
                  } else {
                      s31 = peg$FAILED1;
                      if (peg$silentFails1 === 0) peg$fail1(peg$e2191);
                  }
                  if (s31 === peg$FAILED1) s31 = null;
                  s41 = peg$parsedigit_sequence1();
                  if (s41 !== peg$FAILED1) {
                      s21 = [
                          s21,
                          s31,
                          s41
                      ];
                      s11 = s21;
                  } else {
                      peg$currPos1 = s11;
                      s11 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s11;
                  s11 = peg$FAILED1;
              }
              if (s11 !== peg$FAILED1) s01 = input1.substring(s01, peg$currPos1);
              else s01 = s11;
              peg$silentFails1--;
              if (s01 === peg$FAILED1) {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2171);
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsedigit_sequence1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 223;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = [];
              s21 = peg$parsedigit1();
              if (s21 !== peg$FAILED1) while(s21 !== peg$FAILED1){
                  s11.push(s21);
                  s21 = peg$parsedigit1();
              }
              else s11 = peg$FAILED1;
              if (s11 !== peg$FAILED1) s01 = input1.substring(s01, peg$currPos1);
              else s01 = s11;
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsefloating_suffix1() {
              var s01;
              var key1 = peg$currPos1 * 305 + 224;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              if (peg$r101.test(input1.charAt(peg$currPos1))) {
                  s01 = input1.charAt(peg$currPos1);
                  peg$currPos1++;
              } else {
                  s01 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2201);
              }
              if (s01 === peg$FAILED1) {
                  if (input1.substr(peg$currPos1, 2) === peg$c2081) {
                      s01 = peg$c2081;
                      peg$currPos1 += 2;
                  } else {
                      s01 = peg$FAILED1;
                      if (peg$silentFails1 === 0) peg$fail1(peg$e2211);
                  }
                  if (s01 === peg$FAILED1) {
                      if (input1.substr(peg$currPos1, 2) === peg$c2091) {
                          s01 = peg$c2091;
                          peg$currPos1 += 2;
                      } else {
                          s01 = peg$FAILED1;
                          if (peg$silentFails1 === 0) peg$fail1(peg$e2221);
                      }
                  }
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseprimary_expression1() {
              var s01, s11, s21, s31;
              var key1 = peg$currPos1 * 305 + 225;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              peg$silentFails1++;
              s01 = peg$parseFLOATCONSTANT1();
              if (s01 === peg$FAILED1) {
                  s01 = peg$parseINTCONSTANT1();
                  if (s01 === peg$FAILED1) {
                      s01 = peg$parseUINTCONSTANT1();
                      if (s01 === peg$FAILED1) {
                          s01 = peg$parseBOOLCONSTANT1();
                          if (s01 === peg$FAILED1) {
                              s01 = peg$parseDOUBLECONSTANT1();
                              if (s01 === peg$FAILED1) {
                                  s01 = peg$currPos1;
                                  s11 = peg$parseLEFT_PAREN1();
                                  if (s11 !== peg$FAILED1) {
                                      s21 = peg$parseexpression1();
                                      if (s21 !== peg$FAILED1) {
                                          s31 = peg$parseRIGHT_PAREN1();
                                          if (s31 !== peg$FAILED1) {
                                              peg$savedPos1 = s01;
                                              s01 = peg$f101(s11, s21, s31);
                                          } else {
                                              peg$currPos1 = s01;
                                              s01 = peg$FAILED1;
                                          }
                                      } else {
                                          peg$currPos1 = s01;
                                          s01 = peg$FAILED1;
                                      }
                                  } else {
                                      peg$currPos1 = s01;
                                      s01 = peg$FAILED1;
                                  }
                                  if (s01 === peg$FAILED1) {
                                      s01 = peg$currPos1;
                                      s11 = peg$parseIDENTIFIER1();
                                      if (s11 !== peg$FAILED1) {
                                          peg$savedPos1 = s01;
                                          s11 = peg$f111(s11);
                                      }
                                      s01 = s11;
                                  }
                              }
                          }
                      }
                  }
              }
              peg$silentFails1--;
              if (s01 === peg$FAILED1) {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2231);
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsepostfix_expression1() {
              var s01, s11, s21, s31, s41;
              var key1 = peg$currPos1 * 305 + 226;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$currPos1;
              s21 = peg$parsefunction_call1();
              if (s21 !== peg$FAILED1) {
                  s31 = [];
                  s41 = peg$parsepostfix_expression_suffix1();
                  while(s41 !== peg$FAILED1){
                      s31.push(s41);
                      s41 = peg$parsepostfix_expression_suffix1();
                  }
                  s21 = [
                      s21,
                      s31
                  ];
                  s11 = s21;
              } else {
                  peg$currPos1 = s11;
                  s11 = peg$FAILED1;
              }
              if (s11 === peg$FAILED1) {
                  s11 = peg$currPos1;
                  s21 = peg$parseprimary_expression1();
                  if (s21 !== peg$FAILED1) {
                      s31 = [];
                      s41 = peg$parsepostfix_expression_suffix1();
                      while(s41 !== peg$FAILED1){
                          s31.push(s41);
                          s41 = peg$parsepostfix_expression_suffix1();
                      }
                      s21 = [
                          s21,
                          s31
                      ];
                      s11 = s21;
                  } else {
                      peg$currPos1 = s11;
                      s11 = peg$FAILED1;
                  }
              }
              if (s11 !== peg$FAILED1) {
                  peg$savedPos1 = s01;
                  s11 = peg$f121(s11);
              }
              s01 = s11;
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsepostfix_expression_suffix1() {
              var s01;
              var key1 = peg$currPos1 * 305 + 227;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$parseinteger_index1();
              if (s01 === peg$FAILED1) {
                  s01 = peg$parsefield_selection1();
                  if (s01 === peg$FAILED1) {
                      s01 = peg$parseINC_OP1();
                      if (s01 === peg$FAILED1) s01 = peg$parseDEC_OP1();
                  }
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseinteger_index1() {
              var s01, s11, s21, s31;
              var key1 = peg$currPos1 * 305 + 228;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parseLEFT_BRACKET1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseexpression1();
                  if (s21 !== peg$FAILED1) {
                      s31 = peg$parseRIGHT_BRACKET1();
                      if (s31 !== peg$FAILED1) {
                          peg$savedPos1 = s01;
                          s01 = peg$f131(s11, s21, s31);
                      } else {
                          peg$currPos1 = s01;
                          s01 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsefield_selection1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 229;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parseDOT1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseIDENTIFIER1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f141(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsefunction_call1() {
              var s01, s11, s21, s31;
              var key1 = peg$currPos1 * 305 + 230;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parsefunction_identifier1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parsefunction_arguments1();
                  if (s21 === peg$FAILED1) s21 = null;
                  s31 = peg$parseRIGHT_PAREN1();
                  if (s31 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f151(s11, s21, s31);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsefunction_arguments1() {
              var s01, s11, s21, s31, s41, s51;
              var key1 = peg$currPos1 * 305 + 231;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parseVOID1();
              if (s11 !== peg$FAILED1) {
                  peg$savedPos1 = s01;
                  s11 = peg$f161(s11);
              }
              s01 = s11;
              if (s01 === peg$FAILED1) {
                  s01 = peg$currPos1;
                  s11 = peg$parseassignment_expression1();
                  if (s11 !== peg$FAILED1) {
                      s21 = [];
                      s31 = peg$currPos1;
                      s41 = peg$parseCOMMA1();
                      if (s41 !== peg$FAILED1) {
                          s51 = peg$parseassignment_expression1();
                          if (s51 !== peg$FAILED1) {
                              s41 = [
                                  s41,
                                  s51
                              ];
                              s31 = s41;
                          } else {
                              peg$currPos1 = s31;
                              s31 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                      while(s31 !== peg$FAILED1){
                          s21.push(s31);
                          s31 = peg$currPos1;
                          s41 = peg$parseCOMMA1();
                          if (s41 !== peg$FAILED1) {
                              s51 = peg$parseassignment_expression1();
                              if (s51 !== peg$FAILED1) {
                                  s41 = [
                                      s41,
                                      s51
                                  ];
                                  s31 = s41;
                              } else {
                                  peg$currPos1 = s31;
                                  s31 = peg$FAILED1;
                              }
                          } else {
                              peg$currPos1 = s31;
                              s31 = peg$FAILED1;
                          }
                      }
                      peg$savedPos1 = s01;
                      s01 = peg$f171(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsefunction_identifier1() {
              var s01, s11, s21, s31, s41;
              var key1 = peg$currPos1 * 305 + 232;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$currPos1;
              s21 = peg$parsechained_function_call1();
              if (s21 !== peg$FAILED1) {
                  s31 = peg$parsefunction_suffix1();
                  if (s31 !== peg$FAILED1) {
                      s41 = peg$parseLEFT_PAREN1();
                      if (s41 !== peg$FAILED1) {
                          peg$savedPos1 = s11;
                          s11 = peg$f181(s21, s31, s41);
                      } else {
                          peg$currPos1 = s11;
                          s11 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s11;
                      s11 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s11;
                  s11 = peg$FAILED1;
              }
              if (s11 === peg$FAILED1) {
                  s11 = peg$currPos1;
                  s21 = peg$parsetype_specifier1();
                  if (s21 !== peg$FAILED1) {
                      s31 = peg$parsefunction_suffix1();
                      if (s31 === peg$FAILED1) s31 = null;
                      s41 = peg$parseLEFT_PAREN1();
                      if (s41 !== peg$FAILED1) {
                          peg$savedPos1 = s11;
                          s11 = peg$f181(s21, s31, s41);
                      } else {
                          peg$currPos1 = s11;
                          s11 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s11;
                      s11 = peg$FAILED1;
                  }
              }
              if (s11 !== peg$FAILED1) {
                  peg$savedPos1 = s01;
                  s11 = peg$f191(s11);
              }
              s01 = s11;
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsefunction_suffix1() {
              var s01;
              var key1 = peg$currPos1 * 305 + 233;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$parseinteger_index1();
              if (s01 === peg$FAILED1) s01 = peg$parsefield_selection1();
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsechained_function_call1() {
              var s01, s11, s21, s31, s41;
              var key1 = peg$currPos1 * 305 + 234;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parsetype_specifier1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseLEFT_PAREN1();
                  if (s21 !== peg$FAILED1) {
                      s31 = peg$parsefunction_arguments1();
                      if (s31 === peg$FAILED1) s31 = null;
                      s41 = peg$parseRIGHT_PAREN1();
                      if (s41 !== peg$FAILED1) {
                          peg$savedPos1 = s01;
                          s01 = peg$f201(s11, s21, s31, s41);
                      } else {
                          peg$currPos1 = s01;
                          s01 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseunary_expression1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 235;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              peg$silentFails1++;
              s01 = peg$parsepostfix_expression1();
              if (s01 === peg$FAILED1) {
                  s01 = peg$currPos1;
                  s11 = peg$parseINC_OP1();
                  if (s11 === peg$FAILED1) {
                      s11 = peg$parseDEC_OP1();
                      if (s11 === peg$FAILED1) {
                          s11 = peg$parsePLUS1();
                          if (s11 === peg$FAILED1) {
                              s11 = peg$parseDASH1();
                              if (s11 === peg$FAILED1) {
                                  s11 = peg$parseBANG1();
                                  if (s11 === peg$FAILED1) s11 = peg$parseTILDE1();
                              }
                          }
                      }
                  }
                  if (s11 !== peg$FAILED1) {
                      s21 = peg$parseunary_expression1();
                      if (s21 !== peg$FAILED1) {
                          peg$savedPos1 = s01;
                          s01 = peg$f211(s11, s21);
                      } else {
                          peg$currPos1 = s01;
                          s01 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              }
              peg$silentFails1--;
              if (s01 === peg$FAILED1) {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2241);
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsemultiplicative_expression1() {
              var s01, s11, s21, s31, s41, s51;
              var key1 = peg$currPos1 * 305 + 236;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parseunary_expression1();
              if (s11 !== peg$FAILED1) {
                  s21 = [];
                  s31 = peg$currPos1;
                  s41 = peg$parseSTAR1();
                  if (s41 === peg$FAILED1) {
                      s41 = peg$parseSLASH1();
                      if (s41 === peg$FAILED1) s41 = peg$parsePERCENT1();
                  }
                  if (s41 !== peg$FAILED1) {
                      s51 = peg$parseunary_expression1();
                      if (s51 !== peg$FAILED1) {
                          s41 = [
                              s41,
                              s51
                          ];
                          s31 = s41;
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s31;
                      s31 = peg$FAILED1;
                  }
                  while(s31 !== peg$FAILED1){
                      s21.push(s31);
                      s31 = peg$currPos1;
                      s41 = peg$parseSTAR1();
                      if (s41 === peg$FAILED1) {
                          s41 = peg$parseSLASH1();
                          if (s41 === peg$FAILED1) s41 = peg$parsePERCENT1();
                      }
                      if (s41 !== peg$FAILED1) {
                          s51 = peg$parseunary_expression1();
                          if (s51 !== peg$FAILED1) {
                              s41 = [
                                  s41,
                                  s51
                              ];
                              s31 = s41;
                          } else {
                              peg$currPos1 = s31;
                              s31 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  }
                  peg$savedPos1 = s01;
                  s01 = peg$f221(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseadditive_expression1() {
              var s01, s11, s21, s31, s41, s51;
              var key1 = peg$currPos1 * 305 + 237;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parsemultiplicative_expression1();
              if (s11 !== peg$FAILED1) {
                  s21 = [];
                  s31 = peg$currPos1;
                  s41 = peg$parsePLUS1();
                  if (s41 === peg$FAILED1) s41 = peg$parseDASH1();
                  if (s41 !== peg$FAILED1) {
                      s51 = peg$parsemultiplicative_expression1();
                      if (s51 !== peg$FAILED1) {
                          s41 = [
                              s41,
                              s51
                          ];
                          s31 = s41;
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s31;
                      s31 = peg$FAILED1;
                  }
                  while(s31 !== peg$FAILED1){
                      s21.push(s31);
                      s31 = peg$currPos1;
                      s41 = peg$parsePLUS1();
                      if (s41 === peg$FAILED1) s41 = peg$parseDASH1();
                      if (s41 !== peg$FAILED1) {
                          s51 = peg$parsemultiplicative_expression1();
                          if (s51 !== peg$FAILED1) {
                              s41 = [
                                  s41,
                                  s51
                              ];
                              s31 = s41;
                          } else {
                              peg$currPos1 = s31;
                              s31 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  }
                  peg$savedPos1 = s01;
                  s01 = peg$f221(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseshift_expression1() {
              var s01, s11, s21, s31, s41, s51;
              var key1 = peg$currPos1 * 305 + 238;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parseadditive_expression1();
              if (s11 !== peg$FAILED1) {
                  s21 = [];
                  s31 = peg$currPos1;
                  s41 = peg$parseRIGHT_OP1();
                  if (s41 === peg$FAILED1) s41 = peg$parseLEFT_OP1();
                  if (s41 !== peg$FAILED1) {
                      s51 = peg$parseadditive_expression1();
                      if (s51 !== peg$FAILED1) {
                          s41 = [
                              s41,
                              s51
                          ];
                          s31 = s41;
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s31;
                      s31 = peg$FAILED1;
                  }
                  while(s31 !== peg$FAILED1){
                      s21.push(s31);
                      s31 = peg$currPos1;
                      s41 = peg$parseRIGHT_OP1();
                      if (s41 === peg$FAILED1) s41 = peg$parseLEFT_OP1();
                      if (s41 !== peg$FAILED1) {
                          s51 = peg$parseadditive_expression1();
                          if (s51 !== peg$FAILED1) {
                              s41 = [
                                  s41,
                                  s51
                              ];
                              s31 = s41;
                          } else {
                              peg$currPos1 = s31;
                              s31 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  }
                  peg$savedPos1 = s01;
                  s01 = peg$f221(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parserelational_expression1() {
              var s01, s11, s21, s31, s41, s51;
              var key1 = peg$currPos1 * 305 + 239;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parseshift_expression1();
              if (s11 !== peg$FAILED1) {
                  s21 = [];
                  s31 = peg$currPos1;
                  s41 = peg$parseLE_OP1();
                  if (s41 === peg$FAILED1) {
                      s41 = peg$parseGE_OP1();
                      if (s41 === peg$FAILED1) {
                          s41 = peg$parseLEFT_ANGLE1();
                          if (s41 === peg$FAILED1) s41 = peg$parseRIGHT_ANGLE1();
                      }
                  }
                  if (s41 !== peg$FAILED1) {
                      s51 = peg$parseshift_expression1();
                      if (s51 !== peg$FAILED1) {
                          s41 = [
                              s41,
                              s51
                          ];
                          s31 = s41;
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s31;
                      s31 = peg$FAILED1;
                  }
                  while(s31 !== peg$FAILED1){
                      s21.push(s31);
                      s31 = peg$currPos1;
                      s41 = peg$parseLE_OP1();
                      if (s41 === peg$FAILED1) {
                          s41 = peg$parseGE_OP1();
                          if (s41 === peg$FAILED1) {
                              s41 = peg$parseLEFT_ANGLE1();
                              if (s41 === peg$FAILED1) s41 = peg$parseRIGHT_ANGLE1();
                          }
                      }
                      if (s41 !== peg$FAILED1) {
                          s51 = peg$parseshift_expression1();
                          if (s51 !== peg$FAILED1) {
                              s41 = [
                                  s41,
                                  s51
                              ];
                              s31 = s41;
                          } else {
                              peg$currPos1 = s31;
                              s31 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  }
                  peg$savedPos1 = s01;
                  s01 = peg$f221(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseequality_expression1() {
              var s01, s11, s21, s31, s41, s51;
              var key1 = peg$currPos1 * 305 + 240;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              peg$silentFails1++;
              s01 = peg$currPos1;
              s11 = peg$parserelational_expression1();
              if (s11 !== peg$FAILED1) {
                  s21 = [];
                  s31 = peg$currPos1;
                  s41 = peg$parseEQ_OP1();
                  if (s41 === peg$FAILED1) s41 = peg$parseNE_OP1();
                  if (s41 !== peg$FAILED1) {
                      s51 = peg$parserelational_expression1();
                      if (s51 !== peg$FAILED1) {
                          s41 = [
                              s41,
                              s51
                          ];
                          s31 = s41;
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s31;
                      s31 = peg$FAILED1;
                  }
                  while(s31 !== peg$FAILED1){
                      s21.push(s31);
                      s31 = peg$currPos1;
                      s41 = peg$parseEQ_OP1();
                      if (s41 === peg$FAILED1) s41 = peg$parseNE_OP1();
                      if (s41 !== peg$FAILED1) {
                          s51 = peg$parserelational_expression1();
                          if (s51 !== peg$FAILED1) {
                              s41 = [
                                  s41,
                                  s51
                              ];
                              s31 = s41;
                          } else {
                              peg$currPos1 = s31;
                              s31 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  }
                  peg$savedPos1 = s01;
                  s01 = peg$f221(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$silentFails1--;
              if (s01 === peg$FAILED1) {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2251);
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseand_expression1() {
              var s01, s11, s21, s31, s41, s51;
              var key1 = peg$currPos1 * 305 + 241;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              peg$silentFails1++;
              s01 = peg$currPos1;
              s11 = peg$parseequality_expression1();
              if (s11 !== peg$FAILED1) {
                  s21 = [];
                  s31 = peg$currPos1;
                  s41 = peg$parseAMPERSAND1();
                  if (s41 !== peg$FAILED1) {
                      s51 = peg$parseequality_expression1();
                      if (s51 !== peg$FAILED1) {
                          s41 = [
                              s41,
                              s51
                          ];
                          s31 = s41;
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s31;
                      s31 = peg$FAILED1;
                  }
                  while(s31 !== peg$FAILED1){
                      s21.push(s31);
                      s31 = peg$currPos1;
                      s41 = peg$parseAMPERSAND1();
                      if (s41 !== peg$FAILED1) {
                          s51 = peg$parseequality_expression1();
                          if (s51 !== peg$FAILED1) {
                              s41 = [
                                  s41,
                                  s51
                              ];
                              s31 = s41;
                          } else {
                              peg$currPos1 = s31;
                              s31 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  }
                  peg$savedPos1 = s01;
                  s01 = peg$f221(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$silentFails1--;
              if (s01 === peg$FAILED1) {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2261);
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseexclusive_or_expression1() {
              var s01, s11, s21, s31, s41, s51;
              var key1 = peg$currPos1 * 305 + 242;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parseand_expression1();
              if (s11 !== peg$FAILED1) {
                  s21 = [];
                  s31 = peg$currPos1;
                  s41 = peg$parseCARET1();
                  if (s41 !== peg$FAILED1) {
                      s51 = peg$parseand_expression1();
                      if (s51 !== peg$FAILED1) {
                          s41 = [
                              s41,
                              s51
                          ];
                          s31 = s41;
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s31;
                      s31 = peg$FAILED1;
                  }
                  while(s31 !== peg$FAILED1){
                      s21.push(s31);
                      s31 = peg$currPos1;
                      s41 = peg$parseCARET1();
                      if (s41 !== peg$FAILED1) {
                          s51 = peg$parseand_expression1();
                          if (s51 !== peg$FAILED1) {
                              s41 = [
                                  s41,
                                  s51
                              ];
                              s31 = s41;
                          } else {
                              peg$currPos1 = s31;
                              s31 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  }
                  peg$savedPos1 = s01;
                  s01 = peg$f221(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseinclusive_or_expression1() {
              var s01, s11, s21, s31, s41, s51;
              var key1 = peg$currPos1 * 305 + 243;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parseexclusive_or_expression1();
              if (s11 !== peg$FAILED1) {
                  s21 = [];
                  s31 = peg$currPos1;
                  s41 = peg$parseVERTICAL_BAR1();
                  if (s41 !== peg$FAILED1) {
                      s51 = peg$parseexclusive_or_expression1();
                      if (s51 !== peg$FAILED1) {
                          s41 = [
                              s41,
                              s51
                          ];
                          s31 = s41;
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s31;
                      s31 = peg$FAILED1;
                  }
                  while(s31 !== peg$FAILED1){
                      s21.push(s31);
                      s31 = peg$currPos1;
                      s41 = peg$parseVERTICAL_BAR1();
                      if (s41 !== peg$FAILED1) {
                          s51 = peg$parseexclusive_or_expression1();
                          if (s51 !== peg$FAILED1) {
                              s41 = [
                                  s41,
                                  s51
                              ];
                              s31 = s41;
                          } else {
                              peg$currPos1 = s31;
                              s31 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  }
                  peg$savedPos1 = s01;
                  s01 = peg$f221(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parselogical_and_expression1() {
              var s01, s11, s21, s31, s41, s51;
              var key1 = peg$currPos1 * 305 + 244;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parseinclusive_or_expression1();
              if (s11 !== peg$FAILED1) {
                  s21 = [];
                  s31 = peg$currPos1;
                  s41 = peg$parseAND_OP1();
                  if (s41 !== peg$FAILED1) {
                      s51 = peg$parseinclusive_or_expression1();
                      if (s51 !== peg$FAILED1) {
                          s41 = [
                              s41,
                              s51
                          ];
                          s31 = s41;
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s31;
                      s31 = peg$FAILED1;
                  }
                  while(s31 !== peg$FAILED1){
                      s21.push(s31);
                      s31 = peg$currPos1;
                      s41 = peg$parseAND_OP1();
                      if (s41 !== peg$FAILED1) {
                          s51 = peg$parseinclusive_or_expression1();
                          if (s51 !== peg$FAILED1) {
                              s41 = [
                                  s41,
                                  s51
                              ];
                              s31 = s41;
                          } else {
                              peg$currPos1 = s31;
                              s31 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  }
                  peg$savedPos1 = s01;
                  s01 = peg$f221(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parselogical_xor_expression1() {
              var s01, s11, s21, s31, s41, s51;
              var key1 = peg$currPos1 * 305 + 245;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parselogical_and_expression1();
              if (s11 !== peg$FAILED1) {
                  s21 = [];
                  s31 = peg$currPos1;
                  s41 = peg$parseXOR_OP1();
                  if (s41 !== peg$FAILED1) {
                      s51 = peg$parselogical_and_expression1();
                      if (s51 !== peg$FAILED1) {
                          s41 = [
                              s41,
                              s51
                          ];
                          s31 = s41;
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s31;
                      s31 = peg$FAILED1;
                  }
                  while(s31 !== peg$FAILED1){
                      s21.push(s31);
                      s31 = peg$currPos1;
                      s41 = peg$parseXOR_OP1();
                      if (s41 !== peg$FAILED1) {
                          s51 = peg$parselogical_and_expression1();
                          if (s51 !== peg$FAILED1) {
                              s41 = [
                                  s41,
                                  s51
                              ];
                              s31 = s41;
                          } else {
                              peg$currPos1 = s31;
                              s31 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  }
                  peg$savedPos1 = s01;
                  s01 = peg$f221(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parselogical_or_expression1() {
              var s01, s11, s21, s31, s41, s51;
              var key1 = peg$currPos1 * 305 + 246;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parselogical_xor_expression1();
              if (s11 !== peg$FAILED1) {
                  s21 = [];
                  s31 = peg$currPos1;
                  s41 = peg$parseOR_OP1();
                  if (s41 !== peg$FAILED1) {
                      s51 = peg$parselogical_xor_expression1();
                      if (s51 !== peg$FAILED1) {
                          s41 = [
                              s41,
                              s51
                          ];
                          s31 = s41;
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s31;
                      s31 = peg$FAILED1;
                  }
                  while(s31 !== peg$FAILED1){
                      s21.push(s31);
                      s31 = peg$currPos1;
                      s41 = peg$parseOR_OP1();
                      if (s41 !== peg$FAILED1) {
                          s51 = peg$parselogical_xor_expression1();
                          if (s51 !== peg$FAILED1) {
                              s41 = [
                                  s41,
                                  s51
                              ];
                              s31 = s41;
                          } else {
                              peg$currPos1 = s31;
                              s31 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  }
                  peg$savedPos1 = s01;
                  s01 = peg$f221(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseternary_expression1() {
              var s01, s11, s21, s31, s41, s51, s61;
              var key1 = peg$currPos1 * 305 + 247;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parselogical_or_expression1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$currPos1;
                  s31 = peg$parseQUESTION1();
                  if (s31 !== peg$FAILED1) {
                      s41 = peg$parseexpression1();
                      if (s41 !== peg$FAILED1) {
                          s51 = peg$parseCOLON1();
                          if (s51 !== peg$FAILED1) {
                              s61 = peg$parseassignment_expression1();
                              if (s61 !== peg$FAILED1) {
                                  peg$savedPos1 = s21;
                                  s21 = peg$f231(s11, s31, s41, s51, s61);
                              } else {
                                  peg$currPos1 = s21;
                                  s21 = peg$FAILED1;
                              }
                          } else {
                              peg$currPos1 = s21;
                              s21 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s21;
                          s21 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s21;
                      s21 = peg$FAILED1;
                  }
                  if (s21 === peg$FAILED1) s21 = null;
                  peg$savedPos1 = s01;
                  s01 = peg$f241(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseassignment_expression1() {
              var s01, s11, s21, s31;
              var key1 = peg$currPos1 * 305 + 248;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parseunary_expression1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseassignment_operator1();
                  if (s21 !== peg$FAILED1) {
                      s31 = peg$parseassignment_expression1();
                      if (s31 !== peg$FAILED1) {
                          peg$savedPos1 = s01;
                          s01 = peg$f251(s11, s21, s31);
                      } else {
                          peg$currPos1 = s01;
                          s01 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              if (s01 === peg$FAILED1) s01 = peg$parseternary_expression1();
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseassignment_operator1() {
              var s01, s11;
              var key1 = peg$currPos1 * 305 + 249;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              peg$silentFails1++;
              s01 = peg$parseEQUAL1();
              if (s01 === peg$FAILED1) {
                  s01 = peg$parseMUL_ASSIGN1();
                  if (s01 === peg$FAILED1) {
                      s01 = peg$parseDIV_ASSIGN1();
                      if (s01 === peg$FAILED1) {
                          s01 = peg$parseMOD_ASSIGN1();
                          if (s01 === peg$FAILED1) {
                              s01 = peg$parseADD_ASSIGN1();
                              if (s01 === peg$FAILED1) {
                                  s01 = peg$parseSUB_ASSIGN1();
                                  if (s01 === peg$FAILED1) {
                                      s01 = peg$parseLEFT_ASSIGN1();
                                      if (s01 === peg$FAILED1) {
                                          s01 = peg$parseRIGHT_ASSIGN1();
                                          if (s01 === peg$FAILED1) {
                                              s01 = peg$parseAND_ASSIGN1();
                                              if (s01 === peg$FAILED1) {
                                                  s01 = peg$parseXOR_ASSIGN1();
                                                  if (s01 === peg$FAILED1) s01 = peg$parseOR_ASSIGN1();
                                              }
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
              peg$silentFails1--;
              if (s01 === peg$FAILED1) {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2271);
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseexpression1() {
              var s01, s11, s21, s31, s41, s51;
              var key1 = peg$currPos1 * 305 + 250;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              peg$silentFails1++;
              s01 = peg$currPos1;
              s11 = peg$parseassignment_expression1();
              if (s11 !== peg$FAILED1) {
                  s21 = [];
                  s31 = peg$currPos1;
                  s41 = peg$parseCOMMA1();
                  if (s41 !== peg$FAILED1) {
                      s51 = peg$parseassignment_expression1();
                      if (s51 !== peg$FAILED1) {
                          s41 = [
                              s41,
                              s51
                          ];
                          s31 = s41;
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s31;
                      s31 = peg$FAILED1;
                  }
                  while(s31 !== peg$FAILED1){
                      s21.push(s31);
                      s31 = peg$currPos1;
                      s41 = peg$parseCOMMA1();
                      if (s41 !== peg$FAILED1) {
                          s51 = peg$parseassignment_expression1();
                          if (s51 !== peg$FAILED1) {
                              s41 = [
                                  s41,
                                  s51
                              ];
                              s31 = s41;
                          } else {
                              peg$currPos1 = s31;
                              s31 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  }
                  peg$savedPos1 = s01;
                  s01 = peg$f221(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$silentFails1--;
              if (s01 === peg$FAILED1) {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2281);
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsedeclaration_statement1() {
              var s01, s11;
              var key1 = peg$currPos1 * 305 + 251;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parsedeclaration1();
              if (s11 !== peg$FAILED1) {
                  peg$savedPos1 = s01;
                  s11 = peg$f261(s11);
              }
              s01 = s11;
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsedeclaration1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 252;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parsefunction_prototype1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseSEMICOLON1();
                  if (s21 !== peg$FAILED1) {
                      s11 = [
                          s11,
                          s21
                      ];
                      s01 = s11;
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              if (s01 === peg$FAILED1) {
                  s01 = peg$currPos1;
                  s11 = peg$parseprecision_declarator1();
                  if (s11 !== peg$FAILED1) {
                      s21 = peg$parseSEMICOLON1();
                      if (s21 !== peg$FAILED1) {
                          s11 = [
                              s11,
                              s21
                          ];
                          s01 = s11;
                      } else {
                          peg$currPos1 = s01;
                          s01 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
                  if (s01 === peg$FAILED1) {
                      s01 = peg$currPos1;
                      s11 = peg$parseinterface_declarator1();
                      if (s11 !== peg$FAILED1) {
                          s21 = peg$parseSEMICOLON1();
                          if (s21 !== peg$FAILED1) {
                              s11 = [
                                  s11,
                                  s21
                              ];
                              s01 = s11;
                          } else {
                              peg$currPos1 = s01;
                              s01 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s01;
                          s01 = peg$FAILED1;
                      }
                      if (s01 === peg$FAILED1) {
                          s01 = peg$currPos1;
                          s11 = peg$parsequalifier_declarator1();
                          if (s11 !== peg$FAILED1) {
                              s21 = peg$parseSEMICOLON1();
                              if (s21 !== peg$FAILED1) {
                                  s11 = [
                                      s11,
                                      s21
                                  ];
                                  s01 = s11;
                              } else {
                                  peg$currPos1 = s01;
                                  s01 = peg$FAILED1;
                              }
                          } else {
                              peg$currPos1 = s01;
                              s01 = peg$FAILED1;
                          }
                          if (s01 === peg$FAILED1) {
                              s01 = peg$currPos1;
                              s11 = peg$parseinit_declarator_list1();
                              if (s11 !== peg$FAILED1) {
                                  s21 = peg$parseSEMICOLON1();
                                  if (s21 !== peg$FAILED1) {
                                      s11 = [
                                          s11,
                                          s21
                                      ];
                                      s01 = s11;
                                  } else {
                                      peg$currPos1 = s01;
                                      s01 = peg$FAILED1;
                                  }
                              } else {
                                  peg$currPos1 = s01;
                                  s01 = peg$FAILED1;
                              }
                          }
                      }
                  }
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsequalifier_declarator1() {
              var s01, s11, s21, s31, s41, s51, s61;
              var key1 = peg$currPos1 * 305 + 253;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parsetype_qualifiers1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseIDENTIFIER1();
                  if (s21 === peg$FAILED1) s21 = null;
                  s31 = [];
                  s41 = peg$currPos1;
                  s51 = peg$parseCOMMA1();
                  if (s51 !== peg$FAILED1) {
                      s61 = peg$parseIDENTIFIER1();
                      if (s61 !== peg$FAILED1) {
                          s51 = [
                              s51,
                              s61
                          ];
                          s41 = s51;
                      } else {
                          peg$currPos1 = s41;
                          s41 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s41;
                      s41 = peg$FAILED1;
                  }
                  while(s41 !== peg$FAILED1){
                      s31.push(s41);
                      s41 = peg$currPos1;
                      s51 = peg$parseCOMMA1();
                      if (s51 !== peg$FAILED1) {
                          s61 = peg$parseIDENTIFIER1();
                          if (s61 !== peg$FAILED1) {
                              s51 = [
                                  s51,
                                  s61
                              ];
                              s41 = s51;
                          } else {
                              peg$currPos1 = s41;
                              s41 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s41;
                          s41 = peg$FAILED1;
                      }
                  }
                  peg$savedPos1 = s01;
                  s01 = peg$f271(s11, s21, s31);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseinterface_declarator1() {
              var s01, s11, s21, s31, s41, s51, s61;
              var key1 = peg$currPos1 * 305 + 254;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parsetype_qualifiers1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseIDENTIFIER1();
                  if (s21 !== peg$FAILED1) {
                      s31 = peg$parseLEFT_BRACE1();
                      if (s31 !== peg$FAILED1) {
                          s41 = peg$parsestruct_declaration_list1();
                          if (s41 !== peg$FAILED1) {
                              s51 = peg$parseRIGHT_BRACE1();
                              if (s51 !== peg$FAILED1) {
                                  s61 = peg$parsequantified_identifier1();
                                  if (s61 === peg$FAILED1) s61 = null;
                                  peg$savedPos1 = s01;
                                  s01 = peg$f281(s11, s21, s31, s41, s51, s61);
                              } else {
                                  peg$currPos1 = s01;
                                  s01 = peg$FAILED1;
                              }
                          } else {
                              peg$currPos1 = s01;
                              s01 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s01;
                          s01 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseprecision_declarator1() {
              var s01, s11, s21, s31;
              var key1 = peg$currPos1 * 305 + 255;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              peg$silentFails1++;
              s01 = peg$currPos1;
              s11 = peg$parsePRECISION1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseprecision_qualifier1();
                  if (s21 !== peg$FAILED1) {
                      s31 = peg$parsetype_specifier1();
                      if (s31 !== peg$FAILED1) {
                          peg$savedPos1 = s01;
                          s01 = peg$f291(s11, s21, s31);
                      } else {
                          peg$currPos1 = s01;
                          s01 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$silentFails1--;
              if (s01 === peg$FAILED1) {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2291);
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsefunction_prototype1() {
              var s01, s11, s21, s31;
              var key1 = peg$currPos1 * 305 + 256;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              peg$silentFails1++;
              s01 = peg$currPos1;
              s11 = peg$parsefunction_header1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parsefunction_parameters1();
                  if (s21 === peg$FAILED1) s21 = null;
                  s31 = peg$parseRIGHT_PAREN1();
                  if (s31 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f301(s11, s21, s31);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$silentFails1--;
              if (s01 === peg$FAILED1) {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2301);
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsefunction_header1() {
              var s01, s11, s21, s31;
              var key1 = peg$currPos1 * 305 + 257;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              peg$silentFails1++;
              s01 = peg$currPos1;
              s11 = peg$parsefully_specified_type1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseIDENTIFIER1();
                  if (s21 !== peg$FAILED1) {
                      s31 = peg$parseLEFT_PAREN1();
                      if (s31 !== peg$FAILED1) {
                          peg$savedPos1 = s01;
                          s01 = peg$f311(s11, s21, s31);
                      } else {
                          peg$currPos1 = s01;
                          s01 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$silentFails1--;
              if (s01 === peg$FAILED1) {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2311);
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsefunction_parameters1() {
              var s01, s11, s21, s31, s41, s51;
              var key1 = peg$currPos1 * 305 + 258;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              peg$silentFails1++;
              s01 = peg$currPos1;
              s11 = peg$parseparameter_declaration1();
              if (s11 !== peg$FAILED1) {
                  s21 = [];
                  s31 = peg$currPos1;
                  s41 = peg$parseCOMMA1();
                  if (s41 !== peg$FAILED1) {
                      s51 = peg$parseparameter_declaration1();
                      if (s51 !== peg$FAILED1) {
                          s41 = [
                              s41,
                              s51
                          ];
                          s31 = s41;
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s31;
                      s31 = peg$FAILED1;
                  }
                  while(s31 !== peg$FAILED1){
                      s21.push(s31);
                      s31 = peg$currPos1;
                      s41 = peg$parseCOMMA1();
                      if (s41 !== peg$FAILED1) {
                          s51 = peg$parseparameter_declaration1();
                          if (s51 !== peg$FAILED1) {
                              s41 = [
                                  s41,
                                  s51
                              ];
                              s31 = s41;
                          } else {
                              peg$currPos1 = s31;
                              s31 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  }
                  peg$savedPos1 = s01;
                  s01 = peg$f321(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$silentFails1--;
              if (s01 === peg$FAILED1) {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2321);
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseparameter_declaration1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 259;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              peg$silentFails1++;
              s01 = peg$currPos1;
              s11 = [];
              s21 = peg$parseparameter_qualifier1();
              while(s21 !== peg$FAILED1){
                  s11.push(s21);
                  s21 = peg$parseparameter_qualifier1();
              }
              s21 = peg$parseparameter_declarator1();
              if (s21 === peg$FAILED1) s21 = peg$parsetype_specifier1();
              if (s21 !== peg$FAILED1) {
                  peg$savedPos1 = s01;
                  s01 = peg$f331(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$silentFails1--;
              if (s01 === peg$FAILED1) {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2331);
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseparameter_declarator1() {
              var s01, s11, s21, s31;
              var key1 = peg$currPos1 * 305 + 260;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              peg$silentFails1++;
              s01 = peg$currPos1;
              s11 = peg$parsetype_specifier1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseIDENTIFIER1();
                  if (s21 !== peg$FAILED1) {
                      s31 = peg$parsearray_specifier1();
                      if (s31 === peg$FAILED1) s31 = null;
                      peg$savedPos1 = s01;
                      s01 = peg$f341(s11, s21, s31);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$silentFails1--;
              if (s01 === peg$FAILED1) {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2341);
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseparameter_qualifier1() {
              var s01;
              var key1 = peg$currPos1 * 305 + 261;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$parseCONST1();
              if (s01 === peg$FAILED1) {
                  s01 = peg$parseIN1();
                  if (s01 === peg$FAILED1) {
                      s01 = peg$parseOUT1();
                      if (s01 === peg$FAILED1) {
                          s01 = peg$parseINOUT1();
                          if (s01 === peg$FAILED1) {
                              s01 = peg$parsememory_qualifier1();
                              if (s01 === peg$FAILED1) s01 = peg$parseprecision_qualifier1();
                          }
                      }
                  }
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsememory_qualifier1() {
              var s01;
              var key1 = peg$currPos1 * 305 + 262;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$parseCOHERENT1();
              if (s01 === peg$FAILED1) {
                  s01 = peg$parseVOLATILE1();
                  if (s01 === peg$FAILED1) {
                      s01 = peg$parseRESTRICT1();
                      if (s01 === peg$FAILED1) {
                          s01 = peg$parseREADONLY1();
                          if (s01 === peg$FAILED1) s01 = peg$parseWRITEONLY1();
                      }
                  }
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseinit_declarator_list1() {
              var s01, s11, s21, s31, s41, s51;
              var key1 = peg$currPos1 * 305 + 263;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parseinitial_declaration1();
              if (s11 !== peg$FAILED1) {
                  s21 = [];
                  s31 = peg$currPos1;
                  s41 = peg$parseCOMMA1();
                  if (s41 !== peg$FAILED1) {
                      s51 = peg$parsesubsequent_declaration1();
                      if (s51 !== peg$FAILED1) {
                          s41 = [
                              s41,
                              s51
                          ];
                          s31 = s41;
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s31;
                      s31 = peg$FAILED1;
                  }
                  while(s31 !== peg$FAILED1){
                      s21.push(s31);
                      s31 = peg$currPos1;
                      s41 = peg$parseCOMMA1();
                      if (s41 !== peg$FAILED1) {
                          s51 = peg$parsesubsequent_declaration1();
                          if (s51 !== peg$FAILED1) {
                              s41 = [
                                  s41,
                                  s51
                              ];
                              s31 = s41;
                          } else {
                              peg$currPos1 = s31;
                              s31 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  }
                  peg$savedPos1 = s01;
                  s01 = peg$f351(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsesubsequent_declaration1() {
              var s01, s11, s21, s31, s41, s51;
              var key1 = peg$currPos1 * 305 + 264;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parseIDENTIFIER1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parsearray_specifier1();
                  if (s21 === peg$FAILED1) s21 = null;
                  s31 = peg$currPos1;
                  s41 = peg$parseEQUAL1();
                  if (s41 !== peg$FAILED1) {
                      s51 = peg$parseinitializer1();
                      if (s51 !== peg$FAILED1) {
                          s41 = [
                              s41,
                              s51
                          ];
                          s31 = s41;
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s31;
                      s31 = peg$FAILED1;
                  }
                  if (s31 === peg$FAILED1) s31 = null;
                  peg$savedPos1 = s01;
                  s01 = peg$f361(s11, s21, s31);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseinitial_declaration1() {
              var s01, s11, s21, s31, s41, s51, s61, s71;
              var key1 = peg$currPos1 * 305 + 265;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parsefully_specified_type1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$currPos1;
                  s31 = peg$parseIDENTIFIER1();
                  if (s31 !== peg$FAILED1) {
                      s41 = peg$parsearray_specifier1();
                      if (s41 === peg$FAILED1) s41 = null;
                      s51 = peg$currPos1;
                      s61 = peg$parseEQUAL1();
                      if (s61 !== peg$FAILED1) {
                          s71 = peg$parseinitializer1();
                          if (s71 !== peg$FAILED1) {
                              s61 = [
                                  s61,
                                  s71
                              ];
                              s51 = s61;
                          } else {
                              peg$currPos1 = s51;
                              s51 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s51;
                          s51 = peg$FAILED1;
                      }
                      if (s51 === peg$FAILED1) s51 = null;
                      s31 = [
                          s31,
                          s41,
                          s51
                      ];
                      s21 = s31;
                  } else {
                      peg$currPos1 = s21;
                      s21 = peg$FAILED1;
                  }
                  if (s21 === peg$FAILED1) s21 = null;
                  peg$savedPos1 = s01;
                  s01 = peg$f371(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsefully_specified_type1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 266;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parsetype_qualifiers1();
              if (s11 === peg$FAILED1) s11 = null;
              s21 = peg$parsetype_specifier1();
              if (s21 !== peg$FAILED1) {
                  peg$savedPos1 = s01;
                  s01 = peg$f381(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parselayout_qualifier1() {
              var s01, s11, s21, s31, s41, s51, s61, s71, s81;
              var key1 = peg$currPos1 * 305 + 267;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parseLAYOUT1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseLEFT_PAREN1();
                  if (s21 !== peg$FAILED1) {
                      s31 = peg$currPos1;
                      s41 = peg$parselayout_qualifier_id1();
                      if (s41 !== peg$FAILED1) {
                          s51 = [];
                          s61 = peg$currPos1;
                          s71 = peg$parseCOMMA1();
                          if (s71 !== peg$FAILED1) {
                              s81 = peg$parselayout_qualifier_id1();
                              if (s81 !== peg$FAILED1) {
                                  s71 = [
                                      s71,
                                      s81
                                  ];
                                  s61 = s71;
                              } else {
                                  peg$currPos1 = s61;
                                  s61 = peg$FAILED1;
                              }
                          } else {
                              peg$currPos1 = s61;
                              s61 = peg$FAILED1;
                          }
                          while(s61 !== peg$FAILED1){
                              s51.push(s61);
                              s61 = peg$currPos1;
                              s71 = peg$parseCOMMA1();
                              if (s71 !== peg$FAILED1) {
                                  s81 = peg$parselayout_qualifier_id1();
                                  if (s81 !== peg$FAILED1) {
                                      s71 = [
                                          s71,
                                          s81
                                      ];
                                      s61 = s71;
                                  } else {
                                      peg$currPos1 = s61;
                                      s61 = peg$FAILED1;
                                  }
                              } else {
                                  peg$currPos1 = s61;
                                  s61 = peg$FAILED1;
                              }
                          }
                          peg$savedPos1 = s31;
                          s31 = peg$f391(s11, s21, s41, s51);
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                      if (s31 !== peg$FAILED1) {
                          s41 = peg$parseRIGHT_PAREN1();
                          if (s41 !== peg$FAILED1) {
                              peg$savedPos1 = s01;
                              s01 = peg$f401(s11, s21, s31, s41);
                          } else {
                              peg$currPos1 = s01;
                              s01 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s01;
                          s01 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parselayout_qualifier_id1() {
              var s01, s11, s21, s31, s41;
              var key1 = peg$currPos1 * 305 + 268;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parseIDENTIFIER1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$currPos1;
                  s31 = peg$parseEQUAL1();
                  if (s31 !== peg$FAILED1) {
                      s41 = peg$parseternary_expression1();
                      if (s41 !== peg$FAILED1) {
                          s31 = [
                              s31,
                              s41
                          ];
                          s21 = s31;
                      } else {
                          peg$currPos1 = s21;
                          s21 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s21;
                      s21 = peg$FAILED1;
                  }
                  if (s21 === peg$FAILED1) s21 = null;
                  peg$savedPos1 = s01;
                  s01 = peg$f411(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              if (s01 === peg$FAILED1) s01 = peg$parseSHARED1();
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsetype_qualifiers1() {
              var s01, s11;
              var key1 = peg$currPos1 * 305 + 269;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = [];
              s11 = peg$parsesingle_type_qualifier1();
              if (s11 !== peg$FAILED1) while(s11 !== peg$FAILED1){
                  s01.push(s11);
                  s11 = peg$parsesingle_type_qualifier1();
              }
              else s01 = peg$FAILED1;
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsesingle_type_qualifier1() {
              var s01, s11;
              var key1 = peg$currPos1 * 305 + 270;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              peg$silentFails1++;
              s01 = peg$parsestorage_qualifier1();
              if (s01 === peg$FAILED1) {
                  s01 = peg$parselayout_qualifier1();
                  if (s01 === peg$FAILED1) {
                      s01 = peg$parseprecision_qualifier1();
                      if (s01 === peg$FAILED1) {
                          s01 = peg$parseinterpolation_qualifier1();
                          if (s01 === peg$FAILED1) {
                              s01 = peg$parseINVARIANT1();
                              if (s01 === peg$FAILED1) s01 = peg$parsePRECISE1();
                          }
                      }
                  }
              }
              peg$silentFails1--;
              if (s01 === peg$FAILED1) {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2351);
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseinterpolation_qualifier1() {
              var s01, s11;
              var key1 = peg$currPos1 * 305 + 271;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              peg$silentFails1++;
              s01 = peg$parseSMOOTH1();
              if (s01 === peg$FAILED1) {
                  s01 = peg$parseFLAT1();
                  if (s01 === peg$FAILED1) s01 = peg$parseNOPERSPECTIVE1();
              }
              peg$silentFails1--;
              if (s01 === peg$FAILED1) {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2361);
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsestorage_qualifier1() {
              var s01, s11, s21, s31, s41, s51, s61, s71, s81;
              var key1 = peg$currPos1 * 305 + 272;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              peg$silentFails1++;
              s01 = peg$parseCONST1();
              if (s01 === peg$FAILED1) {
                  s01 = peg$parseINOUT1();
                  if (s01 === peg$FAILED1) {
                      s01 = peg$parseIN1();
                      if (s01 === peg$FAILED1) {
                          s01 = peg$parseOUT1();
                          if (s01 === peg$FAILED1) {
                              s01 = peg$parseCENTROID1();
                              if (s01 === peg$FAILED1) {
                                  s01 = peg$parsePATCH1();
                                  if (s01 === peg$FAILED1) {
                                      s01 = peg$parseSAMPLE1();
                                      if (s01 === peg$FAILED1) {
                                          s01 = peg$parseUNIFORM1();
                                          if (s01 === peg$FAILED1) {
                                              s01 = peg$parseBUFFER1();
                                              if (s01 === peg$FAILED1) {
                                                  s01 = peg$parseSHARED1();
                                                  if (s01 === peg$FAILED1) {
                                                      s01 = peg$parseCOHERENT1();
                                                      if (s01 === peg$FAILED1) {
                                                          s01 = peg$parseVOLATILE1();
                                                          if (s01 === peg$FAILED1) {
                                                              s01 = peg$parseRESTRICT1();
                                                              if (s01 === peg$FAILED1) {
                                                                  s01 = peg$parseREADONLY1();
                                                                  if (s01 === peg$FAILED1) {
                                                                      s01 = peg$parseWRITEONLY1();
                                                                      if (s01 === peg$FAILED1) {
                                                                          s01 = peg$parseVARYING1();
                                                                          if (s01 === peg$FAILED1) {
                                                                              s01 = peg$parseATTRIBUTE1();
                                                                              if (s01 === peg$FAILED1) {
                                                                                  s01 = peg$currPos1;
                                                                                  s11 = peg$parseSUBROUTINE1();
                                                                                  if (s11 !== peg$FAILED1) {
                                                                                      s21 = peg$currPos1;
                                                                                      s31 = peg$parseLEFT_PAREN1();
                                                                                      if (s31 !== peg$FAILED1) {
                                                                                          s41 = peg$parseTYPE_NAME1();
                                                                                          if (s41 !== peg$FAILED1) {
                                                                                              s51 = [];
                                                                                              s61 = peg$currPos1;
                                                                                              s71 = peg$parseCOMMA1();
                                                                                              if (s71 !== peg$FAILED1) {
                                                                                                  s81 = peg$parseTYPE_NAME1();
                                                                                                  if (s81 !== peg$FAILED1) {
                                                                                                      s71 = [
                                                                                                          s71,
                                                                                                          s81
                                                                                                      ];
                                                                                                      s61 = s71;
                                                                                                  } else {
                                                                                                      peg$currPos1 = s61;
                                                                                                      s61 = peg$FAILED1;
                                                                                                  }
                                                                                              } else {
                                                                                                  peg$currPos1 = s61;
                                                                                                  s61 = peg$FAILED1;
                                                                                              }
                                                                                              while(s61 !== peg$FAILED1){
                                                                                                  s51.push(s61);
                                                                                                  s61 = peg$currPos1;
                                                                                                  s71 = peg$parseCOMMA1();
                                                                                                  if (s71 !== peg$FAILED1) {
                                                                                                      s81 = peg$parseTYPE_NAME1();
                                                                                                      if (s81 !== peg$FAILED1) {
                                                                                                          s71 = [
                                                                                                              s71,
                                                                                                              s81
                                                                                                          ];
                                                                                                          s61 = s71;
                                                                                                      } else {
                                                                                                          peg$currPos1 = s61;
                                                                                                          s61 = peg$FAILED1;
                                                                                                      }
                                                                                                  } else {
                                                                                                      peg$currPos1 = s61;
                                                                                                      s61 = peg$FAILED1;
                                                                                                  }
                                                                                              }
                                                                                              s61 = peg$parseRIGHT_PAREN1();
                                                                                              if (s61 !== peg$FAILED1) {
                                                                                                  peg$savedPos1 = s21;
                                                                                                  s21 = peg$f421(s11, s31, s41, s51, s61);
                                                                                              } else {
                                                                                                  peg$currPos1 = s21;
                                                                                                  s21 = peg$FAILED1;
                                                                                              }
                                                                                          } else {
                                                                                              peg$currPos1 = s21;
                                                                                              s21 = peg$FAILED1;
                                                                                          }
                                                                                      } else {
                                                                                          peg$currPos1 = s21;
                                                                                          s21 = peg$FAILED1;
                                                                                      }
                                                                                      if (s21 === peg$FAILED1) s21 = null;
                                                                                      peg$savedPos1 = s01;
                                                                                      s01 = peg$f431(s11, s21);
                                                                                  } else {
                                                                                      peg$currPos1 = s01;
                                                                                      s01 = peg$FAILED1;
                                                                                  }
                                                                              }
                                                                          }
                                                                      }
                                                                  }
                                                              }
                                                          }
                                                      }
                                                  }
                                              }
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
              peg$silentFails1--;
              if (s01 === peg$FAILED1) {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2371);
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsetype_specifier1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 273;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              peg$silentFails1++;
              s01 = peg$currPos1;
              s11 = peg$parsetype_specifier_nonarray1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parsearray_specifier1();
                  if (s21 === peg$FAILED1) s21 = null;
                  peg$savedPos1 = s01;
                  s01 = peg$f441(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$silentFails1--;
              if (s01 === peg$FAILED1) {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2381);
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsetype_specifier_nonarray1() {
              var s01, s11;
              var key1 = peg$currPos1 * 305 + 274;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              peg$silentFails1++;
              s01 = peg$parseVOID1();
              if (s01 === peg$FAILED1) {
                  s01 = peg$parseFLOAT1();
                  if (s01 === peg$FAILED1) {
                      s01 = peg$parseDOUBLE1();
                      if (s01 === peg$FAILED1) {
                          s01 = peg$parseINT1();
                          if (s01 === peg$FAILED1) {
                              s01 = peg$parseUINT1();
                              if (s01 === peg$FAILED1) {
                                  s01 = peg$parseBOOL1();
                                  if (s01 === peg$FAILED1) {
                                      s01 = peg$parseVEC21();
                                      if (s01 === peg$FAILED1) {
                                          s01 = peg$parseVEC31();
                                          if (s01 === peg$FAILED1) {
                                              s01 = peg$parseVEC41();
                                              if (s01 === peg$FAILED1) {
                                                  s01 = peg$parseDVEC21();
                                                  if (s01 === peg$FAILED1) {
                                                      s01 = peg$parseDVEC31();
                                                      if (s01 === peg$FAILED1) {
                                                          s01 = peg$parseDVEC41();
                                                          if (s01 === peg$FAILED1) {
                                                              s01 = peg$parseBVEC21();
                                                              if (s01 === peg$FAILED1) {
                                                                  s01 = peg$parseBVEC31();
                                                                  if (s01 === peg$FAILED1) {
                                                                      s01 = peg$parseBVEC41();
                                                                      if (s01 === peg$FAILED1) {
                                                                          s01 = peg$parseIVEC21();
                                                                          if (s01 === peg$FAILED1) {
                                                                              s01 = peg$parseIVEC31();
                                                                              if (s01 === peg$FAILED1) {
                                                                                  s01 = peg$parseIVEC41();
                                                                                  if (s01 === peg$FAILED1) {
                                                                                      s01 = peg$parseUVEC21();
                                                                                      if (s01 === peg$FAILED1) {
                                                                                          s01 = peg$parseUVEC31();
                                                                                          if (s01 === peg$FAILED1) {
                                                                                              s01 = peg$parseUVEC41();
                                                                                              if (s01 === peg$FAILED1) {
                                                                                                  s01 = peg$parseMAT21();
                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                      s01 = peg$parseMAT31();
                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                          s01 = peg$parseMAT41();
                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                              s01 = peg$parseMAT2X21();
                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                  s01 = peg$parseMAT2X31();
                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                      s01 = peg$parseMAT2X41();
                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                          s01 = peg$parseMAT3X21();
                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                              s01 = peg$parseMAT3X31();
                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                  s01 = peg$parseMAT3X41();
                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                      s01 = peg$parseMAT4X21();
                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                          s01 = peg$parseMAT4X31();
                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                              s01 = peg$parseMAT4X41();
                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                  s01 = peg$parseDMAT21();
                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                      s01 = peg$parseDMAT31();
                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                          s01 = peg$parseDMAT41();
                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                              s01 = peg$parseDMAT2X21();
                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                  s01 = peg$parseDMAT2X31();
                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                      s01 = peg$parseDMAT2X41();
                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                          s01 = peg$parseDMAT3X21();
                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                              s01 = peg$parseDMAT3X31();
                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                  s01 = peg$parseDMAT3X41();
                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                      s01 = peg$parseDMAT4X21();
                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                          s01 = peg$parseDMAT4X31();
                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                              s01 = peg$parseDMAT4X41();
                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                  s01 = peg$parseATOMIC_UINT1();
                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                      s01 = peg$parseSAMPLER1D1();
                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                          s01 = peg$parseSAMPLER2D1();
                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                              s01 = peg$parseSAMPLER3D1();
                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                  s01 = peg$parseSAMPLERCUBE1();
                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                      s01 = peg$parseSAMPLER1DSHADOW1();
                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                          s01 = peg$parseSAMPLER2DSHADOW1();
                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                              s01 = peg$parseSAMPLERCUBESHADOW1();
                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                  s01 = peg$parseSAMPLER1DARRAY1();
                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                      s01 = peg$parseSAMPLER2DARRAY1();
                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                          s01 = peg$parseSAMPLER1DARRAYSHADOW1();
                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                              s01 = peg$parseSAMPLER2DARRAYSHADOW1();
                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                  s01 = peg$parseSAMPLERCUBEARRAY1();
                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                      s01 = peg$parseSAMPLERCUBEARRAYSHADOW1();
                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                          s01 = peg$parseISAMPLER1D1();
                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                              s01 = peg$parseISAMPLER2D1();
                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                  s01 = peg$parseISAMPLER3D1();
                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                      s01 = peg$parseISAMPLERCUBE1();
                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                          s01 = peg$parseISAMPLER1DARRAY1();
                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                              s01 = peg$parseISAMPLER2DARRAY1();
                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                  s01 = peg$parseISAMPLERCUBEARRAY1();
                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                      s01 = peg$parseUSAMPLER1D1();
                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                          s01 = peg$parseUSAMPLER2D1();
                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                              s01 = peg$parseUSAMPLER3D1();
                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                  s01 = peg$parseUSAMPLERCUBE1();
                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                      s01 = peg$parseUSAMPLER1DARRAY1();
                                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                          s01 = peg$parseUSAMPLER2DARRAY1();
                                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                              s01 = peg$parseUSAMPLERCUBEARRAY1();
                                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                  s01 = peg$parseSAMPLER2DRECT1();
                                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                      s01 = peg$parseSAMPLER2DRECTSHADOW1();
                                                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                          s01 = peg$parseISAMPLER2DRECT1();
                                                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                              s01 = peg$parseUSAMPLER2DRECT1();
                                                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                  s01 = peg$parseSAMPLERBUFFER1();
                                                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                      s01 = peg$parseISAMPLERBUFFER1();
                                                                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                          s01 = peg$parseUSAMPLERBUFFER1();
                                                                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                              s01 = peg$parseSAMPLER2DMS1();
                                                                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                  s01 = peg$parseISAMPLER2DMS1();
                                                                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                      s01 = peg$parseUSAMPLER2DMS1();
                                                                                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                          s01 = peg$parseSAMPLER2DMSARRAY1();
                                                                                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                              s01 = peg$parseISAMPLER2DMSARRAY1();
                                                                                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                  s01 = peg$parseUSAMPLER2DMSARRAY1();
                                                                                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                      s01 = peg$parseIMAGE1D1();
                                                                                                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                          s01 = peg$parseIIMAGE1D1();
                                                                                                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                              s01 = peg$parseUIMAGE1D1();
                                                                                                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                  s01 = peg$parseIMAGE2D1();
                                                                                                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                      s01 = peg$parseIIMAGE2D1();
                                                                                                                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                          s01 = peg$parseUIMAGE2D1();
                                                                                                                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                              s01 = peg$parseIMAGE3D1();
                                                                                                                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                  s01 = peg$parseIIMAGE3D1();
                                                                                                                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                      s01 = peg$parseUIMAGE3D1();
                                                                                                                                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                          s01 = peg$parseIMAGE2DRECT1();
                                                                                                                                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                              s01 = peg$parseIIMAGE2DRECT1();
                                                                                                                                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                  s01 = peg$parseUIMAGE2DRECT1();
                                                                                                                                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                      s01 = peg$parseIMAGECUBE1();
                                                                                                                                                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                          s01 = peg$parseIIMAGECUBE1();
                                                                                                                                                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                              s01 = peg$parseUIMAGECUBE1();
                                                                                                                                                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                  s01 = peg$parseIMAGEBUFFER1();
                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                      s01 = peg$parseIIMAGEBUFFER1();
                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                          s01 = peg$parseUIMAGEBUFFER1();
                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                              s01 = peg$parseIMAGE1DARRAY1();
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                  s01 = peg$parseIIMAGE1DARRAY1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                      s01 = peg$parseUIMAGE1DARRAY1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                          s01 = peg$parseIMAGE2DARRAY1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                              s01 = peg$parseIIMAGE2DARRAY1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s01 = peg$parseUIMAGE2DARRAY1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s01 = peg$parseIMAGECUBEARRAY1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s01 = peg$parseIIMAGECUBEARRAY1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s01 = peg$parseUIMAGECUBEARRAY1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s01 = peg$parseIMAGE2DMS1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s01 = peg$parseIIMAGE2DMS1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s01 = peg$parseUIMAGE2DMS1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              s01 = peg$parseIMAGE2DMSARRAY1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  s01 = peg$parseIIMAGE2DMSARRAY1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      s01 = peg$parseUIMAGE2DMSARRAY1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (s01 === peg$FAILED1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          s01 = peg$parsestruct_specifier1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (s01 === peg$FAILED1) s01 = peg$parseTYPE_NAME1();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                              }
                                                                                                                                                                                                          }
                                                                                                                                                                                                      }
                                                                                                                                                                                                  }
                                                                                                                                                                                              }
                                                                                                                                                                                          }
                                                                                                                                                                                      }
                                                                                                                                                                                  }
                                                                                                                                                                              }
                                                                                                                                                                          }
                                                                                                                                                                      }
                                                                                                                                                                  }
                                                                                                                                                              }
                                                                                                                                                          }
                                                                                                                                                      }
                                                                                                                                                  }
                                                                                                                                              }
                                                                                                                                          }
                                                                                                                                      }
                                                                                                                                  }
                                                                                                                              }
                                                                                                                          }
                                                                                                                      }
                                                                                                                  }
                                                                                                              }
                                                                                                          }
                                                                                                      }
                                                                                                  }
                                                                                              }
                                                                                          }
                                                                                      }
                                                                                  }
                                                                              }
                                                                          }
                                                                      }
                                                                  }
                                                              }
                                                          }
                                                      }
                                                  }
                                              }
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
              peg$silentFails1--;
              if (s01 === peg$FAILED1) {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2381);
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsearray_specifier1() {
              var s01, s11, s21, s31, s41, s51;
              var key1 = peg$currPos1 * 305 + 275;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              peg$silentFails1++;
              s01 = peg$currPos1;
              s11 = [];
              s21 = peg$currPos1;
              s31 = peg$parseLEFT_BRACKET1();
              if (s31 !== peg$FAILED1) {
                  s41 = peg$parseternary_expression1();
                  if (s41 === peg$FAILED1) s41 = null;
                  s51 = peg$parseRIGHT_BRACKET1();
                  if (s51 !== peg$FAILED1) {
                      peg$savedPos1 = s21;
                      s21 = peg$f451(s31, s41, s51);
                  } else {
                      peg$currPos1 = s21;
                      s21 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s21;
                  s21 = peg$FAILED1;
              }
              if (s21 !== peg$FAILED1) while(s21 !== peg$FAILED1){
                  s11.push(s21);
                  s21 = peg$currPos1;
                  s31 = peg$parseLEFT_BRACKET1();
                  if (s31 !== peg$FAILED1) {
                      s41 = peg$parseternary_expression1();
                      if (s41 === peg$FAILED1) s41 = null;
                      s51 = peg$parseRIGHT_BRACKET1();
                      if (s51 !== peg$FAILED1) {
                          peg$savedPos1 = s21;
                          s21 = peg$f451(s31, s41, s51);
                      } else {
                          peg$currPos1 = s21;
                          s21 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s21;
                      s21 = peg$FAILED1;
                  }
              }
              else s11 = peg$FAILED1;
              if (s11 !== peg$FAILED1) {
                  peg$savedPos1 = s01;
                  s11 = peg$f461(s11);
              }
              s01 = s11;
              peg$silentFails1--;
              if (s01 === peg$FAILED1) {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2391);
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseprecision_qualifier1() {
              var s01, s11;
              var key1 = peg$currPos1 * 305 + 276;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              peg$silentFails1++;
              s01 = peg$parseHIGH_PRECISION1();
              if (s01 === peg$FAILED1) {
                  s01 = peg$parseMEDIUM_PRECISION1();
                  if (s01 === peg$FAILED1) s01 = peg$parseLOW_PRECISION1();
              }
              peg$silentFails1--;
              if (s01 === peg$FAILED1) {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2401);
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsestruct_specifier1() {
              var s01, s11, s21, s31, s41, s51;
              var key1 = peg$currPos1 * 305 + 277;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              peg$silentFails1++;
              s01 = peg$currPos1;
              s11 = peg$parseSTRUCT1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseIDENTIFIER1();
                  if (s21 === peg$FAILED1) s21 = null;
                  s31 = peg$parseLEFT_BRACE1();
                  if (s31 !== peg$FAILED1) {
                      s41 = peg$parsestruct_declaration_list1();
                      if (s41 !== peg$FAILED1) {
                          s51 = peg$parseRIGHT_BRACE1();
                          if (s51 !== peg$FAILED1) {
                              peg$savedPos1 = s01;
                              s01 = peg$f471(s11, s21, s31, s41, s51);
                          } else {
                              peg$currPos1 = s01;
                              s01 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s01;
                          s01 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$silentFails1--;
              if (s01 === peg$FAILED1) {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2411);
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsestruct_declaration_list1() {
              var s01, s11, s21, s31;
              var key1 = peg$currPos1 * 305 + 278;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = [];
              s11 = peg$currPos1;
              s21 = peg$parsestruct_declaration1();
              if (s21 !== peg$FAILED1) {
                  s31 = peg$parseSEMICOLON1();
                  if (s31 !== peg$FAILED1) {
                      peg$savedPos1 = s11;
                      s11 = peg$f481(s21, s31);
                  } else {
                      peg$currPos1 = s11;
                      s11 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s11;
                  s11 = peg$FAILED1;
              }
              if (s11 !== peg$FAILED1) while(s11 !== peg$FAILED1){
                  s01.push(s11);
                  s11 = peg$currPos1;
                  s21 = peg$parsestruct_declaration1();
                  if (s21 !== peg$FAILED1) {
                      s31 = peg$parseSEMICOLON1();
                      if (s31 !== peg$FAILED1) {
                          peg$savedPos1 = s11;
                          s11 = peg$f481(s21, s31);
                      } else {
                          peg$currPos1 = s11;
                          s11 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s11;
                      s11 = peg$FAILED1;
                  }
              }
              else s01 = peg$FAILED1;
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsestruct_declaration1() {
              var s01, s11, s21, s31, s41, s51, s61;
              var key1 = peg$currPos1 * 305 + 279;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parsefully_specified_type1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parsequantified_identifier1();
                  if (s21 !== peg$FAILED1) {
                      s31 = [];
                      s41 = peg$currPos1;
                      s51 = peg$parseCOMMA1();
                      if (s51 !== peg$FAILED1) {
                          s61 = peg$parsequantified_identifier1();
                          if (s61 !== peg$FAILED1) {
                              s51 = [
                                  s51,
                                  s61
                              ];
                              s41 = s51;
                          } else {
                              peg$currPos1 = s41;
                              s41 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s41;
                          s41 = peg$FAILED1;
                      }
                      while(s41 !== peg$FAILED1){
                          s31.push(s41);
                          s41 = peg$currPos1;
                          s51 = peg$parseCOMMA1();
                          if (s51 !== peg$FAILED1) {
                              s61 = peg$parsequantified_identifier1();
                              if (s61 !== peg$FAILED1) {
                                  s51 = [
                                      s51,
                                      s61
                                  ];
                                  s41 = s51;
                              } else {
                                  peg$currPos1 = s41;
                                  s41 = peg$FAILED1;
                              }
                          } else {
                              peg$currPos1 = s41;
                              s41 = peg$FAILED1;
                          }
                      }
                      peg$savedPos1 = s01;
                      s01 = peg$f491(s11, s21, s31);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsequantified_identifier1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 280;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parseIDENTIFIER1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parsearray_specifier1();
                  if (s21 === peg$FAILED1) s21 = null;
                  peg$savedPos1 = s01;
                  s01 = peg$f501(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseinitializer1() {
              var s01, s11, s21, s31, s41, s51, s61;
              var key1 = peg$currPos1 * 305 + 281;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$parseassignment_expression1();
              if (s01 === peg$FAILED1) {
                  s01 = peg$currPos1;
                  s11 = peg$parseLEFT_BRACE1();
                  if (s11 !== peg$FAILED1) {
                      s21 = peg$parseinitializer1();
                      if (s21 !== peg$FAILED1) {
                          s31 = [];
                          s41 = peg$currPos1;
                          s51 = peg$parseCOMMA1();
                          if (s51 !== peg$FAILED1) {
                              s61 = peg$parseinitializer1();
                              if (s61 !== peg$FAILED1) {
                                  s51 = [
                                      s51,
                                      s61
                                  ];
                                  s41 = s51;
                              } else {
                                  peg$currPos1 = s41;
                                  s41 = peg$FAILED1;
                              }
                          } else {
                              peg$currPos1 = s41;
                              s41 = peg$FAILED1;
                          }
                          while(s41 !== peg$FAILED1){
                              s31.push(s41);
                              s41 = peg$currPos1;
                              s51 = peg$parseCOMMA1();
                              if (s51 !== peg$FAILED1) {
                                  s61 = peg$parseinitializer1();
                                  if (s61 !== peg$FAILED1) {
                                      s51 = [
                                          s51,
                                          s61
                                      ];
                                      s41 = s51;
                                  } else {
                                      peg$currPos1 = s41;
                                      s41 = peg$FAILED1;
                                  }
                              } else {
                                  peg$currPos1 = s41;
                                  s41 = peg$FAILED1;
                              }
                          }
                          s41 = peg$parseCOMMA1();
                          if (s41 === peg$FAILED1) s41 = null;
                          s51 = peg$parseRIGHT_BRACE1();
                          if (s51 !== peg$FAILED1) {
                              peg$savedPos1 = s01;
                              s01 = peg$f511(s11, s21, s31, s41, s51);
                          } else {
                              peg$currPos1 = s01;
                              s01 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s01;
                          s01 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsestatement1() {
              var s01;
              var key1 = peg$currPos1 * 305 + 282;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$parsecompound_statement1();
              if (s01 === peg$FAILED1) s01 = peg$parsesimple_statement1();
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsesimple_statement1() {
              var s01;
              var key1 = peg$currPos1 * 305 + 283;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$parsejump_statement1();
              if (s01 === peg$FAILED1) {
                  s01 = peg$parsedeclaration_statement1();
                  if (s01 === peg$FAILED1) {
                      s01 = peg$parseexpression_statement1();
                      if (s01 === peg$FAILED1) {
                          s01 = peg$parseif_statement1();
                          if (s01 === peg$FAILED1) {
                              s01 = peg$parseswitch_statement1();
                              if (s01 === peg$FAILED1) {
                                  s01 = peg$parsecase_label1();
                                  if (s01 === peg$FAILED1) s01 = peg$parseiteration_statement1();
                              }
                          }
                      }
                  }
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsecompound_statement1() {
              var s01, s11, s21, s31;
              var key1 = peg$currPos1 * 305 + 284;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$currPos1;
              s21 = peg$parseLEFT_BRACE1();
              if (s21 !== peg$FAILED1) {
                  peg$savedPos1 = s11;
                  s21 = peg$f521(s21);
              }
              s11 = s21;
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parsestatement_list1();
                  if (s21 === peg$FAILED1) s21 = null;
                  s31 = peg$parseRIGHT_BRACE1();
                  if (s31 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f531(s11, s21, s31);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsecompound_statement_no_new_scope1() {
              var s01, s11, s21, s31;
              var key1 = peg$currPos1 * 305 + 285;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parseLEFT_BRACE1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parsestatement_list1();
                  if (s21 === peg$FAILED1) s21 = null;
                  s31 = peg$parseRIGHT_BRACE1();
                  if (s31 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f541(s11, s21, s31);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsestatement_no_new_scope1() {
              var s01;
              var key1 = peg$currPos1 * 305 + 286;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$parsecompound_statement_no_new_scope1();
              if (s01 === peg$FAILED1) s01 = peg$parsesimple_statement1();
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsestatement_list1() {
              var s01, s11;
              var key1 = peg$currPos1 * 305 + 287;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = [];
              s11 = peg$parsestatement1();
              if (s11 === peg$FAILED1) s11 = peg$parsepreprocessor1();
              if (s11 !== peg$FAILED1) while(s11 !== peg$FAILED1){
                  s01.push(s11);
                  s11 = peg$parsestatement1();
                  if (s11 === peg$FAILED1) s11 = peg$parsepreprocessor1();
              }
              else s01 = peg$FAILED1;
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseexpression_statement1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 288;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parseexpression1();
              if (s11 === peg$FAILED1) s11 = null;
              s21 = peg$parseSEMICOLON1();
              if (s21 !== peg$FAILED1) {
                  peg$savedPos1 = s01;
                  s01 = peg$f551(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseif_statement1() {
              var s01, s11, s21, s31, s41, s51, s61, s71, s81, s91;
              var key1 = peg$currPos1 * 305 + 289;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parseIF1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseLEFT_PAREN1();
                  if (s21 !== peg$FAILED1) {
                      s31 = peg$parseexpression1();
                      if (s31 !== peg$FAILED1) {
                          s41 = peg$parseRIGHT_PAREN1();
                          if (s41 !== peg$FAILED1) {
                              s51 = peg$currPos1;
                              s61 = peg$parsestatement1();
                              if (s61 !== peg$FAILED1) {
                                  s71 = peg$currPos1;
                                  s81 = peg$parseELSE1();
                                  if (s81 !== peg$FAILED1) {
                                      s91 = peg$parsestatement1();
                                      if (s91 !== peg$FAILED1) {
                                          s81 = [
                                              s81,
                                              s91
                                          ];
                                          s71 = s81;
                                      } else {
                                          peg$currPos1 = s71;
                                          s71 = peg$FAILED1;
                                      }
                                  } else {
                                      peg$currPos1 = s71;
                                      s71 = peg$FAILED1;
                                  }
                                  if (s71 === peg$FAILED1) s71 = null;
                                  s61 = [
                                      s61,
                                      s71
                                  ];
                                  s51 = s61;
                              } else {
                                  peg$currPos1 = s51;
                                  s51 = peg$FAILED1;
                              }
                              if (s51 !== peg$FAILED1) {
                                  peg$savedPos1 = s01;
                                  s01 = peg$f561(s11, s21, s31, s41, s51);
                              } else {
                                  peg$currPos1 = s01;
                                  s01 = peg$FAILED1;
                              }
                          } else {
                              peg$currPos1 = s01;
                              s01 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s01;
                          s01 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseswitch_statement1() {
              var s01, s11, s21, s31, s41, s51, s61, s71;
              var key1 = peg$currPos1 * 305 + 290;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parseSWITCH1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseLEFT_PAREN1();
                  if (s21 !== peg$FAILED1) {
                      s31 = peg$parseexpression1();
                      if (s31 !== peg$FAILED1) {
                          s41 = peg$parseRIGHT_PAREN1();
                          if (s41 !== peg$FAILED1) {
                              s51 = peg$parseLEFT_BRACE1();
                              if (s51 !== peg$FAILED1) {
                                  s61 = peg$parsestatement_list1();
                                  if (s61 !== peg$FAILED1) {
                                      s71 = peg$parseRIGHT_BRACE1();
                                      if (s71 !== peg$FAILED1) {
                                          peg$savedPos1 = s01;
                                          s01 = peg$f571(s11, s21, s31, s41, s51, s61, s71);
                                      } else {
                                          peg$currPos1 = s01;
                                          s01 = peg$FAILED1;
                                      }
                                  } else {
                                      peg$currPos1 = s01;
                                      s01 = peg$FAILED1;
                                  }
                              } else {
                                  peg$currPos1 = s01;
                                  s01 = peg$FAILED1;
                              }
                          } else {
                              peg$currPos1 = s01;
                              s01 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s01;
                          s01 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsecase_label1() {
              var s01, s11, s21, s31;
              var key1 = peg$currPos1 * 305 + 291;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parseCASE1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseexpression1();
                  if (s21 !== peg$FAILED1) {
                      s31 = peg$parseCOLON1();
                      if (s31 !== peg$FAILED1) {
                          peg$savedPos1 = s01;
                          s01 = peg$f581(s11, s21, s31);
                      } else {
                          peg$currPos1 = s01;
                          s01 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              if (s01 === peg$FAILED1) {
                  s01 = peg$currPos1;
                  s11 = peg$parseDEFAULT1();
                  if (s11 !== peg$FAILED1) {
                      s21 = peg$parseCOLON1();
                      if (s21 !== peg$FAILED1) {
                          peg$savedPos1 = s01;
                          s01 = peg$f591(s11, s21);
                      } else {
                          peg$currPos1 = s01;
                          s01 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseiteration_statement1() {
              var s01, s11, s21, s31, s41, s51, s61, s71, s81;
              var key1 = peg$currPos1 * 305 + 292;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              peg$silentFails1++;
              s01 = peg$currPos1;
              s11 = peg$currPos1;
              s21 = peg$parseWHILE1();
              if (s21 !== peg$FAILED1) {
                  peg$savedPos1 = s11;
                  s21 = peg$f601(s21);
              }
              s11 = s21;
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseLEFT_PAREN1();
                  if (s21 !== peg$FAILED1) {
                      s31 = peg$parsecondition1();
                      if (s31 !== peg$FAILED1) {
                          s41 = peg$parseRIGHT_PAREN1();
                          if (s41 !== peg$FAILED1) {
                              s51 = peg$parsestatement_no_new_scope1();
                              if (s51 !== peg$FAILED1) {
                                  peg$savedPos1 = s01;
                                  s01 = peg$f611(s11, s21, s31, s41, s51);
                              } else {
                                  peg$currPos1 = s01;
                                  s01 = peg$FAILED1;
                              }
                          } else {
                              peg$currPos1 = s01;
                              s01 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s01;
                          s01 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              if (s01 === peg$FAILED1) {
                  s01 = peg$currPos1;
                  s11 = peg$parseDO1();
                  if (s11 !== peg$FAILED1) {
                      s21 = peg$parsestatement1();
                      if (s21 !== peg$FAILED1) {
                          s31 = peg$parseWHILE1();
                          if (s31 !== peg$FAILED1) {
                              s41 = peg$parseLEFT_PAREN1();
                              if (s41 !== peg$FAILED1) {
                                  s51 = peg$parseexpression1();
                                  if (s51 !== peg$FAILED1) {
                                      s61 = peg$parseRIGHT_PAREN1();
                                      if (s61 !== peg$FAILED1) {
                                          s71 = peg$parseSEMICOLON1();
                                          if (s71 !== peg$FAILED1) {
                                              peg$savedPos1 = s01;
                                              s01 = peg$f621(s11, s21, s31, s41, s51, s61, s71);
                                          } else {
                                              peg$currPos1 = s01;
                                              s01 = peg$FAILED1;
                                          }
                                      } else {
                                          peg$currPos1 = s01;
                                          s01 = peg$FAILED1;
                                      }
                                  } else {
                                      peg$currPos1 = s01;
                                      s01 = peg$FAILED1;
                                  }
                              } else {
                                  peg$currPos1 = s01;
                                  s01 = peg$FAILED1;
                              }
                          } else {
                              peg$currPos1 = s01;
                              s01 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s01;
                          s01 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
                  if (s01 === peg$FAILED1) {
                      s01 = peg$currPos1;
                      s11 = peg$currPos1;
                      s21 = peg$parseFOR1();
                      if (s21 !== peg$FAILED1) {
                          peg$savedPos1 = s11;
                          s21 = peg$f631(s21);
                      }
                      s11 = s21;
                      if (s11 !== peg$FAILED1) {
                          s21 = peg$parseLEFT_PAREN1();
                          if (s21 !== peg$FAILED1) {
                              s31 = peg$parseexpression_statement1();
                              if (s31 === peg$FAILED1) s31 = peg$parsedeclaration_statement1();
                              if (s31 === peg$FAILED1) s31 = null;
                              s41 = peg$parsecondition1();
                              if (s41 === peg$FAILED1) s41 = null;
                              s51 = peg$parseSEMICOLON1();
                              if (s51 !== peg$FAILED1) {
                                  s61 = peg$parseexpression1();
                                  if (s61 === peg$FAILED1) s61 = null;
                                  s71 = peg$parseRIGHT_PAREN1();
                                  if (s71 !== peg$FAILED1) {
                                      s81 = peg$parsestatement_no_new_scope1();
                                      if (s81 !== peg$FAILED1) {
                                          peg$savedPos1 = s01;
                                          s01 = peg$f641(s11, s21, s31, s41, s51, s61, s71, s81);
                                      } else {
                                          peg$currPos1 = s01;
                                          s01 = peg$FAILED1;
                                      }
                                  } else {
                                      peg$currPos1 = s01;
                                      s01 = peg$FAILED1;
                                  }
                              } else {
                                  peg$currPos1 = s01;
                                  s01 = peg$FAILED1;
                              }
                          } else {
                              peg$currPos1 = s01;
                              s01 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s01;
                          s01 = peg$FAILED1;
                      }
                  }
              }
              peg$silentFails1--;
              if (s01 === peg$FAILED1) {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2421);
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsecondition1() {
              var s01, s11, s21, s31, s41;
              var key1 = peg$currPos1 * 305 + 293;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parsefully_specified_type1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseIDENTIFIER1();
                  if (s21 !== peg$FAILED1) {
                      s31 = peg$parseEQUAL1();
                      if (s31 !== peg$FAILED1) {
                          s41 = peg$parseinitializer1();
                          if (s41 !== peg$FAILED1) {
                              peg$savedPos1 = s01;
                              s01 = peg$f651(s11, s21, s31, s41);
                          } else {
                              peg$currPos1 = s01;
                              s01 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s01;
                          s01 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              if (s01 === peg$FAILED1) s01 = peg$parseexpression1();
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsejump_statement1() {
              var s01, s11, s21, s31;
              var key1 = peg$currPos1 * 305 + 294;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              peg$silentFails1++;
              s01 = peg$currPos1;
              s11 = peg$parseCONTINUE1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parseSEMICOLON1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f661(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              if (s01 === peg$FAILED1) {
                  s01 = peg$currPos1;
                  s11 = peg$parseBREAK1();
                  if (s11 !== peg$FAILED1) {
                      s21 = peg$parseSEMICOLON1();
                      if (s21 !== peg$FAILED1) {
                          peg$savedPos1 = s01;
                          s01 = peg$f671(s11, s21);
                      } else {
                          peg$currPos1 = s01;
                          s01 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
                  if (s01 === peg$FAILED1) {
                      s01 = peg$currPos1;
                      s11 = peg$parseRETURN1();
                      if (s11 !== peg$FAILED1) {
                          s21 = peg$parseexpression1();
                          if (s21 === peg$FAILED1) s21 = null;
                          s31 = peg$parseSEMICOLON1();
                          if (s31 !== peg$FAILED1) {
                              peg$savedPos1 = s01;
                              s01 = peg$f681(s11, s21, s31);
                          } else {
                              peg$currPos1 = s01;
                              s01 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s01;
                          s01 = peg$FAILED1;
                      }
                      if (s01 === peg$FAILED1) {
                          s01 = peg$currPos1;
                          s11 = peg$parseDISCARD1();
                          if (s11 !== peg$FAILED1) {
                              s21 = peg$parseSEMICOLON1();
                              if (s21 !== peg$FAILED1) {
                                  peg$savedPos1 = s01;
                                  s01 = peg$f691(s11, s21);
                              } else {
                                  peg$currPos1 = s01;
                                  s01 = peg$FAILED1;
                              }
                          } else {
                              peg$currPos1 = s01;
                              s01 = peg$FAILED1;
                          }
                      }
                  }
              }
              peg$silentFails1--;
              if (s01 === peg$FAILED1) {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2431);
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsepreprocessor1() {
              var s01, s11, s21, s31, s41, s51;
              var key1 = peg$currPos1 * 305 + 295;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              peg$silentFails1++;
              s01 = peg$currPos1;
              s11 = peg$currPos1;
              s21 = peg$currPos1;
              if (input1.charCodeAt(peg$currPos1) === 35) {
                  s31 = peg$c2101;
                  peg$currPos1++;
              } else {
                  s31 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2451);
              }
              if (s31 !== peg$FAILED1) {
                  s41 = [];
                  if (peg$r111.test(input1.charAt(peg$currPos1))) {
                      s51 = input1.charAt(peg$currPos1);
                      peg$currPos1++;
                  } else {
                      s51 = peg$FAILED1;
                      if (peg$silentFails1 === 0) peg$fail1(peg$e2461);
                  }
                  while(s51 !== peg$FAILED1){
                      s41.push(s51);
                      if (peg$r111.test(input1.charAt(peg$currPos1))) {
                          s51 = input1.charAt(peg$currPos1);
                          peg$currPos1++;
                      } else {
                          s51 = peg$FAILED1;
                          if (peg$silentFails1 === 0) peg$fail1(peg$e2461);
                      }
                  }
                  s31 = [
                      s31,
                      s41
                  ];
                  s21 = s31;
              } else {
                  peg$currPos1 = s21;
                  s21 = peg$FAILED1;
              }
              if (s21 !== peg$FAILED1) s11 = input1.substring(s11, peg$currPos1);
              else s11 = s21;
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f701(s11, s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$silentFails1--;
              if (s01 === peg$FAILED1) {
                  s11 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2441);
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsetranslation_unit1() {
              var s01, s11;
              var key1 = peg$currPos1 * 305 + 296;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = [];
              s11 = peg$parseexternal_declaration1();
              if (s11 === peg$FAILED1) s11 = peg$parsepreprocessor1();
              if (s11 !== peg$FAILED1) while(s11 !== peg$FAILED1){
                  s01.push(s11);
                  s11 = peg$parseexternal_declaration1();
                  if (s11 === peg$FAILED1) s11 = peg$parsepreprocessor1();
              }
              else s01 = peg$FAILED1;
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseexternal_declaration1() {
              var s01;
              var key1 = peg$currPos1 * 305 + 297;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$parsefunction_definition1();
              if (s01 === peg$FAILED1) s01 = peg$parsedeclaration_statement1();
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsefunction_definition1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 298;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$parsefunction_prototype1();
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parsecompound_statement_no_new_scope1();
                  if (s21 !== peg$FAILED1) {
                      peg$savedPos1 = s01;
                      s01 = peg$f711(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parse_1() {
              var s01, s11, s21, s31, s41, s51;
              var key1 = peg$currPos1 * 305 + 299;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              peg$silentFails1++;
              s01 = peg$currPos1;
              s11 = peg$parsewhitespace1();
              if (s11 === peg$FAILED1) s11 = null;
              s21 = [];
              s31 = peg$currPos1;
              s41 = peg$parsecomment1();
              if (s41 !== peg$FAILED1) {
                  s51 = peg$parsewhitespace1();
                  if (s51 === peg$FAILED1) s51 = null;
                  s41 = [
                      s41,
                      s51
                  ];
                  s31 = s41;
              } else {
                  peg$currPos1 = s31;
                  s31 = peg$FAILED1;
              }
              while(s31 !== peg$FAILED1){
                  s21.push(s31);
                  s31 = peg$currPos1;
                  s41 = peg$parsecomment1();
                  if (s41 !== peg$FAILED1) {
                      s51 = peg$parsewhitespace1();
                      if (s51 === peg$FAILED1) s51 = null;
                      s41 = [
                          s41,
                          s51
                      ];
                      s31 = s41;
                  } else {
                      peg$currPos1 = s31;
                      s31 = peg$FAILED1;
                  }
              }
              peg$savedPos1 = s01;
              s01 = peg$f721(s11, s21);
              peg$silentFails1--;
              s11 = peg$FAILED1;
              if (peg$silentFails1 === 0) peg$fail1(peg$e2471);
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsecomment1() {
              var s01, s11, s21, s31, s41, s51;
              var key1 = peg$currPos1 * 305 + 300;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$parsesingle_comment1();
              if (s01 === peg$FAILED1) {
                  s01 = peg$currPos1;
                  s11 = peg$parsemultiline_comment1();
                  if (s11 !== peg$FAILED1) {
                      s21 = [];
                      s31 = peg$currPos1;
                      s41 = peg$parsewhitespace1();
                      if (s41 !== peg$FAILED1) {
                          s51 = peg$parsecomment1();
                          if (s51 !== peg$FAILED1) {
                              peg$savedPos1 = s31;
                              s31 = peg$f731(s11, s41, s51);
                          } else {
                              peg$currPos1 = s31;
                              s31 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s31;
                          s31 = peg$FAILED1;
                      }
                      while(s31 !== peg$FAILED1){
                          s21.push(s31);
                          s31 = peg$currPos1;
                          s41 = peg$parsewhitespace1();
                          if (s41 !== peg$FAILED1) {
                              s51 = peg$parsecomment1();
                              if (s51 !== peg$FAILED1) {
                                  peg$savedPos1 = s31;
                                  s31 = peg$f731(s11, s41, s51);
                              } else {
                                  peg$currPos1 = s31;
                                  s31 = peg$FAILED1;
                              }
                          } else {
                              peg$currPos1 = s31;
                              s31 = peg$FAILED1;
                          }
                      }
                      peg$savedPos1 = s01;
                      s01 = peg$f741(s11, s21);
                  } else {
                      peg$currPos1 = s01;
                      s01 = peg$FAILED1;
                  }
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsesingle_comment1() {
              var s01, s11, s21, s31, s41;
              var key1 = peg$currPos1 * 305 + 301;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$currPos1;
              if (input1.substr(peg$currPos1, 2) === peg$c2111) {
                  s21 = peg$c2111;
                  peg$currPos1 += 2;
              } else {
                  s21 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2481);
              }
              if (s21 !== peg$FAILED1) {
                  s31 = [];
                  if (peg$r111.test(input1.charAt(peg$currPos1))) {
                      s41 = input1.charAt(peg$currPos1);
                      peg$currPos1++;
                  } else {
                      s41 = peg$FAILED1;
                      if (peg$silentFails1 === 0) peg$fail1(peg$e2461);
                  }
                  while(s41 !== peg$FAILED1){
                      s31.push(s41);
                      if (peg$r111.test(input1.charAt(peg$currPos1))) {
                          s41 = input1.charAt(peg$currPos1);
                          peg$currPos1++;
                      } else {
                          s41 = peg$FAILED1;
                          if (peg$silentFails1 === 0) peg$fail1(peg$e2461);
                      }
                  }
                  s21 = [
                      s21,
                      s31
                  ];
                  s11 = s21;
              } else {
                  peg$currPos1 = s11;
                  s11 = peg$FAILED1;
              }
              if (s11 !== peg$FAILED1) s01 = input1.substring(s01, peg$currPos1);
              else s01 = s11;
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsemultiline_comment1() {
              var s01, s11, s21, s31, s41, s51, s61;
              var key1 = peg$currPos1 * 305 + 302;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$currPos1;
              if (input1.substr(peg$currPos1, 2) === peg$c2121) {
                  s21 = peg$c2121;
                  peg$currPos1 += 2;
              } else {
                  s21 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2491);
              }
              if (s21 !== peg$FAILED1) {
                  s31 = [];
                  s41 = peg$currPos1;
                  s51 = peg$currPos1;
                  peg$silentFails1++;
                  if (input1.substr(peg$currPos1, 2) === peg$c2131) {
                      s61 = peg$c2131;
                      peg$currPos1 += 2;
                  } else {
                      s61 = peg$FAILED1;
                      if (peg$silentFails1 === 0) peg$fail1(peg$e2501);
                  }
                  peg$silentFails1--;
                  if (s61 === peg$FAILED1) s51 = undefined;
                  else {
                      peg$currPos1 = s51;
                      s51 = peg$FAILED1;
                  }
                  if (s51 !== peg$FAILED1) {
                      if (input1.length > peg$currPos1) {
                          s61 = input1.charAt(peg$currPos1);
                          peg$currPos1++;
                      } else {
                          s61 = peg$FAILED1;
                          if (peg$silentFails1 === 0) peg$fail1(peg$e2511);
                      }
                      if (s61 !== peg$FAILED1) {
                          peg$savedPos1 = s41;
                          s41 = peg$f751(s61);
                      } else {
                          peg$currPos1 = s41;
                          s41 = peg$FAILED1;
                      }
                  } else {
                      peg$currPos1 = s41;
                      s41 = peg$FAILED1;
                  }
                  while(s41 !== peg$FAILED1){
                      s31.push(s41);
                      s41 = peg$currPos1;
                      s51 = peg$currPos1;
                      peg$silentFails1++;
                      if (input1.substr(peg$currPos1, 2) === peg$c2131) {
                          s61 = peg$c2131;
                          peg$currPos1 += 2;
                      } else {
                          s61 = peg$FAILED1;
                          if (peg$silentFails1 === 0) peg$fail1(peg$e2501);
                      }
                      peg$silentFails1--;
                      if (s61 === peg$FAILED1) s51 = undefined;
                      else {
                          peg$currPos1 = s51;
                          s51 = peg$FAILED1;
                      }
                      if (s51 !== peg$FAILED1) {
                          if (input1.length > peg$currPos1) {
                              s61 = input1.charAt(peg$currPos1);
                              peg$currPos1++;
                          } else {
                              s61 = peg$FAILED1;
                              if (peg$silentFails1 === 0) peg$fail1(peg$e2511);
                          }
                          if (s61 !== peg$FAILED1) {
                              peg$savedPos1 = s41;
                              s41 = peg$f751(s61);
                          } else {
                              peg$currPos1 = s41;
                              s41 = peg$FAILED1;
                          }
                      } else {
                          peg$currPos1 = s41;
                          s41 = peg$FAILED1;
                      }
                  }
                  if (input1.substr(peg$currPos1, 2) === peg$c2131) {
                      s41 = peg$c2131;
                      peg$currPos1 += 2;
                  } else {
                      s41 = peg$FAILED1;
                      if (peg$silentFails1 === 0) peg$fail1(peg$e2501);
                  }
                  if (s41 !== peg$FAILED1) {
                      s21 = [
                          s21,
                          s31,
                          s41
                      ];
                      s11 = s21;
                  } else {
                      peg$currPos1 = s11;
                      s11 = peg$FAILED1;
                  }
              } else {
                  peg$currPos1 = s11;
                  s11 = peg$FAILED1;
              }
              if (s11 !== peg$FAILED1) s01 = input1.substring(s01, peg$currPos1);
              else s01 = s11;
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parsewhitespace1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 303;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = [];
              if (peg$r121.test(input1.charAt(peg$currPos1))) {
                  s21 = input1.charAt(peg$currPos1);
                  peg$currPos1++;
              } else {
                  s21 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2521);
              }
              if (s21 !== peg$FAILED1) while(s21 !== peg$FAILED1){
                  s11.push(s21);
                  if (peg$r121.test(input1.charAt(peg$currPos1))) {
                      s21 = input1.charAt(peg$currPos1);
                      peg$currPos1++;
                  } else {
                      s21 = peg$FAILED1;
                      if (peg$silentFails1 === 0) peg$fail1(peg$e2521);
                  }
              }
              else s11 = peg$FAILED1;
              if (s11 !== peg$FAILED1) s01 = input1.substring(s01, peg$currPos1);
              else s01 = s11;
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          function peg$parseterminal1() {
              var s01, s11, s21;
              var key1 = peg$currPos1 * 305 + 304;
              var cached1 = peg$resultsCache1[key1];
              if (cached1) {
                  peg$currPos1 = cached1.nextPos;
                  return cached1.result;
              }
              s01 = peg$currPos1;
              s11 = peg$currPos1;
              peg$silentFails1++;
              if (peg$r13.test(input1.charAt(peg$currPos1))) {
                  s21 = input1.charAt(peg$currPos1);
                  peg$currPos1++;
              } else {
                  s21 = peg$FAILED1;
                  if (peg$silentFails1 === 0) peg$fail1(peg$e2091);
              }
              peg$silentFails1--;
              if (s21 === peg$FAILED1) s11 = undefined;
              else {
                  peg$currPos1 = s11;
                  s11 = peg$FAILED1;
              }
              if (s11 !== peg$FAILED1) {
                  s21 = peg$parse_1();
                  peg$savedPos1 = s01;
                  s01 = peg$f761(s21);
              } else {
                  peg$currPos1 = s01;
                  s01 = peg$FAILED1;
              }
              peg$resultsCache1[key1] = {
                  nextPos: peg$currPos1,
                  result: s01
              };
              return s01;
          }
          const OPEN_CURLY1 = String.fromCharCode(123);
          const makeScope1 = (name1, parent1)=>({
                  name: name1,
                  parent: parent1,
                  bindings: {},
                  types: {},
                  functions: {}
              });
          const pushScope1 = (scope1)=>{
              // console.log('pushing scope at ',text());
              scopes1.push(scope1);
              return scope1;
          };
          const popScope1 = (scope1)=>{
              // console.log('popping scope at ',text());
              if (!scope1.parent) throw new Error("popped bad scope", scope1, "at", text1());
              return scope1.parent;
          };
          const warn1 = (...args1)=>!options1.quiet && console.warn(...args1);
          // Types (aka struct) scope
          const addTypes1 = (scope1, ...types1)=>{
              types1.forEach(([identifier1, type1])=>{
                  scope1.types[identifier1] = {
                      references: [
                          type1
                      ]
                  };
              });
          };
          const addTypeReference1 = (scope1, name1, reference1)=>{
              scope1.types[name1].references.push(reference1);
          };
          const findTypeScope1 = (scope1, typeName1)=>{
              if (!scope1) return null;
              if (typeName1 in scope1.types) return scope1;
              return findTypeScope1(scope1.parent, typeName1);
          };
          const isDeclaredType1 = (scope1, typeName1)=>findTypeScope1(scope1, typeName1) !== null;
          // Bindings (aka variables, parameters) scope
          const createBindings1 = (scope1, ...bindings1)=>{
              bindings1.forEach(([identifier1, binding1])=>{
                  const newBinding1 = scope1.bindings[identifier1] || {
                      references: []
                  };
                  newBinding1.initializer = binding1;
                  newBinding1.references.unshift(binding1);
                  scope1.bindings[identifier1] = newBinding1;
              });
          };
          const addBindingReference1 = (scope1, name1, reference1)=>{
              // In the case of "float a = 1, b = a;" we parse the final "a" before the
              // parent declarator list is parsed. So we might need to add the final "a"
              // to the scope first.
              const foundScope1 = findBindingScope1(scope1, name1);
              if (foundScope1) foundScope1.bindings[name1].references.push(reference1);
              else createBindings1(scope1, [
                  name1,
                  reference1
              ]);
          };
          const findBindingScope1 = (scope1, name1)=>{
              if (!scope1) return null;
              if (name1 in scope1.bindings) return scope1;
              return findBindingScope1(scope1.parent, name1);
          };
          // Function scope
          const createFunction1 = (scope1, name1, declaration1)=>{
              scope1.functions[name1] = {
                  references: [
                      declaration1
                  ]
              };
          };
          const addFunctionReference1 = (scope1, name1, reference1)=>{
              const global1 = findGlobalScope1(scope1);
              if (name1 in global1.functions) global1.functions[name1].references.push(reference1);
              else createFunction1(scope1, name1, reference1);
          };
          const findGlobalScope1 = (scope1)=>scope1.parent ? findGlobalScope1(scope1.parent) : scope1;
          const isDeclaredFunction1 = (scope1, fnName1)=>fnName1 in findGlobalScope1(scope1).functions;
          let scopes1 = [
              makeScope1("global")
          ];
          let scope1 = scopes1[0];
          const node1 = (type1, attrs1)=>({
                  type: type1,
                  ...attrs1
              });
          // Filter out "empty" elements from an array
          const xnil1 = (...args1)=>args1.flat().filter((e1)=>e1 !== undefined && e1 !== null && e1 !== "" && e1.length !== 0);
          // Given an array of nodes with potential null empty values, convert to text.
          // Kind of like $(rule) but filters out empty rules
          const toText1 = (...args1)=>xnil1(args1).join("");
          const ifOnly1 = (arr1)=>arr1.length > 1 ? arr1 : arr1[0];
          // Remove empty elements and return value if only 1 element remains
          const collapse1 = (...args1)=>ifOnly1(xnil1(args1));
          // Create a left associative tree of nodes
          const leftAssociate1 = (...nodes1)=>nodes1.flat().reduce((current1, [operator1, expr1])=>({
                      type: "binary",
                      operator: operator1,
                      left: current1,
                      right: expr1
                  }));
          // No longer needed?
          // const without = (obj, ...keys) => Object.entries(obj).reduce((acc, [key, value]) => ({
          //   ...acc,
          //   ...(!keys.includes(key) && { [key]: value })
          // }), {});
          // Group the statements in a switch statement into cases / default arrays
          const groupCases1 = (statements1)=>statements1.reduce((cases1, stmt1)=>{
                  if (stmt1.type === "case_label") return [
                      ...cases1,
                      node1("switch_case", {
                          statements: [],
                          case: stmt1.case,
                          test: stmt1.test,
                          colon: stmt1.colon
                      })
                  ];
                  else if (stmt1.type === "default_label") return [
                      ...cases1,
                      node1("default_case", {
                          statements: [],
                          default: stmt1.default,
                          colon: stmt1.colon
                      })
                  ];
                  else if (!cases1.length) throw new Error("A switch statement body must start with a case or default label");
                  else {
                      const tail1 = cases1.slice(-1)[0];
                      return [
                          ...cases1.slice(0, -1),
                          {
                              ...tail1,
                              statements: [
                                  ...tail1.statements,
                                  stmt1
                              ]
                          }
                      ];
                  }
              }, []);
          // From https://www.khronos.org/registry/OpenGL-Refpages/gl4/index.php
          // excluding gl_ prefixed builtins, which don't appear to be functions
          const builtIns1 = new Set([
              "abs",
              "acos",
              "acosh",
              "all",
              "any",
              "asin",
              "asinh",
              "atan",
              "atanh",
              "atomicAdd",
              "atomicAnd",
              "atomicCompSwap",
              "atomicCounter",
              "atomicCounterDecrement",
              "atomicCounterIncrement",
              "atomicExchange",
              "atomicMax",
              "atomicMin",
              "atomicOr",
              "atomicXor",
              "barrier",
              "bitCount",
              "bitfieldExtract",
              "bitfieldInsert",
              "bitfieldReverse",
              "ceil",
              "clamp",
              "cos",
              "cosh",
              "cross",
              "degrees",
              "determinant",
              "dFdx",
              "dFdxCoarse",
              "dFdxFine",
              "dFdy",
              "dFdyCoarse",
              "dFdyFine",
              "distance",
              "dot",
              "EmitStreamVertex",
              "EmitVertex",
              "EndPrimitive",
              "EndStreamPrimitive",
              "equal",
              "exp",
              "exp2",
              "faceforward",
              "findLSB",
              "findMSB",
              "floatBitsToInt",
              "floatBitsToUint",
              "floor",
              "fma",
              "fract",
              "frexp",
              "fwidth",
              "fwidthCoarse",
              "fwidthFine",
              "greaterThan",
              "greaterThanEqual",
              "groupMemoryBarrier",
              "imageAtomicAdd",
              "imageAtomicAnd",
              "imageAtomicCompSwap",
              "imageAtomicExchange",
              "imageAtomicMax",
              "imageAtomicMin",
              "imageAtomicOr",
              "imageAtomicXor",
              "imageLoad",
              "imageSamples",
              "imageSize",
              "imageStore",
              "imulExtended",
              "intBitsToFloat",
              "interpolateAtCentroid",
              "interpolateAtOffset",
              "interpolateAtSample",
              "inverse",
              "inversesqrt",
              "isinf",
              "isnan",
              "ldexp",
              "length",
              "lessThan",
              "lessThanEqual",
              "log",
              "log2",
              "matrixCompMult",
              "max",
              "memoryBarrier",
              "memoryBarrierAtomicCounter",
              "memoryBarrierBuffer",
              "memoryBarrierImage",
              "memoryBarrierShared",
              "min",
              "mix",
              "mod",
              "modf",
              "noise",
              "noise1",
              "noise2",
              "noise3",
              "noise4",
              "normalize",
              "not",
              "notEqual",
              "outerProduct",
              "packDouble2x32",
              "packHalf2x16",
              "packSnorm2x16",
              "packSnorm4x8",
              "packUnorm",
              "packUnorm2x16",
              "packUnorm4x8",
              "pow",
              "radians",
              "reflect",
              "refract",
              "round",
              "roundEven",
              "sign",
              "sin",
              "sinh",
              "smoothstep",
              "sqrt",
              "step",
              "tan",
              "tanh",
              "texelFetch",
              "texelFetchOffset",
              "texture",
              "textureGather",
              "textureGatherOffset",
              "textureGatherOffsets",
              "textureGrad",
              "textureGradOffset",
              "textureLod",
              "textureLodOffset",
              "textureOffset",
              "textureProj",
              "textureProjGrad",
              "textureProjGradOffset",
              "textureProjLod",
              "textureProjLodOffset",
              "textureProjOffset",
              "textureQueryLevels",
              "textureQueryLod",
              "textureSamples",
              "textureSize",
              "transpose",
              "trunc",
              "uaddCarry",
              "uintBitsToFloat",
              "umulExtended",
              "unpackDouble2x32",
              "unpackHalf2x16",
              "unpackSnorm2x16",
              "unpackSnorm4x8",
              "unpackUnorm",
              "unpackUnorm2x16",
              "unpackUnorm4x8",
              "usubBorrow",
              // GLSL ES 1.00
              "texture2D",
              "textureCube"
          ]);
          peg$result1 = peg$startRuleFunction1();
          if (peg$result1 !== peg$FAILED1 && peg$currPos1 === input1.length) return peg$result1;
          else {
              if (peg$result1 !== peg$FAILED1 && peg$currPos1 < input1.length) peg$fail1(peg$endExpectation1());
              throw peg$buildStructuredError1(peg$maxFailExpected1, peg$maxFailPos1 < input1.length ? input1.charAt(peg$maxFailPos1) : null, peg$maxFailPos1 < input1.length ? peg$computeLocation1(peg$maxFailPos1, peg$maxFailPos1 + 1) : peg$computeLocation1(peg$maxFailPos1, peg$maxFailPos1));
          }
      }
      var parser = {
          SyntaxError: peg$SyntaxError,
          parse: peg$parse
      };
      "use strict";
      var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod1) {
          return mod1 && mod1.__esModule ? mod1 : {
              "default": mod1
          };
      };
      var generator_1 = __importDefault(generator);
      var parser_1 = __importDefault(parser);
      var dist = {
          generate: generator_1.default,
          parser: parser_1.default
      };
      // Format is Key (Javascript function name), Value: GLSL Source
      // SDFs from
      // https://iquilezles.org/www/articles/distfunctions/distfunctions.htm
      // Make sure to destruct the name in sculpt.js (search for DESTRUCT SDFs)
      var sdfs = {
          boxFrame: "float sdBoxFrame( vec3 p, vec3 b, float e )\n{\n    p = abs(p  )-b;\nvec3 q = abs(p+e)-e;\nreturn min(min(\n    length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n    length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n    length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}",
          link: "float sdLink( vec3 p, float le, float r1, float r2 )\n{\n    vec3 q = vec3( p.x, max(abs(p.y)-le,0.0), p.z );\n    return length(vec2(length(q.xy)-r1,q.z)) - r2;\n}",
          cappedTorus: "\nfloat sdCappedTorus(in vec3 p, in vec2 sc, in float ra, in float rb)\n{\n    p.x = abs(p.x);\n    float k = (sc.y*p.x>sc.x*p.y) ? dot(p.xy,sc) : length(p.xy);\n    return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\n"
      };
      const name$1 = "estraverse";
      const description$1 = "ECMAScript JS AST traversal functions";
      const homepage$1 = "https://github.com/estools/estraverse";
      const main$1 = "estraverse.js";
      const version$1 = "4.3.0";
      const engines$1 = {
          node: ">=4.0"
      };
      const maintainers$1 = [
          {
              name: "Yusuke Suzuki",
              email: "utatane.tea@gmail.com",
              web: "http://github.com/Constellation"
          }
      ];
      const repository$1 = {
          type: "git",
          url: "http://github.com/estools/estraverse.git"
      };
      const devDependencies$1 = {
          "babel-preset-env": "^1.6.1",
          "babel-register": "^6.3.13",
          chai: "^2.1.1",
          espree: "^1.11.0",
          gulp: "^3.8.10",
          "gulp-bump": "^0.2.2",
          "gulp-filter": "^2.0.0",
          "gulp-git": "^1.0.1",
          "gulp-tag-version": "^1.3.0",
          jshint: "^2.5.6",
          mocha: "^2.1.0"
      };
      const license$1 = "BSD-2-Clause";
      const scripts$1 = {
          test: "npm run-script lint && npm run-script unit-test",
          lint: "jshint estraverse.js",
          "unit-test": "mocha --compilers js:babel-register"
      };
      var require$$0 = {
          name: name$1,
          description: description$1,
          homepage: homepage$1,
          main: main$1,
          version: version$1,
          engines: engines$1,
          maintainers: maintainers$1,
          repository: repository$1,
          devDependencies: devDependencies$1,
          license: license$1,
          scripts: scripts$1
      };
      /*
      Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>
      Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>
  
      Redistribution and use in source and binary forms, with or without
      modification, are permitted provided that the following conditions are met:
  
        * Redistributions of source code must retain the above copyright
          notice, this list of conditions and the following disclaimer.
        * Redistributions in binary form must reproduce the above copyright
          notice, this list of conditions and the following disclaimer in the
          documentation and/or other materials provided with the distribution.
  
      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
      ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
      DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
      (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
      LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
      ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
      THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    */ var estraverse = createCommonjsModule(function(module1, exports1) {
          /*jslint vars:false, bitwise:true*/ /*jshint indent:4*/ /*global exports:true*/ (function clone1(exports1) {
              "use strict";
              var Syntax1, VisitorOption1, VisitorKeys1, BREAK1, SKIP1, REMOVE1;
              function deepCopy1(obj1) {
                  var ret1 = {}, key1, val1;
                  for(key1 in obj1)if (obj1.hasOwnProperty(key1)) {
                      val1 = obj1[key1];
                      if (typeof val1 === "object" && val1 !== null) ret1[key1] = deepCopy1(val1);
                      else ret1[key1] = val1;
                  }
                  return ret1;
              }
              // based on LLVM libc++ upper_bound / lower_bound
              // MIT License
              function upperBound1(array1, func1) {
                  var diff1, len1, i3, current1;
                  len1 = array1.length;
                  i3 = 0;
                  while(len1){
                      diff1 = len1 >>> 1;
                      current1 = i3 + diff1;
                      if (func1(array1[current1])) len1 = diff1;
                      else {
                          i3 = current1 + 1;
                          len1 -= diff1 + 1;
                      }
                  }
                  return i3;
              }
              Syntax1 = {
                  AssignmentExpression: "AssignmentExpression",
                  AssignmentPattern: "AssignmentPattern",
                  ArrayExpression: "ArrayExpression",
                  ArrayPattern: "ArrayPattern",
                  ArrowFunctionExpression: "ArrowFunctionExpression",
                  AwaitExpression: "AwaitExpression",
                  BlockStatement: "BlockStatement",
                  BinaryExpression: "BinaryExpression",
                  BreakStatement: "BreakStatement",
                  CallExpression: "CallExpression",
                  CatchClause: "CatchClause",
                  ClassBody: "ClassBody",
                  ClassDeclaration: "ClassDeclaration",
                  ClassExpression: "ClassExpression",
                  ComprehensionBlock: "ComprehensionBlock",
                  ComprehensionExpression: "ComprehensionExpression",
                  ConditionalExpression: "ConditionalExpression",
                  ContinueStatement: "ContinueStatement",
                  DebuggerStatement: "DebuggerStatement",
                  DirectiveStatement: "DirectiveStatement",
                  DoWhileStatement: "DoWhileStatement",
                  EmptyStatement: "EmptyStatement",
                  ExportAllDeclaration: "ExportAllDeclaration",
                  ExportDefaultDeclaration: "ExportDefaultDeclaration",
                  ExportNamedDeclaration: "ExportNamedDeclaration",
                  ExportSpecifier: "ExportSpecifier",
                  ExpressionStatement: "ExpressionStatement",
                  ForStatement: "ForStatement",
                  ForInStatement: "ForInStatement",
                  ForOfStatement: "ForOfStatement",
                  FunctionDeclaration: "FunctionDeclaration",
                  FunctionExpression: "FunctionExpression",
                  GeneratorExpression: "GeneratorExpression",
                  Identifier: "Identifier",
                  IfStatement: "IfStatement",
                  ImportExpression: "ImportExpression",
                  ImportDeclaration: "ImportDeclaration",
                  ImportDefaultSpecifier: "ImportDefaultSpecifier",
                  ImportNamespaceSpecifier: "ImportNamespaceSpecifier",
                  ImportSpecifier: "ImportSpecifier",
                  Literal: "Literal",
                  LabeledStatement: "LabeledStatement",
                  LogicalExpression: "LogicalExpression",
                  MemberExpression: "MemberExpression",
                  MetaProperty: "MetaProperty",
                  MethodDefinition: "MethodDefinition",
                  ModuleSpecifier: "ModuleSpecifier",
                  NewExpression: "NewExpression",
                  ObjectExpression: "ObjectExpression",
                  ObjectPattern: "ObjectPattern",
                  Program: "Program",
                  Property: "Property",
                  RestElement: "RestElement",
                  ReturnStatement: "ReturnStatement",
                  SequenceExpression: "SequenceExpression",
                  SpreadElement: "SpreadElement",
                  Super: "Super",
                  SwitchStatement: "SwitchStatement",
                  SwitchCase: "SwitchCase",
                  TaggedTemplateExpression: "TaggedTemplateExpression",
                  TemplateElement: "TemplateElement",
                  TemplateLiteral: "TemplateLiteral",
                  ThisExpression: "ThisExpression",
                  ThrowStatement: "ThrowStatement",
                  TryStatement: "TryStatement",
                  UnaryExpression: "UnaryExpression",
                  UpdateExpression: "UpdateExpression",
                  VariableDeclaration: "VariableDeclaration",
                  VariableDeclarator: "VariableDeclarator",
                  WhileStatement: "WhileStatement",
                  WithStatement: "WithStatement",
                  YieldExpression: "YieldExpression"
              };
              VisitorKeys1 = {
                  AssignmentExpression: [
                      "left",
                      "right"
                  ],
                  AssignmentPattern: [
                      "left",
                      "right"
                  ],
                  ArrayExpression: [
                      "elements"
                  ],
                  ArrayPattern: [
                      "elements"
                  ],
                  ArrowFunctionExpression: [
                      "params",
                      "body"
                  ],
                  AwaitExpression: [
                      "argument"
                  ],
                  BlockStatement: [
                      "body"
                  ],
                  BinaryExpression: [
                      "left",
                      "right"
                  ],
                  BreakStatement: [
                      "label"
                  ],
                  CallExpression: [
                      "callee",
                      "arguments"
                  ],
                  CatchClause: [
                      "param",
                      "body"
                  ],
                  ClassBody: [
                      "body"
                  ],
                  ClassDeclaration: [
                      "id",
                      "superClass",
                      "body"
                  ],
                  ClassExpression: [
                      "id",
                      "superClass",
                      "body"
                  ],
                  ComprehensionBlock: [
                      "left",
                      "right"
                  ],
                  ComprehensionExpression: [
                      "blocks",
                      "filter",
                      "body"
                  ],
                  ConditionalExpression: [
                      "test",
                      "consequent",
                      "alternate"
                  ],
                  ContinueStatement: [
                      "label"
                  ],
                  DebuggerStatement: [],
                  DirectiveStatement: [],
                  DoWhileStatement: [
                      "body",
                      "test"
                  ],
                  EmptyStatement: [],
                  ExportAllDeclaration: [
                      "source"
                  ],
                  ExportDefaultDeclaration: [
                      "declaration"
                  ],
                  ExportNamedDeclaration: [
                      "declaration",
                      "specifiers",
                      "source"
                  ],
                  ExportSpecifier: [
                      "exported",
                      "local"
                  ],
                  ExpressionStatement: [
                      "expression"
                  ],
                  ForStatement: [
                      "init",
                      "test",
                      "update",
                      "body"
                  ],
                  ForInStatement: [
                      "left",
                      "right",
                      "body"
                  ],
                  ForOfStatement: [
                      "left",
                      "right",
                      "body"
                  ],
                  FunctionDeclaration: [
                      "id",
                      "params",
                      "body"
                  ],
                  FunctionExpression: [
                      "id",
                      "params",
                      "body"
                  ],
                  GeneratorExpression: [
                      "blocks",
                      "filter",
                      "body"
                  ],
                  Identifier: [],
                  IfStatement: [
                      "test",
                      "consequent",
                      "alternate"
                  ],
                  ImportExpression: [
                      "source"
                  ],
                  ImportDeclaration: [
                      "specifiers",
                      "source"
                  ],
                  ImportDefaultSpecifier: [
                      "local"
                  ],
                  ImportNamespaceSpecifier: [
                      "local"
                  ],
                  ImportSpecifier: [
                      "imported",
                      "local"
                  ],
                  Literal: [],
                  LabeledStatement: [
                      "label",
                      "body"
                  ],
                  LogicalExpression: [
                      "left",
                      "right"
                  ],
                  MemberExpression: [
                      "object",
                      "property"
                  ],
                  MetaProperty: [
                      "meta",
                      "property"
                  ],
                  MethodDefinition: [
                      "key",
                      "value"
                  ],
                  ModuleSpecifier: [],
                  NewExpression: [
                      "callee",
                      "arguments"
                  ],
                  ObjectExpression: [
                      "properties"
                  ],
                  ObjectPattern: [
                      "properties"
                  ],
                  Program: [
                      "body"
                  ],
                  Property: [
                      "key",
                      "value"
                  ],
                  RestElement: [
                      "argument"
                  ],
                  ReturnStatement: [
                      "argument"
                  ],
                  SequenceExpression: [
                      "expressions"
                  ],
                  SpreadElement: [
                      "argument"
                  ],
                  Super: [],
                  SwitchStatement: [
                      "discriminant",
                      "cases"
                  ],
                  SwitchCase: [
                      "test",
                      "consequent"
                  ],
                  TaggedTemplateExpression: [
                      "tag",
                      "quasi"
                  ],
                  TemplateElement: [],
                  TemplateLiteral: [
                      "quasis",
                      "expressions"
                  ],
                  ThisExpression: [],
                  ThrowStatement: [
                      "argument"
                  ],
                  TryStatement: [
                      "block",
                      "handler",
                      "finalizer"
                  ],
                  UnaryExpression: [
                      "argument"
                  ],
                  UpdateExpression: [
                      "argument"
                  ],
                  VariableDeclaration: [
                      "declarations"
                  ],
                  VariableDeclarator: [
                      "id",
                      "init"
                  ],
                  WhileStatement: [
                      "test",
                      "body"
                  ],
                  WithStatement: [
                      "object",
                      "body"
                  ],
                  YieldExpression: [
                      "argument"
                  ]
              };
              // unique id
              BREAK1 = {};
              SKIP1 = {};
              REMOVE1 = {};
              VisitorOption1 = {
                  Break: BREAK1,
                  Skip: SKIP1,
                  Remove: REMOVE1
              };
              function Reference1(parent1, key1) {
                  this.parent = parent1;
                  this.key = key1;
              }
              Reference1.prototype.replace = function replace1(node1) {
                  this.parent[this.key] = node1;
              };
              Reference1.prototype.remove = function remove1() {
                  if (Array.isArray(this.parent)) {
                      this.parent.splice(this.key, 1);
                      return true;
                  } else {
                      this.replace(null);
                      return false;
                  }
              };
              function Element1(node1, path1, wrap1, ref1) {
                  this.node = node1;
                  this.path = path1;
                  this.wrap = wrap1;
                  this.ref = ref1;
              }
              function Controller1() {}
              // API:
              // return property path array from root to current node
              Controller1.prototype.path = function path1() {
                  var i3, iz1, j1, jz1, result1, element1;
                  function addToPath1(result1, path1) {
                      if (Array.isArray(path1)) for(j1 = 0, jz1 = path1.length; j1 < jz1; ++j1)result1.push(path1[j1]);
                      else result1.push(path1);
                  }
                  // root node
                  if (!this.__current.path) return null;
                  // first node is sentinel, second node is root element
                  result1 = [];
                  for(i3 = 2, iz1 = this.__leavelist.length; i3 < iz1; ++i3){
                      element1 = this.__leavelist[i3];
                      addToPath1(result1, element1.path);
                  }
                  addToPath1(result1, this.__current.path);
                  return result1;
              };
              // API:
              // return type of current node
              Controller1.prototype.type = function() {
                  var node1 = this.current();
                  return node1.type || this.__current.wrap;
              };
              // API:
              // return array of parent elements
              Controller1.prototype.parents = function parents1() {
                  var i3, iz1, result1;
                  // first node is sentinel
                  result1 = [];
                  for(i3 = 1, iz1 = this.__leavelist.length; i3 < iz1; ++i3)result1.push(this.__leavelist[i3].node);
                  return result1;
              };
              // API:
              // return current node
              Controller1.prototype.current = function current1() {
                  return this.__current.node;
              };
              Controller1.prototype.__execute = function __execute1(callback1, element1) {
                  var previous1, result1;
                  result1 = undefined;
                  previous1 = this.__current;
                  this.__current = element1;
                  this.__state = null;
                  if (callback1) result1 = callback1.call(this, element1.node, this.__leavelist[this.__leavelist.length - 1].node);
                  this.__current = previous1;
                  return result1;
              };
              // API:
              // notify control skip / break
              Controller1.prototype.notify = function notify1(flag1) {
                  this.__state = flag1;
              };
              // API:
              // skip child nodes of current node
              Controller1.prototype.skip = function() {
                  this.notify(SKIP1);
              };
              // API:
              // break traversals
              Controller1.prototype["break"] = function() {
                  this.notify(BREAK1);
              };
              // API:
              // remove node
              Controller1.prototype.remove = function() {
                  this.notify(REMOVE1);
              };
              Controller1.prototype.__initialize = function(root1, visitor1) {
                  this.visitor = visitor1;
                  this.root = root1;
                  this.__worklist = [];
                  this.__leavelist = [];
                  this.__current = null;
                  this.__state = null;
                  this.__fallback = null;
                  if (visitor1.fallback === "iteration") this.__fallback = Object.keys;
                  else if (typeof visitor1.fallback === "function") this.__fallback = visitor1.fallback;
                  this.__keys = VisitorKeys1;
                  if (visitor1.keys) this.__keys = Object.assign(Object.create(this.__keys), visitor1.keys);
              };
              function isNode1(node1) {
                  if (node1 == null) return false;
                  return typeof node1 === "object" && typeof node1.type === "string";
              }
              function isProperty1(nodeType1, key1) {
                  return (nodeType1 === Syntax1.ObjectExpression || nodeType1 === Syntax1.ObjectPattern) && "properties" === key1;
              }
              Controller1.prototype.traverse = function traverse1(root1, visitor1) {
                  var worklist1, leavelist1, element1, node1, nodeType1, ret1, key1, current1, current21, candidates1, candidate1, sentinel1;
                  this.__initialize(root1, visitor1);
                  sentinel1 = {};
                  // reference
                  worklist1 = this.__worklist;
                  leavelist1 = this.__leavelist;
                  // initialize
                  worklist1.push(new Element1(root1, null, null, null));
                  leavelist1.push(new Element1(null, null, null, null));
                  while(worklist1.length){
                      element1 = worklist1.pop();
                      if (element1 === sentinel1) {
                          element1 = leavelist1.pop();
                          ret1 = this.__execute(visitor1.leave, element1);
                          if (this.__state === BREAK1 || ret1 === BREAK1) return;
                          continue;
                      }
                      if (element1.node) {
                          ret1 = this.__execute(visitor1.enter, element1);
                          if (this.__state === BREAK1 || ret1 === BREAK1) return;
                          worklist1.push(sentinel1);
                          leavelist1.push(element1);
                          if (this.__state === SKIP1 || ret1 === SKIP1) continue;
                          node1 = element1.node;
                          nodeType1 = node1.type || element1.wrap;
                          candidates1 = this.__keys[nodeType1];
                          if (!candidates1) {
                              if (this.__fallback) candidates1 = this.__fallback(node1);
                              else throw new Error("Unknown node type " + nodeType1 + ".");
                          }
                          current1 = candidates1.length;
                          while((current1 -= 1) >= 0){
                              key1 = candidates1[current1];
                              candidate1 = node1[key1];
                              if (!candidate1) continue;
                              if (Array.isArray(candidate1)) {
                                  current21 = candidate1.length;
                                  while((current21 -= 1) >= 0){
                                      if (!candidate1[current21]) continue;
                                      if (isProperty1(nodeType1, candidates1[current1])) element1 = new Element1(candidate1[current21], [
                                          key1,
                                          current21
                                      ], "Property", null);
                                      else if (isNode1(candidate1[current21])) element1 = new Element1(candidate1[current21], [
                                          key1,
                                          current21
                                      ], null, null);
                                      else continue;
                                      worklist1.push(element1);
                                  }
                              } else if (isNode1(candidate1)) worklist1.push(new Element1(candidate1, key1, null, null));
                          }
                      }
                  }
              };
              Controller1.prototype.replace = function replace1(root1, visitor1) {
                  var worklist1, leavelist1, node1, nodeType1, target1, element1, current1, current21, candidates1, candidate1, sentinel1, outer1, key1;
                  function removeElem1(element1) {
                      var i3, key1, nextElem1, parent1;
                      if (element1.ref.remove()) {
                          // When the reference is an element of an array.
                          key1 = element1.ref.key;
                          parent1 = element1.ref.parent;
                          // If removed from array, then decrease following items' keys.
                          i3 = worklist1.length;
                          while(i3--){
                              nextElem1 = worklist1[i3];
                              if (nextElem1.ref && nextElem1.ref.parent === parent1) {
                                  if (nextElem1.ref.key < key1) break;
                                  --nextElem1.ref.key;
                              }
                          }
                      }
                  }
                  this.__initialize(root1, visitor1);
                  sentinel1 = {};
                  // reference
                  worklist1 = this.__worklist;
                  leavelist1 = this.__leavelist;
                  // initialize
                  outer1 = {
                      root: root1
                  };
                  element1 = new Element1(root1, null, null, new Reference1(outer1, "root"));
                  worklist1.push(element1);
                  leavelist1.push(element1);
                  while(worklist1.length){
                      element1 = worklist1.pop();
                      if (element1 === sentinel1) {
                          element1 = leavelist1.pop();
                          target1 = this.__execute(visitor1.leave, element1);
                          // node may be replaced with null,
                          // so distinguish between undefined and null in this place
                          if (target1 !== undefined && target1 !== BREAK1 && target1 !== SKIP1 && target1 !== REMOVE1) // replace
                          element1.ref.replace(target1);
                          if (this.__state === REMOVE1 || target1 === REMOVE1) removeElem1(element1);
                          if (this.__state === BREAK1 || target1 === BREAK1) return outer1.root;
                          continue;
                      }
                      target1 = this.__execute(visitor1.enter, element1);
                      // node may be replaced with null,
                      // so distinguish between undefined and null in this place
                      if (target1 !== undefined && target1 !== BREAK1 && target1 !== SKIP1 && target1 !== REMOVE1) {
                          // replace
                          element1.ref.replace(target1);
                          element1.node = target1;
                      }
                      if (this.__state === REMOVE1 || target1 === REMOVE1) {
                          removeElem1(element1);
                          element1.node = null;
                      }
                      if (this.__state === BREAK1 || target1 === BREAK1) return outer1.root;
                      // node may be null
                      node1 = element1.node;
                      if (!node1) continue;
                      worklist1.push(sentinel1);
                      leavelist1.push(element1);
                      if (this.__state === SKIP1 || target1 === SKIP1) continue;
                      nodeType1 = node1.type || element1.wrap;
                      candidates1 = this.__keys[nodeType1];
                      if (!candidates1) {
                          if (this.__fallback) candidates1 = this.__fallback(node1);
                          else throw new Error("Unknown node type " + nodeType1 + ".");
                      }
                      current1 = candidates1.length;
                      while((current1 -= 1) >= 0){
                          key1 = candidates1[current1];
                          candidate1 = node1[key1];
                          if (!candidate1) continue;
                          if (Array.isArray(candidate1)) {
                              current21 = candidate1.length;
                              while((current21 -= 1) >= 0){
                                  if (!candidate1[current21]) continue;
                                  if (isProperty1(nodeType1, candidates1[current1])) element1 = new Element1(candidate1[current21], [
                                      key1,
                                      current21
                                  ], "Property", new Reference1(candidate1, current21));
                                  else if (isNode1(candidate1[current21])) element1 = new Element1(candidate1[current21], [
                                      key1,
                                      current21
                                  ], null, new Reference1(candidate1, current21));
                                  else continue;
                                  worklist1.push(element1);
                              }
                          } else if (isNode1(candidate1)) worklist1.push(new Element1(candidate1, key1, null, new Reference1(node1, key1)));
                      }
                  }
                  return outer1.root;
              };
              function traverse1(root1, visitor1) {
                  var controller1 = new Controller1();
                  return controller1.traverse(root1, visitor1);
              }
              function replace1(root1, visitor1) {
                  var controller1 = new Controller1();
                  return controller1.replace(root1, visitor1);
              }
              function extendCommentRange1(comment1, tokens1) {
                  var target1;
                  target1 = upperBound1(tokens1, function search1(token1) {
                      return token1.range[0] > comment1.range[0];
                  });
                  comment1.extendedRange = [
                      comment1.range[0],
                      comment1.range[1]
                  ];
                  if (target1 !== tokens1.length) comment1.extendedRange[1] = tokens1[target1].range[0];
                  target1 -= 1;
                  if (target1 >= 0) comment1.extendedRange[0] = tokens1[target1].range[1];
                  return comment1;
              }
              function attachComments1(tree1, providedComments1, tokens1) {
                  // At first, we should calculate extended comment ranges.
                  var comments1 = [], comment1, len1, i3, cursor1;
                  if (!tree1.range) throw new Error("attachComments needs range information");
                  // tokens array is empty, we attach comments to tree as 'leadingComments'
                  if (!tokens1.length) {
                      if (providedComments1.length) {
                          for(i3 = 0, len1 = providedComments1.length; i3 < len1; i3 += 1){
                              comment1 = deepCopy1(providedComments1[i3]);
                              comment1.extendedRange = [
                                  0,
                                  tree1.range[0]
                              ];
                              comments1.push(comment1);
                          }
                          tree1.leadingComments = comments1;
                      }
                      return tree1;
                  }
                  for(i3 = 0, len1 = providedComments1.length; i3 < len1; i3 += 1)comments1.push(extendCommentRange1(deepCopy1(providedComments1[i3]), tokens1));
                  // This is based on John Freeman's implementation.
                  cursor1 = 0;
                  traverse1(tree1, {
                      enter: function(node1) {
                          var comment1;
                          while(cursor1 < comments1.length){
                              comment1 = comments1[cursor1];
                              if (comment1.extendedRange[1] > node1.range[0]) break;
                              if (comment1.extendedRange[1] === node1.range[0]) {
                                  if (!node1.leadingComments) node1.leadingComments = [];
                                  node1.leadingComments.push(comment1);
                                  comments1.splice(cursor1, 1);
                              } else cursor1 += 1;
                          }
                          // already out of owned node
                          if (cursor1 === comments1.length) return VisitorOption1.Break;
                          if (comments1[cursor1].extendedRange[0] > node1.range[1]) return VisitorOption1.Skip;
                      }
                  });
                  cursor1 = 0;
                  traverse1(tree1, {
                      leave: function(node1) {
                          var comment1;
                          while(cursor1 < comments1.length){
                              comment1 = comments1[cursor1];
                              if (node1.range[1] < comment1.extendedRange[0]) break;
                              if (node1.range[1] === comment1.extendedRange[0]) {
                                  if (!node1.trailingComments) node1.trailingComments = [];
                                  node1.trailingComments.push(comment1);
                                  comments1.splice(cursor1, 1);
                              } else cursor1 += 1;
                          }
                          // already out of owned node
                          if (cursor1 === comments1.length) return VisitorOption1.Break;
                          if (comments1[cursor1].extendedRange[0] > node1.range[1]) return VisitorOption1.Skip;
                      }
                  });
                  return tree1;
              }
              exports1.version = require$$0.version;
              exports1.Syntax = Syntax1;
              exports1.traverse = traverse1;
              exports1.replace = replace1;
              exports1.attachComments = attachComments1;
              exports1.VisitorKeys = VisitorKeys1;
              exports1.VisitorOption = VisitorOption1;
              exports1.Controller = Controller1;
              exports1.cloneEnvironment = function() {
                  return clone1({});
              };
              return exports1;
          })(exports1);
      /* vim: set sw=4 ts=4 et tw=80 : */ });
      /*
      Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>
  
      Redistribution and use in source and binary forms, with or without
      modification, are permitted provided that the following conditions are met:
  
        * Redistributions of source code must retain the above copyright
          notice, this list of conditions and the following disclaimer.
        * Redistributions in binary form must reproduce the above copyright
          notice, this list of conditions and the following disclaimer in the
          documentation and/or other materials provided with the distribution.
  
      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
      ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
      DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
      (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
      LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
      ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
      THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    */ var ast = createCommonjsModule(function(module1) {
          (function() {
              "use strict";
              function isExpression1(node1) {
                  if (node1 == null) return false;
                  switch(node1.type){
                      case "ArrayExpression":
                      case "AssignmentExpression":
                      case "BinaryExpression":
                      case "CallExpression":
                      case "ConditionalExpression":
                      case "FunctionExpression":
                      case "Identifier":
                      case "Literal":
                      case "LogicalExpression":
                      case "MemberExpression":
                      case "NewExpression":
                      case "ObjectExpression":
                      case "SequenceExpression":
                      case "ThisExpression":
                      case "UnaryExpression":
                      case "UpdateExpression":
                          return true;
                  }
                  return false;
              }
              function isIterationStatement1(node1) {
                  if (node1 == null) return false;
                  switch(node1.type){
                      case "DoWhileStatement":
                      case "ForInStatement":
                      case "ForStatement":
                      case "WhileStatement":
                          return true;
                  }
                  return false;
              }
              function isStatement1(node1) {
                  if (node1 == null) return false;
                  switch(node1.type){
                      case "BlockStatement":
                      case "BreakStatement":
                      case "ContinueStatement":
                      case "DebuggerStatement":
                      case "DoWhileStatement":
                      case "EmptyStatement":
                      case "ExpressionStatement":
                      case "ForInStatement":
                      case "ForStatement":
                      case "IfStatement":
                      case "LabeledStatement":
                      case "ReturnStatement":
                      case "SwitchStatement":
                      case "ThrowStatement":
                      case "TryStatement":
                      case "VariableDeclaration":
                      case "WhileStatement":
                      case "WithStatement":
                          return true;
                  }
                  return false;
              }
              function isSourceElement1(node1) {
                  return isStatement1(node1) || node1 != null && node1.type === "FunctionDeclaration";
              }
              function trailingStatement1(node1) {
                  switch(node1.type){
                      case "IfStatement":
                          if (node1.alternate != null) return node1.alternate;
                          return node1.consequent;
                      case "LabeledStatement":
                      case "ForStatement":
                      case "ForInStatement":
                      case "WhileStatement":
                      case "WithStatement":
                          return node1.body;
                  }
                  return null;
              }
              function isProblematicIfStatement1(node1) {
                  var current1;
                  if (node1.type !== "IfStatement") return false;
                  if (node1.alternate == null) return false;
                  current1 = node1.consequent;
                  do {
                      if (current1.type === "IfStatement") {
                          if (current1.alternate == null) return true;
                      }
                      current1 = trailingStatement1(current1);
                  }while (current1);
                  return false;
              }
              module1.exports = {
                  isExpression: isExpression1,
                  isStatement: isStatement1,
                  isIterationStatement: isIterationStatement1,
                  isSourceElement: isSourceElement1,
                  isProblematicIfStatement: isProblematicIfStatement1,
                  trailingStatement: trailingStatement1
              };
          })();
      /* vim: set sw=4 ts=4 et tw=80 : */ });
      /*
      Copyright (C) 2013-2014 Yusuke Suzuki <utatane.tea@gmail.com>
      Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>
  
      Redistribution and use in source and binary forms, with or without
      modification, are permitted provided that the following conditions are met:
  
        * Redistributions of source code must retain the above copyright
          notice, this list of conditions and the following disclaimer.
        * Redistributions in binary form must reproduce the above copyright
          notice, this list of conditions and the following disclaimer in the
          documentation and/or other materials provided with the distribution.
  
      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
      ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
      DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
      (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
      LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
      ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
      THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    */ var code = createCommonjsModule(function(module1) {
          (function() {
              "use strict";
              var ES6Regex1, ES5Regex1, NON_ASCII_WHITESPACES1, IDENTIFIER_START1, IDENTIFIER_PART1, ch1;
              // See `tools/generate-identifier-regex.js`.
              ES5Regex1 = {
                  // ECMAScript 5.1/Unicode v9.0.0 NonAsciiIdentifierStart:
                  NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
                  // ECMAScript 5.1/Unicode v9.0.0 NonAsciiIdentifierPart:
                  NonAsciiIdentifierPart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/
              };
              ES6Regex1 = {
                  // ECMAScript 6/Unicode v9.0.0 NonAsciiIdentifierStart:
                  NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
                  // ECMAScript 6/Unicode v9.0.0 NonAsciiIdentifierPart:
                  NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
              };
              function isDecimalDigit1(ch1) {
                  return 0x30 <= ch1 && ch1 <= 0x39; // 0..9
              }
              function isHexDigit1(ch1) {
                  return 0x30 <= ch1 && ch1 <= 0x39 || // 0..9
                  0x61 <= ch1 && ch1 <= 0x66 || // a..f
                  0x41 <= ch1 && ch1 <= 0x46; // A..F
              }
              function isOctalDigit1(ch1) {
                  return ch1 >= 0x30 && ch1 <= 0x37; // 0..7
              }
              // 7.2 White Space
              NON_ASCII_WHITESPACES1 = [
                  0x1680,
                  0x2000,
                  0x2001,
                  0x2002,
                  0x2003,
                  0x2004,
                  0x2005,
                  0x2006,
                  0x2007,
                  0x2008,
                  0x2009,
                  0x200A,
                  0x202F,
                  0x205F,
                  0x3000,
                  0xFEFF
              ];
              function isWhiteSpace1(ch1) {
                  return ch1 === 0x20 || ch1 === 0x09 || ch1 === 0x0B || ch1 === 0x0C || ch1 === 0xA0 || ch1 >= 0x1680 && NON_ASCII_WHITESPACES1.indexOf(ch1) >= 0;
              }
              // 7.3 Line Terminators
              function isLineTerminator1(ch1) {
                  return ch1 === 0x0A || ch1 === 0x0D || ch1 === 0x2028 || ch1 === 0x2029;
              }
              // 7.6 Identifier Names and Identifiers
              function fromCodePoint1(cp1) {
                  if (cp1 <= 0xFFFF) return String.fromCharCode(cp1);
                  var cu11 = String.fromCharCode(Math.floor((cp1 - 0x10000) / 0x400) + 0xD800);
                  var cu21 = String.fromCharCode((cp1 - 0x10000) % 0x400 + 0xDC00);
                  return cu11 + cu21;
              }
              IDENTIFIER_START1 = new Array(0x80);
              for(ch1 = 0; ch1 < 0x80; ++ch1)IDENTIFIER_START1[ch1] = ch1 >= 0x61 && ch1 <= 0x7A || // a..z
              ch1 >= 0x41 && ch1 <= 0x5A || // A..Z
              ch1 === 0x24 || ch1 === 0x5F; // $ (dollar) and _ (underscore)
              IDENTIFIER_PART1 = new Array(0x80);
              for(ch1 = 0; ch1 < 0x80; ++ch1)IDENTIFIER_PART1[ch1] = ch1 >= 0x61 && ch1 <= 0x7A || // a..z
              ch1 >= 0x41 && ch1 <= 0x5A || // A..Z
              ch1 >= 0x30 && ch1 <= 0x39 || // 0..9
              ch1 === 0x24 || ch1 === 0x5F; // $ (dollar) and _ (underscore)
              function isIdentifierStartES51(ch1) {
                  return ch1 < 0x80 ? IDENTIFIER_START1[ch1] : ES5Regex1.NonAsciiIdentifierStart.test(fromCodePoint1(ch1));
              }
              function isIdentifierPartES51(ch1) {
                  return ch1 < 0x80 ? IDENTIFIER_PART1[ch1] : ES5Regex1.NonAsciiIdentifierPart.test(fromCodePoint1(ch1));
              }
              function isIdentifierStartES61(ch1) {
                  return ch1 < 0x80 ? IDENTIFIER_START1[ch1] : ES6Regex1.NonAsciiIdentifierStart.test(fromCodePoint1(ch1));
              }
              function isIdentifierPartES61(ch1) {
                  return ch1 < 0x80 ? IDENTIFIER_PART1[ch1] : ES6Regex1.NonAsciiIdentifierPart.test(fromCodePoint1(ch1));
              }
              module1.exports = {
                  isDecimalDigit: isDecimalDigit1,
                  isHexDigit: isHexDigit1,
                  isOctalDigit: isOctalDigit1,
                  isWhiteSpace: isWhiteSpace1,
                  isLineTerminator: isLineTerminator1,
                  isIdentifierStartES5: isIdentifierStartES51,
                  isIdentifierPartES5: isIdentifierPartES51,
                  isIdentifierStartES6: isIdentifierStartES61,
                  isIdentifierPartES6: isIdentifierPartES61
              };
          })();
      /* vim: set sw=4 ts=4 et tw=80 : */ });
      /*
      Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>
  
      Redistribution and use in source and binary forms, with or without
      modification, are permitted provided that the following conditions are met:
  
        * Redistributions of source code must retain the above copyright
          notice, this list of conditions and the following disclaimer.
        * Redistributions in binary form must reproduce the above copyright
          notice, this list of conditions and the following disclaimer in the
          documentation and/or other materials provided with the distribution.
  
      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
      ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
      DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
      (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
      LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
      ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
      THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    */ var keyword = createCommonjsModule(function(module1) {
          (function() {
              "use strict";
              var code$11 = code;
              function isStrictModeReservedWordES61(id1) {
                  switch(id1){
                      case "implements":
                      case "interface":
                      case "package":
                      case "private":
                      case "protected":
                      case "public":
                      case "static":
                      case "let":
                          return true;
                      default:
                          return false;
                  }
              }
              function isKeywordES51(id1, strict1) {
                  // yield should not be treated as keyword under non-strict mode.
                  if (!strict1 && id1 === "yield") return false;
                  return isKeywordES61(id1, strict1);
              }
              function isKeywordES61(id1, strict1) {
                  if (strict1 && isStrictModeReservedWordES61(id1)) return true;
                  switch(id1.length){
                      case 2:
                          return id1 === "if" || id1 === "in" || id1 === "do";
                      case 3:
                          return id1 === "var" || id1 === "for" || id1 === "new" || id1 === "try";
                      case 4:
                          return id1 === "this" || id1 === "else" || id1 === "case" || id1 === "void" || id1 === "with" || id1 === "enum";
                      case 5:
                          return id1 === "while" || id1 === "break" || id1 === "catch" || id1 === "throw" || id1 === "const" || id1 === "yield" || id1 === "class" || id1 === "super";
                      case 6:
                          return id1 === "return" || id1 === "typeof" || id1 === "delete" || id1 === "switch" || id1 === "export" || id1 === "import";
                      case 7:
                          return id1 === "default" || id1 === "finally" || id1 === "extends";
                      case 8:
                          return id1 === "function" || id1 === "continue" || id1 === "debugger";
                      case 10:
                          return id1 === "instanceof";
                      default:
                          return false;
                  }
              }
              function isReservedWordES51(id1, strict1) {
                  return id1 === "null" || id1 === "true" || id1 === "false" || isKeywordES51(id1, strict1);
              }
              function isReservedWordES61(id1, strict1) {
                  return id1 === "null" || id1 === "true" || id1 === "false" || isKeywordES61(id1, strict1);
              }
              function isRestrictedWord1(id1) {
                  return id1 === "eval" || id1 === "arguments";
              }
              function isIdentifierNameES51(id1) {
                  var i3, iz1, ch1;
                  if (id1.length === 0) return false;
                  ch1 = id1.charCodeAt(0);
                  if (!code$11.isIdentifierStartES5(ch1)) return false;
                  for(i3 = 1, iz1 = id1.length; i3 < iz1; ++i3){
                      ch1 = id1.charCodeAt(i3);
                      if (!code$11.isIdentifierPartES5(ch1)) return false;
                  }
                  return true;
              }
              function decodeUtf161(lead1, trail1) {
                  return (lead1 - 0xD800) * 0x400 + (trail1 - 0xDC00) + 0x10000;
              }
              function isIdentifierNameES61(id1) {
                  var i3, iz1, ch1, lowCh1, check1;
                  if (id1.length === 0) return false;
                  check1 = code$11.isIdentifierStartES6;
                  for(i3 = 0, iz1 = id1.length; i3 < iz1; ++i3){
                      ch1 = id1.charCodeAt(i3);
                      if (0xD800 <= ch1 && ch1 <= 0xDBFF) {
                          ++i3;
                          if (i3 >= iz1) return false;
                          lowCh1 = id1.charCodeAt(i3);
                          if (!(0xDC00 <= lowCh1 && lowCh1 <= 0xDFFF)) return false;
                          ch1 = decodeUtf161(ch1, lowCh1);
                      }
                      if (!check1(ch1)) return false;
                      check1 = code$11.isIdentifierPartES6;
                  }
                  return true;
              }
              function isIdentifierES51(id1, strict1) {
                  return isIdentifierNameES51(id1) && !isReservedWordES51(id1, strict1);
              }
              function isIdentifierES61(id1, strict1) {
                  return isIdentifierNameES61(id1) && !isReservedWordES61(id1, strict1);
              }
              module1.exports = {
                  isKeywordES5: isKeywordES51,
                  isKeywordES6: isKeywordES61,
                  isReservedWordES5: isReservedWordES51,
                  isReservedWordES6: isReservedWordES61,
                  isRestrictedWord: isRestrictedWord1,
                  isIdentifierNameES5: isIdentifierNameES51,
                  isIdentifierNameES6: isIdentifierNameES61,
                  isIdentifierES5: isIdentifierES51,
                  isIdentifierES6: isIdentifierES61
              };
          })();
      /* vim: set sw=4 ts=4 et tw=80 : */ });
      /*
      Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>
  
      Redistribution and use in source and binary forms, with or without
      modification, are permitted provided that the following conditions are met:
  
        * Redistributions of source code must retain the above copyright
          notice, this list of conditions and the following disclaimer.
        * Redistributions in binary form must reproduce the above copyright
          notice, this list of conditions and the following disclaimer in the
          documentation and/or other materials provided with the distribution.
  
      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
      ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
      DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
      (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
      LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
      ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
      THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    */ var utils = createCommonjsModule(function(module1, exports1) {
          (function() {
              "use strict";
              exports1.ast = ast;
              exports1.code = code;
              exports1.keyword = keyword;
          })();
      /* vim: set sw=4 ts=4 et tw=80 : */ });
      /* -*- Mode: js; js-indent-level: 2; -*- */ /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */ var intToCharMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
      /**
     * Encode an integer in the range of 0 to 63 to a single base 64 digit.
     */ var encode$1 = function(number1) {
          if (0 <= number1 && number1 < intToCharMap.length) return intToCharMap[number1];
          throw new TypeError("Must be between 0 and 63: " + number1);
      };
      /**
     * Decode a single base 64 character code digit to an integer. Returns -1 on
     * failure.
     */ var decode$1 = function(charCode1) {
          var bigA1 = 65; // 'A'
          var bigZ1 = 90; // 'Z'
          var littleA1 = 97; // 'a'
          var littleZ1 = 122; // 'z'
          var zero1 = 48; // '0'
          var nine1 = 57; // '9'
          var plus1 = 43; // '+'
          var slash1 = 47; // '/'
          var littleOffset1 = 26;
          var numberOffset1 = 52;
          // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
          if (bigA1 <= charCode1 && charCode1 <= bigZ1) return charCode1 - bigA1;
          // 26 - 51: abcdefghijklmnopqrstuvwxyz
          if (littleA1 <= charCode1 && charCode1 <= littleZ1) return charCode1 - littleA1 + littleOffset1;
          // 52 - 61: 0123456789
          if (zero1 <= charCode1 && charCode1 <= nine1) return charCode1 - zero1 + numberOffset1;
          // 62: +
          if (charCode1 == plus1) return 62;
          // 63: /
          if (charCode1 == slash1) return 63;
          // Invalid base64 digit.
          return -1;
      };
      var base64 = {
          encode: encode$1,
          decode: decode$1
      };
      /* -*- Mode: js; js-indent-level: 2; -*- */ /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     *
     * Based on the Base 64 VLQ implementation in Closure Compiler:
     * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
     *
     * Copyright 2011 The Closure Compiler Authors. All rights reserved.
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     *  * Redistributions of source code must retain the above copyright
     *    notice, this list of conditions and the following disclaimer.
     *  * Redistributions in binary form must reproduce the above
     *    copyright notice, this list of conditions and the following
     *    disclaimer in the documentation and/or other materials provided
     *    with the distribution.
     *  * Neither the name of Google Inc. nor the names of its
     *    contributors may be used to endorse or promote products derived
     *    from this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
     * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */ // A single base 64 digit can contain 6 bits of data. For the base 64 variable
      // length quantities we use in the source map spec, the first bit is the sign,
      // the next four bits are the actual value, and the 6th bit is the
      // continuation bit. The continuation bit tells us whether there are more
      // digits in this value following this digit.
      //
      //   Continuation
      //   |    Sign
      //   |    |
      //   V    V
      //   101011
      var VLQ_BASE_SHIFT = 5;
      // binary: 100000
      var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
      // binary: 011111
      var VLQ_BASE_MASK = VLQ_BASE - 1;
      // binary: 100000
      var VLQ_CONTINUATION_BIT = VLQ_BASE;
      /**
     * Converts from a two-complement value to a value where the sign bit is
     * placed in the least significant bit.  For example, as decimals:
     *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
     *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
     */ function toVLQSigned(aValue1) {
          return aValue1 < 0 ? (-aValue1 << 1) + 1 : (aValue1 << 1) + 0;
      }
      /**
     * Converts to a two-complement value from a value where the sign bit is
     * placed in the least significant bit.  For example, as decimals:
     *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
     *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
     */ function fromVLQSigned(aValue1) {
          var isNegative1 = (aValue1 & 1) === 1;
          var shifted1 = aValue1 >> 1;
          return isNegative1 ? -shifted1 : shifted1;
      }
      /**
     * Returns the base 64 VLQ encoded value.
     */ var encode = function base64VLQ_encode1(aValue1) {
          var encoded1 = "";
          var digit1;
          var vlq1 = toVLQSigned(aValue1);
          do {
              digit1 = vlq1 & VLQ_BASE_MASK;
              vlq1 >>>= VLQ_BASE_SHIFT;
              if (vlq1 > 0) // There are still more digits in this value, so we must make sure the
              // continuation bit is marked.
              digit1 |= VLQ_CONTINUATION_BIT;
              encoded1 += base64.encode(digit1);
          }while (vlq1 > 0);
          return encoded1;
      };
      /**
     * Decodes the next base 64 VLQ value from the given string and returns the
     * value and the rest of the string via the out parameter.
     */ var decode = function base64VLQ_decode1(aStr3, aIndex1, aOutParam1) {
          var strLen1 = aStr3.length;
          var result1 = 0;
          var shift1 = 0;
          var continuation1, digit1;
          do {
              if (aIndex1 >= strLen1) throw new Error("Expected more digits in base 64 VLQ value.");
              digit1 = base64.decode(aStr3.charCodeAt(aIndex1++));
              if (digit1 === -1) throw new Error("Invalid base64 digit: " + aStr3.charAt(aIndex1 - 1));
              continuation1 = !!(digit1 & VLQ_CONTINUATION_BIT);
              digit1 &= VLQ_BASE_MASK;
              result1 = result1 + (digit1 << shift1);
              shift1 += VLQ_BASE_SHIFT;
          }while (continuation1);
          aOutParam1.value = fromVLQSigned(result1);
          aOutParam1.rest = aIndex1;
      };
      var base64Vlq = {
          encode: encode,
          decode: decode
      };
      /* -*- Mode: js; js-indent-level: 2; -*- */ var util = createCommonjsModule(function(module1, exports1) {
          /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */ /**
     * This is a helper function for getting values from parameter/options
     * objects.
     *
     * @param args The object we are extracting values from
     * @param name The name of the property we are getting.
     * @param defaultValue An optional value to return if the property is missing
     * from the object. If this is not specified and the property is missing, an
     * error will be thrown.
     */ function getArg1(aArgs1, aName1, aDefaultValue1) {
              if (aName1 in aArgs1) return aArgs1[aName1];
              else if (arguments.length === 3) return aDefaultValue1;
              else throw new Error('"' + aName1 + '" is a required argument.');
          }
          exports1.getArg = getArg1;
          var urlRegexp1 = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
          var dataUrlRegexp1 = /^data:.+\,.+$/;
          function urlParse1(aUrl1) {
              var match1 = aUrl1.match(urlRegexp1);
              if (!match1) return null;
              return {
                  scheme: match1[1],
                  auth: match1[2],
                  host: match1[3],
                  port: match1[4],
                  path: match1[5]
              };
          }
          exports1.urlParse = urlParse1;
          function urlGenerate1(aParsedUrl1) {
              var url1 = "";
              if (aParsedUrl1.scheme) url1 += aParsedUrl1.scheme + ":";
              url1 += "//";
              if (aParsedUrl1.auth) url1 += aParsedUrl1.auth + "@";
              if (aParsedUrl1.host) url1 += aParsedUrl1.host;
              if (aParsedUrl1.port) url1 += ":" + aParsedUrl1.port;
              if (aParsedUrl1.path) url1 += aParsedUrl1.path;
              return url1;
          }
          exports1.urlGenerate = urlGenerate1;
          /**
     * Normalizes a path, or the path portion of a URL:
     *
     * - Replaces consecutive slashes with one slash.
     * - Removes unnecessary '.' parts.
     * - Removes unnecessary '<dir>/..' parts.
     *
     * Based on code in the Node.js 'path' core module.
     *
     * @param aPath The path or url to normalize.
     */ function normalize1(aPath1) {
              var path1 = aPath1;
              var url1 = urlParse1(aPath1);
              if (url1) {
                  if (!url1.path) return aPath1;
                  path1 = url1.path;
              }
              var isAbsolute1 = exports1.isAbsolute(path1);
              var parts1 = path1.split(/\/+/);
              for(var part1, up1 = 0, i3 = parts1.length - 1; i3 >= 0; i3--){
                  part1 = parts1[i3];
                  if (part1 === ".") parts1.splice(i3, 1);
                  else if (part1 === "..") up1++;
                  else if (up1 > 0) {
                      if (part1 === "") {
                          // The first part is blank if the path is absolute. Trying to go
                          // above the root is a no-op. Therefore we can remove all '..' parts
                          // directly after the root.
                          parts1.splice(i3 + 1, up1);
                          up1 = 0;
                      } else {
                          parts1.splice(i3, 2);
                          up1--;
                      }
                  }
              }
              path1 = parts1.join("/");
              if (path1 === "") path1 = isAbsolute1 ? "/" : ".";
              if (url1) {
                  url1.path = path1;
                  return urlGenerate1(url1);
              }
              return path1;
          }
          exports1.normalize = normalize1;
          /**
     * Joins two paths/URLs.
     *
     * @param aRoot The root path or URL.
     * @param aPath The path or URL to be joined with the root.
     *
     * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
     *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
     *   first.
     * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
     *   is updated with the result and aRoot is returned. Otherwise the result
     *   is returned.
     *   - If aPath is absolute, the result is aPath.
     *   - Otherwise the two paths are joined with a slash.
     * - Joining for example 'http://' and 'www.example.com' is also supported.
     */ function join1(aRoot1, aPath1) {
              if (aRoot1 === "") aRoot1 = ".";
              if (aPath1 === "") aPath1 = ".";
              var aPathUrl1 = urlParse1(aPath1);
              var aRootUrl1 = urlParse1(aRoot1);
              if (aRootUrl1) aRoot1 = aRootUrl1.path || "/";
              // `join(foo, '//www.example.org')`
              if (aPathUrl1 && !aPathUrl1.scheme) {
                  if (aRootUrl1) aPathUrl1.scheme = aRootUrl1.scheme;
                  return urlGenerate1(aPathUrl1);
              }
              if (aPathUrl1 || aPath1.match(dataUrlRegexp1)) return aPath1;
              // `join('http://', 'www.example.com')`
              if (aRootUrl1 && !aRootUrl1.host && !aRootUrl1.path) {
                  aRootUrl1.host = aPath1;
                  return urlGenerate1(aRootUrl1);
              }
              var joined1 = aPath1.charAt(0) === "/" ? aPath1 : normalize1(aRoot1.replace(/\/+$/, "") + "/" + aPath1);
              if (aRootUrl1) {
                  aRootUrl1.path = joined1;
                  return urlGenerate1(aRootUrl1);
              }
              return joined1;
          }
          exports1.join = join1;
          exports1.isAbsolute = function(aPath1) {
              return aPath1.charAt(0) === "/" || urlRegexp1.test(aPath1);
          };
          /**
     * Make a path relative to a URL or another path.
     *
     * @param aRoot The root path or URL.
     * @param aPath The path or URL to be made relative to aRoot.
     */ function relative1(aRoot1, aPath1) {
              if (aRoot1 === "") aRoot1 = ".";
              aRoot1 = aRoot1.replace(/\/$/, "");
              // It is possible for the path to be above the root. In this case, simply
              // checking whether the root is a prefix of the path won't work. Instead, we
              // need to remove components from the root one by one, until either we find
              // a prefix that fits, or we run out of components to remove.
              var level1 = 0;
              while(aPath1.indexOf(aRoot1 + "/") !== 0){
                  var index3 = aRoot1.lastIndexOf("/");
                  if (index3 < 0) return aPath1;
                  // If the only part of the root that is left is the scheme (i.e. http://,
                  // file:///, etc.), one or more slashes (/), or simply nothing at all, we
                  // have exhausted all components, so the path is not relative to the root.
                  aRoot1 = aRoot1.slice(0, index3);
                  if (aRoot1.match(/^([^\/]+:\/)?\/*$/)) return aPath1;
                  ++level1;
              }
              // Make sure we add a "../" for each component we removed from the root.
              return Array(level1 + 1).join("../") + aPath1.substr(aRoot1.length + 1);
          }
          exports1.relative = relative1;
          var supportsNullProto1 = function() {
              var obj1 = Object.create(null);
              return !("__proto__" in obj1);
          }();
          function identity1(s10) {
              return s10;
          }
          /**
     * Because behavior goes wacky when you set `__proto__` on objects, we
     * have to prefix all the strings in our set with an arbitrary character.
     *
     * See https://github.com/mozilla/source-map/pull/31 and
     * https://github.com/mozilla/source-map/issues/30
     *
     * @param String aStr
     */ function toSetString1(aStr3) {
              if (isProtoString1(aStr3)) return "$" + aStr3;
              return aStr3;
          }
          exports1.toSetString = supportsNullProto1 ? identity1 : toSetString1;
          function fromSetString1(aStr3) {
              if (isProtoString1(aStr3)) return aStr3.slice(1);
              return aStr3;
          }
          exports1.fromSetString = supportsNullProto1 ? identity1 : fromSetString1;
          function isProtoString1(s10) {
              if (!s10) return false;
              var length1 = s10.length;
              if (length1 < 9 /* "__proto__".length */ ) return false;
              if (s10.charCodeAt(length1 - 1) !== 95 /* '_' */  || s10.charCodeAt(length1 - 2) !== 95 /* '_' */  || s10.charCodeAt(length1 - 3) !== 111 /* 'o' */  || s10.charCodeAt(length1 - 4) !== 116 /* 't' */  || s10.charCodeAt(length1 - 5) !== 111 /* 'o' */  || s10.charCodeAt(length1 - 6) !== 114 /* 'r' */  || s10.charCodeAt(length1 - 7) !== 112 /* 'p' */  || s10.charCodeAt(length1 - 8) !== 95 /* '_' */  || s10.charCodeAt(length1 - 9) !== 95 /* '_' */ ) return false;
              for(var i3 = length1 - 10; i3 >= 0; i3--){
                  if (s10.charCodeAt(i3) !== 36 /* '$' */ ) return false;
              }
              return true;
          }
          /**
     * Comparator between two mappings where the original positions are compared.
     *
     * Optionally pass in `true` as `onlyCompareGenerated` to consider two
     * mappings with the same original source/line/column, but different generated
     * line and column the same. Useful when searching for a mapping with a
     * stubbed out mapping.
     */ function compareByOriginalPositions1(mappingA1, mappingB1, onlyCompareOriginal1) {
              var cmp1 = strcmp1(mappingA1.source, mappingB1.source);
              if (cmp1 !== 0) return cmp1;
              cmp1 = mappingA1.originalLine - mappingB1.originalLine;
              if (cmp1 !== 0) return cmp1;
              cmp1 = mappingA1.originalColumn - mappingB1.originalColumn;
              if (cmp1 !== 0 || onlyCompareOriginal1) return cmp1;
              cmp1 = mappingA1.generatedColumn - mappingB1.generatedColumn;
              if (cmp1 !== 0) return cmp1;
              cmp1 = mappingA1.generatedLine - mappingB1.generatedLine;
              if (cmp1 !== 0) return cmp1;
              return strcmp1(mappingA1.name, mappingB1.name);
          }
          exports1.compareByOriginalPositions = compareByOriginalPositions1;
          /**
     * Comparator between two mappings with deflated source and name indices where
     * the generated positions are compared.
     *
     * Optionally pass in `true` as `onlyCompareGenerated` to consider two
     * mappings with the same generated line and column, but different
     * source/name/original line and column the same. Useful when searching for a
     * mapping with a stubbed out mapping.
     */ function compareByGeneratedPositionsDeflated1(mappingA1, mappingB1, onlyCompareGenerated1) {
              var cmp1 = mappingA1.generatedLine - mappingB1.generatedLine;
              if (cmp1 !== 0) return cmp1;
              cmp1 = mappingA1.generatedColumn - mappingB1.generatedColumn;
              if (cmp1 !== 0 || onlyCompareGenerated1) return cmp1;
              cmp1 = strcmp1(mappingA1.source, mappingB1.source);
              if (cmp1 !== 0) return cmp1;
              cmp1 = mappingA1.originalLine - mappingB1.originalLine;
              if (cmp1 !== 0) return cmp1;
              cmp1 = mappingA1.originalColumn - mappingB1.originalColumn;
              if (cmp1 !== 0) return cmp1;
              return strcmp1(mappingA1.name, mappingB1.name);
          }
          exports1.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated1;
          function strcmp1(aStr11, aStr21) {
              if (aStr11 === aStr21) return 0;
              if (aStr11 === null) return 1; // aStr2 !== null
              if (aStr21 === null) return -1; // aStr1 !== null
              if (aStr11 > aStr21) return 1;
              return -1;
          }
          /**
     * Comparator between two mappings with inflated source and name strings where
     * the generated positions are compared.
     */ function compareByGeneratedPositionsInflated1(mappingA1, mappingB1) {
              var cmp1 = mappingA1.generatedLine - mappingB1.generatedLine;
              if (cmp1 !== 0) return cmp1;
              cmp1 = mappingA1.generatedColumn - mappingB1.generatedColumn;
              if (cmp1 !== 0) return cmp1;
              cmp1 = strcmp1(mappingA1.source, mappingB1.source);
              if (cmp1 !== 0) return cmp1;
              cmp1 = mappingA1.originalLine - mappingB1.originalLine;
              if (cmp1 !== 0) return cmp1;
              cmp1 = mappingA1.originalColumn - mappingB1.originalColumn;
              if (cmp1 !== 0) return cmp1;
              return strcmp1(mappingA1.name, mappingB1.name);
          }
          exports1.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated1;
          /**
     * Strip any JSON XSSI avoidance prefix from the string (as documented
     * in the source maps specification), and then parse the string as
     * JSON.
     */ function parseSourceMapInput1(str1) {
              return JSON.parse(str1.replace(/^\)]}'[^\n]*\n/, ""));
          }
          exports1.parseSourceMapInput = parseSourceMapInput1;
          /**
     * Compute the URL of a source given the the source root, the source's
     * URL, and the source map's URL.
     */ function computeSourceURL1(sourceRoot1, sourceURL1, sourceMapURL1) {
              sourceURL1 = sourceURL1 || "";
              if (sourceRoot1) {
                  // This follows what Chrome does.
                  if (sourceRoot1[sourceRoot1.length - 1] !== "/" && sourceURL1[0] !== "/") sourceRoot1 += "/";
                  // The spec says:
                  //   Line 4: An optional source root, useful for relocating source
                  //   files on a server or removing repeated values in the
                  //   “sources” entry.  This value is prepended to the individual
                  //   entries in the “source” field.
                  sourceURL1 = sourceRoot1 + sourceURL1;
              }
              // Historically, SourceMapConsumer did not take the sourceMapURL as
              // a parameter.  This mode is still somewhat supported, which is why
              // this code block is conditional.  However, it's preferable to pass
              // the source map URL to SourceMapConsumer, so that this function
              // can implement the source URL resolution algorithm as outlined in
              // the spec.  This block is basically the equivalent of:
              //    new URL(sourceURL, sourceMapURL).toString()
              // ... except it avoids using URL, which wasn't available in the
              // older releases of node still supported by this library.
              //
              // The spec says:
              //   If the sources are not absolute URLs after prepending of the
              //   “sourceRoot”, the sources are resolved relative to the
              //   SourceMap (like resolving script src in a html document).
              if (sourceMapURL1) {
                  var parsed1 = urlParse1(sourceMapURL1);
                  if (!parsed1) throw new Error("sourceMapURL could not be parsed");
                  if (parsed1.path) {
                      // Strip the last path component, but keep the "/".
                      var index3 = parsed1.path.lastIndexOf("/");
                      if (index3 >= 0) parsed1.path = parsed1.path.substring(0, index3 + 1);
                  }
                  sourceURL1 = join1(urlGenerate1(parsed1), sourceURL1);
              }
              return normalize1(sourceURL1);
          }
          exports1.computeSourceURL = computeSourceURL1;
      });
      /* -*- Mode: js; js-indent-level: 2; -*- */ /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */ var has = Object.prototype.hasOwnProperty;
      var hasNativeMap = typeof Map !== "undefined";
      /**
     * A data structure which is a combination of an array and a set. Adding a new
     * member is O(1), testing for membership is O(1), and finding the index of an
     * element is O(1). Removing elements from the set is not supported. Only
     * strings are supported for membership.
     */ function ArraySet$2() {
          this._array = [];
          this._set = hasNativeMap ? new Map() : Object.create(null);
      }
      /**
     * Static method for creating ArraySet instances from an existing array.
     */ ArraySet$2.fromArray = function ArraySet_fromArray1(aArray1, aAllowDuplicates1) {
          var set1 = new ArraySet$2();
          for(var i3 = 0, len1 = aArray1.length; i3 < len1; i3++)set1.add(aArray1[i3], aAllowDuplicates1);
          return set1;
      };
      /**
     * Return how many unique items are in this ArraySet. If duplicates have been
     * added, than those do not count towards the size.
     *
     * @returns Number
     */ ArraySet$2.prototype.size = function ArraySet_size1() {
          return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
      };
      /**
     * Add the given string to this set.
     *
     * @param String aStr
     */ ArraySet$2.prototype.add = function ArraySet_add1(aStr3, aAllowDuplicates1) {
          var sStr1 = hasNativeMap ? aStr3 : util.toSetString(aStr3);
          var isDuplicate1 = hasNativeMap ? this.has(aStr3) : has.call(this._set, sStr1);
          var idx1 = this._array.length;
          if (!isDuplicate1 || aAllowDuplicates1) this._array.push(aStr3);
          if (!isDuplicate1) {
              if (hasNativeMap) this._set.set(aStr3, idx1);
              else this._set[sStr1] = idx1;
          }
      };
      /**
     * Is the given string a member of this set?
     *
     * @param String aStr
     */ ArraySet$2.prototype.has = function ArraySet_has1(aStr3) {
          if (hasNativeMap) return this._set.has(aStr3);
          else {
              var sStr1 = util.toSetString(aStr3);
              return has.call(this._set, sStr1);
          }
      };
      /**
     * What is the index of the given string in the array?
     *
     * @param String aStr
     */ ArraySet$2.prototype.indexOf = function ArraySet_indexOf1(aStr3) {
          if (hasNativeMap) {
              var idx1 = this._set.get(aStr3);
              if (idx1 >= 0) return idx1;
          } else {
              var sStr1 = util.toSetString(aStr3);
              if (has.call(this._set, sStr1)) return this._set[sStr1];
          }
          throw new Error('"' + aStr3 + '" is not in the set.');
      };
      /**
     * What is the element at the given index?
     *
     * @param Number aIdx
     */ ArraySet$2.prototype.at = function ArraySet_at1(aIdx1) {
          if (aIdx1 >= 0 && aIdx1 < this._array.length) return this._array[aIdx1];
          throw new Error("No element indexed by " + aIdx1);
      };
      /**
     * Returns the array representation of this set (which has the proper indices
     * indicated by indexOf). Note that this is a copy of the internal array used
     * for storing the members so that no one can mess with internal state.
     */ ArraySet$2.prototype.toArray = function ArraySet_toArray1() {
          return this._array.slice();
      };
      var ArraySet_1 = ArraySet$2;
      var arraySet = {
          ArraySet: ArraySet_1
      };
      /* -*- Mode: js; js-indent-level: 2; -*- */ /*
     * Copyright 2014 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */ /**
     * Determine whether mappingB is after mappingA with respect to generated
     * position.
     */ function generatedPositionAfter(mappingA1, mappingB1) {
          // Optimized for most common case
          var lineA1 = mappingA1.generatedLine;
          var lineB1 = mappingB1.generatedLine;
          var columnA1 = mappingA1.generatedColumn;
          var columnB1 = mappingB1.generatedColumn;
          return lineB1 > lineA1 || lineB1 == lineA1 && columnB1 >= columnA1 || util.compareByGeneratedPositionsInflated(mappingA1, mappingB1) <= 0;
      }
      /**
     * A data structure to provide a sorted view of accumulated mappings in a
     * performance conscious manner. It trades a neglibable overhead in general
     * case for a large speedup in case of mappings being added in order.
     */ function MappingList$1() {
          this._array = [];
          this._sorted = true;
          // Serves as infimum
          this._last = {
              generatedLine: -1,
              generatedColumn: 0
          };
      }
      /**
     * Iterate through internal items. This method takes the same arguments that
     * `Array.prototype.forEach` takes.
     *
     * NOTE: The order of the mappings is NOT guaranteed.
     */ MappingList$1.prototype.unsortedForEach = function MappingList_forEach1(aCallback1, aThisArg1) {
          this._array.forEach(aCallback1, aThisArg1);
      };
      /**
     * Add the given source mapping.
     *
     * @param Object aMapping
     */ MappingList$1.prototype.add = function MappingList_add1(aMapping1) {
          if (generatedPositionAfter(this._last, aMapping1)) {
              this._last = aMapping1;
              this._array.push(aMapping1);
          } else {
              this._sorted = false;
              this._array.push(aMapping1);
          }
      };
      /**
     * Returns the flat, sorted array of mappings. The mappings are sorted by
     * generated position.
     *
     * WARNING: This method returns internal data without copying, for
     * performance. The return value must NOT be mutated, and should be treated as
     * an immutable borrow. If you want to take ownership, you must make your own
     * copy.
     */ MappingList$1.prototype.toArray = function MappingList_toArray1() {
          if (!this._sorted) {
              this._array.sort(util.compareByGeneratedPositionsInflated);
              this._sorted = true;
          }
          return this._array;
      };
      var MappingList_1 = MappingList$1;
      var mappingList = {
          MappingList: MappingList_1
      };
      /* -*- Mode: js; js-indent-level: 2; -*- */ /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */ var ArraySet$1 = arraySet.ArraySet;
      var MappingList = mappingList.MappingList;
      /**
     * An instance of the SourceMapGenerator represents a source map which is
     * being built incrementally. You may pass an object with the following
     * properties:
     *
     *   - file: The filename of the generated source.
     *   - sourceRoot: A root for all relative URLs in this source map.
     */ function SourceMapGenerator$2(aArgs1) {
          if (!aArgs1) aArgs1 = {};
          this._file = util.getArg(aArgs1, "file", null);
          this._sourceRoot = util.getArg(aArgs1, "sourceRoot", null);
          this._skipValidation = util.getArg(aArgs1, "skipValidation", false);
          this._sources = new ArraySet$1();
          this._names = new ArraySet$1();
          this._mappings = new MappingList();
          this._sourcesContents = null;
      }
      SourceMapGenerator$2.prototype._version = 3;
      /**
     * Creates a new SourceMapGenerator based on a SourceMapConsumer
     *
     * @param aSourceMapConsumer The SourceMap.
     */ SourceMapGenerator$2.fromSourceMap = function SourceMapGenerator_fromSourceMap1(aSourceMapConsumer1) {
          var sourceRoot1 = aSourceMapConsumer1.sourceRoot;
          var generator1 = new SourceMapGenerator$2({
              file: aSourceMapConsumer1.file,
              sourceRoot: sourceRoot1
          });
          aSourceMapConsumer1.eachMapping(function(mapping1) {
              var newMapping1 = {
                  generated: {
                      line: mapping1.generatedLine,
                      column: mapping1.generatedColumn
                  }
              };
              if (mapping1.source != null) {
                  newMapping1.source = mapping1.source;
                  if (sourceRoot1 != null) newMapping1.source = util.relative(sourceRoot1, newMapping1.source);
                  newMapping1.original = {
                      line: mapping1.originalLine,
                      column: mapping1.originalColumn
                  };
                  if (mapping1.name != null) newMapping1.name = mapping1.name;
              }
              generator1.addMapping(newMapping1);
          });
          aSourceMapConsumer1.sources.forEach(function(sourceFile1) {
              var sourceRelative1 = sourceFile1;
              if (sourceRoot1 !== null) sourceRelative1 = util.relative(sourceRoot1, sourceFile1);
              if (!generator1._sources.has(sourceRelative1)) generator1._sources.add(sourceRelative1);
              var content1 = aSourceMapConsumer1.sourceContentFor(sourceFile1);
              if (content1 != null) generator1.setSourceContent(sourceFile1, content1);
          });
          return generator1;
      };
      /**
     * Add a single mapping from original source line and column to the generated
     * source's line and column for this source map being created. The mapping
     * object should have the following properties:
     *
     *   - generated: An object with the generated line and column positions.
     *   - original: An object with the original line and column positions.
     *   - source: The original source file (relative to the sourceRoot).
     *   - name: An optional original token name for this mapping.
     */ SourceMapGenerator$2.prototype.addMapping = function SourceMapGenerator_addMapping1(aArgs1) {
          var generated1 = util.getArg(aArgs1, "generated");
          var original1 = util.getArg(aArgs1, "original", null);
          var source1 = util.getArg(aArgs1, "source", null);
          var name1 = util.getArg(aArgs1, "name", null);
          if (!this._skipValidation) this._validateMapping(generated1, original1, source1, name1);
          if (source1 != null) {
              source1 = String(source1);
              if (!this._sources.has(source1)) this._sources.add(source1);
          }
          if (name1 != null) {
              name1 = String(name1);
              if (!this._names.has(name1)) this._names.add(name1);
          }
          this._mappings.add({
              generatedLine: generated1.line,
              generatedColumn: generated1.column,
              originalLine: original1 != null && original1.line,
              originalColumn: original1 != null && original1.column,
              source: source1,
              name: name1
          });
      };
      /**
     * Set the source content for a source file.
     */ SourceMapGenerator$2.prototype.setSourceContent = function SourceMapGenerator_setSourceContent1(aSourceFile1, aSourceContent1) {
          var source1 = aSourceFile1;
          if (this._sourceRoot != null) source1 = util.relative(this._sourceRoot, source1);
          if (aSourceContent1 != null) {
              // Add the source content to the _sourcesContents map.
              // Create a new _sourcesContents map if the property is null.
              if (!this._sourcesContents) this._sourcesContents = Object.create(null);
              this._sourcesContents[util.toSetString(source1)] = aSourceContent1;
          } else if (this._sourcesContents) {
              // Remove the source file from the _sourcesContents map.
              // If the _sourcesContents map is empty, set the property to null.
              delete this._sourcesContents[util.toSetString(source1)];
              if (Object.keys(this._sourcesContents).length === 0) this._sourcesContents = null;
          }
      };
      /**
     * Applies the mappings of a sub-source-map for a specific source file to the
     * source map being generated. Each mapping to the supplied source file is
     * rewritten using the supplied source map. Note: The resolution for the
     * resulting mappings is the minimium of this map and the supplied map.
     *
     * @param aSourceMapConsumer The source map to be applied.
     * @param aSourceFile Optional. The filename of the source file.
     *        If omitted, SourceMapConsumer's file property will be used.
     * @param aSourceMapPath Optional. The dirname of the path to the source map
     *        to be applied. If relative, it is relative to the SourceMapConsumer.
     *        This parameter is needed when the two source maps aren't in the same
     *        directory, and the source map to be applied contains relative source
     *        paths. If so, those relative source paths need to be rewritten
     *        relative to the SourceMapGenerator.
     */ SourceMapGenerator$2.prototype.applySourceMap = function SourceMapGenerator_applySourceMap1(aSourceMapConsumer1, aSourceFile1, aSourceMapPath1) {
          var sourceFile1 = aSourceFile1;
          // If aSourceFile is omitted, we will use the file property of the SourceMap
          if (aSourceFile1 == null) {
              if (aSourceMapConsumer1.file == null) throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.');
              sourceFile1 = aSourceMapConsumer1.file;
          }
          var sourceRoot1 = this._sourceRoot;
          // Make "sourceFile" relative if an absolute Url is passed.
          if (sourceRoot1 != null) sourceFile1 = util.relative(sourceRoot1, sourceFile1);
          // Applying the SourceMap can add and remove items from the sources and
          // the names array.
          var newSources1 = new ArraySet$1();
          var newNames1 = new ArraySet$1();
          // Find mappings for the "sourceFile"
          this._mappings.unsortedForEach(function(mapping1) {
              if (mapping1.source === sourceFile1 && mapping1.originalLine != null) {
                  // Check if it can be mapped by the source map, then update the mapping.
                  var original1 = aSourceMapConsumer1.originalPositionFor({
                      line: mapping1.originalLine,
                      column: mapping1.originalColumn
                  });
                  if (original1.source != null) {
                      // Copy mapping
                      mapping1.source = original1.source;
                      if (aSourceMapPath1 != null) mapping1.source = util.join(aSourceMapPath1, mapping1.source);
                      if (sourceRoot1 != null) mapping1.source = util.relative(sourceRoot1, mapping1.source);
                      mapping1.originalLine = original1.line;
                      mapping1.originalColumn = original1.column;
                      if (original1.name != null) mapping1.name = original1.name;
                  }
              }
              var source1 = mapping1.source;
              if (source1 != null && !newSources1.has(source1)) newSources1.add(source1);
              var name1 = mapping1.name;
              if (name1 != null && !newNames1.has(name1)) newNames1.add(name1);
          }, this);
          this._sources = newSources1;
          this._names = newNames1;
          // Copy sourcesContents of applied map.
          aSourceMapConsumer1.sources.forEach(function(sourceFile1) {
              var content1 = aSourceMapConsumer1.sourceContentFor(sourceFile1);
              if (content1 != null) {
                  if (aSourceMapPath1 != null) sourceFile1 = util.join(aSourceMapPath1, sourceFile1);
                  if (sourceRoot1 != null) sourceFile1 = util.relative(sourceRoot1, sourceFile1);
                  this.setSourceContent(sourceFile1, content1);
              }
          }, this);
      };
      /**
     * A mapping can have one of the three levels of data:
     *
     *   1. Just the generated position.
     *   2. The Generated position, original position, and original source.
     *   3. Generated and original position, original source, as well as a name
     *      token.
     *
     * To maintain consistency, we validate that any new mapping being added falls
     * in to one of these categories.
     */ SourceMapGenerator$2.prototype._validateMapping = function SourceMapGenerator_validateMapping1(aGenerated1, aOriginal1, aSource1, aName1) {
          // When aOriginal is truthy but has empty values for .line and .column,
          // it is most likely a programmer error. In this case we throw a very
          // specific error message to try to guide them the right way.
          // For example: https://github.com/Polymer/polymer-bundler/pull/519
          if (aOriginal1 && typeof aOriginal1.line !== "number" && typeof aOriginal1.column !== "number") throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");
          if (aGenerated1 && "line" in aGenerated1 && "column" in aGenerated1 && aGenerated1.line > 0 && aGenerated1.column >= 0 && !aOriginal1 && !aSource1 && !aName1) // Case 1.
          return;
          else if (aGenerated1 && "line" in aGenerated1 && "column" in aGenerated1 && aOriginal1 && "line" in aOriginal1 && "column" in aOriginal1 && aGenerated1.line > 0 && aGenerated1.column >= 0 && aOriginal1.line > 0 && aOriginal1.column >= 0 && aSource1) // Cases 2 and 3.
          return;
          else throw new Error("Invalid mapping: " + JSON.stringify({
              generated: aGenerated1,
              source: aSource1,
              original: aOriginal1,
              name: aName1
          }));
      };
      /**
     * Serialize the accumulated mappings in to the stream of base 64 VLQs
     * specified by the source map format.
     */ SourceMapGenerator$2.prototype._serializeMappings = function SourceMapGenerator_serializeMappings1() {
          var previousGeneratedColumn1 = 0;
          var previousGeneratedLine1 = 1;
          var previousOriginalColumn1 = 0;
          var previousOriginalLine1 = 0;
          var previousName1 = 0;
          var previousSource1 = 0;
          var result1 = "";
          var next1;
          var mapping1;
          var nameIdx1;
          var sourceIdx1;
          var mappings1 = this._mappings.toArray();
          for(var i3 = 0, len1 = mappings1.length; i3 < len1; i3++){
              mapping1 = mappings1[i3];
              next1 = "";
              if (mapping1.generatedLine !== previousGeneratedLine1) {
                  previousGeneratedColumn1 = 0;
                  while(mapping1.generatedLine !== previousGeneratedLine1){
                      next1 += ";";
                      previousGeneratedLine1++;
                  }
              } else if (i3 > 0) {
                  if (!util.compareByGeneratedPositionsInflated(mapping1, mappings1[i3 - 1])) continue;
                  next1 += ",";
              }
              next1 += base64Vlq.encode(mapping1.generatedColumn - previousGeneratedColumn1);
              previousGeneratedColumn1 = mapping1.generatedColumn;
              if (mapping1.source != null) {
                  sourceIdx1 = this._sources.indexOf(mapping1.source);
                  next1 += base64Vlq.encode(sourceIdx1 - previousSource1);
                  previousSource1 = sourceIdx1;
                  // lines are stored 0-based in SourceMap spec version 3
                  next1 += base64Vlq.encode(mapping1.originalLine - 1 - previousOriginalLine1);
                  previousOriginalLine1 = mapping1.originalLine - 1;
                  next1 += base64Vlq.encode(mapping1.originalColumn - previousOriginalColumn1);
                  previousOriginalColumn1 = mapping1.originalColumn;
                  if (mapping1.name != null) {
                      nameIdx1 = this._names.indexOf(mapping1.name);
                      next1 += base64Vlq.encode(nameIdx1 - previousName1);
                      previousName1 = nameIdx1;
                  }
              }
              result1 += next1;
          }
          return result1;
      };
      SourceMapGenerator$2.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent1(aSources1, aSourceRoot1) {
          return aSources1.map(function(source1) {
              if (!this._sourcesContents) return null;
              if (aSourceRoot1 != null) source1 = util.relative(aSourceRoot1, source1);
              var key1 = util.toSetString(source1);
              return Object.prototype.hasOwnProperty.call(this._sourcesContents, key1) ? this._sourcesContents[key1] : null;
          }, this);
      };
      /**
     * Externalize the source map.
     */ SourceMapGenerator$2.prototype.toJSON = function SourceMapGenerator_toJSON1() {
          var map1 = {
              version: this._version,
              sources: this._sources.toArray(),
              names: this._names.toArray(),
              mappings: this._serializeMappings()
          };
          if (this._file != null) map1.file = this._file;
          if (this._sourceRoot != null) map1.sourceRoot = this._sourceRoot;
          if (this._sourcesContents) map1.sourcesContent = this._generateSourcesContent(map1.sources, map1.sourceRoot);
          return map1;
      };
      /**
     * Render the source map being generated to a string.
     */ SourceMapGenerator$2.prototype.toString = function SourceMapGenerator_toString1() {
          return JSON.stringify(this.toJSON());
      };
      var SourceMapGenerator_1 = SourceMapGenerator$2;
      var sourceMapGenerator = {
          SourceMapGenerator: SourceMapGenerator_1
      };
      /* -*- Mode: js; js-indent-level: 2; -*- */ var binarySearch = createCommonjsModule(function(module1, exports1) {
          /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */ exports1.GREATEST_LOWER_BOUND = 1;
          exports1.LEAST_UPPER_BOUND = 2;
          /**
     * Recursive implementation of binary search.
     *
     * @param aLow Indices here and lower do not contain the needle.
     * @param aHigh Indices here and higher do not contain the needle.
     * @param aNeedle The element being searched for.
     * @param aHaystack The non-empty array being searched.
     * @param aCompare Function which takes two elements and returns -1, 0, or 1.
     * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
     *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
     *     closest element that is smaller than or greater than the one we are
     *     searching for, respectively, if the exact element cannot be found.
     */ function recursiveSearch1(aLow1, aHigh1, aNeedle1, aHaystack1, aCompare1, aBias1) {
              // This function terminates when one of the following is true:
              //
              //   1. We find the exact element we are looking for.
              //
              //   2. We did not find the exact element, but we can return the index of
              //      the next-closest element.
              //
              //   3. We did not find the exact element, and there is no next-closest
              //      element than the one we are searching for, so we return -1.
              var mid1 = Math.floor((aHigh1 - aLow1) / 2) + aLow1;
              var cmp1 = aCompare1(aNeedle1, aHaystack1[mid1], true);
              if (cmp1 === 0) // Found the element we are looking for.
              return mid1;
              else if (cmp1 > 0) {
                  // Our needle is greater than aHaystack[mid].
                  if (aHigh1 - mid1 > 1) // The element is in the upper half.
                  return recursiveSearch1(mid1, aHigh1, aNeedle1, aHaystack1, aCompare1, aBias1);
                  // The exact needle element was not found in this haystack. Determine if
                  // we are in termination case (3) or (2) and return the appropriate thing.
                  if (aBias1 == exports1.LEAST_UPPER_BOUND) return aHigh1 < aHaystack1.length ? aHigh1 : -1;
                  else return mid1;
              } else {
                  // Our needle is less than aHaystack[mid].
                  if (mid1 - aLow1 > 1) // The element is in the lower half.
                  return recursiveSearch1(aLow1, mid1, aNeedle1, aHaystack1, aCompare1, aBias1);
                  // we are in termination case (3) or (2) and return the appropriate thing.
                  if (aBias1 == exports1.LEAST_UPPER_BOUND) return mid1;
                  else return aLow1 < 0 ? -1 : aLow1;
              }
          }
          /**
     * This is an implementation of binary search which will always try and return
     * the index of the closest element if there is no exact hit. This is because
     * mappings between original and generated line/col pairs are single points,
     * and there is an implicit region between each of them, so a miss just means
     * that you aren't on the very start of a region.
     *
     * @param aNeedle The element you are looking for.
     * @param aHaystack The array that is being searched.
     * @param aCompare A function which takes the needle and an element in the
     *     array and returns -1, 0, or 1 depending on whether the needle is less
     *     than, equal to, or greater than the element, respectively.
     * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
     *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
     *     closest element that is smaller than or greater than the one we are
     *     searching for, respectively, if the exact element cannot be found.
     *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
     */ exports1.search = function search1(aNeedle1, aHaystack1, aCompare1, aBias1) {
              if (aHaystack1.length === 0) return -1;
              var index3 = recursiveSearch1(-1, aHaystack1.length, aNeedle1, aHaystack1, aCompare1, aBias1 || exports1.GREATEST_LOWER_BOUND);
              if (index3 < 0) return -1;
              // We have found either the exact element, or the next-closest element than
              // the one we are searching for. However, there may be more than one such
              // element. Make sure we always return the smallest of these.
              while(index3 - 1 >= 0){
                  if (aCompare1(aHaystack1[index3], aHaystack1[index3 - 1], true) !== 0) break;
                  --index3;
              }
              return index3;
          };
      });
      /* -*- Mode: js; js-indent-level: 2; -*- */ /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */ // It turns out that some (most?) JavaScript engines don't self-host
      // `Array.prototype.sort`. This makes sense because C++ will likely remain
      // faster than JS when doing raw CPU-intensive sorting. However, when using a
      // custom comparator function, calling back and forth between the VM's C++ and
      // JIT'd JS is rather slow *and* loses JIT type information, resulting in
      // worse generated code for the comparator function than would be optimal. In
      // fact, when sorting with a comparator, these costs outweigh the benefits of
      // sorting in C++. By using our own JS-implemented Quick Sort (below), we get
      // a ~3500ms mean speed-up in `bench/bench.html`.
      /**
     * Swap the elements indexed by `x` and `y` in the array `ary`.
     *
     * @param {Array} ary
     *        The array.
     * @param {Number} x
     *        The index of the first item.
     * @param {Number} y
     *        The index of the second item.
     */ function swap(ary1, x4, y3) {
          var temp1 = ary1[x4];
          ary1[x4] = ary1[y3];
          ary1[y3] = temp1;
      }
      /**
     * Returns a random integer within the range `low .. high` inclusive.
     *
     * @param {Number} low
     *        The lower bound on the range.
     * @param {Number} high
     *        The upper bound on the range.
     */ function randomIntInRange(low1, high1) {
          return Math.round(low1 + Math.random() * (high1 - low1));
      }
      /**
     * The Quick Sort algorithm.
     *
     * @param {Array} ary
     *        An array to sort.
     * @param {function} comparator
     *        Function to use to compare two items.
     * @param {Number} p
     *        Start index of the array
     * @param {Number} r
     *        End index of the array
     */ function doQuickSort(ary1, comparator1, p6, r1) {
          // If our lower bound is less than our upper bound, we (1) partition the
          // array into two pieces and (2) recurse on each half. If it is not, this is
          // the empty array and our base case.
          if (p6 < r1) {
              // (1) Partitioning.
              //
              // The partitioning chooses a pivot between `p` and `r` and moves all
              // elements that are less than or equal to the pivot to the before it, and
              // all the elements that are greater than it after it. The effect is that
              // once partition is done, the pivot is in the exact place it will be when
              // the array is put in sorted order, and it will not need to be moved
              // again. This runs in O(n) time.
              // Always choose a random pivot so that an input array which is reverse
              // sorted does not cause O(n^2) running time.
              var pivotIndex1 = randomIntInRange(p6, r1);
              var i3 = p6 - 1;
              swap(ary1, pivotIndex1, r1);
              var pivot1 = ary1[r1];
              // Immediately after `j` is incremented in this loop, the following hold
              // true:
              //
              //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
              //
              //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
              for(var j1 = p6; j1 < r1; j1++)if (comparator1(ary1[j1], pivot1) <= 0) {
                  i3 += 1;
                  swap(ary1, i3, j1);
              }
              swap(ary1, i3 + 1, j1);
              var q3 = i3 + 1;
              // (2) Recurse on each half.
              doQuickSort(ary1, comparator1, p6, q3 - 1);
              doQuickSort(ary1, comparator1, q3 + 1, r1);
          }
      }
      /**
     * Sort the given array in-place with the given comparator function.
     *
     * @param {Array} ary
     *        An array to sort.
     * @param {function} comparator
     *        Function to use to compare two items.
     */ var quickSort_1 = function(ary1, comparator1) {
          doQuickSort(ary1, comparator1, 0, ary1.length - 1);
      };
      var quickSort$1 = {
          quickSort: quickSort_1
      };
      /* -*- Mode: js; js-indent-level: 2; -*- */ /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */ var ArraySet = arraySet.ArraySet;
      var quickSort = quickSort$1.quickSort;
      function SourceMapConsumer$1(aSourceMap1, aSourceMapURL1) {
          var sourceMap1 = aSourceMap1;
          if (typeof aSourceMap1 === "string") sourceMap1 = util.parseSourceMapInput(aSourceMap1);
          return sourceMap1.sections != null ? new IndexedSourceMapConsumer(sourceMap1, aSourceMapURL1) : new BasicSourceMapConsumer(sourceMap1, aSourceMapURL1);
      }
      SourceMapConsumer$1.fromSourceMap = function(aSourceMap1, aSourceMapURL1) {
          return BasicSourceMapConsumer.fromSourceMap(aSourceMap1, aSourceMapURL1);
      };
      /**
     * The version of the source mapping spec that we are consuming.
     */ SourceMapConsumer$1.prototype._version = 3;
      // `__generatedMappings` and `__originalMappings` are arrays that hold the
      // parsed mapping coordinates from the source map's "mappings" attribute. They
      // are lazily instantiated, accessed via the `_generatedMappings` and
      // `_originalMappings` getters respectively, and we only parse the mappings
      // and create these arrays once queried for a source location. We jump through
      // these hoops because there can be many thousands of mappings, and parsing
      // them is expensive, so we only want to do it if we must.
      //
      // Each object in the arrays is of the form:
      //
      //     {
      //       generatedLine: The line number in the generated code,
      //       generatedColumn: The column number in the generated code,
      //       source: The path to the original source file that generated this
      //               chunk of code,
      //       originalLine: The line number in the original source that
      //                     corresponds to this chunk of generated code,
      //       originalColumn: The column number in the original source that
      //                       corresponds to this chunk of generated code,
      //       name: The name of the original symbol which generated this chunk of
      //             code.
      //     }
      //
      // All properties except for `generatedLine` and `generatedColumn` can be
      // `null`.
      //
      // `_generatedMappings` is ordered by the generated positions.
      //
      // `_originalMappings` is ordered by the original positions.
      SourceMapConsumer$1.prototype.__generatedMappings = null;
      Object.defineProperty(SourceMapConsumer$1.prototype, "_generatedMappings", {
          configurable: true,
          enumerable: true,
          get: function() {
              if (!this.__generatedMappings) this._parseMappings(this._mappings, this.sourceRoot);
              return this.__generatedMappings;
          }
      });
      SourceMapConsumer$1.prototype.__originalMappings = null;
      Object.defineProperty(SourceMapConsumer$1.prototype, "_originalMappings", {
          configurable: true,
          enumerable: true,
          get: function() {
              if (!this.__originalMappings) this._parseMappings(this._mappings, this.sourceRoot);
              return this.__originalMappings;
          }
      });
      SourceMapConsumer$1.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator1(aStr3, index3) {
          var c4 = aStr3.charAt(index3);
          return c4 === ";" || c4 === ",";
      };
      /**
     * Parse the mappings in a string in to a data structure which we can easily
     * query (the ordered arrays in the `this.__generatedMappings` and
     * `this.__originalMappings` properties).
     */ SourceMapConsumer$1.prototype._parseMappings = function SourceMapConsumer_parseMappings1(aStr3, aSourceRoot1) {
          throw new Error("Subclasses must implement _parseMappings");
      };
      SourceMapConsumer$1.GENERATED_ORDER = 1;
      SourceMapConsumer$1.ORIGINAL_ORDER = 2;
      SourceMapConsumer$1.GREATEST_LOWER_BOUND = 1;
      SourceMapConsumer$1.LEAST_UPPER_BOUND = 2;
      /**
     * Iterate over each mapping between an original source/line/column and a
     * generated line/column in this source map.
     *
     * @param Function aCallback
     *        The function that is called with each mapping.
     * @param Object aContext
     *        Optional. If specified, this object will be the value of `this` every
     *        time that `aCallback` is called.
     * @param aOrder
     *        Either `SourceMapConsumer.GENERATED_ORDER` or
     *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
     *        iterate over the mappings sorted by the generated file's line/column
     *        order or the original's source/line/column order, respectively. Defaults to
     *        `SourceMapConsumer.GENERATED_ORDER`.
     */ SourceMapConsumer$1.prototype.eachMapping = function SourceMapConsumer_eachMapping1(aCallback1, aContext1, aOrder1) {
          var context1 = aContext1 || null;
          var order1 = aOrder1 || SourceMapConsumer$1.GENERATED_ORDER;
          var mappings1;
          switch(order1){
              case SourceMapConsumer$1.GENERATED_ORDER:
                  mappings1 = this._generatedMappings;
                  break;
              case SourceMapConsumer$1.ORIGINAL_ORDER:
                  mappings1 = this._originalMappings;
                  break;
              default:
                  throw new Error("Unknown order of iteration.");
          }
          var sourceRoot1 = this.sourceRoot;
          mappings1.map(function(mapping1) {
              var source1 = mapping1.source === null ? null : this._sources.at(mapping1.source);
              source1 = util.computeSourceURL(sourceRoot1, source1, this._sourceMapURL);
              return {
                  source: source1,
                  generatedLine: mapping1.generatedLine,
                  generatedColumn: mapping1.generatedColumn,
                  originalLine: mapping1.originalLine,
                  originalColumn: mapping1.originalColumn,
                  name: mapping1.name === null ? null : this._names.at(mapping1.name)
              };
          }, this).forEach(aCallback1, context1);
      };
      /**
     * Returns all generated line and column information for the original source,
     * line, and column provided. If no column is provided, returns all mappings
     * corresponding to a either the line we are searching for or the next
     * closest line that has any mappings. Otherwise, returns all mappings
     * corresponding to the given line and either the column we are searching for
     * or the next closest column that has any offsets.
     *
     * The only argument is an object with the following properties:
     *
     *   - source: The filename of the original source.
     *   - line: The line number in the original source.  The line number is 1-based.
     *   - column: Optional. the column number in the original source.
     *    The column number is 0-based.
     *
     * and an array of objects is returned, each with the following properties:
     *
     *   - line: The line number in the generated source, or null.  The
     *    line number is 1-based.
     *   - column: The column number in the generated source, or null.
     *    The column number is 0-based.
     */ SourceMapConsumer$1.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor1(aArgs1) {
          var line1 = util.getArg(aArgs1, "line");
          // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
          // returns the index of the closest mapping less than the needle. By
          // setting needle.originalColumn to 0, we thus find the last mapping for
          // the given line, provided such a mapping exists.
          var needle1 = {
              source: util.getArg(aArgs1, "source"),
              originalLine: line1,
              originalColumn: util.getArg(aArgs1, "column", 0)
          };
          needle1.source = this._findSourceIndex(needle1.source);
          if (needle1.source < 0) return [];
          var mappings1 = [];
          var index3 = this._findMapping(needle1, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);
          if (index3 >= 0) {
              var mapping1 = this._originalMappings[index3];
              if (aArgs1.column === undefined) {
                  var originalLine1 = mapping1.originalLine;
                  // Iterate until either we run out of mappings, or we run into
                  // a mapping for a different line than the one we found. Since
                  // mappings are sorted, this is guaranteed to find all mappings for
                  // the line we found.
                  while(mapping1 && mapping1.originalLine === originalLine1){
                      mappings1.push({
                          line: util.getArg(mapping1, "generatedLine", null),
                          column: util.getArg(mapping1, "generatedColumn", null),
                          lastColumn: util.getArg(mapping1, "lastGeneratedColumn", null)
                      });
                      mapping1 = this._originalMappings[++index3];
                  }
              } else {
                  var originalColumn1 = mapping1.originalColumn;
                  // Iterate until either we run out of mappings, or we run into
                  // a mapping for a different line than the one we were searching for.
                  // Since mappings are sorted, this is guaranteed to find all mappings for
                  // the line we are searching for.
                  while(mapping1 && mapping1.originalLine === line1 && mapping1.originalColumn == originalColumn1){
                      mappings1.push({
                          line: util.getArg(mapping1, "generatedLine", null),
                          column: util.getArg(mapping1, "generatedColumn", null),
                          lastColumn: util.getArg(mapping1, "lastGeneratedColumn", null)
                      });
                      mapping1 = this._originalMappings[++index3];
                  }
              }
          }
          return mappings1;
      };
      var SourceMapConsumer_1 = SourceMapConsumer$1;
      /**
     * A BasicSourceMapConsumer instance represents a parsed source map which we can
     * query for information about the original file positions by giving it a file
     * position in the generated source.
     *
     * The first parameter is the raw source map (either as a JSON string, or
     * already parsed to an object). According to the spec, source maps have the
     * following attributes:
     *
     *   - version: Which version of the source map spec this map is following.
     *   - sources: An array of URLs to the original source files.
     *   - names: An array of identifiers which can be referrenced by individual mappings.
     *   - sourceRoot: Optional. The URL root from which all sources are relative.
     *   - sourcesContent: Optional. An array of contents of the original source files.
     *   - mappings: A string of base64 VLQs which contain the actual mappings.
     *   - file: Optional. The generated file this source map is associated with.
     *
     * Here is an example source map, taken from the source map spec[0]:
     *
     *     {
     *       version : 3,
     *       file: "out.js",
     *       sourceRoot : "",
     *       sources: ["foo.js", "bar.js"],
     *       names: ["src", "maps", "are", "fun"],
     *       mappings: "AA,AB;;ABCDE;"
     *     }
     *
     * The second parameter, if given, is a string whose value is the URL
     * at which the source map was found.  This URL is used to compute the
     * sources array.
     *
     * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
     */ function BasicSourceMapConsumer(aSourceMap1, aSourceMapURL1) {
          var sourceMap1 = aSourceMap1;
          if (typeof aSourceMap1 === "string") sourceMap1 = util.parseSourceMapInput(aSourceMap1);
          var version1 = util.getArg(sourceMap1, "version");
          var sources1 = util.getArg(sourceMap1, "sources");
          // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
          // requires the array) to play nice here.
          var names1 = util.getArg(sourceMap1, "names", []);
          var sourceRoot1 = util.getArg(sourceMap1, "sourceRoot", null);
          var sourcesContent1 = util.getArg(sourceMap1, "sourcesContent", null);
          var mappings1 = util.getArg(sourceMap1, "mappings");
          var file1 = util.getArg(sourceMap1, "file", null);
          // Once again, Sass deviates from the spec and supplies the version as a
          // string rather than a number, so we use loose equality checking here.
          if (version1 != this._version) throw new Error("Unsupported version: " + version1);
          if (sourceRoot1) sourceRoot1 = util.normalize(sourceRoot1);
          sources1 = sources1.map(String)// Some source maps produce relative source paths like "./foo.js" instead of
          // "foo.js".  Normalize these first so that future comparisons will succeed.
          // See bugzil.la/1090768.
          .map(util.normalize)// Always ensure that absolute sources are internally stored relative to
          // the source root, if the source root is absolute. Not doing this would
          // be particularly problematic when the source root is a prefix of the
          // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
          .map(function(source1) {
              return sourceRoot1 && util.isAbsolute(sourceRoot1) && util.isAbsolute(source1) ? util.relative(sourceRoot1, source1) : source1;
          });
          // Pass `true` below to allow duplicate names and sources. While source maps
          // are intended to be compressed and deduplicated, the TypeScript compiler
          // sometimes generates source maps with duplicates in them. See Github issue
          // #72 and bugzil.la/889492.
          this._names = ArraySet.fromArray(names1.map(String), true);
          this._sources = ArraySet.fromArray(sources1, true);
          this._absoluteSources = this._sources.toArray().map(function(s10) {
              return util.computeSourceURL(sourceRoot1, s10, aSourceMapURL1);
          });
          this.sourceRoot = sourceRoot1;
          this.sourcesContent = sourcesContent1;
          this._mappings = mappings1;
          this._sourceMapURL = aSourceMapURL1;
          this.file = file1;
      }
      BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer$1.prototype);
      BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer$1;
      /**
     * Utility function to find the index of a source.  Returns -1 if not
     * found.
     */ BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource1) {
          var relativeSource1 = aSource1;
          if (this.sourceRoot != null) relativeSource1 = util.relative(this.sourceRoot, relativeSource1);
          if (this._sources.has(relativeSource1)) return this._sources.indexOf(relativeSource1);
          // Maybe aSource is an absolute URL as returned by |sources|.  In
          // this case we can't simply undo the transform.
          var i3;
          for(i3 = 0; i3 < this._absoluteSources.length; ++i3){
              if (this._absoluteSources[i3] == aSource1) return i3;
          }
          return -1;
      };
      /**
     * Create a BasicSourceMapConsumer from a SourceMapGenerator.
     *
     * @param SourceMapGenerator aSourceMap
     *        The source map that will be consumed.
     * @param String aSourceMapURL
     *        The URL at which the source map can be found (optional)
     * @returns BasicSourceMapConsumer
     */ BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap1(aSourceMap1, aSourceMapURL1) {
          var smc1 = Object.create(BasicSourceMapConsumer.prototype);
          var names1 = smc1._names = ArraySet.fromArray(aSourceMap1._names.toArray(), true);
          var sources1 = smc1._sources = ArraySet.fromArray(aSourceMap1._sources.toArray(), true);
          smc1.sourceRoot = aSourceMap1._sourceRoot;
          smc1.sourcesContent = aSourceMap1._generateSourcesContent(smc1._sources.toArray(), smc1.sourceRoot);
          smc1.file = aSourceMap1._file;
          smc1._sourceMapURL = aSourceMapURL1;
          smc1._absoluteSources = smc1._sources.toArray().map(function(s10) {
              return util.computeSourceURL(smc1.sourceRoot, s10, aSourceMapURL1);
          });
          // Because we are modifying the entries (by converting string sources and
          // names to indices into the sources and names ArraySets), we have to make
          // a copy of the entry or else bad things happen. Shared mutable state
          // strikes again! See github issue #191.
          var generatedMappings1 = aSourceMap1._mappings.toArray().slice();
          var destGeneratedMappings1 = smc1.__generatedMappings = [];
          var destOriginalMappings1 = smc1.__originalMappings = [];
          for(var i3 = 0, length1 = generatedMappings1.length; i3 < length1; i3++){
              var srcMapping1 = generatedMappings1[i3];
              var destMapping1 = new Mapping;
              destMapping1.generatedLine = srcMapping1.generatedLine;
              destMapping1.generatedColumn = srcMapping1.generatedColumn;
              if (srcMapping1.source) {
                  destMapping1.source = sources1.indexOf(srcMapping1.source);
                  destMapping1.originalLine = srcMapping1.originalLine;
                  destMapping1.originalColumn = srcMapping1.originalColumn;
                  if (srcMapping1.name) destMapping1.name = names1.indexOf(srcMapping1.name);
                  destOriginalMappings1.push(destMapping1);
              }
              destGeneratedMappings1.push(destMapping1);
          }
          quickSort(smc1.__originalMappings, util.compareByOriginalPositions);
          return smc1;
      };
      /**
     * The version of the source mapping spec that we are consuming.
     */ BasicSourceMapConsumer.prototype._version = 3;
      /**
     * The list of original sources.
     */ Object.defineProperty(BasicSourceMapConsumer.prototype, "sources", {
          get: function() {
              return this._absoluteSources.slice();
          }
      });
      /**
     * Provide the JIT with a nice shape / hidden class.
     */ function Mapping() {
          this.generatedLine = 0;
          this.generatedColumn = 0;
          this.source = null;
          this.originalLine = null;
          this.originalColumn = null;
          this.name = null;
      }
      /**
     * Parse the mappings in a string in to a data structure which we can easily
     * query (the ordered arrays in the `this.__generatedMappings` and
     * `this.__originalMappings` properties).
     */ BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings1(aStr3, aSourceRoot1) {
          var generatedLine1 = 1;
          var previousGeneratedColumn1 = 0;
          var previousOriginalLine1 = 0;
          var previousOriginalColumn1 = 0;
          var previousSource1 = 0;
          var previousName1 = 0;
          var length1 = aStr3.length;
          var index3 = 0;
          var cachedSegments1 = {};
          var temp1 = {};
          var originalMappings1 = [];
          var generatedMappings1 = [];
          var mapping1, str1, segment1, end1, value1;
          while(index3 < length1){
              if (aStr3.charAt(index3) === ";") {
                  generatedLine1++;
                  index3++;
                  previousGeneratedColumn1 = 0;
              } else if (aStr3.charAt(index3) === ",") index3++;
              else {
                  mapping1 = new Mapping();
                  mapping1.generatedLine = generatedLine1;
                  // Because each offset is encoded relative to the previous one,
                  // many segments often have the same encoding. We can exploit this
                  // fact by caching the parsed variable length fields of each segment,
                  // allowing us to avoid a second parse if we encounter the same
                  // segment again.
                  for(end1 = index3; end1 < length1; end1++){
                      if (this._charIsMappingSeparator(aStr3, end1)) break;
                  }
                  str1 = aStr3.slice(index3, end1);
                  segment1 = cachedSegments1[str1];
                  if (segment1) index3 += str1.length;
                  else {
                      segment1 = [];
                      while(index3 < end1){
                          base64Vlq.decode(aStr3, index3, temp1);
                          value1 = temp1.value;
                          index3 = temp1.rest;
                          segment1.push(value1);
                      }
                      if (segment1.length === 2) throw new Error("Found a source, but no line and column");
                      if (segment1.length === 3) throw new Error("Found a source and line, but no column");
                      cachedSegments1[str1] = segment1;
                  }
                  // Generated column.
                  mapping1.generatedColumn = previousGeneratedColumn1 + segment1[0];
                  previousGeneratedColumn1 = mapping1.generatedColumn;
                  if (segment1.length > 1) {
                      // Original source.
                      mapping1.source = previousSource1 + segment1[1];
                      previousSource1 += segment1[1];
                      // Original line.
                      mapping1.originalLine = previousOriginalLine1 + segment1[2];
                      previousOriginalLine1 = mapping1.originalLine;
                      // Lines are stored 0-based
                      mapping1.originalLine += 1;
                      // Original column.
                      mapping1.originalColumn = previousOriginalColumn1 + segment1[3];
                      previousOriginalColumn1 = mapping1.originalColumn;
                      if (segment1.length > 4) {
                          // Original name.
                          mapping1.name = previousName1 + segment1[4];
                          previousName1 += segment1[4];
                      }
                  }
                  generatedMappings1.push(mapping1);
                  if (typeof mapping1.originalLine === "number") originalMappings1.push(mapping1);
              }
          }
          quickSort(generatedMappings1, util.compareByGeneratedPositionsDeflated);
          this.__generatedMappings = generatedMappings1;
          quickSort(originalMappings1, util.compareByOriginalPositions);
          this.__originalMappings = originalMappings1;
      };
      /**
     * Find the mapping that best matches the hypothetical "needle" mapping that
     * we are searching for in the given "haystack" of mappings.
     */ BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping1(aNeedle1, aMappings1, aLineName1, aColumnName1, aComparator1, aBias1) {
          // To return the position we are searching for, we must first find the
          // mapping for the given position and then return the opposite position it
          // points to. Because the mappings are sorted, we can use binary search to
          // find the best mapping.
          if (aNeedle1[aLineName1] <= 0) throw new TypeError("Line must be greater than or equal to 1, got " + aNeedle1[aLineName1]);
          if (aNeedle1[aColumnName1] < 0) throw new TypeError("Column must be greater than or equal to 0, got " + aNeedle1[aColumnName1]);
          return binarySearch.search(aNeedle1, aMappings1, aComparator1, aBias1);
      };
      /**
     * Compute the last column for each generated mapping. The last column is
     * inclusive.
     */ BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans1() {
          for(var index3 = 0; index3 < this._generatedMappings.length; ++index3){
              var mapping1 = this._generatedMappings[index3];
              // Mappings do not contain a field for the last generated columnt. We
              // can come up with an optimistic estimate, however, by assuming that
              // mappings are contiguous (i.e. given two consecutive mappings, the
              // first mapping ends where the second one starts).
              if (index3 + 1 < this._generatedMappings.length) {
                  var nextMapping1 = this._generatedMappings[index3 + 1];
                  if (mapping1.generatedLine === nextMapping1.generatedLine) {
                      mapping1.lastGeneratedColumn = nextMapping1.generatedColumn - 1;
                      continue;
                  }
              }
              // The last mapping for each line spans the entire line.
              mapping1.lastGeneratedColumn = Infinity;
          }
      };
      /**
     * Returns the original source, line, and column information for the generated
     * source's line and column positions provided. The only argument is an object
     * with the following properties:
     *
     *   - line: The line number in the generated source.  The line number
     *     is 1-based.
     *   - column: The column number in the generated source.  The column
     *     number is 0-based.
     *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
     *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
     *     closest element that is smaller than or greater than the one we are
     *     searching for, respectively, if the exact element cannot be found.
     *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
     *
     * and an object is returned with the following properties:
     *
     *   - source: The original source file, or null.
     *   - line: The line number in the original source, or null.  The
     *     line number is 1-based.
     *   - column: The column number in the original source, or null.  The
     *     column number is 0-based.
     *   - name: The original identifier, or null.
     */ BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor1(aArgs1) {
          var needle1 = {
              generatedLine: util.getArg(aArgs1, "line"),
              generatedColumn: util.getArg(aArgs1, "column")
          };
          var index3 = this._findMapping(needle1, this._generatedMappings, "generatedLine", "generatedColumn", util.compareByGeneratedPositionsDeflated, util.getArg(aArgs1, "bias", SourceMapConsumer$1.GREATEST_LOWER_BOUND));
          if (index3 >= 0) {
              var mapping1 = this._generatedMappings[index3];
              if (mapping1.generatedLine === needle1.generatedLine) {
                  var source1 = util.getArg(mapping1, "source", null);
                  if (source1 !== null) {
                      source1 = this._sources.at(source1);
                      source1 = util.computeSourceURL(this.sourceRoot, source1, this._sourceMapURL);
                  }
                  var name1 = util.getArg(mapping1, "name", null);
                  if (name1 !== null) name1 = this._names.at(name1);
                  return {
                      source: source1,
                      line: util.getArg(mapping1, "originalLine", null),
                      column: util.getArg(mapping1, "originalColumn", null),
                      name: name1
                  };
              }
          }
          return {
              source: null,
              line: null,
              column: null,
              name: null
          };
      };
      /**
     * Return true if we have the source content for every source in the source
     * map, false otherwise.
     */ BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources1() {
          if (!this.sourcesContent) return false;
          return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc1) {
              return sc1 == null;
          });
      };
      /**
     * Returns the original source content. The only argument is the url of the
     * original source file. Returns null if no original source content is
     * available.
     */ BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor1(aSource1, nullOnMissing1) {
          if (!this.sourcesContent) return null;
          var index3 = this._findSourceIndex(aSource1);
          if (index3 >= 0) return this.sourcesContent[index3];
          var relativeSource1 = aSource1;
          if (this.sourceRoot != null) relativeSource1 = util.relative(this.sourceRoot, relativeSource1);
          var url1;
          if (this.sourceRoot != null && (url1 = util.urlParse(this.sourceRoot))) {
              // XXX: file:// URIs and absolute paths lead to unexpected behavior for
              // many users. We can help them out when they expect file:// URIs to
              // behave like it would if they were running a local HTTP server. See
              // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
              var fileUriAbsPath1 = relativeSource1.replace(/^file:\/\//, "");
              if (url1.scheme == "file" && this._sources.has(fileUriAbsPath1)) return this.sourcesContent[this._sources.indexOf(fileUriAbsPath1)];
              if ((!url1.path || url1.path == "/") && this._sources.has("/" + relativeSource1)) return this.sourcesContent[this._sources.indexOf("/" + relativeSource1)];
          }
          // This function is used recursively from
          // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
          // don't want to throw if we can't find the source - we just want to
          // return null, so we provide a flag to exit gracefully.
          if (nullOnMissing1) return null;
          else throw new Error('"' + relativeSource1 + '" is not in the SourceMap.');
      };
      /**
     * Returns the generated line and column information for the original source,
     * line, and column positions provided. The only argument is an object with
     * the following properties:
     *
     *   - source: The filename of the original source.
     *   - line: The line number in the original source.  The line number
     *     is 1-based.
     *   - column: The column number in the original source.  The column
     *     number is 0-based.
     *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
     *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
     *     closest element that is smaller than or greater than the one we are
     *     searching for, respectively, if the exact element cannot be found.
     *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
     *
     * and an object is returned with the following properties:
     *
     *   - line: The line number in the generated source, or null.  The
     *     line number is 1-based.
     *   - column: The column number in the generated source, or null.
     *     The column number is 0-based.
     */ BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor1(aArgs1) {
          var source1 = util.getArg(aArgs1, "source");
          source1 = this._findSourceIndex(source1);
          if (source1 < 0) return {
              line: null,
              column: null,
              lastColumn: null
          };
          var needle1 = {
              source: source1,
              originalLine: util.getArg(aArgs1, "line"),
              originalColumn: util.getArg(aArgs1, "column")
          };
          var index3 = this._findMapping(needle1, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, util.getArg(aArgs1, "bias", SourceMapConsumer$1.GREATEST_LOWER_BOUND));
          if (index3 >= 0) {
              var mapping1 = this._originalMappings[index3];
              if (mapping1.source === needle1.source) return {
                  line: util.getArg(mapping1, "generatedLine", null),
                  column: util.getArg(mapping1, "generatedColumn", null),
                  lastColumn: util.getArg(mapping1, "lastGeneratedColumn", null)
              };
          }
          return {
              line: null,
              column: null,
              lastColumn: null
          };
      };
      var BasicSourceMapConsumer_1 = BasicSourceMapConsumer;
      /**
     * An IndexedSourceMapConsumer instance represents a parsed source map which
     * we can query for information. It differs from BasicSourceMapConsumer in
     * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
     * input.
     *
     * The first parameter is a raw source map (either as a JSON string, or already
     * parsed to an object). According to the spec for indexed source maps, they
     * have the following attributes:
     *
     *   - version: Which version of the source map spec this map is following.
     *   - file: Optional. The generated file this source map is associated with.
     *   - sections: A list of section definitions.
     *
     * Each value under the "sections" field has two fields:
     *   - offset: The offset into the original specified at which this section
     *       begins to apply, defined as an object with a "line" and "column"
     *       field.
     *   - map: A source map definition. This source map could also be indexed,
     *       but doesn't have to be.
     *
     * Instead of the "map" field, it's also possible to have a "url" field
     * specifying a URL to retrieve a source map from, but that's currently
     * unsupported.
     *
     * Here's an example source map, taken from the source map spec[0], but
     * modified to omit a section which uses the "url" field.
     *
     *  {
     *    version : 3,
     *    file: "app.js",
     *    sections: [{
     *      offset: {line:100, column:10},
     *      map: {
     *        version : 3,
     *        file: "section.js",
     *        sources: ["foo.js", "bar.js"],
     *        names: ["src", "maps", "are", "fun"],
     *        mappings: "AAAA,E;;ABCDE;"
     *      }
     *    }],
     *  }
     *
     * The second parameter, if given, is a string whose value is the URL
     * at which the source map was found.  This URL is used to compute the
     * sources array.
     *
     * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
     */ function IndexedSourceMapConsumer(aSourceMap1, aSourceMapURL1) {
          var sourceMap1 = aSourceMap1;
          if (typeof aSourceMap1 === "string") sourceMap1 = util.parseSourceMapInput(aSourceMap1);
          var version1 = util.getArg(sourceMap1, "version");
          var sections1 = util.getArg(sourceMap1, "sections");
          if (version1 != this._version) throw new Error("Unsupported version: " + version1);
          this._sources = new ArraySet();
          this._names = new ArraySet();
          var lastOffset1 = {
              line: -1,
              column: 0
          };
          this._sections = sections1.map(function(s10) {
              if (s10.url) // The url field will require support for asynchronicity.
              // See https://github.com/mozilla/source-map/issues/16
              throw new Error("Support for url field in sections not implemented.");
              var offset2 = util.getArg(s10, "offset");
              var offsetLine1 = util.getArg(offset2, "line");
              var offsetColumn1 = util.getArg(offset2, "column");
              if (offsetLine1 < lastOffset1.line || offsetLine1 === lastOffset1.line && offsetColumn1 < lastOffset1.column) throw new Error("Section offsets must be ordered and non-overlapping.");
              lastOffset1 = offset2;
              return {
                  generatedOffset: {
                      // The offset fields are 0-based, but we use 1-based indices when
                      // encoding/decoding from VLQ.
                      generatedLine: offsetLine1 + 1,
                      generatedColumn: offsetColumn1 + 1
                  },
                  consumer: new SourceMapConsumer$1(util.getArg(s10, "map"), aSourceMapURL1)
              };
          });
      }
      IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer$1.prototype);
      IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer$1;
      /**
     * The version of the source mapping spec that we are consuming.
     */ IndexedSourceMapConsumer.prototype._version = 3;
      /**
     * The list of original sources.
     */ Object.defineProperty(IndexedSourceMapConsumer.prototype, "sources", {
          get: function() {
              var sources1 = [];
              for(var i3 = 0; i3 < this._sections.length; i3++)for(var j1 = 0; j1 < this._sections[i3].consumer.sources.length; j1++)sources1.push(this._sections[i3].consumer.sources[j1]);
              return sources1;
          }
      });
      /**
     * Returns the original source, line, and column information for the generated
     * source's line and column positions provided. The only argument is an object
     * with the following properties:
     *
     *   - line: The line number in the generated source.  The line number
     *     is 1-based.
     *   - column: The column number in the generated source.  The column
     *     number is 0-based.
     *
     * and an object is returned with the following properties:
     *
     *   - source: The original source file, or null.
     *   - line: The line number in the original source, or null.  The
     *     line number is 1-based.
     *   - column: The column number in the original source, or null.  The
     *     column number is 0-based.
     *   - name: The original identifier, or null.
     */ IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor1(aArgs1) {
          var needle1 = {
              generatedLine: util.getArg(aArgs1, "line"),
              generatedColumn: util.getArg(aArgs1, "column")
          };
          // Find the section containing the generated position we're trying to map
          // to an original position.
          var sectionIndex1 = binarySearch.search(needle1, this._sections, function(needle1, section1) {
              var cmp1 = needle1.generatedLine - section1.generatedOffset.generatedLine;
              if (cmp1) return cmp1;
              return needle1.generatedColumn - section1.generatedOffset.generatedColumn;
          });
          var section1 = this._sections[sectionIndex1];
          if (!section1) return {
              source: null,
              line: null,
              column: null,
              name: null
          };
          return section1.consumer.originalPositionFor({
              line: needle1.generatedLine - (section1.generatedOffset.generatedLine - 1),
              column: needle1.generatedColumn - (section1.generatedOffset.generatedLine === needle1.generatedLine ? section1.generatedOffset.generatedColumn - 1 : 0),
              bias: aArgs1.bias
          });
      };
      /**
     * Return true if we have the source content for every source in the source
     * map, false otherwise.
     */ IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources1() {
          return this._sections.every(function(s10) {
              return s10.consumer.hasContentsOfAllSources();
          });
      };
      /**
     * Returns the original source content. The only argument is the url of the
     * original source file. Returns null if no original source content is
     * available.
     */ IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor1(aSource1, nullOnMissing1) {
          for(var i3 = 0; i3 < this._sections.length; i3++){
              var section1 = this._sections[i3];
              var content1 = section1.consumer.sourceContentFor(aSource1, true);
              if (content1) return content1;
          }
          if (nullOnMissing1) return null;
          else throw new Error('"' + aSource1 + '" is not in the SourceMap.');
      };
      /**
     * Returns the generated line and column information for the original source,
     * line, and column positions provided. The only argument is an object with
     * the following properties:
     *
     *   - source: The filename of the original source.
     *   - line: The line number in the original source.  The line number
     *     is 1-based.
     *   - column: The column number in the original source.  The column
     *     number is 0-based.
     *
     * and an object is returned with the following properties:
     *
     *   - line: The line number in the generated source, or null.  The
     *     line number is 1-based. 
     *   - column: The column number in the generated source, or null.
     *     The column number is 0-based.
     */ IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor1(aArgs1) {
          for(var i3 = 0; i3 < this._sections.length; i3++){
              var section1 = this._sections[i3];
              // Only consider this section if the requested source is in the list of
              // sources of the consumer.
              if (section1.consumer._findSourceIndex(util.getArg(aArgs1, "source")) === -1) continue;
              var generatedPosition1 = section1.consumer.generatedPositionFor(aArgs1);
              if (generatedPosition1) {
                  var ret1 = {
                      line: generatedPosition1.line + (section1.generatedOffset.generatedLine - 1),
                      column: generatedPosition1.column + (section1.generatedOffset.generatedLine === generatedPosition1.line ? section1.generatedOffset.generatedColumn - 1 : 0)
                  };
                  return ret1;
              }
          }
          return {
              line: null,
              column: null
          };
      };
      /**
     * Parse the mappings in a string in to a data structure which we can easily
     * query (the ordered arrays in the `this.__generatedMappings` and
     * `this.__originalMappings` properties).
     */ IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings1(aStr3, aSourceRoot1) {
          this.__generatedMappings = [];
          this.__originalMappings = [];
          for(var i3 = 0; i3 < this._sections.length; i3++){
              var section1 = this._sections[i3];
              var sectionMappings1 = section1.consumer._generatedMappings;
              for(var j1 = 0; j1 < sectionMappings1.length; j1++){
                  var mapping1 = sectionMappings1[j1];
                  var source1 = section1.consumer._sources.at(mapping1.source);
                  source1 = util.computeSourceURL(section1.consumer.sourceRoot, source1, this._sourceMapURL);
                  this._sources.add(source1);
                  source1 = this._sources.indexOf(source1);
                  var name1 = null;
                  if (mapping1.name) {
                      name1 = section1.consumer._names.at(mapping1.name);
                      this._names.add(name1);
                      name1 = this._names.indexOf(name1);
                  }
                  // The mappings coming from the consumer for the section have
                  // generated positions relative to the start of the section, so we
                  // need to offset them to be relative to the start of the concatenated
                  // generated file.
                  var adjustedMapping1 = {
                      source: source1,
                      generatedLine: mapping1.generatedLine + (section1.generatedOffset.generatedLine - 1),
                      generatedColumn: mapping1.generatedColumn + (section1.generatedOffset.generatedLine === mapping1.generatedLine ? section1.generatedOffset.generatedColumn - 1 : 0),
                      originalLine: mapping1.originalLine,
                      originalColumn: mapping1.originalColumn,
                      name: name1
                  };
                  this.__generatedMappings.push(adjustedMapping1);
                  if (typeof adjustedMapping1.originalLine === "number") this.__originalMappings.push(adjustedMapping1);
              }
          }
          quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
          quickSort(this.__originalMappings, util.compareByOriginalPositions);
      };
      var IndexedSourceMapConsumer_1 = IndexedSourceMapConsumer;
      var sourceMapConsumer = {
          SourceMapConsumer: SourceMapConsumer_1,
          BasicSourceMapConsumer: BasicSourceMapConsumer_1,
          IndexedSourceMapConsumer: IndexedSourceMapConsumer_1
      };
      /* -*- Mode: js; js-indent-level: 2; -*- */ /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */ var SourceMapGenerator$1 = sourceMapGenerator.SourceMapGenerator;
      // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
      // operating systems these days (capturing the result).
      var REGEX_NEWLINE = /(\r?\n)/;
      // Newline character code for charCodeAt() comparisons
      var NEWLINE_CODE = 10;
      // Private symbol for identifying `SourceNode`s when multiple versions of
      // the source-map library are loaded. This MUST NOT CHANGE across
      // versions!
      var isSourceNode = "$$$isSourceNode$$$";
      /**
     * SourceNodes provide a way to abstract over interpolating/concatenating
     * snippets of generated JavaScript source code while maintaining the line and
     * column information associated with the original source code.
     *
     * @param aLine The original line number.
     * @param aColumn The original column number.
     * @param aSource The original source's filename.
     * @param aChunks Optional. An array of strings which are snippets of
     *        generated JS, or other SourceNodes.
     * @param aName The original identifier.
     */ function SourceNode$1(aLine1, aColumn1, aSource1, aChunks1, aName1) {
          this.children = [];
          this.sourceContents = {};
          this.line = aLine1 == null ? null : aLine1;
          this.column = aColumn1 == null ? null : aColumn1;
          this.source = aSource1 == null ? null : aSource1;
          this.name = aName1 == null ? null : aName1;
          this[isSourceNode] = true;
          if (aChunks1 != null) this.add(aChunks1);
      }
      /**
     * Creates a SourceNode from generated code and a SourceMapConsumer.
     *
     * @param aGeneratedCode The generated code
     * @param aSourceMapConsumer The SourceMap for the generated code
     * @param aRelativePath Optional. The path that relative sources in the
     *        SourceMapConsumer should be relative to.
     */ SourceNode$1.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap1(aGeneratedCode1, aSourceMapConsumer1, aRelativePath1) {
          // The SourceNode we want to fill with the generated code
          // and the SourceMap
          var node1 = new SourceNode$1();
          // All even indices of this array are one line of the generated code,
          // while all odd indices are the newlines between two adjacent lines
          // (since `REGEX_NEWLINE` captures its match).
          // Processed fragments are accessed by calling `shiftNextLine`.
          var remainingLines1 = aGeneratedCode1.split(REGEX_NEWLINE);
          var remainingLinesIndex1 = 0;
          var shiftNextLine1 = function() {
              var lineContents1 = getNextLine1();
              // The last line of a file might not have a newline.
              var newLine1 = getNextLine1() || "";
              return lineContents1 + newLine1;
              function getNextLine1() {
                  return remainingLinesIndex1 < remainingLines1.length ? remainingLines1[remainingLinesIndex1++] : undefined;
              }
          };
          // We need to remember the position of "remainingLines"
          var lastGeneratedLine1 = 1, lastGeneratedColumn1 = 0;
          // The generate SourceNodes we need a code range.
          // To extract it current and last mapping is used.
          // Here we store the last mapping.
          var lastMapping1 = null;
          aSourceMapConsumer1.eachMapping(function(mapping1) {
              if (lastMapping1 !== null) {
                  // We add the code from "lastMapping" to "mapping":
                  // First check if there is a new line in between.
                  if (lastGeneratedLine1 < mapping1.generatedLine) {
                      // Associate first line with "lastMapping"
                      addMappingWithCode1(lastMapping1, shiftNextLine1());
                      lastGeneratedLine1++;
                      lastGeneratedColumn1 = 0;
                  // The remaining code is added without mapping
                  } else {
                      // There is no new line in between.
                      // Associate the code between "lastGeneratedColumn" and
                      // "mapping.generatedColumn" with "lastMapping"
                      var nextLine1 = remainingLines1[remainingLinesIndex1] || "";
                      var code1 = nextLine1.substr(0, mapping1.generatedColumn - lastGeneratedColumn1);
                      remainingLines1[remainingLinesIndex1] = nextLine1.substr(mapping1.generatedColumn - lastGeneratedColumn1);
                      lastGeneratedColumn1 = mapping1.generatedColumn;
                      addMappingWithCode1(lastMapping1, code1);
                      // No more remaining code, continue
                      lastMapping1 = mapping1;
                      return;
                  }
              }
              // We add the generated code until the first mapping
              // to the SourceNode without any mapping.
              // Each line is added as separate string.
              while(lastGeneratedLine1 < mapping1.generatedLine){
                  node1.add(shiftNextLine1());
                  lastGeneratedLine1++;
              }
              if (lastGeneratedColumn1 < mapping1.generatedColumn) {
                  var nextLine1 = remainingLines1[remainingLinesIndex1] || "";
                  node1.add(nextLine1.substr(0, mapping1.generatedColumn));
                  remainingLines1[remainingLinesIndex1] = nextLine1.substr(mapping1.generatedColumn);
                  lastGeneratedColumn1 = mapping1.generatedColumn;
              }
              lastMapping1 = mapping1;
          }, this);
          // We have processed all mappings.
          if (remainingLinesIndex1 < remainingLines1.length) {
              if (lastMapping1) // Associate the remaining code in the current line with "lastMapping"
              addMappingWithCode1(lastMapping1, shiftNextLine1());
              // and add the remaining lines without any mapping
              node1.add(remainingLines1.splice(remainingLinesIndex1).join(""));
          }
          // Copy sourcesContent into SourceNode
          aSourceMapConsumer1.sources.forEach(function(sourceFile1) {
              var content1 = aSourceMapConsumer1.sourceContentFor(sourceFile1);
              if (content1 != null) {
                  if (aRelativePath1 != null) sourceFile1 = util.join(aRelativePath1, sourceFile1);
                  node1.setSourceContent(sourceFile1, content1);
              }
          });
          return node1;
          function addMappingWithCode1(mapping1, code1) {
              if (mapping1 === null || mapping1.source === undefined) node1.add(code1);
              else {
                  var source1 = aRelativePath1 ? util.join(aRelativePath1, mapping1.source) : mapping1.source;
                  node1.add(new SourceNode$1(mapping1.originalLine, mapping1.originalColumn, source1, code1, mapping1.name));
              }
          }
      };
      /**
     * Add a chunk of generated JS to this source node.
     *
     * @param aChunk A string snippet of generated JS code, another instance of
     *        SourceNode, or an array where each member is one of those things.
     */ SourceNode$1.prototype.add = function SourceNode_add1(aChunk1) {
          if (Array.isArray(aChunk1)) aChunk1.forEach(function(chunk1) {
              this.add(chunk1);
          }, this);
          else if (aChunk1[isSourceNode] || typeof aChunk1 === "string") {
              if (aChunk1) this.children.push(aChunk1);
          } else throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk1);
          return this;
      };
      /**
     * Add a chunk of generated JS to the beginning of this source node.
     *
     * @param aChunk A string snippet of generated JS code, another instance of
     *        SourceNode, or an array where each member is one of those things.
     */ SourceNode$1.prototype.prepend = function SourceNode_prepend1(aChunk1) {
          if (Array.isArray(aChunk1)) for(var i3 = aChunk1.length - 1; i3 >= 0; i3--)this.prepend(aChunk1[i3]);
          else if (aChunk1[isSourceNode] || typeof aChunk1 === "string") this.children.unshift(aChunk1);
          else throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk1);
          return this;
      };
      /**
     * Walk over the tree of JS snippets in this node and its children. The
     * walking function is called once for each snippet of JS and is passed that
     * snippet and the its original associated source's line/column location.
     *
     * @param aFn The traversal function.
     */ SourceNode$1.prototype.walk = function SourceNode_walk1(aFn1) {
          var chunk1;
          for(var i3 = 0, len1 = this.children.length; i3 < len1; i3++){
              chunk1 = this.children[i3];
              if (chunk1[isSourceNode]) chunk1.walk(aFn1);
              else if (chunk1 !== "") aFn1(chunk1, {
                  source: this.source,
                  line: this.line,
                  column: this.column,
                  name: this.name
              });
          }
      };
      /**
     * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
     * each of `this.children`.
     *
     * @param aSep The separator.
     */ SourceNode$1.prototype.join = function SourceNode_join1(aSep1) {
          var newChildren1;
          var i3;
          var len1 = this.children.length;
          if (len1 > 0) {
              newChildren1 = [];
              for(i3 = 0; i3 < len1 - 1; i3++){
                  newChildren1.push(this.children[i3]);
                  newChildren1.push(aSep1);
              }
              newChildren1.push(this.children[i3]);
              this.children = newChildren1;
          }
          return this;
      };
      /**
     * Call String.prototype.replace on the very right-most source snippet. Useful
     * for trimming whitespace from the end of a source node, etc.
     *
     * @param aPattern The pattern to replace.
     * @param aReplacement The thing to replace the pattern with.
     */ SourceNode$1.prototype.replaceRight = function SourceNode_replaceRight1(aPattern1, aReplacement1) {
          var lastChild1 = this.children[this.children.length - 1];
          if (lastChild1[isSourceNode]) lastChild1.replaceRight(aPattern1, aReplacement1);
          else if (typeof lastChild1 === "string") this.children[this.children.length - 1] = lastChild1.replace(aPattern1, aReplacement1);
          else this.children.push("".replace(aPattern1, aReplacement1));
          return this;
      };
      /**
     * Set the source content for a source file. This will be added to the SourceMapGenerator
     * in the sourcesContent field.
     *
     * @param aSourceFile The filename of the source file
     * @param aSourceContent The content of the source file
     */ SourceNode$1.prototype.setSourceContent = function SourceNode_setSourceContent1(aSourceFile1, aSourceContent1) {
          this.sourceContents[util.toSetString(aSourceFile1)] = aSourceContent1;
      };
      /**
     * Walk over the tree of SourceNodes. The walking function is called for each
     * source file content and is passed the filename and source content.
     *
     * @param aFn The traversal function.
     */ SourceNode$1.prototype.walkSourceContents = function SourceNode_walkSourceContents1(aFn1) {
          for(var i3 = 0, len1 = this.children.length; i3 < len1; i3++)if (this.children[i3][isSourceNode]) this.children[i3].walkSourceContents(aFn1);
          var sources1 = Object.keys(this.sourceContents);
          for(var i3 = 0, len1 = sources1.length; i3 < len1; i3++)aFn1(util.fromSetString(sources1[i3]), this.sourceContents[sources1[i3]]);
      };
      /**
     * Return the string representation of this source node. Walks over the tree
     * and concatenates all the various snippets together to one string.
     */ SourceNode$1.prototype.toString = function SourceNode_toString1() {
          var str1 = "";
          this.walk(function(chunk1) {
              str1 += chunk1;
          });
          return str1;
      };
      /**
     * Returns the string representation of this source node along with a source
     * map.
     */ SourceNode$1.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap1(aArgs1) {
          var generated1 = {
              code: "",
              line: 1,
              column: 0
          };
          var map1 = new SourceMapGenerator$1(aArgs1);
          var sourceMappingActive1 = false;
          var lastOriginalSource1 = null;
          var lastOriginalLine1 = null;
          var lastOriginalColumn1 = null;
          var lastOriginalName1 = null;
          this.walk(function(chunk1, original1) {
              generated1.code += chunk1;
              if (original1.source !== null && original1.line !== null && original1.column !== null) {
                  if (lastOriginalSource1 !== original1.source || lastOriginalLine1 !== original1.line || lastOriginalColumn1 !== original1.column || lastOriginalName1 !== original1.name) map1.addMapping({
                      source: original1.source,
                      original: {
                          line: original1.line,
                          column: original1.column
                      },
                      generated: {
                          line: generated1.line,
                          column: generated1.column
                      },
                      name: original1.name
                  });
                  lastOriginalSource1 = original1.source;
                  lastOriginalLine1 = original1.line;
                  lastOriginalColumn1 = original1.column;
                  lastOriginalName1 = original1.name;
                  sourceMappingActive1 = true;
              } else if (sourceMappingActive1) {
                  map1.addMapping({
                      generated: {
                          line: generated1.line,
                          column: generated1.column
                      }
                  });
                  lastOriginalSource1 = null;
                  sourceMappingActive1 = false;
              }
              for(var idx1 = 0, length1 = chunk1.length; idx1 < length1; idx1++)if (chunk1.charCodeAt(idx1) === NEWLINE_CODE) {
                  generated1.line++;
                  generated1.column = 0;
                  // Mappings end at eol
                  if (idx1 + 1 === length1) {
                      lastOriginalSource1 = null;
                      sourceMappingActive1 = false;
                  } else if (sourceMappingActive1) map1.addMapping({
                      source: original1.source,
                      original: {
                          line: original1.line,
                          column: original1.column
                      },
                      generated: {
                          line: generated1.line,
                          column: generated1.column
                      },
                      name: original1.name
                  });
              } else generated1.column++;
          });
          this.walkSourceContents(function(sourceFile1, sourceContent1) {
              map1.setSourceContent(sourceFile1, sourceContent1);
          });
          return {
              code: generated1.code,
              map: map1
          };
      };
      var SourceNode_1 = SourceNode$1;
      var sourceNode = {
          SourceNode: SourceNode_1
      };
      /*
     * Copyright 2009-2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE.txt or:
     * http://opensource.org/licenses/BSD-3-Clause
     */ var SourceMapGenerator = sourceMapGenerator.SourceMapGenerator;
      var SourceMapConsumer = sourceMapConsumer.SourceMapConsumer;
      var SourceNode = sourceNode.SourceNode;
      var sourceMap = {
          SourceMapGenerator: SourceMapGenerator,
          SourceMapConsumer: SourceMapConsumer,
          SourceNode: SourceNode
      };
      const name = "escodegen";
      const description = "ECMAScript code generator";
      const homepage = "http://github.com/estools/escodegen";
      const main = "escodegen.js";
      const bin = {
          esgenerate: "./bin/esgenerate.js",
          escodegen: "./bin/escodegen.js"
      };
      const files = [
          "LICENSE.BSD",
          "README.md",
          "bin",
          "escodegen.js",
          "package.json"
      ];
      const version = "1.14.3";
      const engines = {
          node: ">=4.0"
      };
      const maintainers = [
          {
              name: "Yusuke Suzuki",
              email: "utatane.tea@gmail.com",
              web: "http://github.com/Constellation"
          }
      ];
      const repository = {
          type: "git",
          url: "http://github.com/estools/escodegen.git"
      };
      const dependencies = {
          estraverse: "^4.2.0",
          esutils: "^2.0.2",
          esprima: "^4.0.1",
          optionator: "^0.8.1"
      };
      const optionalDependencies = {
          "source-map": "~0.6.1"
      };
      const devDependencies = {
          acorn: "^7.1.0",
          bluebird: "^3.4.7",
          "bower-registry-client": "^1.0.0",
          chai: "^3.5.0",
          "commonjs-everywhere": "^0.9.7",
          gulp: "^3.8.10",
          "gulp-eslint": "^3.0.1",
          "gulp-mocha": "^3.0.1",
          semver: "^5.1.0"
      };
      const license = "BSD-2-Clause";
      const scripts = {
          test: "gulp travis",
          "unit-test": "gulp test",
          lint: "gulp lint",
          release: "node tools/release.js",
          "build-min": "./node_modules/.bin/cjsify -ma path: tools/entry-point.js > escodegen.browser.min.js",
          build: "./node_modules/.bin/cjsify -a path: tools/entry-point.js > escodegen.browser.js"
      };
      var require$$3 = {
          name: name,
          description: description,
          homepage: homepage,
          main: main,
          bin: bin,
          files: files,
          version: version,
          engines: engines,
          maintainers: maintainers,
          repository: repository,
          dependencies: dependencies,
          optionalDependencies: optionalDependencies,
          devDependencies: devDependencies,
          license: license,
          scripts: scripts
      };
      /*
      Copyright (C) 2012-2014 Yusuke Suzuki <utatane.tea@gmail.com>
      Copyright (C) 2015 Ingvar Stepanyan <me@rreverser.com>
      Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>
      Copyright (C) 2012-2013 Michael Ficarra <escodegen.copyright@michael.ficarra.me>
      Copyright (C) 2012-2013 Mathias Bynens <mathias@qiwi.be>
      Copyright (C) 2013 Irakli Gozalishvili <rfobic@gmail.com>
      Copyright (C) 2012 Robert Gust-Bardon <donate@robert.gust-bardon.org>
      Copyright (C) 2012 John Freeman <jfreeman08@gmail.com>
      Copyright (C) 2011-2012 Ariya Hidayat <ariya.hidayat@gmail.com>
      Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
      Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
      Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>
  
      Redistribution and use in source and binary forms, with or without
      modification, are permitted provided that the following conditions are met:
  
        * Redistributions of source code must retain the above copyright
          notice, this list of conditions and the following disclaimer.
        * Redistributions in binary form must reproduce the above copyright
          notice, this list of conditions and the following disclaimer in the
          documentation and/or other materials provided with the distribution.
  
      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
      ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
      DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
      (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
      LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
      ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
      THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    */ var escodegen = createCommonjsModule(function(module1, exports1) {
          /*global exports:true, require:true, global:true*/ (function() {
              "use strict";
              var Syntax1, Precedence1, BinaryPrecedence1, SourceNode1, estraverse$11, esutils1, base1, indent1, json1, renumber1, hexadecimal1, quotes1, escapeless1, newline1, space1, parentheses1, semicolons1, safeConcatenation1, directive1, extra1, parse1, sourceMap$11, sourceCode1, preserveBlankLines1, FORMAT_MINIFY1, FORMAT_DEFAULTS1;
              estraverse$11 = estraverse;
              esutils1 = utils;
              Syntax1 = estraverse$11.Syntax;
              // Generation is done by generateExpression.
              function isExpression1(node1) {
                  return CodeGenerator1.Expression.hasOwnProperty(node1.type);
              }
              // Generation is done by generateStatement.
              function isStatement1(node1) {
                  return CodeGenerator1.Statement.hasOwnProperty(node1.type);
              }
              Precedence1 = {
                  Sequence: 0,
                  Yield: 1,
                  Assignment: 1,
                  Conditional: 2,
                  ArrowFunction: 2,
                  LogicalOR: 3,
                  LogicalAND: 4,
                  BitwiseOR: 5,
                  BitwiseXOR: 6,
                  BitwiseAND: 7,
                  Equality: 8,
                  Relational: 9,
                  BitwiseSHIFT: 10,
                  Additive: 11,
                  Multiplicative: 12,
                  Exponentiation: 13,
                  Await: 14,
                  Unary: 14,
                  Postfix: 15,
                  Call: 16,
                  New: 17,
                  TaggedTemplate: 18,
                  Member: 19,
                  Primary: 20
              };
              BinaryPrecedence1 = {
                  "||": Precedence1.LogicalOR,
                  "&&": Precedence1.LogicalAND,
                  "|": Precedence1.BitwiseOR,
                  "^": Precedence1.BitwiseXOR,
                  "&": Precedence1.BitwiseAND,
                  "==": Precedence1.Equality,
                  "!=": Precedence1.Equality,
                  "===": Precedence1.Equality,
                  "!==": Precedence1.Equality,
                  "is": Precedence1.Equality,
                  "isnt": Precedence1.Equality,
                  "<": Precedence1.Relational,
                  ">": Precedence1.Relational,
                  "<=": Precedence1.Relational,
                  ">=": Precedence1.Relational,
                  "in": Precedence1.Relational,
                  "instanceof": Precedence1.Relational,
                  "<<": Precedence1.BitwiseSHIFT,
                  ">>": Precedence1.BitwiseSHIFT,
                  ">>>": Precedence1.BitwiseSHIFT,
                  "+": Precedence1.Additive,
                  "-": Precedence1.Additive,
                  "*": Precedence1.Multiplicative,
                  "%": Precedence1.Multiplicative,
                  "/": Precedence1.Multiplicative,
                  "**": Precedence1.Exponentiation
              };
              //Flags
              var F_ALLOW_IN1 = 1, F_ALLOW_CALL1 = 2, F_ALLOW_UNPARATH_NEW1 = 4, F_FUNC_BODY1 = 8, F_DIRECTIVE_CTX1 = 16, F_SEMICOLON_OPT1 = 32;
              //Expression flag sets
              //NOTE: Flag order:
              // F_ALLOW_IN
              // F_ALLOW_CALL
              // F_ALLOW_UNPARATH_NEW
              var E_FTT1 = F_ALLOW_CALL1 | F_ALLOW_UNPARATH_NEW1, E_TTF1 = F_ALLOW_IN1 | F_ALLOW_CALL1, E_TTT1 = F_ALLOW_IN1 | F_ALLOW_CALL1 | F_ALLOW_UNPARATH_NEW1, E_TFF1 = F_ALLOW_IN1, E_FFT1 = F_ALLOW_UNPARATH_NEW1, E_TFT1 = F_ALLOW_IN1 | F_ALLOW_UNPARATH_NEW1;
              //Statement flag sets
              //NOTE: Flag order:
              // F_ALLOW_IN
              // F_FUNC_BODY
              // F_DIRECTIVE_CTX
              // F_SEMICOLON_OPT
              var S_TFFF1 = F_ALLOW_IN1, S_TFFT1 = F_ALLOW_IN1 | F_SEMICOLON_OPT1, S_FFFF1 = 0x00, S_TFTF1 = F_ALLOW_IN1 | F_DIRECTIVE_CTX1, S_TTFF1 = F_ALLOW_IN1 | F_FUNC_BODY1;
              function getDefaultOptions1() {
                  // default options
                  return {
                      indent: null,
                      base: null,
                      parse: null,
                      comment: false,
                      format: {
                          indent: {
                              style: "    ",
                              base: 0,
                              adjustMultilineComment: false
                          },
                          newline: "\n",
                          space: " ",
                          json: false,
                          renumber: false,
                          hexadecimal: false,
                          quotes: "single",
                          escapeless: false,
                          compact: false,
                          parentheses: true,
                          semicolons: true,
                          safeConcatenation: false,
                          preserveBlankLines: false
                      },
                      moz: {
                          comprehensionExpressionStartsWithAssignment: false,
                          starlessGenerator: false
                      },
                      sourceMap: null,
                      sourceMapRoot: null,
                      sourceMapWithCode: false,
                      directive: false,
                      raw: true,
                      verbatim: null,
                      sourceCode: null
                  };
              }
              function stringRepeat1(str1, num1) {
                  var result1 = "";
                  for(num1 |= 0; num1 > 0; num1 >>>= 1, str1 += str1)if (num1 & 1) result1 += str1;
                  return result1;
              }
              function hasLineTerminator1(str1) {
                  return /[\r\n]/g.test(str1);
              }
              function endsWithLineTerminator1(str1) {
                  var len1 = str1.length;
                  return len1 && esutils1.code.isLineTerminator(str1.charCodeAt(len1 - 1));
              }
              function merge1(target1, override1) {
                  var key1;
                  for(key1 in override1)if (override1.hasOwnProperty(key1)) target1[key1] = override1[key1];
                  return target1;
              }
              function updateDeeply1(target1, override1) {
                  var key1, val1;
                  function isHashObject1(target1) {
                      return typeof target1 === "object" && target1 instanceof Object && !(target1 instanceof RegExp);
                  }
                  for(key1 in override1)if (override1.hasOwnProperty(key1)) {
                      val1 = override1[key1];
                      if (isHashObject1(val1)) {
                          if (isHashObject1(target1[key1])) updateDeeply1(target1[key1], val1);
                          else target1[key1] = updateDeeply1({}, val1);
                      } else target1[key1] = val1;
                  }
                  return target1;
              }
              function generateNumber1(value1) {
                  var result1, point1, temp1, exponent1, pos1;
                  if (value1 !== value1) throw new Error("Numeric literal whose value is NaN");
                  if (value1 < 0 || value1 === 0 && 1 / value1 < 0) throw new Error("Numeric literal whose value is negative");
                  if (value1 === 1 / 0) return json1 ? "null" : renumber1 ? "1e400" : "1e+400";
                  result1 = "" + value1;
                  if (!renumber1 || result1.length < 3) return result1;
                  point1 = result1.indexOf(".");
                  if (!json1 && result1.charCodeAt(0) === 0x30 /* 0 */  && point1 === 1) {
                      point1 = 0;
                      result1 = result1.slice(1);
                  }
                  temp1 = result1;
                  result1 = result1.replace("e+", "e");
                  exponent1 = 0;
                  if ((pos1 = temp1.indexOf("e")) > 0) {
                      exponent1 = +temp1.slice(pos1 + 1);
                      temp1 = temp1.slice(0, pos1);
                  }
                  if (point1 >= 0) {
                      exponent1 -= temp1.length - point1 - 1;
                      temp1 = +(temp1.slice(0, point1) + temp1.slice(point1 + 1)) + "";
                  }
                  pos1 = 0;
                  while(temp1.charCodeAt(temp1.length + pos1 - 1) === 0x30 /* 0 */ )--pos1;
                  if (pos1 !== 0) {
                      exponent1 -= pos1;
                      temp1 = temp1.slice(0, pos1);
                  }
                  if (exponent1 !== 0) temp1 += "e" + exponent1;
                  if ((temp1.length < result1.length || hexadecimal1 && value1 > 1e12 && Math.floor(value1) === value1 && (temp1 = "0x" + value1.toString(16)).length < result1.length) && +temp1 === value1) result1 = temp1;
                  return result1;
              }
              // Generate valid RegExp expression.
              // This function is based on https://github.com/Constellation/iv Engine
              function escapeRegExpCharacter1(ch1, previousIsBackslash1) {
                  // not handling '\' and handling \u2028 or \u2029 to unicode escape sequence
                  if ((ch1 & -2) === 0x2028) return (previousIsBackslash1 ? "u" : "\\u") + (ch1 === 0x2028 ? "2028" : "2029");
                  else if (ch1 === 10 || ch1 === 13) return (previousIsBackslash1 ? "" : "\\") + (ch1 === 10 ? "n" : "r");
                  return String.fromCharCode(ch1);
              }
              function generateRegExp1(reg1) {
                  var match1, result1, flags1, i3, iz1, ch1, characterInBrack1, previousIsBackslash1;
                  result1 = reg1.toString();
                  if (reg1.source) {
                      // extract flag from toString result
                      match1 = result1.match(/\/([^/]*)$/);
                      if (!match1) return result1;
                      flags1 = match1[1];
                      result1 = "";
                      characterInBrack1 = false;
                      previousIsBackslash1 = false;
                      for(i3 = 0, iz1 = reg1.source.length; i3 < iz1; ++i3){
                          ch1 = reg1.source.charCodeAt(i3);
                          if (!previousIsBackslash1) {
                              if (characterInBrack1) {
                                  if (ch1 === 93) characterInBrack1 = false;
                              } else {
                                  if (ch1 === 47) result1 += "\\";
                                  else if (ch1 === 91) characterInBrack1 = true;
                              }
                              result1 += escapeRegExpCharacter1(ch1, previousIsBackslash1);
                              previousIsBackslash1 = ch1 === 92; // \
                          } else {
                              // if new RegExp("\\\n') is provided, create /\n/
                              result1 += escapeRegExpCharacter1(ch1, previousIsBackslash1);
                              // prevent like /\\[/]/
                              previousIsBackslash1 = false;
                          }
                      }
                      return "/" + result1 + "/" + flags1;
                  }
                  return result1;
              }
              function escapeAllowedCharacter1(code1, next1) {
                  var hex1;
                  if (code1 === 0x08 /* \b */ ) return "\\b";
                  if (code1 === 0x0C /* \f */ ) return "\\f";
                  if (code1 === 0x09 /* \t */ ) return "\\t";
                  hex1 = code1.toString(16).toUpperCase();
                  if (json1 || code1 > 0xFF) return "\\u" + "0000".slice(hex1.length) + hex1;
                  else if (code1 === 0x0000 && !esutils1.code.isDecimalDigit(next1)) return "\\0";
                  else if (code1 === 0x000B /* \v */ ) return "\\x0B";
                  else return "\\x" + "00".slice(hex1.length) + hex1;
              }
              function escapeDisallowedCharacter1(code1) {
                  if (code1 === 0x5C /* \ */ ) return "\\\\";
                  if (code1 === 0x0A /* \n */ ) return "\\n";
                  if (code1 === 0x0D /* \r */ ) return "\\r";
                  if (code1 === 0x2028) return "\\u2028";
                  if (code1 === 0x2029) return "\\u2029";
                  throw new Error("Incorrectly classified character");
              }
              function escapeDirective1(str1) {
                  var i3, iz1, code1, quote1;
                  quote1 = quotes1 === "double" ? '"' : "'";
                  for(i3 = 0, iz1 = str1.length; i3 < iz1; ++i3){
                      code1 = str1.charCodeAt(i3);
                      if (code1 === 0x27 /* ' */ ) {
                          quote1 = '"';
                          break;
                      } else if (code1 === 0x22 /* " */ ) {
                          quote1 = "'";
                          break;
                      } else if (code1 === 0x5C /* \ */ ) ++i3;
                  }
                  return quote1 + str1 + quote1;
              }
              function escapeString1(str1) {
                  var result1 = "", i3, len1, code1, singleQuotes1 = 0, doubleQuotes1 = 0, single1, quote1;
                  for(i3 = 0, len1 = str1.length; i3 < len1; ++i3){
                      code1 = str1.charCodeAt(i3);
                      if (code1 === 0x27 /* ' */ ) ++singleQuotes1;
                      else if (code1 === 0x22 /* " */ ) ++doubleQuotes1;
                      else if (code1 === 0x2F /* / */  && json1) result1 += "\\";
                      else if (esutils1.code.isLineTerminator(code1) || code1 === 0x5C /* \ */ ) {
                          result1 += escapeDisallowedCharacter1(code1);
                          continue;
                      } else if (!esutils1.code.isIdentifierPartES5(code1) && (json1 && code1 < 0x20 /* SP */  || !json1 && !escapeless1 && (code1 < 0x20 /* SP */  || code1 > 0x7E /* ~ */ ))) {
                          result1 += escapeAllowedCharacter1(code1, str1.charCodeAt(i3 + 1));
                          continue;
                      }
                      result1 += String.fromCharCode(code1);
                  }
                  single1 = !(quotes1 === "double" || quotes1 === "auto" && doubleQuotes1 < singleQuotes1);
                  quote1 = single1 ? "'" : '"';
                  if (!(single1 ? singleQuotes1 : doubleQuotes1)) return quote1 + result1 + quote1;
                  str1 = result1;
                  result1 = quote1;
                  for(i3 = 0, len1 = str1.length; i3 < len1; ++i3){
                      code1 = str1.charCodeAt(i3);
                      if (code1 === 0x27 /* ' */  && single1 || code1 === 0x22 /* " */  && !single1) result1 += "\\";
                      result1 += String.fromCharCode(code1);
                  }
                  return result1 + quote1;
              }
              /**
         * flatten an array to a string, where the array can contain
         * either strings or nested arrays
         */ function flattenToString1(arr1) {
                  var i3, iz1, elem1, result1 = "";
                  for(i3 = 0, iz1 = arr1.length; i3 < iz1; ++i3){
                      elem1 = arr1[i3];
                      result1 += Array.isArray(elem1) ? flattenToString1(elem1) : elem1;
                  }
                  return result1;
              }
              /**
         * convert generated to a SourceNode when source maps are enabled.
         */ function toSourceNodeWhenNeeded1(generated1, node1) {
                  if (!sourceMap$11) {
                      // with no source maps, generated is either an
                      // array or a string.  if an array, flatten it.
                      // if a string, just return it
                      if (Array.isArray(generated1)) return flattenToString1(generated1);
                      else return generated1;
                  }
                  if (node1 == null) {
                      if (generated1 instanceof SourceNode1) return generated1;
                      else node1 = {};
                  }
                  if (node1.loc == null) return new SourceNode1(null, null, sourceMap$11, generated1, node1.name || null);
                  return new SourceNode1(node1.loc.start.line, node1.loc.start.column, sourceMap$11 === true ? node1.loc.source || null : sourceMap$11, generated1, node1.name || null);
              }
              function noEmptySpace1() {
                  return space1 ? space1 : " ";
              }
              function join1(left1, right1) {
                  var leftSource1, rightSource1, leftCharCode1, rightCharCode1;
                  leftSource1 = toSourceNodeWhenNeeded1(left1).toString();
                  if (leftSource1.length === 0) return [
                      right1
                  ];
                  rightSource1 = toSourceNodeWhenNeeded1(right1).toString();
                  if (rightSource1.length === 0) return [
                      left1
                  ];
                  leftCharCode1 = leftSource1.charCodeAt(leftSource1.length - 1);
                  rightCharCode1 = rightSource1.charCodeAt(0);
                  if ((leftCharCode1 === 0x2B /* + */  || leftCharCode1 === 0x2D /* - */ ) && leftCharCode1 === rightCharCode1 || esutils1.code.isIdentifierPartES5(leftCharCode1) && esutils1.code.isIdentifierPartES5(rightCharCode1) || leftCharCode1 === 0x2F /* / */  && rightCharCode1 === 0x69 /* i */ ) return [
                      left1,
                      noEmptySpace1(),
                      right1
                  ];
                  else if (esutils1.code.isWhiteSpace(leftCharCode1) || esutils1.code.isLineTerminator(leftCharCode1) || esutils1.code.isWhiteSpace(rightCharCode1) || esutils1.code.isLineTerminator(rightCharCode1)) return [
                      left1,
                      right1
                  ];
                  return [
                      left1,
                      space1,
                      right1
                  ];
              }
              function addIndent1(stmt1) {
                  return [
                      base1,
                      stmt1
                  ];
              }
              function withIndent1(fn1) {
                  var previousBase1;
                  previousBase1 = base1;
                  base1 += indent1;
                  fn1(base1);
                  base1 = previousBase1;
              }
              function calculateSpaces1(str1) {
                  var i3;
                  for(i3 = str1.length - 1; i3 >= 0; --i3){
                      if (esutils1.code.isLineTerminator(str1.charCodeAt(i3))) break;
                  }
                  return str1.length - 1 - i3;
              }
              function adjustMultilineComment1(value1, specialBase1) {
                  var array1, i3, len1, line1, j1, spaces1, previousBase1, sn1;
                  array1 = value1.split(/\r\n|[\r\n]/);
                  spaces1 = Number.MAX_VALUE;
                  // first line doesn't have indentation
                  for(i3 = 1, len1 = array1.length; i3 < len1; ++i3){
                      line1 = array1[i3];
                      j1 = 0;
                      while(j1 < line1.length && esutils1.code.isWhiteSpace(line1.charCodeAt(j1)))++j1;
                      if (spaces1 > j1) spaces1 = j1;
                  }
                  if (typeof specialBase1 !== "undefined") {
                      // pattern like
                      // {
                      //   var t = 20;  /*
                      //                 * this is comment
                      //                 */
                      // }
                      previousBase1 = base1;
                      if (array1[1][spaces1] === "*") specialBase1 += " ";
                      base1 = specialBase1;
                  } else {
                      if (spaces1 & 1) // /*
                      //  *
                      //  */
                      // If spaces are odd number, above pattern is considered.
                      // We waste 1 space.
                      --spaces1;
                      previousBase1 = base1;
                  }
                  for(i3 = 1, len1 = array1.length; i3 < len1; ++i3){
                      sn1 = toSourceNodeWhenNeeded1(addIndent1(array1[i3].slice(spaces1)));
                      array1[i3] = sourceMap$11 ? sn1.join("") : sn1;
                  }
                  base1 = previousBase1;
                  return array1.join("\n");
              }
              function generateComment1(comment1, specialBase1) {
                  if (comment1.type === "Line") {
                      if (endsWithLineTerminator1(comment1.value)) return "//" + comment1.value;
                      else {
                          // Always use LineTerminator
                          var result1 = "//" + comment1.value;
                          if (!preserveBlankLines1) result1 += "\n";
                          return result1;
                      }
                  }
                  if (extra1.format.indent.adjustMultilineComment && /[\n\r]/.test(comment1.value)) return adjustMultilineComment1("/*" + comment1.value + "*/", specialBase1);
                  return "/*" + comment1.value + "*/";
              }
              function addComments1(stmt1, result1) {
                  var i3, len1, comment1, save1, tailingToStatement1, specialBase1, fragment1, extRange1, range1, prevRange1, prefix1, infix1, suffix1, count1;
                  if (stmt1.leadingComments && stmt1.leadingComments.length > 0) {
                      save1 = result1;
                      if (preserveBlankLines1) {
                          comment1 = stmt1.leadingComments[0];
                          result1 = [];
                          extRange1 = comment1.extendedRange;
                          range1 = comment1.range;
                          prefix1 = sourceCode1.substring(extRange1[0], range1[0]);
                          count1 = (prefix1.match(/\n/g) || []).length;
                          if (count1 > 0) {
                              result1.push(stringRepeat1("\n", count1));
                              result1.push(addIndent1(generateComment1(comment1)));
                          } else {
                              result1.push(prefix1);
                              result1.push(generateComment1(comment1));
                          }
                          prevRange1 = range1;
                          for(i3 = 1, len1 = stmt1.leadingComments.length; i3 < len1; i3++){
                              comment1 = stmt1.leadingComments[i3];
                              range1 = comment1.range;
                              infix1 = sourceCode1.substring(prevRange1[1], range1[0]);
                              count1 = (infix1.match(/\n/g) || []).length;
                              result1.push(stringRepeat1("\n", count1));
                              result1.push(addIndent1(generateComment1(comment1)));
                              prevRange1 = range1;
                          }
                          suffix1 = sourceCode1.substring(range1[1], extRange1[1]);
                          count1 = (suffix1.match(/\n/g) || []).length;
                          result1.push(stringRepeat1("\n", count1));
                      } else {
                          comment1 = stmt1.leadingComments[0];
                          result1 = [];
                          if (safeConcatenation1 && stmt1.type === Syntax1.Program && stmt1.body.length === 0) result1.push("\n");
                          result1.push(generateComment1(comment1));
                          if (!endsWithLineTerminator1(toSourceNodeWhenNeeded1(result1).toString())) result1.push("\n");
                          for(i3 = 1, len1 = stmt1.leadingComments.length; i3 < len1; ++i3){
                              comment1 = stmt1.leadingComments[i3];
                              fragment1 = [
                                  generateComment1(comment1)
                              ];
                              if (!endsWithLineTerminator1(toSourceNodeWhenNeeded1(fragment1).toString())) fragment1.push("\n");
                              result1.push(addIndent1(fragment1));
                          }
                      }
                      result1.push(addIndent1(save1));
                  }
                  if (stmt1.trailingComments) {
                      if (preserveBlankLines1) {
                          comment1 = stmt1.trailingComments[0];
                          extRange1 = comment1.extendedRange;
                          range1 = comment1.range;
                          prefix1 = sourceCode1.substring(extRange1[0], range1[0]);
                          count1 = (prefix1.match(/\n/g) || []).length;
                          if (count1 > 0) {
                              result1.push(stringRepeat1("\n", count1));
                              result1.push(addIndent1(generateComment1(comment1)));
                          } else {
                              result1.push(prefix1);
                              result1.push(generateComment1(comment1));
                          }
                      } else {
                          tailingToStatement1 = !endsWithLineTerminator1(toSourceNodeWhenNeeded1(result1).toString());
                          specialBase1 = stringRepeat1(" ", calculateSpaces1(toSourceNodeWhenNeeded1([
                              base1,
                              result1,
                              indent1
                          ]).toString()));
                          for(i3 = 0, len1 = stmt1.trailingComments.length; i3 < len1; ++i3){
                              comment1 = stmt1.trailingComments[i3];
                              if (tailingToStatement1) {
                                  // We assume target like following script
                                  //
                                  // var t = 20;  /**
                                  //               * This is comment of t
                                  //               */
                                  if (i3 === 0) // first case
                                  result1 = [
                                      result1,
                                      indent1
                                  ];
                                  else result1 = [
                                      result1,
                                      specialBase1
                                  ];
                                  result1.push(generateComment1(comment1, specialBase1));
                              } else result1 = [
                                  result1,
                                  addIndent1(generateComment1(comment1))
                              ];
                              if (i3 !== len1 - 1 && !endsWithLineTerminator1(toSourceNodeWhenNeeded1(result1).toString())) result1 = [
                                  result1,
                                  "\n"
                              ];
                          }
                      }
                  }
                  return result1;
              }
              function generateBlankLines1(start1, end1, result1) {
                  var j1, newlineCount1 = 0;
                  for(j1 = start1; j1 < end1; j1++)if (sourceCode1[j1] === "\n") newlineCount1++;
                  for(j1 = 1; j1 < newlineCount1; j1++)result1.push(newline1);
              }
              function parenthesize1(text1, current1, should1) {
                  if (current1 < should1) return [
                      "(",
                      text1,
                      ")"
                  ];
                  return text1;
              }
              function generateVerbatimString1(string1) {
                  var i3, iz1, result1;
                  result1 = string1.split(/\r\n|\n/);
                  for(i3 = 1, iz1 = result1.length; i3 < iz1; i3++)result1[i3] = newline1 + base1 + result1[i3];
                  return result1;
              }
              function generateVerbatim1(expr1, precedence1) {
                  var verbatim1, result1, prec1;
                  verbatim1 = expr1[extra1.verbatim];
                  if (typeof verbatim1 === "string") result1 = parenthesize1(generateVerbatimString1(verbatim1), Precedence1.Sequence, precedence1);
                  else {
                      // verbatim is object
                      result1 = generateVerbatimString1(verbatim1.content);
                      prec1 = verbatim1.precedence != null ? verbatim1.precedence : Precedence1.Sequence;
                      result1 = parenthesize1(result1, prec1, precedence1);
                  }
                  return toSourceNodeWhenNeeded1(result1, expr1);
              }
              function CodeGenerator1() {}
              // Helpers.
              CodeGenerator1.prototype.maybeBlock = function(stmt1, flags1) {
                  var result1, noLeadingComment1, that1 = this;
                  noLeadingComment1 = !extra1.comment || !stmt1.leadingComments;
                  if (stmt1.type === Syntax1.BlockStatement && noLeadingComment1) return [
                      space1,
                      this.generateStatement(stmt1, flags1)
                  ];
                  if (stmt1.type === Syntax1.EmptyStatement && noLeadingComment1) return ";";
                  withIndent1(function() {
                      result1 = [
                          newline1,
                          addIndent1(that1.generateStatement(stmt1, flags1))
                      ];
                  });
                  return result1;
              };
              CodeGenerator1.prototype.maybeBlockSuffix = function(stmt1, result1) {
                  var ends1 = endsWithLineTerminator1(toSourceNodeWhenNeeded1(result1).toString());
                  if (stmt1.type === Syntax1.BlockStatement && (!extra1.comment || !stmt1.leadingComments) && !ends1) return [
                      result1,
                      space1
                  ];
                  if (ends1) return [
                      result1,
                      base1
                  ];
                  return [
                      result1,
                      newline1,
                      base1
                  ];
              };
              function generateIdentifier1(node1) {
                  return toSourceNodeWhenNeeded1(node1.name, node1);
              }
              function generateAsyncPrefix1(node1, spaceRequired1) {
                  return node1.async ? "async" + (spaceRequired1 ? noEmptySpace1() : space1) : "";
              }
              function generateStarSuffix1(node1) {
                  var isGenerator1 = node1.generator && !extra1.moz.starlessGenerator;
                  return isGenerator1 ? "*" + space1 : "";
              }
              function generateMethodPrefix1(prop1) {
                  var func1 = prop1.value, prefix1 = "";
                  if (func1.async) prefix1 += generateAsyncPrefix1(func1, !prop1.computed);
                  if (func1.generator) // avoid space before method name
                  prefix1 += generateStarSuffix1(func1) ? "*" : "";
                  return prefix1;
              }
              CodeGenerator1.prototype.generatePattern = function(node1, precedence1, flags1) {
                  if (node1.type === Syntax1.Identifier) return generateIdentifier1(node1);
                  return this.generateExpression(node1, precedence1, flags1);
              };
              CodeGenerator1.prototype.generateFunctionParams = function(node1) {
                  var i3, iz1, result1, hasDefault1;
                  hasDefault1 = false;
                  if (node1.type === Syntax1.ArrowFunctionExpression && !node1.rest && (!node1.defaults || node1.defaults.length === 0) && node1.params.length === 1 && node1.params[0].type === Syntax1.Identifier) // arg => { } case
                  result1 = [
                      generateAsyncPrefix1(node1, true),
                      generateIdentifier1(node1.params[0])
                  ];
                  else {
                      result1 = node1.type === Syntax1.ArrowFunctionExpression ? [
                          generateAsyncPrefix1(node1, false)
                      ] : [];
                      result1.push("(");
                      if (node1.defaults) hasDefault1 = true;
                      for(i3 = 0, iz1 = node1.params.length; i3 < iz1; ++i3){
                          if (hasDefault1 && node1.defaults[i3]) // Handle default values.
                          result1.push(this.generateAssignment(node1.params[i3], node1.defaults[i3], "=", Precedence1.Assignment, E_TTT1));
                          else result1.push(this.generatePattern(node1.params[i3], Precedence1.Assignment, E_TTT1));
                          if (i3 + 1 < iz1) result1.push("," + space1);
                      }
                      if (node1.rest) {
                          if (node1.params.length) result1.push("," + space1);
                          result1.push("...");
                          result1.push(generateIdentifier1(node1.rest));
                      }
                      result1.push(")");
                  }
                  return result1;
              };
              CodeGenerator1.prototype.generateFunctionBody = function(node1) {
                  var result1, expr1;
                  result1 = this.generateFunctionParams(node1);
                  if (node1.type === Syntax1.ArrowFunctionExpression) {
                      result1.push(space1);
                      result1.push("=>");
                  }
                  if (node1.expression) {
                      result1.push(space1);
                      expr1 = this.generateExpression(node1.body, Precedence1.Assignment, E_TTT1);
                      if (expr1.toString().charAt(0) === "{") expr1 = [
                          "(",
                          expr1,
                          ")"
                      ];
                      result1.push(expr1);
                  } else result1.push(this.maybeBlock(node1.body, S_TTFF1));
                  return result1;
              };
              CodeGenerator1.prototype.generateIterationForStatement = function(operator1, stmt1, flags1) {
                  var result1 = [
                      "for" + (stmt1.await ? noEmptySpace1() + "await" : "") + space1 + "("
                  ], that1 = this;
                  withIndent1(function() {
                      if (stmt1.left.type === Syntax1.VariableDeclaration) withIndent1(function() {
                          result1.push(stmt1.left.kind + noEmptySpace1());
                          result1.push(that1.generateStatement(stmt1.left.declarations[0], S_FFFF1));
                      });
                      else result1.push(that1.generateExpression(stmt1.left, Precedence1.Call, E_TTT1));
                      result1 = join1(result1, operator1);
                      result1 = [
                          join1(result1, that1.generateExpression(stmt1.right, Precedence1.Assignment, E_TTT1)),
                          ")"
                      ];
                  });
                  result1.push(this.maybeBlock(stmt1.body, flags1));
                  return result1;
              };
              CodeGenerator1.prototype.generatePropertyKey = function(expr1, computed1) {
                  var result1 = [];
                  if (computed1) result1.push("[");
                  result1.push(this.generateExpression(expr1, Precedence1.Assignment, E_TTT1));
                  if (computed1) result1.push("]");
                  return result1;
              };
              CodeGenerator1.prototype.generateAssignment = function(left1, right1, operator1, precedence1, flags1) {
                  if (Precedence1.Assignment < precedence1) flags1 |= F_ALLOW_IN1;
                  return parenthesize1([
                      this.generateExpression(left1, Precedence1.Call, flags1),
                      space1 + operator1 + space1,
                      this.generateExpression(right1, Precedence1.Assignment, flags1)
                  ], Precedence1.Assignment, precedence1);
              };
              CodeGenerator1.prototype.semicolon = function(flags1) {
                  if (!semicolons1 && flags1 & F_SEMICOLON_OPT1) return "";
                  return ";";
              };
              // Statements.
              CodeGenerator1.Statement = {
                  BlockStatement: function(stmt1, flags1) {
                      var range1, content1, result1 = [
                          "{",
                          newline1
                      ], that1 = this;
                      withIndent1(function() {
                          // handle functions without any code
                          if (stmt1.body.length === 0 && preserveBlankLines1) {
                              range1 = stmt1.range;
                              if (range1[1] - range1[0] > 2) {
                                  content1 = sourceCode1.substring(range1[0] + 1, range1[1] - 1);
                                  if (content1[0] === "\n") result1 = [
                                      "{"
                                  ];
                                  result1.push(content1);
                              }
                          }
                          var i3, iz1, fragment1, bodyFlags1;
                          bodyFlags1 = S_TFFF1;
                          if (flags1 & F_FUNC_BODY1) bodyFlags1 |= F_DIRECTIVE_CTX1;
                          for(i3 = 0, iz1 = stmt1.body.length; i3 < iz1; ++i3){
                              if (preserveBlankLines1) {
                                  // handle spaces before the first line
                                  if (i3 === 0) {
                                      if (stmt1.body[0].leadingComments) {
                                          range1 = stmt1.body[0].leadingComments[0].extendedRange;
                                          content1 = sourceCode1.substring(range1[0], range1[1]);
                                          if (content1[0] === "\n") result1 = [
                                              "{"
                                          ];
                                      }
                                      if (!stmt1.body[0].leadingComments) generateBlankLines1(stmt1.range[0], stmt1.body[0].range[0], result1);
                                  }
                                  // handle spaces between lines
                                  if (i3 > 0) {
                                      if (!stmt1.body[i3 - 1].trailingComments && !stmt1.body[i3].leadingComments) generateBlankLines1(stmt1.body[i3 - 1].range[1], stmt1.body[i3].range[0], result1);
                                  }
                              }
                              if (i3 === iz1 - 1) bodyFlags1 |= F_SEMICOLON_OPT1;
                              if (stmt1.body[i3].leadingComments && preserveBlankLines1) fragment1 = that1.generateStatement(stmt1.body[i3], bodyFlags1);
                              else fragment1 = addIndent1(that1.generateStatement(stmt1.body[i3], bodyFlags1));
                              result1.push(fragment1);
                              if (!endsWithLineTerminator1(toSourceNodeWhenNeeded1(fragment1).toString())) {
                                  if (preserveBlankLines1 && i3 < iz1 - 1) // don't add a new line if there are leading coments
                                  // in the next statement
                                  {
                                      if (!stmt1.body[i3 + 1].leadingComments) result1.push(newline1);
                                  } else result1.push(newline1);
                              }
                              if (preserveBlankLines1) {
                                  // handle spaces after the last line
                                  if (i3 === iz1 - 1) {
                                      if (!stmt1.body[i3].trailingComments) generateBlankLines1(stmt1.body[i3].range[1], stmt1.range[1], result1);
                                  }
                              }
                          }
                      });
                      result1.push(addIndent1("}"));
                      return result1;
                  },
                  BreakStatement: function(stmt1, flags1) {
                      if (stmt1.label) return "break " + stmt1.label.name + this.semicolon(flags1);
                      return "break" + this.semicolon(flags1);
                  },
                  ContinueStatement: function(stmt1, flags1) {
                      if (stmt1.label) return "continue " + stmt1.label.name + this.semicolon(flags1);
                      return "continue" + this.semicolon(flags1);
                  },
                  ClassBody: function(stmt1, flags1) {
                      var result1 = [
                          "{",
                          newline1
                      ], that1 = this;
                      withIndent1(function(indent1) {
                          var i3, iz1;
                          for(i3 = 0, iz1 = stmt1.body.length; i3 < iz1; ++i3){
                              result1.push(indent1);
                              result1.push(that1.generateExpression(stmt1.body[i3], Precedence1.Sequence, E_TTT1));
                              if (i3 + 1 < iz1) result1.push(newline1);
                          }
                      });
                      if (!endsWithLineTerminator1(toSourceNodeWhenNeeded1(result1).toString())) result1.push(newline1);
                      result1.push(base1);
                      result1.push("}");
                      return result1;
                  },
                  ClassDeclaration: function(stmt1, flags1) {
                      var result1, fragment1;
                      result1 = [
                          "class"
                      ];
                      if (stmt1.id) result1 = join1(result1, this.generateExpression(stmt1.id, Precedence1.Sequence, E_TTT1));
                      if (stmt1.superClass) {
                          fragment1 = join1("extends", this.generateExpression(stmt1.superClass, Precedence1.Unary, E_TTT1));
                          result1 = join1(result1, fragment1);
                      }
                      result1.push(space1);
                      result1.push(this.generateStatement(stmt1.body, S_TFFT1));
                      return result1;
                  },
                  DirectiveStatement: function(stmt1, flags1) {
                      if (extra1.raw && stmt1.raw) return stmt1.raw + this.semicolon(flags1);
                      return escapeDirective1(stmt1.directive) + this.semicolon(flags1);
                  },
                  DoWhileStatement: function(stmt1, flags1) {
                      // Because `do 42 while (cond)` is Syntax Error. We need semicolon.
                      var result1 = join1("do", this.maybeBlock(stmt1.body, S_TFFF1));
                      result1 = this.maybeBlockSuffix(stmt1.body, result1);
                      return join1(result1, [
                          "while" + space1 + "(",
                          this.generateExpression(stmt1.test, Precedence1.Sequence, E_TTT1),
                          ")" + this.semicolon(flags1)
                      ]);
                  },
                  CatchClause: function(stmt1, flags1) {
                      var result1, that1 = this;
                      withIndent1(function() {
                          var guard1;
                          if (stmt1.param) {
                              result1 = [
                                  "catch" + space1 + "(",
                                  that1.generateExpression(stmt1.param, Precedence1.Sequence, E_TTT1),
                                  ")"
                              ];
                              if (stmt1.guard) {
                                  guard1 = that1.generateExpression(stmt1.guard, Precedence1.Sequence, E_TTT1);
                                  result1.splice(2, 0, " if ", guard1);
                              }
                          } else result1 = [
                              "catch"
                          ];
                      });
                      result1.push(this.maybeBlock(stmt1.body, S_TFFF1));
                      return result1;
                  },
                  DebuggerStatement: function(stmt1, flags1) {
                      return "debugger" + this.semicolon(flags1);
                  },
                  EmptyStatement: function(stmt1, flags1) {
                      return ";";
                  },
                  ExportDefaultDeclaration: function(stmt1, flags1) {
                      var result1 = [
                          "export"
                      ], bodyFlags1;
                      bodyFlags1 = flags1 & F_SEMICOLON_OPT1 ? S_TFFT1 : S_TFFF1;
                      // export default HoistableDeclaration[Default]
                      // export default AssignmentExpression[In] ;
                      result1 = join1(result1, "default");
                      if (isStatement1(stmt1.declaration)) result1 = join1(result1, this.generateStatement(stmt1.declaration, bodyFlags1));
                      else result1 = join1(result1, this.generateExpression(stmt1.declaration, Precedence1.Assignment, E_TTT1) + this.semicolon(flags1));
                      return result1;
                  },
                  ExportNamedDeclaration: function(stmt1, flags1) {
                      var result1 = [
                          "export"
                      ], bodyFlags1, that1 = this;
                      bodyFlags1 = flags1 & F_SEMICOLON_OPT1 ? S_TFFT1 : S_TFFF1;
                      // export VariableStatement
                      // export Declaration[Default]
                      if (stmt1.declaration) return join1(result1, this.generateStatement(stmt1.declaration, bodyFlags1));
                      // export ExportClause[NoReference] FromClause ;
                      // export ExportClause ;
                      if (stmt1.specifiers) {
                          if (stmt1.specifiers.length === 0) result1 = join1(result1, "{" + space1 + "}");
                          else if (stmt1.specifiers[0].type === Syntax1.ExportBatchSpecifier) result1 = join1(result1, this.generateExpression(stmt1.specifiers[0], Precedence1.Sequence, E_TTT1));
                          else {
                              result1 = join1(result1, "{");
                              withIndent1(function(indent1) {
                                  var i3, iz1;
                                  result1.push(newline1);
                                  for(i3 = 0, iz1 = stmt1.specifiers.length; i3 < iz1; ++i3){
                                      result1.push(indent1);
                                      result1.push(that1.generateExpression(stmt1.specifiers[i3], Precedence1.Sequence, E_TTT1));
                                      if (i3 + 1 < iz1) result1.push("," + newline1);
                                  }
                              });
                              if (!endsWithLineTerminator1(toSourceNodeWhenNeeded1(result1).toString())) result1.push(newline1);
                              result1.push(base1 + "}");
                          }
                          if (stmt1.source) result1 = join1(result1, [
                              "from" + space1,
                              // ModuleSpecifier
                              this.generateExpression(stmt1.source, Precedence1.Sequence, E_TTT1),
                              this.semicolon(flags1)
                          ]);
                          else result1.push(this.semicolon(flags1));
                      }
                      return result1;
                  },
                  ExportAllDeclaration: function(stmt1, flags1) {
                      // export * FromClause ;
                      return [
                          "export" + space1,
                          "*" + space1,
                          "from" + space1,
                          // ModuleSpecifier
                          this.generateExpression(stmt1.source, Precedence1.Sequence, E_TTT1),
                          this.semicolon(flags1)
                      ];
                  },
                  ExpressionStatement: function(stmt1, flags1) {
                      var result1, fragment1;
                      function isClassPrefixed1(fragment1) {
                          var code1;
                          if (fragment1.slice(0, 5) !== "class") return false;
                          code1 = fragment1.charCodeAt(5);
                          return code1 === 0x7B /* '{' */  || esutils1.code.isWhiteSpace(code1) || esutils1.code.isLineTerminator(code1);
                      }
                      function isFunctionPrefixed1(fragment1) {
                          var code1;
                          if (fragment1.slice(0, 8) !== "function") return false;
                          code1 = fragment1.charCodeAt(8);
                          return code1 === 0x28 /* '(' */  || esutils1.code.isWhiteSpace(code1) || code1 === 0x2A /* '*' */  || esutils1.code.isLineTerminator(code1);
                      }
                      function isAsyncPrefixed1(fragment1) {
                          var code1, i3, iz1;
                          if (fragment1.slice(0, 5) !== "async") return false;
                          if (!esutils1.code.isWhiteSpace(fragment1.charCodeAt(5))) return false;
                          for(i3 = 6, iz1 = fragment1.length; i3 < iz1; ++i3){
                              if (!esutils1.code.isWhiteSpace(fragment1.charCodeAt(i3))) break;
                          }
                          if (i3 === iz1) return false;
                          if (fragment1.slice(i3, i3 + 8) !== "function") return false;
                          code1 = fragment1.charCodeAt(i3 + 8);
                          return code1 === 0x28 /* '(' */  || esutils1.code.isWhiteSpace(code1) || code1 === 0x2A /* '*' */  || esutils1.code.isLineTerminator(code1);
                      }
                      result1 = [
                          this.generateExpression(stmt1.expression, Precedence1.Sequence, E_TTT1)
                      ];
                      // 12.4 '{', 'function', 'class' is not allowed in this position.
                      // wrap expression with parentheses
                      fragment1 = toSourceNodeWhenNeeded1(result1).toString();
                      if (fragment1.charCodeAt(0) === 0x7B /* '{' */  || // ObjectExpression
                      isClassPrefixed1(fragment1) || isFunctionPrefixed1(fragment1) || isAsyncPrefixed1(fragment1) || directive1 && flags1 & F_DIRECTIVE_CTX1 && stmt1.expression.type === Syntax1.Literal && typeof stmt1.expression.value === "string") result1 = [
                          "(",
                          result1,
                          ")" + this.semicolon(flags1)
                      ];
                      else result1.push(this.semicolon(flags1));
                      return result1;
                  },
                  ImportDeclaration: function(stmt1, flags1) {
                      // ES6: 15.2.1 valid import declarations:
                      //     - import ImportClause FromClause ;
                      //     - import ModuleSpecifier ;
                      var result1, cursor1, that1 = this;
                      // If no ImportClause is present,
                      // this should be `import ModuleSpecifier` so skip `from`
                      // ModuleSpecifier is StringLiteral.
                      if (stmt1.specifiers.length === 0) // import ModuleSpecifier ;
                      return [
                          "import",
                          space1,
                          // ModuleSpecifier
                          this.generateExpression(stmt1.source, Precedence1.Sequence, E_TTT1),
                          this.semicolon(flags1)
                      ];
                      // import ImportClause FromClause ;
                      result1 = [
                          "import"
                      ];
                      cursor1 = 0;
                      // ImportedBinding
                      if (stmt1.specifiers[cursor1].type === Syntax1.ImportDefaultSpecifier) {
                          result1 = join1(result1, [
                              this.generateExpression(stmt1.specifiers[cursor1], Precedence1.Sequence, E_TTT1)
                          ]);
                          ++cursor1;
                      }
                      if (stmt1.specifiers[cursor1]) {
                          if (cursor1 !== 0) result1.push(",");
                          if (stmt1.specifiers[cursor1].type === Syntax1.ImportNamespaceSpecifier) // NameSpaceImport
                          result1 = join1(result1, [
                              space1,
                              this.generateExpression(stmt1.specifiers[cursor1], Precedence1.Sequence, E_TTT1)
                          ]);
                          else {
                              // NamedImports
                              result1.push(space1 + "{");
                              if (stmt1.specifiers.length - cursor1 === 1) {
                                  // import { ... } from "...";
                                  result1.push(space1);
                                  result1.push(this.generateExpression(stmt1.specifiers[cursor1], Precedence1.Sequence, E_TTT1));
                                  result1.push(space1 + "}" + space1);
                              } else {
                                  // import {
                                  //    ...,
                                  //    ...,
                                  // } from "...";
                                  withIndent1(function(indent1) {
                                      var i3, iz1;
                                      result1.push(newline1);
                                      for(i3 = cursor1, iz1 = stmt1.specifiers.length; i3 < iz1; ++i3){
                                          result1.push(indent1);
                                          result1.push(that1.generateExpression(stmt1.specifiers[i3], Precedence1.Sequence, E_TTT1));
                                          if (i3 + 1 < iz1) result1.push("," + newline1);
                                      }
                                  });
                                  if (!endsWithLineTerminator1(toSourceNodeWhenNeeded1(result1).toString())) result1.push(newline1);
                                  result1.push(base1 + "}" + space1);
                              }
                          }
                      }
                      result1 = join1(result1, [
                          "from" + space1,
                          // ModuleSpecifier
                          this.generateExpression(stmt1.source, Precedence1.Sequence, E_TTT1),
                          this.semicolon(flags1)
                      ]);
                      return result1;
                  },
                  VariableDeclarator: function(stmt1, flags1) {
                      var itemFlags1 = flags1 & F_ALLOW_IN1 ? E_TTT1 : E_FTT1;
                      if (stmt1.init) return [
                          this.generateExpression(stmt1.id, Precedence1.Assignment, itemFlags1),
                          space1,
                          "=",
                          space1,
                          this.generateExpression(stmt1.init, Precedence1.Assignment, itemFlags1)
                      ];
                      return this.generatePattern(stmt1.id, Precedence1.Assignment, itemFlags1);
                  },
                  VariableDeclaration: function(stmt1, flags1) {
                      // VariableDeclarator is typed as Statement,
                      // but joined with comma (not LineTerminator).
                      // So if comment is attached to target node, we should specialize.
                      var result1, i3, iz1, node1, bodyFlags1, that1 = this;
                      result1 = [
                          stmt1.kind
                      ];
                      bodyFlags1 = flags1 & F_ALLOW_IN1 ? S_TFFF1 : S_FFFF1;
                      function block1() {
                          node1 = stmt1.declarations[0];
                          if (extra1.comment && node1.leadingComments) {
                              result1.push("\n");
                              result1.push(addIndent1(that1.generateStatement(node1, bodyFlags1)));
                          } else {
                              result1.push(noEmptySpace1());
                              result1.push(that1.generateStatement(node1, bodyFlags1));
                          }
                          for(i3 = 1, iz1 = stmt1.declarations.length; i3 < iz1; ++i3){
                              node1 = stmt1.declarations[i3];
                              if (extra1.comment && node1.leadingComments) {
                                  result1.push("," + newline1);
                                  result1.push(addIndent1(that1.generateStatement(node1, bodyFlags1)));
                              } else {
                                  result1.push("," + space1);
                                  result1.push(that1.generateStatement(node1, bodyFlags1));
                              }
                          }
                      }
                      if (stmt1.declarations.length > 1) withIndent1(block1);
                      else block1();
                      result1.push(this.semicolon(flags1));
                      return result1;
                  },
                  ThrowStatement: function(stmt1, flags1) {
                      return [
                          join1("throw", this.generateExpression(stmt1.argument, Precedence1.Sequence, E_TTT1)),
                          this.semicolon(flags1)
                      ];
                  },
                  TryStatement: function(stmt1, flags1) {
                      var result1, i3, iz1, guardedHandlers1;
                      result1 = [
                          "try",
                          this.maybeBlock(stmt1.block, S_TFFF1)
                      ];
                      result1 = this.maybeBlockSuffix(stmt1.block, result1);
                      if (stmt1.handlers) // old interface
                      for(i3 = 0, iz1 = stmt1.handlers.length; i3 < iz1; ++i3){
                          result1 = join1(result1, this.generateStatement(stmt1.handlers[i3], S_TFFF1));
                          if (stmt1.finalizer || i3 + 1 !== iz1) result1 = this.maybeBlockSuffix(stmt1.handlers[i3].body, result1);
                      }
                      else {
                          guardedHandlers1 = stmt1.guardedHandlers || [];
                          for(i3 = 0, iz1 = guardedHandlers1.length; i3 < iz1; ++i3){
                              result1 = join1(result1, this.generateStatement(guardedHandlers1[i3], S_TFFF1));
                              if (stmt1.finalizer || i3 + 1 !== iz1) result1 = this.maybeBlockSuffix(guardedHandlers1[i3].body, result1);
                          }
                          // new interface
                          if (stmt1.handler) {
                              if (Array.isArray(stmt1.handler)) for(i3 = 0, iz1 = stmt1.handler.length; i3 < iz1; ++i3){
                                  result1 = join1(result1, this.generateStatement(stmt1.handler[i3], S_TFFF1));
                                  if (stmt1.finalizer || i3 + 1 !== iz1) result1 = this.maybeBlockSuffix(stmt1.handler[i3].body, result1);
                              }
                              else {
                                  result1 = join1(result1, this.generateStatement(stmt1.handler, S_TFFF1));
                                  if (stmt1.finalizer) result1 = this.maybeBlockSuffix(stmt1.handler.body, result1);
                              }
                          }
                      }
                      if (stmt1.finalizer) result1 = join1(result1, [
                          "finally",
                          this.maybeBlock(stmt1.finalizer, S_TFFF1)
                      ]);
                      return result1;
                  },
                  SwitchStatement: function(stmt1, flags1) {
                      var result1, fragment1, i3, iz1, bodyFlags1, that1 = this;
                      withIndent1(function() {
                          result1 = [
                              "switch" + space1 + "(",
                              that1.generateExpression(stmt1.discriminant, Precedence1.Sequence, E_TTT1),
                              ")" + space1 + "{" + newline1
                          ];
                      });
                      if (stmt1.cases) {
                          bodyFlags1 = S_TFFF1;
                          for(i3 = 0, iz1 = stmt1.cases.length; i3 < iz1; ++i3){
                              if (i3 === iz1 - 1) bodyFlags1 |= F_SEMICOLON_OPT1;
                              fragment1 = addIndent1(this.generateStatement(stmt1.cases[i3], bodyFlags1));
                              result1.push(fragment1);
                              if (!endsWithLineTerminator1(toSourceNodeWhenNeeded1(fragment1).toString())) result1.push(newline1);
                          }
                      }
                      result1.push(addIndent1("}"));
                      return result1;
                  },
                  SwitchCase: function(stmt1, flags1) {
                      var result1, fragment1, i3, iz1, bodyFlags1, that1 = this;
                      withIndent1(function() {
                          if (stmt1.test) result1 = [
                              join1("case", that1.generateExpression(stmt1.test, Precedence1.Sequence, E_TTT1)),
                              ":"
                          ];
                          else result1 = [
                              "default:"
                          ];
                          i3 = 0;
                          iz1 = stmt1.consequent.length;
                          if (iz1 && stmt1.consequent[0].type === Syntax1.BlockStatement) {
                              fragment1 = that1.maybeBlock(stmt1.consequent[0], S_TFFF1);
                              result1.push(fragment1);
                              i3 = 1;
                          }
                          if (i3 !== iz1 && !endsWithLineTerminator1(toSourceNodeWhenNeeded1(result1).toString())) result1.push(newline1);
                          bodyFlags1 = S_TFFF1;
                          for(; i3 < iz1; ++i3){
                              if (i3 === iz1 - 1 && flags1 & F_SEMICOLON_OPT1) bodyFlags1 |= F_SEMICOLON_OPT1;
                              fragment1 = addIndent1(that1.generateStatement(stmt1.consequent[i3], bodyFlags1));
                              result1.push(fragment1);
                              if (i3 + 1 !== iz1 && !endsWithLineTerminator1(toSourceNodeWhenNeeded1(fragment1).toString())) result1.push(newline1);
                          }
                      });
                      return result1;
                  },
                  IfStatement: function(stmt1, flags1) {
                      var result1, bodyFlags1, semicolonOptional1, that1 = this;
                      withIndent1(function() {
                          result1 = [
                              "if" + space1 + "(",
                              that1.generateExpression(stmt1.test, Precedence1.Sequence, E_TTT1),
                              ")"
                          ];
                      });
                      semicolonOptional1 = flags1 & F_SEMICOLON_OPT1;
                      bodyFlags1 = S_TFFF1;
                      if (semicolonOptional1) bodyFlags1 |= F_SEMICOLON_OPT1;
                      if (stmt1.alternate) {
                          result1.push(this.maybeBlock(stmt1.consequent, S_TFFF1));
                          result1 = this.maybeBlockSuffix(stmt1.consequent, result1);
                          if (stmt1.alternate.type === Syntax1.IfStatement) result1 = join1(result1, [
                              "else ",
                              this.generateStatement(stmt1.alternate, bodyFlags1)
                          ]);
                          else result1 = join1(result1, join1("else", this.maybeBlock(stmt1.alternate, bodyFlags1)));
                      } else result1.push(this.maybeBlock(stmt1.consequent, bodyFlags1));
                      return result1;
                  },
                  ForStatement: function(stmt1, flags1) {
                      var result1, that1 = this;
                      withIndent1(function() {
                          result1 = [
                              "for" + space1 + "("
                          ];
                          if (stmt1.init) {
                              if (stmt1.init.type === Syntax1.VariableDeclaration) result1.push(that1.generateStatement(stmt1.init, S_FFFF1));
                              else {
                                  // F_ALLOW_IN becomes false.
                                  result1.push(that1.generateExpression(stmt1.init, Precedence1.Sequence, E_FTT1));
                                  result1.push(";");
                              }
                          } else result1.push(";");
                          if (stmt1.test) {
                              result1.push(space1);
                              result1.push(that1.generateExpression(stmt1.test, Precedence1.Sequence, E_TTT1));
                              result1.push(";");
                          } else result1.push(";");
                          if (stmt1.update) {
                              result1.push(space1);
                              result1.push(that1.generateExpression(stmt1.update, Precedence1.Sequence, E_TTT1));
                              result1.push(")");
                          } else result1.push(")");
                      });
                      result1.push(this.maybeBlock(stmt1.body, flags1 & F_SEMICOLON_OPT1 ? S_TFFT1 : S_TFFF1));
                      return result1;
                  },
                  ForInStatement: function(stmt1, flags1) {
                      return this.generateIterationForStatement("in", stmt1, flags1 & F_SEMICOLON_OPT1 ? S_TFFT1 : S_TFFF1);
                  },
                  ForOfStatement: function(stmt1, flags1) {
                      return this.generateIterationForStatement("of", stmt1, flags1 & F_SEMICOLON_OPT1 ? S_TFFT1 : S_TFFF1);
                  },
                  LabeledStatement: function(stmt1, flags1) {
                      return [
                          stmt1.label.name + ":",
                          this.maybeBlock(stmt1.body, flags1 & F_SEMICOLON_OPT1 ? S_TFFT1 : S_TFFF1)
                      ];
                  },
                  Program: function(stmt1, flags1) {
                      var result1, fragment1, i3, iz1, bodyFlags1;
                      iz1 = stmt1.body.length;
                      result1 = [
                          safeConcatenation1 && iz1 > 0 ? "\n" : ""
                      ];
                      bodyFlags1 = S_TFTF1;
                      for(i3 = 0; i3 < iz1; ++i3){
                          if (!safeConcatenation1 && i3 === iz1 - 1) bodyFlags1 |= F_SEMICOLON_OPT1;
                          if (preserveBlankLines1) {
                              // handle spaces before the first line
                              if (i3 === 0) {
                                  if (!stmt1.body[0].leadingComments) generateBlankLines1(stmt1.range[0], stmt1.body[i3].range[0], result1);
                              }
                              // handle spaces between lines
                              if (i3 > 0) {
                                  if (!stmt1.body[i3 - 1].trailingComments && !stmt1.body[i3].leadingComments) generateBlankLines1(stmt1.body[i3 - 1].range[1], stmt1.body[i3].range[0], result1);
                              }
                          }
                          fragment1 = addIndent1(this.generateStatement(stmt1.body[i3], bodyFlags1));
                          result1.push(fragment1);
                          if (i3 + 1 < iz1 && !endsWithLineTerminator1(toSourceNodeWhenNeeded1(fragment1).toString())) {
                              if (preserveBlankLines1) {
                                  if (!stmt1.body[i3 + 1].leadingComments) result1.push(newline1);
                              } else result1.push(newline1);
                          }
                          if (preserveBlankLines1) {
                              // handle spaces after the last line
                              if (i3 === iz1 - 1) {
                                  if (!stmt1.body[i3].trailingComments) generateBlankLines1(stmt1.body[i3].range[1], stmt1.range[1], result1);
                              }
                          }
                      }
                      return result1;
                  },
                  FunctionDeclaration: function(stmt1, flags1) {
                      return [
                          generateAsyncPrefix1(stmt1, true),
                          "function",
                          generateStarSuffix1(stmt1) || noEmptySpace1(),
                          stmt1.id ? generateIdentifier1(stmt1.id) : "",
                          this.generateFunctionBody(stmt1)
                      ];
                  },
                  ReturnStatement: function(stmt1, flags1) {
                      if (stmt1.argument) return [
                          join1("return", this.generateExpression(stmt1.argument, Precedence1.Sequence, E_TTT1)),
                          this.semicolon(flags1)
                      ];
                      return [
                          "return" + this.semicolon(flags1)
                      ];
                  },
                  WhileStatement: function(stmt1, flags1) {
                      var result1, that1 = this;
                      withIndent1(function() {
                          result1 = [
                              "while" + space1 + "(",
                              that1.generateExpression(stmt1.test, Precedence1.Sequence, E_TTT1),
                              ")"
                          ];
                      });
                      result1.push(this.maybeBlock(stmt1.body, flags1 & F_SEMICOLON_OPT1 ? S_TFFT1 : S_TFFF1));
                      return result1;
                  },
                  WithStatement: function(stmt1, flags1) {
                      var result1, that1 = this;
                      withIndent1(function() {
                          result1 = [
                              "with" + space1 + "(",
                              that1.generateExpression(stmt1.object, Precedence1.Sequence, E_TTT1),
                              ")"
                          ];
                      });
                      result1.push(this.maybeBlock(stmt1.body, flags1 & F_SEMICOLON_OPT1 ? S_TFFT1 : S_TFFF1));
                      return result1;
                  }
              };
              merge1(CodeGenerator1.prototype, CodeGenerator1.Statement);
              // Expressions.
              CodeGenerator1.Expression = {
                  SequenceExpression: function(expr1, precedence1, flags1) {
                      var result1, i3, iz1;
                      if (Precedence1.Sequence < precedence1) flags1 |= F_ALLOW_IN1;
                      result1 = [];
                      for(i3 = 0, iz1 = expr1.expressions.length; i3 < iz1; ++i3){
                          result1.push(this.generateExpression(expr1.expressions[i3], Precedence1.Assignment, flags1));
                          if (i3 + 1 < iz1) result1.push("," + space1);
                      }
                      return parenthesize1(result1, Precedence1.Sequence, precedence1);
                  },
                  AssignmentExpression: function(expr1, precedence1, flags1) {
                      return this.generateAssignment(expr1.left, expr1.right, expr1.operator, precedence1, flags1);
                  },
                  ArrowFunctionExpression: function(expr1, precedence1, flags1) {
                      return parenthesize1(this.generateFunctionBody(expr1), Precedence1.ArrowFunction, precedence1);
                  },
                  ConditionalExpression: function(expr1, precedence1, flags1) {
                      if (Precedence1.Conditional < precedence1) flags1 |= F_ALLOW_IN1;
                      return parenthesize1([
                          this.generateExpression(expr1.test, Precedence1.LogicalOR, flags1),
                          space1 + "?" + space1,
                          this.generateExpression(expr1.consequent, Precedence1.Assignment, flags1),
                          space1 + ":" + space1,
                          this.generateExpression(expr1.alternate, Precedence1.Assignment, flags1)
                      ], Precedence1.Conditional, precedence1);
                  },
                  LogicalExpression: function(expr1, precedence1, flags1) {
                      return this.BinaryExpression(expr1, precedence1, flags1);
                  },
                  BinaryExpression: function(expr1, precedence1, flags1) {
                      var result1, leftPrecedence1, rightPrecedence1, currentPrecedence1, fragment1, leftSource1;
                      currentPrecedence1 = BinaryPrecedence1[expr1.operator];
                      leftPrecedence1 = expr1.operator === "**" ? Precedence1.Postfix : currentPrecedence1;
                      rightPrecedence1 = expr1.operator === "**" ? currentPrecedence1 : currentPrecedence1 + 1;
                      if (currentPrecedence1 < precedence1) flags1 |= F_ALLOW_IN1;
                      fragment1 = this.generateExpression(expr1.left, leftPrecedence1, flags1);
                      leftSource1 = fragment1.toString();
                      if (leftSource1.charCodeAt(leftSource1.length - 1) === 0x2F /* / */  && esutils1.code.isIdentifierPartES5(expr1.operator.charCodeAt(0))) result1 = [
                          fragment1,
                          noEmptySpace1(),
                          expr1.operator
                      ];
                      else result1 = join1(fragment1, expr1.operator);
                      fragment1 = this.generateExpression(expr1.right, rightPrecedence1, flags1);
                      if (expr1.operator === "/" && fragment1.toString().charAt(0) === "/" || expr1.operator.slice(-1) === "<" && fragment1.toString().slice(0, 3) === "!--") {
                          // If '/' concats with '/' or `<` concats with `!--`, it is interpreted as comment start
                          result1.push(noEmptySpace1());
                          result1.push(fragment1);
                      } else result1 = join1(result1, fragment1);
                      if (expr1.operator === "in" && !(flags1 & F_ALLOW_IN1)) return [
                          "(",
                          result1,
                          ")"
                      ];
                      return parenthesize1(result1, currentPrecedence1, precedence1);
                  },
                  CallExpression: function(expr1, precedence1, flags1) {
                      var result1, i3, iz1;
                      // F_ALLOW_UNPARATH_NEW becomes false.
                      result1 = [
                          this.generateExpression(expr1.callee, Precedence1.Call, E_TTF1)
                      ];
                      result1.push("(");
                      for(i3 = 0, iz1 = expr1["arguments"].length; i3 < iz1; ++i3){
                          result1.push(this.generateExpression(expr1["arguments"][i3], Precedence1.Assignment, E_TTT1));
                          if (i3 + 1 < iz1) result1.push("," + space1);
                      }
                      result1.push(")");
                      if (!(flags1 & F_ALLOW_CALL1)) return [
                          "(",
                          result1,
                          ")"
                      ];
                      return parenthesize1(result1, Precedence1.Call, precedence1);
                  },
                  NewExpression: function(expr1, precedence1, flags1) {
                      var result1, length1, i3, iz1, itemFlags1;
                      length1 = expr1["arguments"].length;
                      // F_ALLOW_CALL becomes false.
                      // F_ALLOW_UNPARATH_NEW may become false.
                      itemFlags1 = flags1 & F_ALLOW_UNPARATH_NEW1 && !parentheses1 && length1 === 0 ? E_TFT1 : E_TFF1;
                      result1 = join1("new", this.generateExpression(expr1.callee, Precedence1.New, itemFlags1));
                      if (!(flags1 & F_ALLOW_UNPARATH_NEW1) || parentheses1 || length1 > 0) {
                          result1.push("(");
                          for(i3 = 0, iz1 = length1; i3 < iz1; ++i3){
                              result1.push(this.generateExpression(expr1["arguments"][i3], Precedence1.Assignment, E_TTT1));
                              if (i3 + 1 < iz1) result1.push("," + space1);
                          }
                          result1.push(")");
                      }
                      return parenthesize1(result1, Precedence1.New, precedence1);
                  },
                  MemberExpression: function(expr1, precedence1, flags1) {
                      var result1, fragment1;
                      // F_ALLOW_UNPARATH_NEW becomes false.
                      result1 = [
                          this.generateExpression(expr1.object, Precedence1.Call, flags1 & F_ALLOW_CALL1 ? E_TTF1 : E_TFF1)
                      ];
                      if (expr1.computed) {
                          result1.push("[");
                          result1.push(this.generateExpression(expr1.property, Precedence1.Sequence, flags1 & F_ALLOW_CALL1 ? E_TTT1 : E_TFT1));
                          result1.push("]");
                      } else {
                          if (expr1.object.type === Syntax1.Literal && typeof expr1.object.value === "number") {
                              fragment1 = toSourceNodeWhenNeeded1(result1).toString();
                              // When the following conditions are all true,
                              //   1. No floating point
                              //   2. Don't have exponents
                              //   3. The last character is a decimal digit
                              //   4. Not hexadecimal OR octal number literal
                              // we should add a floating point.
                              if (fragment1.indexOf(".") < 0 && !/[eExX]/.test(fragment1) && esutils1.code.isDecimalDigit(fragment1.charCodeAt(fragment1.length - 1)) && !(fragment1.length >= 2 && fragment1.charCodeAt(0) === 48 // '0'
                              )) result1.push(" ");
                          }
                          result1.push(".");
                          result1.push(generateIdentifier1(expr1.property));
                      }
                      return parenthesize1(result1, Precedence1.Member, precedence1);
                  },
                  MetaProperty: function(expr1, precedence1, flags1) {
                      var result1;
                      result1 = [];
                      result1.push(typeof expr1.meta === "string" ? expr1.meta : generateIdentifier1(expr1.meta));
                      result1.push(".");
                      result1.push(typeof expr1.property === "string" ? expr1.property : generateIdentifier1(expr1.property));
                      return parenthesize1(result1, Precedence1.Member, precedence1);
                  },
                  UnaryExpression: function(expr1, precedence1, flags1) {
                      var result1, fragment1, rightCharCode1, leftSource1, leftCharCode1;
                      fragment1 = this.generateExpression(expr1.argument, Precedence1.Unary, E_TTT1);
                      if (space1 === "") result1 = join1(expr1.operator, fragment1);
                      else {
                          result1 = [
                              expr1.operator
                          ];
                          if (expr1.operator.length > 2) // delete, void, typeof
                          // get `typeof []`, not `typeof[]`
                          result1 = join1(result1, fragment1);
                          else {
                              // Prevent inserting spaces between operator and argument if it is unnecessary
                              // like, `!cond`
                              leftSource1 = toSourceNodeWhenNeeded1(result1).toString();
                              leftCharCode1 = leftSource1.charCodeAt(leftSource1.length - 1);
                              rightCharCode1 = fragment1.toString().charCodeAt(0);
                              if ((leftCharCode1 === 0x2B /* + */  || leftCharCode1 === 0x2D /* - */ ) && leftCharCode1 === rightCharCode1 || esutils1.code.isIdentifierPartES5(leftCharCode1) && esutils1.code.isIdentifierPartES5(rightCharCode1)) {
                                  result1.push(noEmptySpace1());
                                  result1.push(fragment1);
                              } else result1.push(fragment1);
                          }
                      }
                      return parenthesize1(result1, Precedence1.Unary, precedence1);
                  },
                  YieldExpression: function(expr1, precedence1, flags1) {
                      var result1;
                      if (expr1.delegate) result1 = "yield*";
                      else result1 = "yield";
                      if (expr1.argument) result1 = join1(result1, this.generateExpression(expr1.argument, Precedence1.Yield, E_TTT1));
                      return parenthesize1(result1, Precedence1.Yield, precedence1);
                  },
                  AwaitExpression: function(expr1, precedence1, flags1) {
                      var result1 = join1(expr1.all ? "await*" : "await", this.generateExpression(expr1.argument, Precedence1.Await, E_TTT1));
                      return parenthesize1(result1, Precedence1.Await, precedence1);
                  },
                  UpdateExpression: function(expr1, precedence1, flags1) {
                      if (expr1.prefix) return parenthesize1([
                          expr1.operator,
                          this.generateExpression(expr1.argument, Precedence1.Unary, E_TTT1)
                      ], Precedence1.Unary, precedence1);
                      return parenthesize1([
                          this.generateExpression(expr1.argument, Precedence1.Postfix, E_TTT1),
                          expr1.operator
                      ], Precedence1.Postfix, precedence1);
                  },
                  FunctionExpression: function(expr1, precedence1, flags1) {
                      var result1 = [
                          generateAsyncPrefix1(expr1, true),
                          "function"
                      ];
                      if (expr1.id) {
                          result1.push(generateStarSuffix1(expr1) || noEmptySpace1());
                          result1.push(generateIdentifier1(expr1.id));
                      } else result1.push(generateStarSuffix1(expr1) || space1);
                      result1.push(this.generateFunctionBody(expr1));
                      return result1;
                  },
                  ArrayPattern: function(expr1, precedence1, flags1) {
                      return this.ArrayExpression(expr1, precedence1, flags1, true);
                  },
                  ArrayExpression: function(expr1, precedence1, flags1, isPattern1) {
                      var result1, multiline1, that1 = this;
                      if (!expr1.elements.length) return "[]";
                      multiline1 = isPattern1 ? false : expr1.elements.length > 1;
                      result1 = [
                          "[",
                          multiline1 ? newline1 : ""
                      ];
                      withIndent1(function(indent1) {
                          var i3, iz1;
                          for(i3 = 0, iz1 = expr1.elements.length; i3 < iz1; ++i3){
                              if (!expr1.elements[i3]) {
                                  if (multiline1) result1.push(indent1);
                                  if (i3 + 1 === iz1) result1.push(",");
                              } else {
                                  result1.push(multiline1 ? indent1 : "");
                                  result1.push(that1.generateExpression(expr1.elements[i3], Precedence1.Assignment, E_TTT1));
                              }
                              if (i3 + 1 < iz1) result1.push("," + (multiline1 ? newline1 : space1));
                          }
                      });
                      if (multiline1 && !endsWithLineTerminator1(toSourceNodeWhenNeeded1(result1).toString())) result1.push(newline1);
                      result1.push(multiline1 ? base1 : "");
                      result1.push("]");
                      return result1;
                  },
                  RestElement: function(expr1, precedence1, flags1) {
                      return "..." + this.generatePattern(expr1.argument);
                  },
                  ClassExpression: function(expr1, precedence1, flags1) {
                      var result1, fragment1;
                      result1 = [
                          "class"
                      ];
                      if (expr1.id) result1 = join1(result1, this.generateExpression(expr1.id, Precedence1.Sequence, E_TTT1));
                      if (expr1.superClass) {
                          fragment1 = join1("extends", this.generateExpression(expr1.superClass, Precedence1.Unary, E_TTT1));
                          result1 = join1(result1, fragment1);
                      }
                      result1.push(space1);
                      result1.push(this.generateStatement(expr1.body, S_TFFT1));
                      return result1;
                  },
                  MethodDefinition: function(expr1, precedence1, flags1) {
                      var result1, fragment1;
                      if (expr1["static"]) result1 = [
                          "static" + space1
                      ];
                      else result1 = [];
                      if (expr1.kind === "get" || expr1.kind === "set") fragment1 = [
                          join1(expr1.kind, this.generatePropertyKey(expr1.key, expr1.computed)),
                          this.generateFunctionBody(expr1.value)
                      ];
                      else fragment1 = [
                          generateMethodPrefix1(expr1),
                          this.generatePropertyKey(expr1.key, expr1.computed),
                          this.generateFunctionBody(expr1.value)
                      ];
                      return join1(result1, fragment1);
                  },
                  Property: function(expr1, precedence1, flags1) {
                      if (expr1.kind === "get" || expr1.kind === "set") return [
                          expr1.kind,
                          noEmptySpace1(),
                          this.generatePropertyKey(expr1.key, expr1.computed),
                          this.generateFunctionBody(expr1.value)
                      ];
                      if (expr1.shorthand) {
                          if (expr1.value.type === "AssignmentPattern") return this.AssignmentPattern(expr1.value, Precedence1.Sequence, E_TTT1);
                          return this.generatePropertyKey(expr1.key, expr1.computed);
                      }
                      if (expr1.method) return [
                          generateMethodPrefix1(expr1),
                          this.generatePropertyKey(expr1.key, expr1.computed),
                          this.generateFunctionBody(expr1.value)
                      ];
                      return [
                          this.generatePropertyKey(expr1.key, expr1.computed),
                          ":" + space1,
                          this.generateExpression(expr1.value, Precedence1.Assignment, E_TTT1)
                      ];
                  },
                  ObjectExpression: function(expr1, precedence1, flags1) {
                      var multiline1, result1, fragment1, that1 = this;
                      if (!expr1.properties.length) return "{}";
                      multiline1 = expr1.properties.length > 1;
                      withIndent1(function() {
                          fragment1 = that1.generateExpression(expr1.properties[0], Precedence1.Sequence, E_TTT1);
                      });
                      if (!multiline1) {
                          // issues 4
                          // Do not transform from
                          //   dejavu.Class.declare({
                          //       method2: function () {}
                          //   });
                          // to
                          //   dejavu.Class.declare({method2: function () {
                          //       }});
                          if (!hasLineTerminator1(toSourceNodeWhenNeeded1(fragment1).toString())) return [
                              "{",
                              space1,
                              fragment1,
                              space1,
                              "}"
                          ];
                      }
                      withIndent1(function(indent1) {
                          var i3, iz1;
                          result1 = [
                              "{",
                              newline1,
                              indent1,
                              fragment1
                          ];
                          if (multiline1) {
                              result1.push("," + newline1);
                              for(i3 = 1, iz1 = expr1.properties.length; i3 < iz1; ++i3){
                                  result1.push(indent1);
                                  result1.push(that1.generateExpression(expr1.properties[i3], Precedence1.Sequence, E_TTT1));
                                  if (i3 + 1 < iz1) result1.push("," + newline1);
                              }
                          }
                      });
                      if (!endsWithLineTerminator1(toSourceNodeWhenNeeded1(result1).toString())) result1.push(newline1);
                      result1.push(base1);
                      result1.push("}");
                      return result1;
                  },
                  AssignmentPattern: function(expr1, precedence1, flags1) {
                      return this.generateAssignment(expr1.left, expr1.right, "=", precedence1, flags1);
                  },
                  ObjectPattern: function(expr1, precedence1, flags1) {
                      var result1, i3, iz1, multiline1, property1, that1 = this;
                      if (!expr1.properties.length) return "{}";
                      multiline1 = false;
                      if (expr1.properties.length === 1) {
                          property1 = expr1.properties[0];
                          if (property1.type === Syntax1.Property && property1.value.type !== Syntax1.Identifier) multiline1 = true;
                      } else for(i3 = 0, iz1 = expr1.properties.length; i3 < iz1; ++i3){
                          property1 = expr1.properties[i3];
                          if (property1.type === Syntax1.Property && !property1.shorthand) {
                              multiline1 = true;
                              break;
                          }
                      }
                      result1 = [
                          "{",
                          multiline1 ? newline1 : ""
                      ];
                      withIndent1(function(indent1) {
                          var i3, iz1;
                          for(i3 = 0, iz1 = expr1.properties.length; i3 < iz1; ++i3){
                              result1.push(multiline1 ? indent1 : "");
                              result1.push(that1.generateExpression(expr1.properties[i3], Precedence1.Sequence, E_TTT1));
                              if (i3 + 1 < iz1) result1.push("," + (multiline1 ? newline1 : space1));
                          }
                      });
                      if (multiline1 && !endsWithLineTerminator1(toSourceNodeWhenNeeded1(result1).toString())) result1.push(newline1);
                      result1.push(multiline1 ? base1 : "");
                      result1.push("}");
                      return result1;
                  },
                  ThisExpression: function(expr1, precedence1, flags1) {
                      return "this";
                  },
                  Super: function(expr1, precedence1, flags1) {
                      return "super";
                  },
                  Identifier: function(expr1, precedence1, flags1) {
                      return generateIdentifier1(expr1);
                  },
                  ImportDefaultSpecifier: function(expr1, precedence1, flags1) {
                      return generateIdentifier1(expr1.id || expr1.local);
                  },
                  ImportNamespaceSpecifier: function(expr1, precedence1, flags1) {
                      var result1 = [
                          "*"
                      ];
                      var id1 = expr1.id || expr1.local;
                      if (id1) result1.push(space1 + "as" + noEmptySpace1() + generateIdentifier1(id1));
                      return result1;
                  },
                  ImportSpecifier: function(expr1, precedence1, flags1) {
                      var imported1 = expr1.imported;
                      var result1 = [
                          imported1.name
                      ];
                      var local1 = expr1.local;
                      if (local1 && local1.name !== imported1.name) result1.push(noEmptySpace1() + "as" + noEmptySpace1() + generateIdentifier1(local1));
                      return result1;
                  },
                  ExportSpecifier: function(expr1, precedence1, flags1) {
                      var local1 = expr1.local;
                      var result1 = [
                          local1.name
                      ];
                      var exported1 = expr1.exported;
                      if (exported1 && exported1.name !== local1.name) result1.push(noEmptySpace1() + "as" + noEmptySpace1() + generateIdentifier1(exported1));
                      return result1;
                  },
                  Literal: function(expr1, precedence1, flags1) {
                      var raw1;
                      if (expr1.hasOwnProperty("raw") && parse1 && extra1.raw) try {
                          raw1 = parse1(expr1.raw).body[0].expression;
                          if (raw1.type === Syntax1.Literal) {
                              if (raw1.value === expr1.value) return expr1.raw;
                          }
                      } catch (e1) {
                      // not use raw property
                      }
                      if (expr1.regex) return "/" + expr1.regex.pattern + "/" + expr1.regex.flags;
                      if (expr1.value === null) return "null";
                      if (typeof expr1.value === "string") return escapeString1(expr1.value);
                      if (typeof expr1.value === "number") return generateNumber1(expr1.value);
                      if (typeof expr1.value === "boolean") return expr1.value ? "true" : "false";
                      return generateRegExp1(expr1.value);
                  },
                  GeneratorExpression: function(expr1, precedence1, flags1) {
                      return this.ComprehensionExpression(expr1, precedence1, flags1);
                  },
                  ComprehensionExpression: function(expr1, precedence1, flags1) {
                      // GeneratorExpression should be parenthesized with (...), ComprehensionExpression with [...]
                      // Due to https://bugzilla.mozilla.org/show_bug.cgi?id=883468 position of expr.body can differ in Spidermonkey and ES6
                      var result1, i3, iz1, fragment1, that1 = this;
                      result1 = expr1.type === Syntax1.GeneratorExpression ? [
                          "("
                      ] : [
                          "["
                      ];
                      if (extra1.moz.comprehensionExpressionStartsWithAssignment) {
                          fragment1 = this.generateExpression(expr1.body, Precedence1.Assignment, E_TTT1);
                          result1.push(fragment1);
                      }
                      if (expr1.blocks) withIndent1(function() {
                          for(i3 = 0, iz1 = expr1.blocks.length; i3 < iz1; ++i3){
                              fragment1 = that1.generateExpression(expr1.blocks[i3], Precedence1.Sequence, E_TTT1);
                              if (i3 > 0 || extra1.moz.comprehensionExpressionStartsWithAssignment) result1 = join1(result1, fragment1);
                              else result1.push(fragment1);
                          }
                      });
                      if (expr1.filter) {
                          result1 = join1(result1, "if" + space1);
                          fragment1 = this.generateExpression(expr1.filter, Precedence1.Sequence, E_TTT1);
                          result1 = join1(result1, [
                              "(",
                              fragment1,
                              ")"
                          ]);
                      }
                      if (!extra1.moz.comprehensionExpressionStartsWithAssignment) {
                          fragment1 = this.generateExpression(expr1.body, Precedence1.Assignment, E_TTT1);
                          result1 = join1(result1, fragment1);
                      }
                      result1.push(expr1.type === Syntax1.GeneratorExpression ? ")" : "]");
                      return result1;
                  },
                  ComprehensionBlock: function(expr1, precedence1, flags1) {
                      var fragment1;
                      if (expr1.left.type === Syntax1.VariableDeclaration) fragment1 = [
                          expr1.left.kind,
                          noEmptySpace1(),
                          this.generateStatement(expr1.left.declarations[0], S_FFFF1)
                      ];
                      else fragment1 = this.generateExpression(expr1.left, Precedence1.Call, E_TTT1);
                      fragment1 = join1(fragment1, expr1.of ? "of" : "in");
                      fragment1 = join1(fragment1, this.generateExpression(expr1.right, Precedence1.Sequence, E_TTT1));
                      return [
                          "for" + space1 + "(",
                          fragment1,
                          ")"
                      ];
                  },
                  SpreadElement: function(expr1, precedence1, flags1) {
                      return [
                          "...",
                          this.generateExpression(expr1.argument, Precedence1.Assignment, E_TTT1)
                      ];
                  },
                  TaggedTemplateExpression: function(expr1, precedence1, flags1) {
                      var itemFlags1 = E_TTF1;
                      if (!(flags1 & F_ALLOW_CALL1)) itemFlags1 = E_TFF1;
                      var result1 = [
                          this.generateExpression(expr1.tag, Precedence1.Call, itemFlags1),
                          this.generateExpression(expr1.quasi, Precedence1.Primary, E_FFT1)
                      ];
                      return parenthesize1(result1, Precedence1.TaggedTemplate, precedence1);
                  },
                  TemplateElement: function(expr1, precedence1, flags1) {
                      // Don't use "cooked". Since tagged template can use raw template
                      // representation. So if we do so, it breaks the script semantics.
                      return expr1.value.raw;
                  },
                  TemplateLiteral: function(expr1, precedence1, flags1) {
                      var result1, i3, iz1;
                      result1 = [
                          "`"
                      ];
                      for(i3 = 0, iz1 = expr1.quasis.length; i3 < iz1; ++i3){
                          result1.push(this.generateExpression(expr1.quasis[i3], Precedence1.Primary, E_TTT1));
                          if (i3 + 1 < iz1) {
                              result1.push("${" + space1);
                              result1.push(this.generateExpression(expr1.expressions[i3], Precedence1.Sequence, E_TTT1));
                              result1.push(space1 + "}");
                          }
                      }
                      result1.push("`");
                      return result1;
                  },
                  ModuleSpecifier: function(expr1, precedence1, flags1) {
                      return this.Literal(expr1, precedence1, flags1);
                  },
                  ImportExpression: function(expr1, precedence1, flag1) {
                      return parenthesize1([
                          "import(",
                          this.generateExpression(expr1.source, Precedence1.Assignment, E_TTT1),
                          ")"
                      ], Precedence1.Call, precedence1);
                  }
              };
              merge1(CodeGenerator1.prototype, CodeGenerator1.Expression);
              CodeGenerator1.prototype.generateExpression = function(expr1, precedence1, flags1) {
                  var result1, type1;
                  type1 = expr1.type || Syntax1.Property;
                  if (extra1.verbatim && expr1.hasOwnProperty(extra1.verbatim)) return generateVerbatim1(expr1, precedence1);
                  result1 = this[type1](expr1, precedence1, flags1);
                  if (extra1.comment) result1 = addComments1(expr1, result1);
                  return toSourceNodeWhenNeeded1(result1, expr1);
              };
              CodeGenerator1.prototype.generateStatement = function(stmt1, flags1) {
                  var result1, fragment1;
                  result1 = this[stmt1.type](stmt1, flags1);
                  // Attach comments
                  if (extra1.comment) result1 = addComments1(stmt1, result1);
                  fragment1 = toSourceNodeWhenNeeded1(result1).toString();
                  if (stmt1.type === Syntax1.Program && !safeConcatenation1 && newline1 === "" && fragment1.charAt(fragment1.length - 1) === "\n") result1 = sourceMap$11 ? toSourceNodeWhenNeeded1(result1).replaceRight(/\s+$/, "") : fragment1.replace(/\s+$/, "");
                  return toSourceNodeWhenNeeded1(result1, stmt1);
              };
              function generateInternal1(node1) {
                  var codegen1;
                  codegen1 = new CodeGenerator1();
                  if (isStatement1(node1)) return codegen1.generateStatement(node1, S_TFFF1);
                  if (isExpression1(node1)) return codegen1.generateExpression(node1, Precedence1.Sequence, E_TTT1);
                  throw new Error("Unknown node type: " + node1.type);
              }
              function generate1(node1, options1) {
                  var defaultOptions1 = getDefaultOptions1(), result1, pair1;
                  if (options1 != null) {
                      // Obsolete options
                      //
                      //   `options.indent`
                      //   `options.base`
                      //
                      // Instead of them, we can use `option.format.indent`.
                      if (typeof options1.indent === "string") defaultOptions1.format.indent.style = options1.indent;
                      if (typeof options1.base === "number") defaultOptions1.format.indent.base = options1.base;
                      options1 = updateDeeply1(defaultOptions1, options1);
                      indent1 = options1.format.indent.style;
                      if (typeof options1.base === "string") base1 = options1.base;
                      else base1 = stringRepeat1(indent1, options1.format.indent.base);
                  } else {
                      options1 = defaultOptions1;
                      indent1 = options1.format.indent.style;
                      base1 = stringRepeat1(indent1, options1.format.indent.base);
                  }
                  json1 = options1.format.json;
                  renumber1 = options1.format.renumber;
                  hexadecimal1 = json1 ? false : options1.format.hexadecimal;
                  quotes1 = json1 ? "double" : options1.format.quotes;
                  escapeless1 = options1.format.escapeless;
                  newline1 = options1.format.newline;
                  space1 = options1.format.space;
                  if (options1.format.compact) newline1 = space1 = indent1 = base1 = "";
                  parentheses1 = options1.format.parentheses;
                  semicolons1 = options1.format.semicolons;
                  safeConcatenation1 = options1.format.safeConcatenation;
                  directive1 = options1.directive;
                  parse1 = json1 ? null : options1.parse;
                  sourceMap$11 = options1.sourceMap;
                  sourceCode1 = options1.sourceCode;
                  preserveBlankLines1 = options1.format.preserveBlankLines && sourceCode1 !== null;
                  extra1 = options1;
                  if (sourceMap$11) {
                      if (!exports1.browser) // We assume environment is node.js
                      // And prevent from including source-map by browserify
                      SourceNode1 = sourceMap.SourceNode;
                      else SourceNode1 = commonjsGlobal.sourceMap.SourceNode;
                  }
                  result1 = generateInternal1(node1);
                  if (!sourceMap$11) {
                      pair1 = {
                          code: result1.toString(),
                          map: null
                      };
                      return options1.sourceMapWithCode ? pair1 : pair1.code;
                  }
                  pair1 = result1.toStringWithSourceMap({
                      file: options1.file,
                      sourceRoot: options1.sourceMapRoot
                  });
                  if (options1.sourceContent) pair1.map.setSourceContent(options1.sourceMap, options1.sourceContent);
                  if (options1.sourceMapWithCode) return pair1;
                  return pair1.map.toString();
              }
              FORMAT_MINIFY1 = {
                  indent: {
                      style: "",
                      base: 0
                  },
                  renumber: true,
                  hexadecimal: true,
                  quotes: "auto",
                  escapeless: true,
                  compact: true,
                  parentheses: false,
                  semicolons: false
              };
              FORMAT_DEFAULTS1 = getDefaultOptions1().format;
              exports1.version = require$$3.version;
              exports1.generate = generate1;
              exports1.attachComments = estraverse$11.attachComments;
              exports1.Precedence = updateDeeply1({}, Precedence1);
              exports1.browser = false;
              exports1.FORMAT_MINIFY = FORMAT_MINIFY1;
              exports1.FORMAT_DEFAULTS = FORMAT_DEFAULTS1;
          })();
      /* vim: set sw=4 ts=4 et tw=80 : */ });
      var esprima = createCommonjsModule(function(module1, exports1) {
          (function webpackUniversalModuleDefinition1(root1, factory1) {
              module1.exports = factory1();
          })(commonjsGlobal, function() {
              return /******/ function(modules1) {
                  /******/ // The module cache
                  /******/ var installedModules1 = {};
                  /******/ // The require function
                  /******/ function __webpack_require__1(moduleId1) {
                      /******/ // Check if module is in cache
                      /* istanbul ignore if */ /******/ if (installedModules1[moduleId1]) /******/ return installedModules1[moduleId1].exports;
                      /******/ // Create a new module (and put it into the cache)
                      /******/ var module1 = installedModules1[moduleId1] = {
                          /******/ exports: {},
                          /******/ id: moduleId1,
                          /******/ loaded: false
                      };
                      /******/ // Execute the module function
                      /******/ modules1[moduleId1].call(module1.exports, module1, module1.exports, __webpack_require__1);
                      /******/ // Flag the module as loaded
                      /******/ module1.loaded = true;
                      /******/ // Return the exports of the module
                      /******/ return module1.exports;
                  /******/ }
                  /******/ // expose the modules object (__webpack_modules__)
                  /******/ __webpack_require__1.m = modules1;
                  /******/ // expose the module cache
                  /******/ __webpack_require__1.c = installedModules1;
                  /******/ // __webpack_public_path__
                  /******/ __webpack_require__1.p = "";
                  /******/ // Load entry module and return exports
                  /******/ return __webpack_require__1(0);
              /******/ }([
                  /* 0 */ /***/ function(module1, exports1, __webpack_require__1) {
                      "use strict";
                      /*
          Copyright JS Foundation and other contributors, https://js.foundation/
  
          Redistribution and use in source and binary forms, with or without
          modification, are permitted provided that the following conditions are met:
  
            * Redistributions of source code must retain the above copyright
              notice, this list of conditions and the following disclaimer.
            * Redistributions in binary form must reproduce the above copyright
              notice, this list of conditions and the following disclaimer in the
              documentation and/or other materials provided with the distribution.
  
          THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
          AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
          IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
          ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
          DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
          (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
          LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
          ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
          (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
          THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        */ Object.defineProperty(exports1, "__esModule", {
                          value: true
                      });
                      var comment_handler_11 = __webpack_require__1(1);
                      var jsx_parser_11 = __webpack_require__1(3);
                      var parser_11 = __webpack_require__1(8);
                      var tokenizer_11 = __webpack_require__1(15);
                      function parse1(code1, options1, delegate1) {
                          var commentHandler1 = null;
                          var proxyDelegate1 = function(node1, metadata1) {
                              if (delegate1) delegate1(node1, metadata1);
                              if (commentHandler1) commentHandler1.visit(node1, metadata1);
                          };
                          var parserDelegate1 = typeof delegate1 === "function" ? proxyDelegate1 : null;
                          var collectComment1 = false;
                          if (options1) {
                              collectComment1 = typeof options1.comment === "boolean" && options1.comment;
                              var attachComment1 = typeof options1.attachComment === "boolean" && options1.attachComment;
                              if (collectComment1 || attachComment1) {
                                  commentHandler1 = new comment_handler_11.CommentHandler();
                                  commentHandler1.attach = attachComment1;
                                  options1.comment = true;
                                  parserDelegate1 = proxyDelegate1;
                              }
                          }
                          var isModule1 = false;
                          if (options1 && typeof options1.sourceType === "string") isModule1 = options1.sourceType === "module";
                          var parser1;
                          if (options1 && typeof options1.jsx === "boolean" && options1.jsx) parser1 = new jsx_parser_11.JSXParser(code1, options1, parserDelegate1);
                          else parser1 = new parser_11.Parser(code1, options1, parserDelegate1);
                          var program1 = isModule1 ? parser1.parseModule() : parser1.parseScript();
                          var ast1 = program1;
                          if (collectComment1 && commentHandler1) ast1.comments = commentHandler1.comments;
                          if (parser1.config.tokens) ast1.tokens = parser1.tokens;
                          if (parser1.config.tolerant) ast1.errors = parser1.errorHandler.errors;
                          return ast1;
                      }
                      exports1.parse = parse1;
                      function parseModule1(code1, options1, delegate1) {
                          var parsingOptions1 = options1 || {};
                          parsingOptions1.sourceType = "module";
                          return parse1(code1, parsingOptions1, delegate1);
                      }
                      exports1.parseModule = parseModule1;
                      function parseScript1(code1, options1, delegate1) {
                          var parsingOptions1 = options1 || {};
                          parsingOptions1.sourceType = "script";
                          return parse1(code1, parsingOptions1, delegate1);
                      }
                      exports1.parseScript = parseScript1;
                      function tokenize1(code1, options1, delegate1) {
                          var tokenizer1 = new tokenizer_11.Tokenizer(code1, options1);
                          var tokens1;
                          tokens1 = [];
                          try {
                              while(true){
                                  var token1 = tokenizer1.getNextToken();
                                  if (!token1) break;
                                  if (delegate1) token1 = delegate1(token1);
                                  tokens1.push(token1);
                              }
                          } catch (e1) {
                              tokenizer1.errorHandler.tolerate(e1);
                          }
                          if (tokenizer1.errorHandler.tolerant) tokens1.errors = tokenizer1.errors();
                          return tokens1;
                      }
                      exports1.tokenize = tokenize1;
                      var syntax_11 = __webpack_require__1(2);
                      exports1.Syntax = syntax_11.Syntax;
                      // Sync with *.json manifests.
                      exports1.version = "4.0.1";
                  /***/ },
                  /* 1 */ /***/ function(module1, exports1, __webpack_require__1) {
                      "use strict";
                      Object.defineProperty(exports1, "__esModule", {
                          value: true
                      });
                      var syntax_11 = __webpack_require__1(2);
                      var CommentHandler1 = function() {
                          function CommentHandler1() {
                              this.attach = false;
                              this.comments = [];
                              this.stack = [];
                              this.leading = [];
                              this.trailing = [];
                          }
                          CommentHandler1.prototype.insertInnerComments = function(node1, metadata1) {
                              //  innnerComments for properties empty block
                              //  `function a() {/** comments **\/}`
                              if (node1.type === syntax_11.Syntax.BlockStatement && node1.body.length === 0) {
                                  var innerComments1 = [];
                                  for(var i3 = this.leading.length - 1; i3 >= 0; --i3){
                                      var entry1 = this.leading[i3];
                                      if (metadata1.end.offset >= entry1.start) {
                                          innerComments1.unshift(entry1.comment);
                                          this.leading.splice(i3, 1);
                                          this.trailing.splice(i3, 1);
                                      }
                                  }
                                  if (innerComments1.length) node1.innerComments = innerComments1;
                              }
                          };
                          CommentHandler1.prototype.findTrailingComments = function(metadata1) {
                              var trailingComments1 = [];
                              if (this.trailing.length > 0) {
                                  for(var i3 = this.trailing.length - 1; i3 >= 0; --i3){
                                      var entry_11 = this.trailing[i3];
                                      if (entry_11.start >= metadata1.end.offset) trailingComments1.unshift(entry_11.comment);
                                  }
                                  this.trailing.length = 0;
                                  return trailingComments1;
                              }
                              var entry1 = this.stack[this.stack.length - 1];
                              if (entry1 && entry1.node.trailingComments) {
                                  var firstComment1 = entry1.node.trailingComments[0];
                                  if (firstComment1 && firstComment1.range[0] >= metadata1.end.offset) {
                                      trailingComments1 = entry1.node.trailingComments;
                                      delete entry1.node.trailingComments;
                                  }
                              }
                              return trailingComments1;
                          };
                          CommentHandler1.prototype.findLeadingComments = function(metadata1) {
                              var leadingComments1 = [];
                              var target1;
                              while(this.stack.length > 0){
                                  var entry1 = this.stack[this.stack.length - 1];
                                  if (entry1 && entry1.start >= metadata1.start.offset) {
                                      target1 = entry1.node;
                                      this.stack.pop();
                                  } else break;
                              }
                              if (target1) {
                                  var count1 = target1.leadingComments ? target1.leadingComments.length : 0;
                                  for(var i3 = count1 - 1; i3 >= 0; --i3){
                                      var comment1 = target1.leadingComments[i3];
                                      if (comment1.range[1] <= metadata1.start.offset) {
                                          leadingComments1.unshift(comment1);
                                          target1.leadingComments.splice(i3, 1);
                                      }
                                  }
                                  if (target1.leadingComments && target1.leadingComments.length === 0) delete target1.leadingComments;
                                  return leadingComments1;
                              }
                              for(var i3 = this.leading.length - 1; i3 >= 0; --i3){
                                  var entry1 = this.leading[i3];
                                  if (entry1.start <= metadata1.start.offset) {
                                      leadingComments1.unshift(entry1.comment);
                                      this.leading.splice(i3, 1);
                                  }
                              }
                              return leadingComments1;
                          };
                          CommentHandler1.prototype.visitNode = function(node1, metadata1) {
                              if (node1.type === syntax_11.Syntax.Program && node1.body.length > 0) return;
                              this.insertInnerComments(node1, metadata1);
                              var trailingComments1 = this.findTrailingComments(metadata1);
                              var leadingComments1 = this.findLeadingComments(metadata1);
                              if (leadingComments1.length > 0) node1.leadingComments = leadingComments1;
                              if (trailingComments1.length > 0) node1.trailingComments = trailingComments1;
                              this.stack.push({
                                  node: node1,
                                  start: metadata1.start.offset
                              });
                          };
                          CommentHandler1.prototype.visitComment = function(node1, metadata1) {
                              var type1 = node1.type[0] === "L" ? "Line" : "Block";
                              var comment1 = {
                                  type: type1,
                                  value: node1.value
                              };
                              if (node1.range) comment1.range = node1.range;
                              if (node1.loc) comment1.loc = node1.loc;
                              this.comments.push(comment1);
                              if (this.attach) {
                                  var entry1 = {
                                      comment: {
                                          type: type1,
                                          value: node1.value,
                                          range: [
                                              metadata1.start.offset,
                                              metadata1.end.offset
                                          ]
                                      },
                                      start: metadata1.start.offset
                                  };
                                  if (node1.loc) entry1.comment.loc = node1.loc;
                                  node1.type = type1;
                                  this.leading.push(entry1);
                                  this.trailing.push(entry1);
                              }
                          };
                          CommentHandler1.prototype.visit = function(node1, metadata1) {
                              if (node1.type === "LineComment") this.visitComment(node1, metadata1);
                              else if (node1.type === "BlockComment") this.visitComment(node1, metadata1);
                              else if (this.attach) this.visitNode(node1, metadata1);
                          };
                          return CommentHandler1;
                      }();
                      exports1.CommentHandler = CommentHandler1;
                  /***/ },
                  /* 2 */ /***/ function(module1, exports1) {
                      "use strict";
                      Object.defineProperty(exports1, "__esModule", {
                          value: true
                      });
                      exports1.Syntax = {
                          AssignmentExpression: "AssignmentExpression",
                          AssignmentPattern: "AssignmentPattern",
                          ArrayExpression: "ArrayExpression",
                          ArrayPattern: "ArrayPattern",
                          ArrowFunctionExpression: "ArrowFunctionExpression",
                          AwaitExpression: "AwaitExpression",
                          BlockStatement: "BlockStatement",
                          BinaryExpression: "BinaryExpression",
                          BreakStatement: "BreakStatement",
                          CallExpression: "CallExpression",
                          CatchClause: "CatchClause",
                          ClassBody: "ClassBody",
                          ClassDeclaration: "ClassDeclaration",
                          ClassExpression: "ClassExpression",
                          ConditionalExpression: "ConditionalExpression",
                          ContinueStatement: "ContinueStatement",
                          DoWhileStatement: "DoWhileStatement",
                          DebuggerStatement: "DebuggerStatement",
                          EmptyStatement: "EmptyStatement",
                          ExportAllDeclaration: "ExportAllDeclaration",
                          ExportDefaultDeclaration: "ExportDefaultDeclaration",
                          ExportNamedDeclaration: "ExportNamedDeclaration",
                          ExportSpecifier: "ExportSpecifier",
                          ExpressionStatement: "ExpressionStatement",
                          ForStatement: "ForStatement",
                          ForOfStatement: "ForOfStatement",
                          ForInStatement: "ForInStatement",
                          FunctionDeclaration: "FunctionDeclaration",
                          FunctionExpression: "FunctionExpression",
                          Identifier: "Identifier",
                          IfStatement: "IfStatement",
                          ImportDeclaration: "ImportDeclaration",
                          ImportDefaultSpecifier: "ImportDefaultSpecifier",
                          ImportNamespaceSpecifier: "ImportNamespaceSpecifier",
                          ImportSpecifier: "ImportSpecifier",
                          Literal: "Literal",
                          LabeledStatement: "LabeledStatement",
                          LogicalExpression: "LogicalExpression",
                          MemberExpression: "MemberExpression",
                          MetaProperty: "MetaProperty",
                          MethodDefinition: "MethodDefinition",
                          NewExpression: "NewExpression",
                          ObjectExpression: "ObjectExpression",
                          ObjectPattern: "ObjectPattern",
                          Program: "Program",
                          Property: "Property",
                          RestElement: "RestElement",
                          ReturnStatement: "ReturnStatement",
                          SequenceExpression: "SequenceExpression",
                          SpreadElement: "SpreadElement",
                          Super: "Super",
                          SwitchCase: "SwitchCase",
                          SwitchStatement: "SwitchStatement",
                          TaggedTemplateExpression: "TaggedTemplateExpression",
                          TemplateElement: "TemplateElement",
                          TemplateLiteral: "TemplateLiteral",
                          ThisExpression: "ThisExpression",
                          ThrowStatement: "ThrowStatement",
                          TryStatement: "TryStatement",
                          UnaryExpression: "UnaryExpression",
                          UpdateExpression: "UpdateExpression",
                          VariableDeclaration: "VariableDeclaration",
                          VariableDeclarator: "VariableDeclarator",
                          WhileStatement: "WhileStatement",
                          WithStatement: "WithStatement",
                          YieldExpression: "YieldExpression"
                      };
                  /***/ },
                  /* 3 */ /***/ function(module1, exports1, __webpack_require__1) {
                      "use strict";
                      /* istanbul ignore next */ var __extends1 = this && this.__extends || function() {
                          var extendStatics1 = Object.setPrototypeOf || ({
                              __proto__: []
                          }) instanceof Array && function(d7, b3) {
                              d7.__proto__ = b3;
                          } || function(d7, b3) {
                              for(var p6 in b3)if (b3.hasOwnProperty(p6)) d7[p6] = b3[p6];
                          };
                          return function(d7, b3) {
                              extendStatics1(d7, b3);
                              function __1() {
                                  this.constructor = d7;
                              }
                              d7.prototype = b3 === null ? Object.create(b3) : (__1.prototype = b3.prototype, new __1());
                          };
                      }();
                      Object.defineProperty(exports1, "__esModule", {
                          value: true
                      });
                      var character_11 = __webpack_require__1(4);
                      var JSXNode1 = __webpack_require__1(5);
                      var jsx_syntax_11 = __webpack_require__1(6);
                      var Node1 = __webpack_require__1(7);
                      var parser_11 = __webpack_require__1(8);
                      var token_11 = __webpack_require__1(13);
                      var xhtml_entities_11 = __webpack_require__1(14);
                      token_11.TokenName[100 /* Identifier */ ] = "JSXIdentifier";
                      token_11.TokenName[101 /* Text */ ] = "JSXText";
                      // Fully qualified element name, e.g. <svg:path> returns "svg:path"
                      function getQualifiedElementName1(elementName1) {
                          var qualifiedName1;
                          switch(elementName1.type){
                              case jsx_syntax_11.JSXSyntax.JSXIdentifier:
                                  var id1 = elementName1;
                                  qualifiedName1 = id1.name;
                                  break;
                              case jsx_syntax_11.JSXSyntax.JSXNamespacedName:
                                  var ns1 = elementName1;
                                  qualifiedName1 = getQualifiedElementName1(ns1.namespace) + ":" + getQualifiedElementName1(ns1.name);
                                  break;
                              case jsx_syntax_11.JSXSyntax.JSXMemberExpression:
                                  var expr1 = elementName1;
                                  qualifiedName1 = getQualifiedElementName1(expr1.object) + "." + getQualifiedElementName1(expr1.property);
                                  break;
                              /* istanbul ignore next */ default:
                                  break;
                          }
                          return qualifiedName1;
                      }
                      var JSXParser1 = function(_super1) {
                          __extends1(JSXParser1, _super1);
                          function JSXParser1(code1, options1, delegate1) {
                              return _super1.call(this, code1, options1, delegate1) || this;
                          }
                          JSXParser1.prototype.parsePrimaryExpression = function() {
                              return this.match("<") ? this.parseJSXRoot() : _super1.prototype.parsePrimaryExpression.call(this);
                          };
                          JSXParser1.prototype.startJSX = function() {
                              // Unwind the scanner before the lookahead token.
                              this.scanner.index = this.startMarker.index;
                              this.scanner.lineNumber = this.startMarker.line;
                              this.scanner.lineStart = this.startMarker.index - this.startMarker.column;
                          };
                          JSXParser1.prototype.finishJSX = function() {
                              // Prime the next lookahead.
                              this.nextToken();
                          };
                          JSXParser1.prototype.reenterJSX = function() {
                              this.startJSX();
                              this.expectJSX("}");
                              // Pop the closing '}' added from the lookahead.
                              if (this.config.tokens) this.tokens.pop();
                          };
                          JSXParser1.prototype.createJSXNode = function() {
                              this.collectComments();
                              return {
                                  index: this.scanner.index,
                                  line: this.scanner.lineNumber,
                                  column: this.scanner.index - this.scanner.lineStart
                              };
                          };
                          JSXParser1.prototype.createJSXChildNode = function() {
                              return {
                                  index: this.scanner.index,
                                  line: this.scanner.lineNumber,
                                  column: this.scanner.index - this.scanner.lineStart
                              };
                          };
                          JSXParser1.prototype.scanXHTMLEntity = function(quote1) {
                              var result1 = "&";
                              var valid1 = true;
                              var terminated1 = false;
                              var numeric1 = false;
                              var hex1 = false;
                              while(!this.scanner.eof() && valid1 && !terminated1){
                                  var ch1 = this.scanner.source[this.scanner.index];
                                  if (ch1 === quote1) break;
                                  terminated1 = ch1 === ";";
                                  result1 += ch1;
                                  ++this.scanner.index;
                                  if (!terminated1) switch(result1.length){
                                      case 2:
                                          // e.g. '&#123;'
                                          numeric1 = ch1 === "#";
                                          break;
                                      case 3:
                                          if (numeric1) {
                                              // e.g. '&#x41;'
                                              hex1 = ch1 === "x";
                                              valid1 = hex1 || character_11.Character.isDecimalDigit(ch1.charCodeAt(0));
                                              numeric1 = numeric1 && !hex1;
                                          }
                                          break;
                                      default:
                                          valid1 = valid1 && !(numeric1 && !character_11.Character.isDecimalDigit(ch1.charCodeAt(0)));
                                          valid1 = valid1 && !(hex1 && !character_11.Character.isHexDigit(ch1.charCodeAt(0)));
                                          break;
                                  }
                              }
                              if (valid1 && terminated1 && result1.length > 2) {
                                  // e.g. '&#x41;' becomes just '#x41'
                                  var str1 = result1.substr(1, result1.length - 2);
                                  if (numeric1 && str1.length > 1) result1 = String.fromCharCode(parseInt(str1.substr(1), 10));
                                  else if (hex1 && str1.length > 2) result1 = String.fromCharCode(parseInt("0" + str1.substr(1), 16));
                                  else if (!numeric1 && !hex1 && xhtml_entities_11.XHTMLEntities[str1]) result1 = xhtml_entities_11.XHTMLEntities[str1];
                              }
                              return result1;
                          };
                          // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.
                          JSXParser1.prototype.lexJSX = function() {
                              var cp1 = this.scanner.source.charCodeAt(this.scanner.index);
                              // < > / : = { }
                              if (cp1 === 60 || cp1 === 62 || cp1 === 47 || cp1 === 58 || cp1 === 61 || cp1 === 123 || cp1 === 125) {
                                  var value1 = this.scanner.source[this.scanner.index++];
                                  return {
                                      type: 7 /* Punctuator */ ,
                                      value: value1,
                                      lineNumber: this.scanner.lineNumber,
                                      lineStart: this.scanner.lineStart,
                                      start: this.scanner.index - 1,
                                      end: this.scanner.index
                                  };
                              }
                              // " '
                              if (cp1 === 34 || cp1 === 39) {
                                  var start1 = this.scanner.index;
                                  var quote1 = this.scanner.source[this.scanner.index++];
                                  var str1 = "";
                                  while(!this.scanner.eof()){
                                      var ch1 = this.scanner.source[this.scanner.index++];
                                      if (ch1 === quote1) break;
                                      else if (ch1 === "&") str1 += this.scanXHTMLEntity(quote1);
                                      else str1 += ch1;
                                  }
                                  return {
                                      type: 8 /* StringLiteral */ ,
                                      value: str1,
                                      lineNumber: this.scanner.lineNumber,
                                      lineStart: this.scanner.lineStart,
                                      start: start1,
                                      end: this.scanner.index
                                  };
                              }
                              // ... or .
                              if (cp1 === 46) {
                                  var n15 = this.scanner.source.charCodeAt(this.scanner.index + 1);
                                  var n25 = this.scanner.source.charCodeAt(this.scanner.index + 2);
                                  var value1 = n15 === 46 && n25 === 46 ? "..." : ".";
                                  var start1 = this.scanner.index;
                                  this.scanner.index += value1.length;
                                  return {
                                      type: 7 /* Punctuator */ ,
                                      value: value1,
                                      lineNumber: this.scanner.lineNumber,
                                      lineStart: this.scanner.lineStart,
                                      start: start1,
                                      end: this.scanner.index
                                  };
                              }
                              // `
                              if (cp1 === 96) // Only placeholder, since it will be rescanned as a real assignment expression.
                              return {
                                  type: 10 /* Template */ ,
                                  value: "",
                                  lineNumber: this.scanner.lineNumber,
                                  lineStart: this.scanner.lineStart,
                                  start: this.scanner.index,
                                  end: this.scanner.index
                              };
                              // Identifer can not contain backslash (char code 92).
                              if (character_11.Character.isIdentifierStart(cp1) && cp1 !== 92) {
                                  var start1 = this.scanner.index;
                                  ++this.scanner.index;
                                  while(!this.scanner.eof()){
                                      var ch1 = this.scanner.source.charCodeAt(this.scanner.index);
                                      if (character_11.Character.isIdentifierPart(ch1) && ch1 !== 92) ++this.scanner.index;
                                      else if (ch1 === 45) // Hyphen (char code 45) can be part of an identifier.
                                      ++this.scanner.index;
                                      else break;
                                  }
                                  var id1 = this.scanner.source.slice(start1, this.scanner.index);
                                  return {
                                      type: 100 /* Identifier */ ,
                                      value: id1,
                                      lineNumber: this.scanner.lineNumber,
                                      lineStart: this.scanner.lineStart,
                                      start: start1,
                                      end: this.scanner.index
                                  };
                              }
                              return this.scanner.lex();
                          };
                          JSXParser1.prototype.nextJSXToken = function() {
                              this.collectComments();
                              this.startMarker.index = this.scanner.index;
                              this.startMarker.line = this.scanner.lineNumber;
                              this.startMarker.column = this.scanner.index - this.scanner.lineStart;
                              var token1 = this.lexJSX();
                              this.lastMarker.index = this.scanner.index;
                              this.lastMarker.line = this.scanner.lineNumber;
                              this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
                              if (this.config.tokens) this.tokens.push(this.convertToken(token1));
                              return token1;
                          };
                          JSXParser1.prototype.nextJSXText = function() {
                              this.startMarker.index = this.scanner.index;
                              this.startMarker.line = this.scanner.lineNumber;
                              this.startMarker.column = this.scanner.index - this.scanner.lineStart;
                              var start1 = this.scanner.index;
                              var text1 = "";
                              while(!this.scanner.eof()){
                                  var ch1 = this.scanner.source[this.scanner.index];
                                  if (ch1 === "{" || ch1 === "<") break;
                                  ++this.scanner.index;
                                  text1 += ch1;
                                  if (character_11.Character.isLineTerminator(ch1.charCodeAt(0))) {
                                      ++this.scanner.lineNumber;
                                      if (ch1 === "\r" && this.scanner.source[this.scanner.index] === "\n") ++this.scanner.index;
                                      this.scanner.lineStart = this.scanner.index;
                                  }
                              }
                              this.lastMarker.index = this.scanner.index;
                              this.lastMarker.line = this.scanner.lineNumber;
                              this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
                              var token1 = {
                                  type: 101 /* Text */ ,
                                  value: text1,
                                  lineNumber: this.scanner.lineNumber,
                                  lineStart: this.scanner.lineStart,
                                  start: start1,
                                  end: this.scanner.index
                              };
                              if (text1.length > 0 && this.config.tokens) this.tokens.push(this.convertToken(token1));
                              return token1;
                          };
                          JSXParser1.prototype.peekJSXToken = function() {
                              var state1 = this.scanner.saveState();
                              this.scanner.scanComments();
                              var next1 = this.lexJSX();
                              this.scanner.restoreState(state1);
                              return next1;
                          };
                          // Expect the next JSX token to match the specified punctuator.
                          // If not, an exception will be thrown.
                          JSXParser1.prototype.expectJSX = function(value1) {
                              var token1 = this.nextJSXToken();
                              if (token1.type !== 7 /* Punctuator */  || token1.value !== value1) this.throwUnexpectedToken(token1);
                          };
                          // Return true if the next JSX token matches the specified punctuator.
                          JSXParser1.prototype.matchJSX = function(value1) {
                              var next1 = this.peekJSXToken();
                              return next1.type === 7 /* Punctuator */  && next1.value === value1;
                          };
                          JSXParser1.prototype.parseJSXIdentifier = function() {
                              var node1 = this.createJSXNode();
                              var token1 = this.nextJSXToken();
                              if (token1.type !== 100 /* Identifier */ ) this.throwUnexpectedToken(token1);
                              return this.finalize(node1, new JSXNode1.JSXIdentifier(token1.value));
                          };
                          JSXParser1.prototype.parseJSXElementName = function() {
                              var node1 = this.createJSXNode();
                              var elementName1 = this.parseJSXIdentifier();
                              if (this.matchJSX(":")) {
                                  var namespace1 = elementName1;
                                  this.expectJSX(":");
                                  var name_11 = this.parseJSXIdentifier();
                                  elementName1 = this.finalize(node1, new JSXNode1.JSXNamespacedName(namespace1, name_11));
                              } else if (this.matchJSX(".")) while(this.matchJSX(".")){
                                  var object1 = elementName1;
                                  this.expectJSX(".");
                                  var property1 = this.parseJSXIdentifier();
                                  elementName1 = this.finalize(node1, new JSXNode1.JSXMemberExpression(object1, property1));
                              }
                              return elementName1;
                          };
                          JSXParser1.prototype.parseJSXAttributeName = function() {
                              var node1 = this.createJSXNode();
                              var attributeName1;
                              var identifier1 = this.parseJSXIdentifier();
                              if (this.matchJSX(":")) {
                                  var namespace1 = identifier1;
                                  this.expectJSX(":");
                                  var name_21 = this.parseJSXIdentifier();
                                  attributeName1 = this.finalize(node1, new JSXNode1.JSXNamespacedName(namespace1, name_21));
                              } else attributeName1 = identifier1;
                              return attributeName1;
                          };
                          JSXParser1.prototype.parseJSXStringLiteralAttribute = function() {
                              var node1 = this.createJSXNode();
                              var token1 = this.nextJSXToken();
                              if (token1.type !== 8 /* StringLiteral */ ) this.throwUnexpectedToken(token1);
                              var raw1 = this.getTokenRaw(token1);
                              return this.finalize(node1, new Node1.Literal(token1.value, raw1));
                          };
                          JSXParser1.prototype.parseJSXExpressionAttribute = function() {
                              var node1 = this.createJSXNode();
                              this.expectJSX("{");
                              this.finishJSX();
                              if (this.match("}")) this.tolerateError("JSX attributes must only be assigned a non-empty expression");
                              var expression1 = this.parseAssignmentExpression();
                              this.reenterJSX();
                              return this.finalize(node1, new JSXNode1.JSXExpressionContainer(expression1));
                          };
                          JSXParser1.prototype.parseJSXAttributeValue = function() {
                              return this.matchJSX("{") ? this.parseJSXExpressionAttribute() : this.matchJSX("<") ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();
                          };
                          JSXParser1.prototype.parseJSXNameValueAttribute = function() {
                              var node1 = this.createJSXNode();
                              var name1 = this.parseJSXAttributeName();
                              var value1 = null;
                              if (this.matchJSX("=")) {
                                  this.expectJSX("=");
                                  value1 = this.parseJSXAttributeValue();
                              }
                              return this.finalize(node1, new JSXNode1.JSXAttribute(name1, value1));
                          };
                          JSXParser1.prototype.parseJSXSpreadAttribute = function() {
                              var node1 = this.createJSXNode();
                              this.expectJSX("{");
                              this.expectJSX("...");
                              this.finishJSX();
                              var argument1 = this.parseAssignmentExpression();
                              this.reenterJSX();
                              return this.finalize(node1, new JSXNode1.JSXSpreadAttribute(argument1));
                          };
                          JSXParser1.prototype.parseJSXAttributes = function() {
                              var attributes1 = [];
                              while(!this.matchJSX("/") && !this.matchJSX(">")){
                                  var attribute3 = this.matchJSX("{") ? this.parseJSXSpreadAttribute() : this.parseJSXNameValueAttribute();
                                  attributes1.push(attribute3);
                              }
                              return attributes1;
                          };
                          JSXParser1.prototype.parseJSXOpeningElement = function() {
                              var node1 = this.createJSXNode();
                              this.expectJSX("<");
                              var name1 = this.parseJSXElementName();
                              var attributes1 = this.parseJSXAttributes();
                              var selfClosing1 = this.matchJSX("/");
                              if (selfClosing1) this.expectJSX("/");
                              this.expectJSX(">");
                              return this.finalize(node1, new JSXNode1.JSXOpeningElement(name1, selfClosing1, attributes1));
                          };
                          JSXParser1.prototype.parseJSXBoundaryElement = function() {
                              var node1 = this.createJSXNode();
                              this.expectJSX("<");
                              if (this.matchJSX("/")) {
                                  this.expectJSX("/");
                                  var name_31 = this.parseJSXElementName();
                                  this.expectJSX(">");
                                  return this.finalize(node1, new JSXNode1.JSXClosingElement(name_31));
                              }
                              var name1 = this.parseJSXElementName();
                              var attributes1 = this.parseJSXAttributes();
                              var selfClosing1 = this.matchJSX("/");
                              if (selfClosing1) this.expectJSX("/");
                              this.expectJSX(">");
                              return this.finalize(node1, new JSXNode1.JSXOpeningElement(name1, selfClosing1, attributes1));
                          };
                          JSXParser1.prototype.parseJSXEmptyExpression = function() {
                              var node1 = this.createJSXChildNode();
                              this.collectComments();
                              this.lastMarker.index = this.scanner.index;
                              this.lastMarker.line = this.scanner.lineNumber;
                              this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
                              return this.finalize(node1, new JSXNode1.JSXEmptyExpression());
                          };
                          JSXParser1.prototype.parseJSXExpressionContainer = function() {
                              var node1 = this.createJSXNode();
                              this.expectJSX("{");
                              var expression1;
                              if (this.matchJSX("}")) {
                                  expression1 = this.parseJSXEmptyExpression();
                                  this.expectJSX("}");
                              } else {
                                  this.finishJSX();
                                  expression1 = this.parseAssignmentExpression();
                                  this.reenterJSX();
                              }
                              return this.finalize(node1, new JSXNode1.JSXExpressionContainer(expression1));
                          };
                          JSXParser1.prototype.parseJSXChildren = function() {
                              var children1 = [];
                              while(!this.scanner.eof()){
                                  var node1 = this.createJSXChildNode();
                                  var token1 = this.nextJSXText();
                                  if (token1.start < token1.end) {
                                      var raw1 = this.getTokenRaw(token1);
                                      var child1 = this.finalize(node1, new JSXNode1.JSXText(token1.value, raw1));
                                      children1.push(child1);
                                  }
                                  if (this.scanner.source[this.scanner.index] === "{") {
                                      var container1 = this.parseJSXExpressionContainer();
                                      children1.push(container1);
                                  } else break;
                              }
                              return children1;
                          };
                          JSXParser1.prototype.parseComplexJSXElement = function(el1) {
                              var stack1 = [];
                              while(!this.scanner.eof()){
                                  el1.children = el1.children.concat(this.parseJSXChildren());
                                  var node1 = this.createJSXChildNode();
                                  var element1 = this.parseJSXBoundaryElement();
                                  if (element1.type === jsx_syntax_11.JSXSyntax.JSXOpeningElement) {
                                      var opening1 = element1;
                                      if (opening1.selfClosing) {
                                          var child1 = this.finalize(node1, new JSXNode1.JSXElement(opening1, [], null));
                                          el1.children.push(child1);
                                      } else {
                                          stack1.push(el1);
                                          el1 = {
                                              node: node1,
                                              opening: opening1,
                                              closing: null,
                                              children: []
                                          };
                                      }
                                  }
                                  if (element1.type === jsx_syntax_11.JSXSyntax.JSXClosingElement) {
                                      el1.closing = element1;
                                      var open_11 = getQualifiedElementName1(el1.opening.name);
                                      var close_11 = getQualifiedElementName1(el1.closing.name);
                                      if (open_11 !== close_11) this.tolerateError("Expected corresponding JSX closing tag for %0", open_11);
                                      if (stack1.length > 0) {
                                          var child1 = this.finalize(el1.node, new JSXNode1.JSXElement(el1.opening, el1.children, el1.closing));
                                          el1 = stack1[stack1.length - 1];
                                          el1.children.push(child1);
                                          stack1.pop();
                                      } else break;
                                  }
                              }
                              return el1;
                          };
                          JSXParser1.prototype.parseJSXElement = function() {
                              var node1 = this.createJSXNode();
                              var opening1 = this.parseJSXOpeningElement();
                              var children1 = [];
                              var closing1 = null;
                              if (!opening1.selfClosing) {
                                  var el1 = this.parseComplexJSXElement({
                                      node: node1,
                                      opening: opening1,
                                      closing: closing1,
                                      children: children1
                                  });
                                  children1 = el1.children;
                                  closing1 = el1.closing;
                              }
                              return this.finalize(node1, new JSXNode1.JSXElement(opening1, children1, closing1));
                          };
                          JSXParser1.prototype.parseJSXRoot = function() {
                              // Pop the opening '<' added from the lookahead.
                              if (this.config.tokens) this.tokens.pop();
                              this.startJSX();
                              var element1 = this.parseJSXElement();
                              this.finishJSX();
                              return element1;
                          };
                          JSXParser1.prototype.isStartOfExpression = function() {
                              return _super1.prototype.isStartOfExpression.call(this) || this.match("<");
                          };
                          return JSXParser1;
                      }(parser_11.Parser);
                      exports1.JSXParser = JSXParser1;
                  /***/ },
                  /* 4 */ /***/ function(module1, exports1) {
                      "use strict";
                      Object.defineProperty(exports1, "__esModule", {
                          value: true
                      });
                      // See also tools/generate-unicode-regex.js.
                      var Regex1 = {
                          // Unicode v8.0.0 NonAsciiIdentifierStart:
                          NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
                          // Unicode v8.0.0 NonAsciiIdentifierPart:
                          NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
                      };
                      exports1.Character = {
                          /* tslint:disable:no-bitwise */ fromCodePoint: function(cp1) {
                              return cp1 < 0x10000 ? String.fromCharCode(cp1) : String.fromCharCode(0xD800 + (cp1 - 0x10000 >> 10)) + String.fromCharCode(0xDC00 + (cp1 - 0x10000 & 1023));
                          },
                          // https://tc39.github.io/ecma262/#sec-white-space
                          isWhiteSpace: function(cp1) {
                              return cp1 === 0x20 || cp1 === 0x09 || cp1 === 0x0B || cp1 === 0x0C || cp1 === 0xA0 || cp1 >= 0x1680 && [
                                  0x1680,
                                  0x2000,
                                  0x2001,
                                  0x2002,
                                  0x2003,
                                  0x2004,
                                  0x2005,
                                  0x2006,
                                  0x2007,
                                  0x2008,
                                  0x2009,
                                  0x200A,
                                  0x202F,
                                  0x205F,
                                  0x3000,
                                  0xFEFF
                              ].indexOf(cp1) >= 0;
                          },
                          // https://tc39.github.io/ecma262/#sec-line-terminators
                          isLineTerminator: function(cp1) {
                              return cp1 === 0x0A || cp1 === 0x0D || cp1 === 0x2028 || cp1 === 0x2029;
                          },
                          // https://tc39.github.io/ecma262/#sec-names-and-keywords
                          isIdentifierStart: function(cp1) {
                              return cp1 === 0x24 || cp1 === 0x5F || cp1 >= 0x41 && cp1 <= 0x5A || cp1 >= 0x61 && cp1 <= 0x7A || cp1 === 0x5C || cp1 >= 0x80 && Regex1.NonAsciiIdentifierStart.test(exports1.Character.fromCodePoint(cp1));
                          },
                          isIdentifierPart: function(cp1) {
                              return cp1 === 0x24 || cp1 === 0x5F || cp1 >= 0x41 && cp1 <= 0x5A || cp1 >= 0x61 && cp1 <= 0x7A || cp1 >= 0x30 && cp1 <= 0x39 || cp1 === 0x5C || cp1 >= 0x80 && Regex1.NonAsciiIdentifierPart.test(exports1.Character.fromCodePoint(cp1));
                          },
                          // https://tc39.github.io/ecma262/#sec-literals-numeric-literals
                          isDecimalDigit: function(cp1) {
                              return cp1 >= 0x30 && cp1 <= 0x39; // 0..9
                          },
                          isHexDigit: function(cp1) {
                              return cp1 >= 0x30 && cp1 <= 0x39 || cp1 >= 0x41 && cp1 <= 0x46 || cp1 >= 0x61 && cp1 <= 0x66; // a..f
                          },
                          isOctalDigit: function(cp1) {
                              return cp1 >= 0x30 && cp1 <= 0x37; // 0..7
                          }
                      };
                  /***/ },
                  /* 5 */ /***/ function(module1, exports1, __webpack_require__1) {
                      "use strict";
                      Object.defineProperty(exports1, "__esModule", {
                          value: true
                      });
                      var jsx_syntax_11 = __webpack_require__1(6);
                      /* tslint:disable:max-classes-per-file */ var JSXClosingElement1 = function() {
                          function JSXClosingElement1(name1) {
                              this.type = jsx_syntax_11.JSXSyntax.JSXClosingElement;
                              this.name = name1;
                          }
                          return JSXClosingElement1;
                      }();
                      exports1.JSXClosingElement = JSXClosingElement1;
                      var JSXElement1 = function() {
                          function JSXElement1(openingElement1, children1, closingElement1) {
                              this.type = jsx_syntax_11.JSXSyntax.JSXElement;
                              this.openingElement = openingElement1;
                              this.children = children1;
                              this.closingElement = closingElement1;
                          }
                          return JSXElement1;
                      }();
                      exports1.JSXElement = JSXElement1;
                      var JSXEmptyExpression1 = function() {
                          function JSXEmptyExpression1() {
                              this.type = jsx_syntax_11.JSXSyntax.JSXEmptyExpression;
                          }
                          return JSXEmptyExpression1;
                      }();
                      exports1.JSXEmptyExpression = JSXEmptyExpression1;
                      var JSXExpressionContainer1 = function() {
                          function JSXExpressionContainer1(expression1) {
                              this.type = jsx_syntax_11.JSXSyntax.JSXExpressionContainer;
                              this.expression = expression1;
                          }
                          return JSXExpressionContainer1;
                      }();
                      exports1.JSXExpressionContainer = JSXExpressionContainer1;
                      var JSXIdentifier1 = function() {
                          function JSXIdentifier1(name1) {
                              this.type = jsx_syntax_11.JSXSyntax.JSXIdentifier;
                              this.name = name1;
                          }
                          return JSXIdentifier1;
                      }();
                      exports1.JSXIdentifier = JSXIdentifier1;
                      var JSXMemberExpression1 = function() {
                          function JSXMemberExpression1(object1, property1) {
                              this.type = jsx_syntax_11.JSXSyntax.JSXMemberExpression;
                              this.object = object1;
                              this.property = property1;
                          }
                          return JSXMemberExpression1;
                      }();
                      exports1.JSXMemberExpression = JSXMemberExpression1;
                      var JSXAttribute1 = function() {
                          function JSXAttribute1(name1, value1) {
                              this.type = jsx_syntax_11.JSXSyntax.JSXAttribute;
                              this.name = name1;
                              this.value = value1;
                          }
                          return JSXAttribute1;
                      }();
                      exports1.JSXAttribute = JSXAttribute1;
                      var JSXNamespacedName1 = function() {
                          function JSXNamespacedName1(namespace1, name1) {
                              this.type = jsx_syntax_11.JSXSyntax.JSXNamespacedName;
                              this.namespace = namespace1;
                              this.name = name1;
                          }
                          return JSXNamespacedName1;
                      }();
                      exports1.JSXNamespacedName = JSXNamespacedName1;
                      var JSXOpeningElement1 = function() {
                          function JSXOpeningElement1(name1, selfClosing1, attributes1) {
                              this.type = jsx_syntax_11.JSXSyntax.JSXOpeningElement;
                              this.name = name1;
                              this.selfClosing = selfClosing1;
                              this.attributes = attributes1;
                          }
                          return JSXOpeningElement1;
                      }();
                      exports1.JSXOpeningElement = JSXOpeningElement1;
                      var JSXSpreadAttribute1 = function() {
                          function JSXSpreadAttribute1(argument1) {
                              this.type = jsx_syntax_11.JSXSyntax.JSXSpreadAttribute;
                              this.argument = argument1;
                          }
                          return JSXSpreadAttribute1;
                      }();
                      exports1.JSXSpreadAttribute = JSXSpreadAttribute1;
                      var JSXText1 = function() {
                          function JSXText1(value1, raw1) {
                              this.type = jsx_syntax_11.JSXSyntax.JSXText;
                              this.value = value1;
                              this.raw = raw1;
                          }
                          return JSXText1;
                      }();
                      exports1.JSXText = JSXText1;
                  /***/ },
                  /* 6 */ /***/ function(module1, exports1) {
                      "use strict";
                      Object.defineProperty(exports1, "__esModule", {
                          value: true
                      });
                      exports1.JSXSyntax = {
                          JSXAttribute: "JSXAttribute",
                          JSXClosingElement: "JSXClosingElement",
                          JSXElement: "JSXElement",
                          JSXEmptyExpression: "JSXEmptyExpression",
                          JSXExpressionContainer: "JSXExpressionContainer",
                          JSXIdentifier: "JSXIdentifier",
                          JSXMemberExpression: "JSXMemberExpression",
                          JSXNamespacedName: "JSXNamespacedName",
                          JSXOpeningElement: "JSXOpeningElement",
                          JSXSpreadAttribute: "JSXSpreadAttribute",
                          JSXText: "JSXText"
                      };
                  /***/ },
                  /* 7 */ /***/ function(module1, exports1, __webpack_require__1) {
                      "use strict";
                      Object.defineProperty(exports1, "__esModule", {
                          value: true
                      });
                      var syntax_11 = __webpack_require__1(2);
                      /* tslint:disable:max-classes-per-file */ var ArrayExpression1 = function() {
                          function ArrayExpression1(elements1) {
                              this.type = syntax_11.Syntax.ArrayExpression;
                              this.elements = elements1;
                          }
                          return ArrayExpression1;
                      }();
                      exports1.ArrayExpression = ArrayExpression1;
                      var ArrayPattern1 = function() {
                          function ArrayPattern1(elements1) {
                              this.type = syntax_11.Syntax.ArrayPattern;
                              this.elements = elements1;
                          }
                          return ArrayPattern1;
                      }();
                      exports1.ArrayPattern = ArrayPattern1;
                      var ArrowFunctionExpression1 = function() {
                          function ArrowFunctionExpression1(params1, body1, expression1) {
                              this.type = syntax_11.Syntax.ArrowFunctionExpression;
                              this.id = null;
                              this.params = params1;
                              this.body = body1;
                              this.generator = false;
                              this.expression = expression1;
                              this.async = false;
                          }
                          return ArrowFunctionExpression1;
                      }();
                      exports1.ArrowFunctionExpression = ArrowFunctionExpression1;
                      var AssignmentExpression1 = function() {
                          function AssignmentExpression1(operator1, left1, right1) {
                              this.type = syntax_11.Syntax.AssignmentExpression;
                              this.operator = operator1;
                              this.left = left1;
                              this.right = right1;
                          }
                          return AssignmentExpression1;
                      }();
                      exports1.AssignmentExpression = AssignmentExpression1;
                      var AssignmentPattern1 = function() {
                          function AssignmentPattern1(left1, right1) {
                              this.type = syntax_11.Syntax.AssignmentPattern;
                              this.left = left1;
                              this.right = right1;
                          }
                          return AssignmentPattern1;
                      }();
                      exports1.AssignmentPattern = AssignmentPattern1;
                      var AsyncArrowFunctionExpression1 = function() {
                          function AsyncArrowFunctionExpression1(params1, body1, expression1) {
                              this.type = syntax_11.Syntax.ArrowFunctionExpression;
                              this.id = null;
                              this.params = params1;
                              this.body = body1;
                              this.generator = false;
                              this.expression = expression1;
                              this.async = true;
                          }
                          return AsyncArrowFunctionExpression1;
                      }();
                      exports1.AsyncArrowFunctionExpression = AsyncArrowFunctionExpression1;
                      var AsyncFunctionDeclaration1 = function() {
                          function AsyncFunctionDeclaration1(id1, params1, body1) {
                              this.type = syntax_11.Syntax.FunctionDeclaration;
                              this.id = id1;
                              this.params = params1;
                              this.body = body1;
                              this.generator = false;
                              this.expression = false;
                              this.async = true;
                          }
                          return AsyncFunctionDeclaration1;
                      }();
                      exports1.AsyncFunctionDeclaration = AsyncFunctionDeclaration1;
                      var AsyncFunctionExpression1 = function() {
                          function AsyncFunctionExpression1(id1, params1, body1) {
                              this.type = syntax_11.Syntax.FunctionExpression;
                              this.id = id1;
                              this.params = params1;
                              this.body = body1;
                              this.generator = false;
                              this.expression = false;
                              this.async = true;
                          }
                          return AsyncFunctionExpression1;
                      }();
                      exports1.AsyncFunctionExpression = AsyncFunctionExpression1;
                      var AwaitExpression1 = function() {
                          function AwaitExpression1(argument1) {
                              this.type = syntax_11.Syntax.AwaitExpression;
                              this.argument = argument1;
                          }
                          return AwaitExpression1;
                      }();
                      exports1.AwaitExpression = AwaitExpression1;
                      var BinaryExpression1 = function() {
                          function BinaryExpression1(operator1, left1, right1) {
                              var logical1 = operator1 === "||" || operator1 === "&&";
                              this.type = logical1 ? syntax_11.Syntax.LogicalExpression : syntax_11.Syntax.BinaryExpression;
                              this.operator = operator1;
                              this.left = left1;
                              this.right = right1;
                          }
                          return BinaryExpression1;
                      }();
                      exports1.BinaryExpression = BinaryExpression1;
                      var BlockStatement1 = function() {
                          function BlockStatement1(body1) {
                              this.type = syntax_11.Syntax.BlockStatement;
                              this.body = body1;
                          }
                          return BlockStatement1;
                      }();
                      exports1.BlockStatement = BlockStatement1;
                      var BreakStatement1 = function() {
                          function BreakStatement1(label1) {
                              this.type = syntax_11.Syntax.BreakStatement;
                              this.label = label1;
                          }
                          return BreakStatement1;
                      }();
                      exports1.BreakStatement = BreakStatement1;
                      var CallExpression1 = function() {
                          function CallExpression1(callee1, args1) {
                              this.type = syntax_11.Syntax.CallExpression;
                              this.callee = callee1;
                              this.arguments = args1;
                          }
                          return CallExpression1;
                      }();
                      exports1.CallExpression = CallExpression1;
                      var CatchClause1 = function() {
                          function CatchClause1(param1, body1) {
                              this.type = syntax_11.Syntax.CatchClause;
                              this.param = param1;
                              this.body = body1;
                          }
                          return CatchClause1;
                      }();
                      exports1.CatchClause = CatchClause1;
                      var ClassBody1 = function() {
                          function ClassBody1(body1) {
                              this.type = syntax_11.Syntax.ClassBody;
                              this.body = body1;
                          }
                          return ClassBody1;
                      }();
                      exports1.ClassBody = ClassBody1;
                      var ClassDeclaration1 = function() {
                          function ClassDeclaration1(id1, superClass1, body1) {
                              this.type = syntax_11.Syntax.ClassDeclaration;
                              this.id = id1;
                              this.superClass = superClass1;
                              this.body = body1;
                          }
                          return ClassDeclaration1;
                      }();
                      exports1.ClassDeclaration = ClassDeclaration1;
                      var ClassExpression1 = function() {
                          function ClassExpression1(id1, superClass1, body1) {
                              this.type = syntax_11.Syntax.ClassExpression;
                              this.id = id1;
                              this.superClass = superClass1;
                              this.body = body1;
                          }
                          return ClassExpression1;
                      }();
                      exports1.ClassExpression = ClassExpression1;
                      var ComputedMemberExpression1 = function() {
                          function ComputedMemberExpression1(object1, property1) {
                              this.type = syntax_11.Syntax.MemberExpression;
                              this.computed = true;
                              this.object = object1;
                              this.property = property1;
                          }
                          return ComputedMemberExpression1;
                      }();
                      exports1.ComputedMemberExpression = ComputedMemberExpression1;
                      var ConditionalExpression1 = function() {
                          function ConditionalExpression1(test1, consequent1, alternate1) {
                              this.type = syntax_11.Syntax.ConditionalExpression;
                              this.test = test1;
                              this.consequent = consequent1;
                              this.alternate = alternate1;
                          }
                          return ConditionalExpression1;
                      }();
                      exports1.ConditionalExpression = ConditionalExpression1;
                      var ContinueStatement1 = function() {
                          function ContinueStatement1(label1) {
                              this.type = syntax_11.Syntax.ContinueStatement;
                              this.label = label1;
                          }
                          return ContinueStatement1;
                      }();
                      exports1.ContinueStatement = ContinueStatement1;
                      var DebuggerStatement1 = function() {
                          function DebuggerStatement1() {
                              this.type = syntax_11.Syntax.DebuggerStatement;
                          }
                          return DebuggerStatement1;
                      }();
                      exports1.DebuggerStatement = DebuggerStatement1;
                      var Directive1 = function() {
                          function Directive1(expression1, directive1) {
                              this.type = syntax_11.Syntax.ExpressionStatement;
                              this.expression = expression1;
                              this.directive = directive1;
                          }
                          return Directive1;
                      }();
                      exports1.Directive = Directive1;
                      var DoWhileStatement1 = function() {
                          function DoWhileStatement1(body1, test1) {
                              this.type = syntax_11.Syntax.DoWhileStatement;
                              this.body = body1;
                              this.test = test1;
                          }
                          return DoWhileStatement1;
                      }();
                      exports1.DoWhileStatement = DoWhileStatement1;
                      var EmptyStatement1 = function() {
                          function EmptyStatement1() {
                              this.type = syntax_11.Syntax.EmptyStatement;
                          }
                          return EmptyStatement1;
                      }();
                      exports1.EmptyStatement = EmptyStatement1;
                      var ExportAllDeclaration1 = function() {
                          function ExportAllDeclaration1(source1) {
                              this.type = syntax_11.Syntax.ExportAllDeclaration;
                              this.source = source1;
                          }
                          return ExportAllDeclaration1;
                      }();
                      exports1.ExportAllDeclaration = ExportAllDeclaration1;
                      var ExportDefaultDeclaration1 = function() {
                          function ExportDefaultDeclaration1(declaration1) {
                              this.type = syntax_11.Syntax.ExportDefaultDeclaration;
                              this.declaration = declaration1;
                          }
                          return ExportDefaultDeclaration1;
                      }();
                      exports1.ExportDefaultDeclaration = ExportDefaultDeclaration1;
                      var ExportNamedDeclaration1 = function() {
                          function ExportNamedDeclaration1(declaration1, specifiers1, source1) {
                              this.type = syntax_11.Syntax.ExportNamedDeclaration;
                              this.declaration = declaration1;
                              this.specifiers = specifiers1;
                              this.source = source1;
                          }
                          return ExportNamedDeclaration1;
                      }();
                      exports1.ExportNamedDeclaration = ExportNamedDeclaration1;
                      var ExportSpecifier1 = function() {
                          function ExportSpecifier1(local1, exported1) {
                              this.type = syntax_11.Syntax.ExportSpecifier;
                              this.exported = exported1;
                              this.local = local1;
                          }
                          return ExportSpecifier1;
                      }();
                      exports1.ExportSpecifier = ExportSpecifier1;
                      var ExpressionStatement1 = function() {
                          function ExpressionStatement1(expression1) {
                              this.type = syntax_11.Syntax.ExpressionStatement;
                              this.expression = expression1;
                          }
                          return ExpressionStatement1;
                      }();
                      exports1.ExpressionStatement = ExpressionStatement1;
                      var ForInStatement1 = function() {
                          function ForInStatement1(left1, right1, body1) {
                              this.type = syntax_11.Syntax.ForInStatement;
                              this.left = left1;
                              this.right = right1;
                              this.body = body1;
                              this.each = false;
                          }
                          return ForInStatement1;
                      }();
                      exports1.ForInStatement = ForInStatement1;
                      var ForOfStatement1 = function() {
                          function ForOfStatement1(left1, right1, body1) {
                              this.type = syntax_11.Syntax.ForOfStatement;
                              this.left = left1;
                              this.right = right1;
                              this.body = body1;
                          }
                          return ForOfStatement1;
                      }();
                      exports1.ForOfStatement = ForOfStatement1;
                      var ForStatement1 = function() {
                          function ForStatement1(init1, test1, update1, body1) {
                              this.type = syntax_11.Syntax.ForStatement;
                              this.init = init1;
                              this.test = test1;
                              this.update = update1;
                              this.body = body1;
                          }
                          return ForStatement1;
                      }();
                      exports1.ForStatement = ForStatement1;
                      var FunctionDeclaration1 = function() {
                          function FunctionDeclaration1(id1, params1, body1, generator1) {
                              this.type = syntax_11.Syntax.FunctionDeclaration;
                              this.id = id1;
                              this.params = params1;
                              this.body = body1;
                              this.generator = generator1;
                              this.expression = false;
                              this.async = false;
                          }
                          return FunctionDeclaration1;
                      }();
                      exports1.FunctionDeclaration = FunctionDeclaration1;
                      var FunctionExpression1 = function() {
                          function FunctionExpression1(id1, params1, body1, generator1) {
                              this.type = syntax_11.Syntax.FunctionExpression;
                              this.id = id1;
                              this.params = params1;
                              this.body = body1;
                              this.generator = generator1;
                              this.expression = false;
                              this.async = false;
                          }
                          return FunctionExpression1;
                      }();
                      exports1.FunctionExpression = FunctionExpression1;
                      var Identifier1 = function() {
                          function Identifier1(name1) {
                              this.type = syntax_11.Syntax.Identifier;
                              this.name = name1;
                          }
                          return Identifier1;
                      }();
                      exports1.Identifier = Identifier1;
                      var IfStatement1 = function() {
                          function IfStatement1(test1, consequent1, alternate1) {
                              this.type = syntax_11.Syntax.IfStatement;
                              this.test = test1;
                              this.consequent = consequent1;
                              this.alternate = alternate1;
                          }
                          return IfStatement1;
                      }();
                      exports1.IfStatement = IfStatement1;
                      var ImportDeclaration1 = function() {
                          function ImportDeclaration1(specifiers1, source1) {
                              this.type = syntax_11.Syntax.ImportDeclaration;
                              this.specifiers = specifiers1;
                              this.source = source1;
                          }
                          return ImportDeclaration1;
                      }();
                      exports1.ImportDeclaration = ImportDeclaration1;
                      var ImportDefaultSpecifier1 = function() {
                          function ImportDefaultSpecifier1(local1) {
                              this.type = syntax_11.Syntax.ImportDefaultSpecifier;
                              this.local = local1;
                          }
                          return ImportDefaultSpecifier1;
                      }();
                      exports1.ImportDefaultSpecifier = ImportDefaultSpecifier1;
                      var ImportNamespaceSpecifier1 = function() {
                          function ImportNamespaceSpecifier1(local1) {
                              this.type = syntax_11.Syntax.ImportNamespaceSpecifier;
                              this.local = local1;
                          }
                          return ImportNamespaceSpecifier1;
                      }();
                      exports1.ImportNamespaceSpecifier = ImportNamespaceSpecifier1;
                      var ImportSpecifier1 = function() {
                          function ImportSpecifier1(local1, imported1) {
                              this.type = syntax_11.Syntax.ImportSpecifier;
                              this.local = local1;
                              this.imported = imported1;
                          }
                          return ImportSpecifier1;
                      }();
                      exports1.ImportSpecifier = ImportSpecifier1;
                      var LabeledStatement1 = function() {
                          function LabeledStatement1(label1, body1) {
                              this.type = syntax_11.Syntax.LabeledStatement;
                              this.label = label1;
                              this.body = body1;
                          }
                          return LabeledStatement1;
                      }();
                      exports1.LabeledStatement = LabeledStatement1;
                      var Literal1 = function() {
                          function Literal1(value1, raw1) {
                              this.type = syntax_11.Syntax.Literal;
                              this.value = value1;
                              this.raw = raw1;
                          }
                          return Literal1;
                      }();
                      exports1.Literal = Literal1;
                      var MetaProperty1 = function() {
                          function MetaProperty1(meta1, property1) {
                              this.type = syntax_11.Syntax.MetaProperty;
                              this.meta = meta1;
                              this.property = property1;
                          }
                          return MetaProperty1;
                      }();
                      exports1.MetaProperty = MetaProperty1;
                      var MethodDefinition1 = function() {
                          function MethodDefinition1(key1, computed1, value1, kind1, isStatic1) {
                              this.type = syntax_11.Syntax.MethodDefinition;
                              this.key = key1;
                              this.computed = computed1;
                              this.value = value1;
                              this.kind = kind1;
                              this.static = isStatic1;
                          }
                          return MethodDefinition1;
                      }();
                      exports1.MethodDefinition = MethodDefinition1;
                      var Module1 = function() {
                          function Module1(body1) {
                              this.type = syntax_11.Syntax.Program;
                              this.body = body1;
                              this.sourceType = "module";
                          }
                          return Module1;
                      }();
                      exports1.Module = Module1;
                      var NewExpression1 = function() {
                          function NewExpression1(callee1, args1) {
                              this.type = syntax_11.Syntax.NewExpression;
                              this.callee = callee1;
                              this.arguments = args1;
                          }
                          return NewExpression1;
                      }();
                      exports1.NewExpression = NewExpression1;
                      var ObjectExpression1 = function() {
                          function ObjectExpression1(properties1) {
                              this.type = syntax_11.Syntax.ObjectExpression;
                              this.properties = properties1;
                          }
                          return ObjectExpression1;
                      }();
                      exports1.ObjectExpression = ObjectExpression1;
                      var ObjectPattern1 = function() {
                          function ObjectPattern1(properties1) {
                              this.type = syntax_11.Syntax.ObjectPattern;
                              this.properties = properties1;
                          }
                          return ObjectPattern1;
                      }();
                      exports1.ObjectPattern = ObjectPattern1;
                      var Property1 = function() {
                          function Property1(kind1, key1, computed1, value1, method1, shorthand1) {
                              this.type = syntax_11.Syntax.Property;
                              this.key = key1;
                              this.computed = computed1;
                              this.value = value1;
                              this.kind = kind1;
                              this.method = method1;
                              this.shorthand = shorthand1;
                          }
                          return Property1;
                      }();
                      exports1.Property = Property1;
                      var RegexLiteral1 = function() {
                          function RegexLiteral1(value1, raw1, pattern1, flags1) {
                              this.type = syntax_11.Syntax.Literal;
                              this.value = value1;
                              this.raw = raw1;
                              this.regex = {
                                  pattern: pattern1,
                                  flags: flags1
                              };
                          }
                          return RegexLiteral1;
                      }();
                      exports1.RegexLiteral = RegexLiteral1;
                      var RestElement1 = function() {
                          function RestElement1(argument1) {
                              this.type = syntax_11.Syntax.RestElement;
                              this.argument = argument1;
                          }
                          return RestElement1;
                      }();
                      exports1.RestElement = RestElement1;
                      var ReturnStatement1 = function() {
                          function ReturnStatement1(argument1) {
                              this.type = syntax_11.Syntax.ReturnStatement;
                              this.argument = argument1;
                          }
                          return ReturnStatement1;
                      }();
                      exports1.ReturnStatement = ReturnStatement1;
                      var Script1 = function() {
                          function Script1(body1) {
                              this.type = syntax_11.Syntax.Program;
                              this.body = body1;
                              this.sourceType = "script";
                          }
                          return Script1;
                      }();
                      exports1.Script = Script1;
                      var SequenceExpression1 = function() {
                          function SequenceExpression1(expressions1) {
                              this.type = syntax_11.Syntax.SequenceExpression;
                              this.expressions = expressions1;
                          }
                          return SequenceExpression1;
                      }();
                      exports1.SequenceExpression = SequenceExpression1;
                      var SpreadElement1 = function() {
                          function SpreadElement1(argument1) {
                              this.type = syntax_11.Syntax.SpreadElement;
                              this.argument = argument1;
                          }
                          return SpreadElement1;
                      }();
                      exports1.SpreadElement = SpreadElement1;
                      var StaticMemberExpression1 = function() {
                          function StaticMemberExpression1(object1, property1) {
                              this.type = syntax_11.Syntax.MemberExpression;
                              this.computed = false;
                              this.object = object1;
                              this.property = property1;
                          }
                          return StaticMemberExpression1;
                      }();
                      exports1.StaticMemberExpression = StaticMemberExpression1;
                      var Super1 = function() {
                          function Super1() {
                              this.type = syntax_11.Syntax.Super;
                          }
                          return Super1;
                      }();
                      exports1.Super = Super1;
                      var SwitchCase1 = function() {
                          function SwitchCase1(test1, consequent1) {
                              this.type = syntax_11.Syntax.SwitchCase;
                              this.test = test1;
                              this.consequent = consequent1;
                          }
                          return SwitchCase1;
                      }();
                      exports1.SwitchCase = SwitchCase1;
                      var SwitchStatement1 = function() {
                          function SwitchStatement1(discriminant1, cases1) {
                              this.type = syntax_11.Syntax.SwitchStatement;
                              this.discriminant = discriminant1;
                              this.cases = cases1;
                          }
                          return SwitchStatement1;
                      }();
                      exports1.SwitchStatement = SwitchStatement1;
                      var TaggedTemplateExpression1 = function() {
                          function TaggedTemplateExpression1(tag1, quasi1) {
                              this.type = syntax_11.Syntax.TaggedTemplateExpression;
                              this.tag = tag1;
                              this.quasi = quasi1;
                          }
                          return TaggedTemplateExpression1;
                      }();
                      exports1.TaggedTemplateExpression = TaggedTemplateExpression1;
                      var TemplateElement1 = function() {
                          function TemplateElement1(value1, tail1) {
                              this.type = syntax_11.Syntax.TemplateElement;
                              this.value = value1;
                              this.tail = tail1;
                          }
                          return TemplateElement1;
                      }();
                      exports1.TemplateElement = TemplateElement1;
                      var TemplateLiteral1 = function() {
                          function TemplateLiteral1(quasis1, expressions1) {
                              this.type = syntax_11.Syntax.TemplateLiteral;
                              this.quasis = quasis1;
                              this.expressions = expressions1;
                          }
                          return TemplateLiteral1;
                      }();
                      exports1.TemplateLiteral = TemplateLiteral1;
                      var ThisExpression1 = function() {
                          function ThisExpression1() {
                              this.type = syntax_11.Syntax.ThisExpression;
                          }
                          return ThisExpression1;
                      }();
                      exports1.ThisExpression = ThisExpression1;
                      var ThrowStatement1 = function() {
                          function ThrowStatement1(argument1) {
                              this.type = syntax_11.Syntax.ThrowStatement;
                              this.argument = argument1;
                          }
                          return ThrowStatement1;
                      }();
                      exports1.ThrowStatement = ThrowStatement1;
                      var TryStatement1 = function() {
                          function TryStatement1(block1, handler1, finalizer1) {
                              this.type = syntax_11.Syntax.TryStatement;
                              this.block = block1;
                              this.handler = handler1;
                              this.finalizer = finalizer1;
                          }
                          return TryStatement1;
                      }();
                      exports1.TryStatement = TryStatement1;
                      var UnaryExpression1 = function() {
                          function UnaryExpression1(operator1, argument1) {
                              this.type = syntax_11.Syntax.UnaryExpression;
                              this.operator = operator1;
                              this.argument = argument1;
                              this.prefix = true;
                          }
                          return UnaryExpression1;
                      }();
                      exports1.UnaryExpression = UnaryExpression1;
                      var UpdateExpression1 = function() {
                          function UpdateExpression1(operator1, argument1, prefix1) {
                              this.type = syntax_11.Syntax.UpdateExpression;
                              this.operator = operator1;
                              this.argument = argument1;
                              this.prefix = prefix1;
                          }
                          return UpdateExpression1;
                      }();
                      exports1.UpdateExpression = UpdateExpression1;
                      var VariableDeclaration1 = function() {
                          function VariableDeclaration1(declarations1, kind1) {
                              this.type = syntax_11.Syntax.VariableDeclaration;
                              this.declarations = declarations1;
                              this.kind = kind1;
                          }
                          return VariableDeclaration1;
                      }();
                      exports1.VariableDeclaration = VariableDeclaration1;
                      var VariableDeclarator1 = function() {
                          function VariableDeclarator1(id1, init1) {
                              this.type = syntax_11.Syntax.VariableDeclarator;
                              this.id = id1;
                              this.init = init1;
                          }
                          return VariableDeclarator1;
                      }();
                      exports1.VariableDeclarator = VariableDeclarator1;
                      var WhileStatement1 = function() {
                          function WhileStatement1(test1, body1) {
                              this.type = syntax_11.Syntax.WhileStatement;
                              this.test = test1;
                              this.body = body1;
                          }
                          return WhileStatement1;
                      }();
                      exports1.WhileStatement = WhileStatement1;
                      var WithStatement1 = function() {
                          function WithStatement1(object1, body1) {
                              this.type = syntax_11.Syntax.WithStatement;
                              this.object = object1;
                              this.body = body1;
                          }
                          return WithStatement1;
                      }();
                      exports1.WithStatement = WithStatement1;
                      var YieldExpression1 = function() {
                          function YieldExpression1(argument1, delegate1) {
                              this.type = syntax_11.Syntax.YieldExpression;
                              this.argument = argument1;
                              this.delegate = delegate1;
                          }
                          return YieldExpression1;
                      }();
                      exports1.YieldExpression = YieldExpression1;
                  /***/ },
                  /* 8 */ /***/ function(module1, exports1, __webpack_require__1) {
                      "use strict";
                      Object.defineProperty(exports1, "__esModule", {
                          value: true
                      });
                      var assert_11 = __webpack_require__1(9);
                      var error_handler_11 = __webpack_require__1(10);
                      var messages_11 = __webpack_require__1(11);
                      var Node1 = __webpack_require__1(7);
                      var scanner_11 = __webpack_require__1(12);
                      var syntax_11 = __webpack_require__1(2);
                      var token_11 = __webpack_require__1(13);
                      var ArrowParameterPlaceHolder1 = "ArrowParameterPlaceHolder";
                      var Parser1 = function() {
                          function Parser1(code1, options1, delegate1) {
                              if (options1 === void 0) options1 = {};
                              this.config = {
                                  range: typeof options1.range === "boolean" && options1.range,
                                  loc: typeof options1.loc === "boolean" && options1.loc,
                                  source: null,
                                  tokens: typeof options1.tokens === "boolean" && options1.tokens,
                                  comment: typeof options1.comment === "boolean" && options1.comment,
                                  tolerant: typeof options1.tolerant === "boolean" && options1.tolerant
                              };
                              if (this.config.loc && options1.source && options1.source !== null) this.config.source = String(options1.source);
                              this.delegate = delegate1;
                              this.errorHandler = new error_handler_11.ErrorHandler();
                              this.errorHandler.tolerant = this.config.tolerant;
                              this.scanner = new scanner_11.Scanner(code1, this.errorHandler);
                              this.scanner.trackComment = this.config.comment;
                              this.operatorPrecedence = {
                                  ")": 0,
                                  ";": 0,
                                  ",": 0,
                                  "=": 0,
                                  "]": 0,
                                  "||": 1,
                                  "&&": 2,
                                  "|": 3,
                                  "^": 4,
                                  "&": 5,
                                  "==": 6,
                                  "!=": 6,
                                  "===": 6,
                                  "!==": 6,
                                  "<": 7,
                                  ">": 7,
                                  "<=": 7,
                                  ">=": 7,
                                  "<<": 8,
                                  ">>": 8,
                                  ">>>": 8,
                                  "+": 9,
                                  "-": 9,
                                  "*": 11,
                                  "/": 11,
                                  "%": 11
                              };
                              this.lookahead = {
                                  type: 2 /* EOF */ ,
                                  value: "",
                                  lineNumber: this.scanner.lineNumber,
                                  lineStart: 0,
                                  start: 0,
                                  end: 0
                              };
                              this.hasLineTerminator = false;
                              this.context = {
                                  isModule: false,
                                  await: false,
                                  allowIn: true,
                                  allowStrictDirective: true,
                                  allowYield: true,
                                  firstCoverInitializedNameError: null,
                                  isAssignmentTarget: false,
                                  isBindingElement: false,
                                  inFunctionBody: false,
                                  inIteration: false,
                                  inSwitch: false,
                                  labelSet: {},
                                  strict: false
                              };
                              this.tokens = [];
                              this.startMarker = {
                                  index: 0,
                                  line: this.scanner.lineNumber,
                                  column: 0
                              };
                              this.lastMarker = {
                                  index: 0,
                                  line: this.scanner.lineNumber,
                                  column: 0
                              };
                              this.nextToken();
                              this.lastMarker = {
                                  index: this.scanner.index,
                                  line: this.scanner.lineNumber,
                                  column: this.scanner.index - this.scanner.lineStart
                              };
                          }
                          Parser1.prototype.throwError = function(messageFormat1) {
                              var values1 = [];
                              for(var _i1 = 1; _i1 < arguments.length; _i1++)values1[_i1 - 1] = arguments[_i1];
                              var args1 = Array.prototype.slice.call(arguments, 1);
                              var msg1 = messageFormat1.replace(/%(\d)/g, function(whole1, idx1) {
                                  assert_11.assert(idx1 < args1.length, "Message reference must be in range");
                                  return args1[idx1];
                              });
                              var index3 = this.lastMarker.index;
                              var line1 = this.lastMarker.line;
                              var column1 = this.lastMarker.column + 1;
                              throw this.errorHandler.createError(index3, line1, column1, msg1);
                          };
                          Parser1.prototype.tolerateError = function(messageFormat1) {
                              var values1 = [];
                              for(var _i1 = 1; _i1 < arguments.length; _i1++)values1[_i1 - 1] = arguments[_i1];
                              var args1 = Array.prototype.slice.call(arguments, 1);
                              var msg1 = messageFormat1.replace(/%(\d)/g, function(whole1, idx1) {
                                  assert_11.assert(idx1 < args1.length, "Message reference must be in range");
                                  return args1[idx1];
                              });
                              var index3 = this.lastMarker.index;
                              var line1 = this.scanner.lineNumber;
                              var column1 = this.lastMarker.column + 1;
                              this.errorHandler.tolerateError(index3, line1, column1, msg1);
                          };
                          // Throw an exception because of the token.
                          Parser1.prototype.unexpectedTokenError = function(token1, message1) {
                              var msg1 = message1 || messages_11.Messages.UnexpectedToken;
                              var value1;
                              if (token1) {
                                  if (!message1) {
                                      msg1 = token1.type === 2 /* EOF */  ? messages_11.Messages.UnexpectedEOS : token1.type === 3 /* Identifier */  ? messages_11.Messages.UnexpectedIdentifier : token1.type === 6 /* NumericLiteral */  ? messages_11.Messages.UnexpectedNumber : token1.type === 8 /* StringLiteral */  ? messages_11.Messages.UnexpectedString : token1.type === 10 /* Template */  ? messages_11.Messages.UnexpectedTemplate : messages_11.Messages.UnexpectedToken;
                                      if (token1.type === 4 /* Keyword */ ) {
                                          if (this.scanner.isFutureReservedWord(token1.value)) msg1 = messages_11.Messages.UnexpectedReserved;
                                          else if (this.context.strict && this.scanner.isStrictModeReservedWord(token1.value)) msg1 = messages_11.Messages.StrictReservedWord;
                                      }
                                  }
                                  value1 = token1.value;
                              } else value1 = "ILLEGAL";
                              msg1 = msg1.replace("%0", value1);
                              if (token1 && typeof token1.lineNumber === "number") {
                                  var index3 = token1.start;
                                  var line1 = token1.lineNumber;
                                  var lastMarkerLineStart1 = this.lastMarker.index - this.lastMarker.column;
                                  var column1 = token1.start - lastMarkerLineStart1 + 1;
                                  return this.errorHandler.createError(index3, line1, column1, msg1);
                              } else {
                                  var index3 = this.lastMarker.index;
                                  var line1 = this.lastMarker.line;
                                  var column1 = this.lastMarker.column + 1;
                                  return this.errorHandler.createError(index3, line1, column1, msg1);
                              }
                          };
                          Parser1.prototype.throwUnexpectedToken = function(token1, message1) {
                              throw this.unexpectedTokenError(token1, message1);
                          };
                          Parser1.prototype.tolerateUnexpectedToken = function(token1, message1) {
                              this.errorHandler.tolerate(this.unexpectedTokenError(token1, message1));
                          };
                          Parser1.prototype.collectComments = function() {
                              if (!this.config.comment) this.scanner.scanComments();
                              else {
                                  var comments1 = this.scanner.scanComments();
                                  if (comments1.length > 0 && this.delegate) for(var i3 = 0; i3 < comments1.length; ++i3){
                                      var e1 = comments1[i3];
                                      var node1 = void 0;
                                      node1 = {
                                          type: e1.multiLine ? "BlockComment" : "LineComment",
                                          value: this.scanner.source.slice(e1.slice[0], e1.slice[1])
                                      };
                                      if (this.config.range) node1.range = e1.range;
                                      if (this.config.loc) node1.loc = e1.loc;
                                      var metadata1 = {
                                          start: {
                                              line: e1.loc.start.line,
                                              column: e1.loc.start.column,
                                              offset: e1.range[0]
                                          },
                                          end: {
                                              line: e1.loc.end.line,
                                              column: e1.loc.end.column,
                                              offset: e1.range[1]
                                          }
                                      };
                                      this.delegate(node1, metadata1);
                                  }
                              }
                          };
                          // From internal representation to an external structure
                          Parser1.prototype.getTokenRaw = function(token1) {
                              return this.scanner.source.slice(token1.start, token1.end);
                          };
                          Parser1.prototype.convertToken = function(token1) {
                              var t4 = {
                                  type: token_11.TokenName[token1.type],
                                  value: this.getTokenRaw(token1)
                              };
                              if (this.config.range) t4.range = [
                                  token1.start,
                                  token1.end
                              ];
                              if (this.config.loc) t4.loc = {
                                  start: {
                                      line: this.startMarker.line,
                                      column: this.startMarker.column
                                  },
                                  end: {
                                      line: this.scanner.lineNumber,
                                      column: this.scanner.index - this.scanner.lineStart
                                  }
                              };
                              if (token1.type === 9 /* RegularExpression */ ) {
                                  var pattern1 = token1.pattern;
                                  var flags1 = token1.flags;
                                  t4.regex = {
                                      pattern: pattern1,
                                      flags: flags1
                                  };
                              }
                              return t4;
                          };
                          Parser1.prototype.nextToken = function() {
                              var token1 = this.lookahead;
                              this.lastMarker.index = this.scanner.index;
                              this.lastMarker.line = this.scanner.lineNumber;
                              this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
                              this.collectComments();
                              if (this.scanner.index !== this.startMarker.index) {
                                  this.startMarker.index = this.scanner.index;
                                  this.startMarker.line = this.scanner.lineNumber;
                                  this.startMarker.column = this.scanner.index - this.scanner.lineStart;
                              }
                              var next1 = this.scanner.lex();
                              this.hasLineTerminator = token1.lineNumber !== next1.lineNumber;
                              if (next1 && this.context.strict && next1.type === 3 /* Identifier */ ) {
                                  if (this.scanner.isStrictModeReservedWord(next1.value)) next1.type = 4 /* Keyword */ ;
                              }
                              this.lookahead = next1;
                              if (this.config.tokens && next1.type !== 2 /* EOF */ ) this.tokens.push(this.convertToken(next1));
                              return token1;
                          };
                          Parser1.prototype.nextRegexToken = function() {
                              this.collectComments();
                              var token1 = this.scanner.scanRegExp();
                              if (this.config.tokens) {
                                  // Pop the previous token, '/' or '/='
                                  // This is added from the lookahead token.
                                  this.tokens.pop();
                                  this.tokens.push(this.convertToken(token1));
                              }
                              // Prime the next lookahead.
                              this.lookahead = token1;
                              this.nextToken();
                              return token1;
                          };
                          Parser1.prototype.createNode = function() {
                              return {
                                  index: this.startMarker.index,
                                  line: this.startMarker.line,
                                  column: this.startMarker.column
                              };
                          };
                          Parser1.prototype.startNode = function(token1, lastLineStart1) {
                              if (lastLineStart1 === void 0) lastLineStart1 = 0;
                              var column1 = token1.start - token1.lineStart;
                              var line1 = token1.lineNumber;
                              if (column1 < 0) {
                                  column1 += lastLineStart1;
                                  line1--;
                              }
                              return {
                                  index: token1.start,
                                  line: line1,
                                  column: column1
                              };
                          };
                          Parser1.prototype.finalize = function(marker1, node1) {
                              if (this.config.range) node1.range = [
                                  marker1.index,
                                  this.lastMarker.index
                              ];
                              if (this.config.loc) {
                                  node1.loc = {
                                      start: {
                                          line: marker1.line,
                                          column: marker1.column
                                      },
                                      end: {
                                          line: this.lastMarker.line,
                                          column: this.lastMarker.column
                                      }
                                  };
                                  if (this.config.source) node1.loc.source = this.config.source;
                              }
                              if (this.delegate) {
                                  var metadata1 = {
                                      start: {
                                          line: marker1.line,
                                          column: marker1.column,
                                          offset: marker1.index
                                      },
                                      end: {
                                          line: this.lastMarker.line,
                                          column: this.lastMarker.column,
                                          offset: this.lastMarker.index
                                      }
                                  };
                                  this.delegate(node1, metadata1);
                              }
                              return node1;
                          };
                          // Expect the next token to match the specified punctuator.
                          // If not, an exception will be thrown.
                          Parser1.prototype.expect = function(value1) {
                              var token1 = this.nextToken();
                              if (token1.type !== 7 /* Punctuator */  || token1.value !== value1) this.throwUnexpectedToken(token1);
                          };
                          // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().
                          Parser1.prototype.expectCommaSeparator = function() {
                              if (this.config.tolerant) {
                                  var token1 = this.lookahead;
                                  if (token1.type === 7 /* Punctuator */  && token1.value === ",") this.nextToken();
                                  else if (token1.type === 7 /* Punctuator */  && token1.value === ";") {
                                      this.nextToken();
                                      this.tolerateUnexpectedToken(token1);
                                  } else this.tolerateUnexpectedToken(token1, messages_11.Messages.UnexpectedToken);
                              } else this.expect(",");
                          };
                          // Expect the next token to match the specified keyword.
                          // If not, an exception will be thrown.
                          Parser1.prototype.expectKeyword = function(keyword1) {
                              var token1 = this.nextToken();
                              if (token1.type !== 4 /* Keyword */  || token1.value !== keyword1) this.throwUnexpectedToken(token1);
                          };
                          // Return true if the next token matches the specified punctuator.
                          Parser1.prototype.match = function(value1) {
                              return this.lookahead.type === 7 /* Punctuator */  && this.lookahead.value === value1;
                          };
                          // Return true if the next token matches the specified keyword
                          Parser1.prototype.matchKeyword = function(keyword1) {
                              return this.lookahead.type === 4 /* Keyword */  && this.lookahead.value === keyword1;
                          };
                          // Return true if the next token matches the specified contextual keyword
                          // (where an identifier is sometimes a keyword depending on the context)
                          Parser1.prototype.matchContextualKeyword = function(keyword1) {
                              return this.lookahead.type === 3 /* Identifier */  && this.lookahead.value === keyword1;
                          };
                          // Return true if the next token is an assignment operator
                          Parser1.prototype.matchAssign = function() {
                              if (this.lookahead.type !== 7 /* Punctuator */ ) return false;
                              var op1 = this.lookahead.value;
                              return op1 === "=" || op1 === "*=" || op1 === "**=" || op1 === "/=" || op1 === "%=" || op1 === "+=" || op1 === "-=" || op1 === "<<=" || op1 === ">>=" || op1 === ">>>=" || op1 === "&=" || op1 === "^=" || op1 === "|=";
                          };
                          // Cover grammar support.
                          //
                          // When an assignment expression position starts with an left parenthesis, the determination of the type
                          // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)
                          // or the first comma. This situation also defers the determination of all the expressions nested in the pair.
                          //
                          // There are three productions that can be parsed in a parentheses pair that needs to be determined
                          // after the outermost pair is closed. They are:
                          //
                          //   1. AssignmentExpression
                          //   2. BindingElements
                          //   3. AssignmentTargets
                          //
                          // In order to avoid exponential backtracking, we use two flags to denote if the production can be
                          // binding element or assignment target.
                          //
                          // The three productions have the relationship:
                          //
                          //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression
                          //
                          // with a single exception that CoverInitializedName when used directly in an Expression, generates
                          // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the
                          // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.
                          //
                          // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not
                          // effect the current flags. This means the production the parser parses is only used as an expression. Therefore
                          // the CoverInitializedName check is conducted.
                          //
                          // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates
                          // the flags outside of the parser. This means the production the parser parses is used as a part of a potential
                          // pattern. The CoverInitializedName check is deferred.
                          Parser1.prototype.isolateCoverGrammar = function(parseFunction1) {
                              var previousIsBindingElement1 = this.context.isBindingElement;
                              var previousIsAssignmentTarget1 = this.context.isAssignmentTarget;
                              var previousFirstCoverInitializedNameError1 = this.context.firstCoverInitializedNameError;
                              this.context.isBindingElement = true;
                              this.context.isAssignmentTarget = true;
                              this.context.firstCoverInitializedNameError = null;
                              var result1 = parseFunction1.call(this);
                              if (this.context.firstCoverInitializedNameError !== null) this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);
                              this.context.isBindingElement = previousIsBindingElement1;
                              this.context.isAssignmentTarget = previousIsAssignmentTarget1;
                              this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError1;
                              return result1;
                          };
                          Parser1.prototype.inheritCoverGrammar = function(parseFunction1) {
                              var previousIsBindingElement1 = this.context.isBindingElement;
                              var previousIsAssignmentTarget1 = this.context.isAssignmentTarget;
                              var previousFirstCoverInitializedNameError1 = this.context.firstCoverInitializedNameError;
                              this.context.isBindingElement = true;
                              this.context.isAssignmentTarget = true;
                              this.context.firstCoverInitializedNameError = null;
                              var result1 = parseFunction1.call(this);
                              this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement1;
                              this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget1;
                              this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError1 || this.context.firstCoverInitializedNameError;
                              return result1;
                          };
                          Parser1.prototype.consumeSemicolon = function() {
                              if (this.match(";")) this.nextToken();
                              else if (!this.hasLineTerminator) {
                                  if (this.lookahead.type !== 2 /* EOF */  && !this.match("}")) this.throwUnexpectedToken(this.lookahead);
                                  this.lastMarker.index = this.startMarker.index;
                                  this.lastMarker.line = this.startMarker.line;
                                  this.lastMarker.column = this.startMarker.column;
                              }
                          };
                          // https://tc39.github.io/ecma262/#sec-primary-expression
                          Parser1.prototype.parsePrimaryExpression = function() {
                              var node1 = this.createNode();
                              var expr1;
                              var token1, raw1;
                              switch(this.lookahead.type){
                                  case 3 /* Identifier */ :
                                      if ((this.context.isModule || this.context.await) && this.lookahead.value === "await") this.tolerateUnexpectedToken(this.lookahead);
                                      expr1 = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(node1, new Node1.Identifier(this.nextToken().value));
                                      break;
                                  case 6 /* NumericLiteral */ :
                                  case 8 /* StringLiteral */ :
                                      if (this.context.strict && this.lookahead.octal) this.tolerateUnexpectedToken(this.lookahead, messages_11.Messages.StrictOctalLiteral);
                                      this.context.isAssignmentTarget = false;
                                      this.context.isBindingElement = false;
                                      token1 = this.nextToken();
                                      raw1 = this.getTokenRaw(token1);
                                      expr1 = this.finalize(node1, new Node1.Literal(token1.value, raw1));
                                      break;
                                  case 1 /* BooleanLiteral */ :
                                      this.context.isAssignmentTarget = false;
                                      this.context.isBindingElement = false;
                                      token1 = this.nextToken();
                                      raw1 = this.getTokenRaw(token1);
                                      expr1 = this.finalize(node1, new Node1.Literal(token1.value === "true", raw1));
                                      break;
                                  case 5 /* NullLiteral */ :
                                      this.context.isAssignmentTarget = false;
                                      this.context.isBindingElement = false;
                                      token1 = this.nextToken();
                                      raw1 = this.getTokenRaw(token1);
                                      expr1 = this.finalize(node1, new Node1.Literal(null, raw1));
                                      break;
                                  case 10 /* Template */ :
                                      expr1 = this.parseTemplateLiteral();
                                      break;
                                  case 7 /* Punctuator */ :
                                      switch(this.lookahead.value){
                                          case "(":
                                              this.context.isBindingElement = false;
                                              expr1 = this.inheritCoverGrammar(this.parseGroupExpression);
                                              break;
                                          case "[":
                                              expr1 = this.inheritCoverGrammar(this.parseArrayInitializer);
                                              break;
                                          case "{":
                                              expr1 = this.inheritCoverGrammar(this.parseObjectInitializer);
                                              break;
                                          case "/":
                                          case "/=":
                                              this.context.isAssignmentTarget = false;
                                              this.context.isBindingElement = false;
                                              this.scanner.index = this.startMarker.index;
                                              token1 = this.nextRegexToken();
                                              raw1 = this.getTokenRaw(token1);
                                              expr1 = this.finalize(node1, new Node1.RegexLiteral(token1.regex, raw1, token1.pattern, token1.flags));
                                              break;
                                          default:
                                              expr1 = this.throwUnexpectedToken(this.nextToken());
                                      }
                                      break;
                                  case 4 /* Keyword */ :
                                      if (!this.context.strict && this.context.allowYield && this.matchKeyword("yield")) expr1 = this.parseIdentifierName();
                                      else if (!this.context.strict && this.matchKeyword("let")) expr1 = this.finalize(node1, new Node1.Identifier(this.nextToken().value));
                                      else {
                                          this.context.isAssignmentTarget = false;
                                          this.context.isBindingElement = false;
                                          if (this.matchKeyword("function")) expr1 = this.parseFunctionExpression();
                                          else if (this.matchKeyword("this")) {
                                              this.nextToken();
                                              expr1 = this.finalize(node1, new Node1.ThisExpression());
                                          } else if (this.matchKeyword("class")) expr1 = this.parseClassExpression();
                                          else expr1 = this.throwUnexpectedToken(this.nextToken());
                                      }
                                      break;
                                  default:
                                      expr1 = this.throwUnexpectedToken(this.nextToken());
                              }
                              return expr1;
                          };
                          // https://tc39.github.io/ecma262/#sec-array-initializer
                          Parser1.prototype.parseSpreadElement = function() {
                              var node1 = this.createNode();
                              this.expect("...");
                              var arg1 = this.inheritCoverGrammar(this.parseAssignmentExpression);
                              return this.finalize(node1, new Node1.SpreadElement(arg1));
                          };
                          Parser1.prototype.parseArrayInitializer = function() {
                              var node1 = this.createNode();
                              var elements1 = [];
                              this.expect("[");
                              while(!this.match("]")){
                                  if (this.match(",")) {
                                      this.nextToken();
                                      elements1.push(null);
                                  } else if (this.match("...")) {
                                      var element1 = this.parseSpreadElement();
                                      if (!this.match("]")) {
                                          this.context.isAssignmentTarget = false;
                                          this.context.isBindingElement = false;
                                          this.expect(",");
                                      }
                                      elements1.push(element1);
                                  } else {
                                      elements1.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
                                      if (!this.match("]")) this.expect(",");
                                  }
                              }
                              this.expect("]");
                              return this.finalize(node1, new Node1.ArrayExpression(elements1));
                          };
                          // https://tc39.github.io/ecma262/#sec-object-initializer
                          Parser1.prototype.parsePropertyMethod = function(params1) {
                              this.context.isAssignmentTarget = false;
                              this.context.isBindingElement = false;
                              var previousStrict1 = this.context.strict;
                              var previousAllowStrictDirective1 = this.context.allowStrictDirective;
                              this.context.allowStrictDirective = params1.simple;
                              var body1 = this.isolateCoverGrammar(this.parseFunctionSourceElements);
                              if (this.context.strict && params1.firstRestricted) this.tolerateUnexpectedToken(params1.firstRestricted, params1.message);
                              if (this.context.strict && params1.stricted) this.tolerateUnexpectedToken(params1.stricted, params1.message);
                              this.context.strict = previousStrict1;
                              this.context.allowStrictDirective = previousAllowStrictDirective1;
                              return body1;
                          };
                          Parser1.prototype.parsePropertyMethodFunction = function() {
                              var isGenerator1 = false;
                              var node1 = this.createNode();
                              var previousAllowYield1 = this.context.allowYield;
                              this.context.allowYield = true;
                              var params1 = this.parseFormalParameters();
                              var method1 = this.parsePropertyMethod(params1);
                              this.context.allowYield = previousAllowYield1;
                              return this.finalize(node1, new Node1.FunctionExpression(null, params1.params, method1, isGenerator1));
                          };
                          Parser1.prototype.parsePropertyMethodAsyncFunction = function() {
                              var node1 = this.createNode();
                              var previousAllowYield1 = this.context.allowYield;
                              var previousAwait1 = this.context.await;
                              this.context.allowYield = false;
                              this.context.await = true;
                              var params1 = this.parseFormalParameters();
                              var method1 = this.parsePropertyMethod(params1);
                              this.context.allowYield = previousAllowYield1;
                              this.context.await = previousAwait1;
                              return this.finalize(node1, new Node1.AsyncFunctionExpression(null, params1.params, method1));
                          };
                          Parser1.prototype.parseObjectPropertyKey = function() {
                              var node1 = this.createNode();
                              var token1 = this.nextToken();
                              var key1;
                              switch(token1.type){
                                  case 8 /* StringLiteral */ :
                                  case 6 /* NumericLiteral */ :
                                      if (this.context.strict && token1.octal) this.tolerateUnexpectedToken(token1, messages_11.Messages.StrictOctalLiteral);
                                      var raw1 = this.getTokenRaw(token1);
                                      key1 = this.finalize(node1, new Node1.Literal(token1.value, raw1));
                                      break;
                                  case 3 /* Identifier */ :
                                  case 1 /* BooleanLiteral */ :
                                  case 5 /* NullLiteral */ :
                                  case 4 /* Keyword */ :
                                      key1 = this.finalize(node1, new Node1.Identifier(token1.value));
                                      break;
                                  case 7 /* Punctuator */ :
                                      if (token1.value === "[") {
                                          key1 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                                          this.expect("]");
                                      } else key1 = this.throwUnexpectedToken(token1);
                                      break;
                                  default:
                                      key1 = this.throwUnexpectedToken(token1);
                              }
                              return key1;
                          };
                          Parser1.prototype.isPropertyKey = function(key1, value1) {
                              return key1.type === syntax_11.Syntax.Identifier && key1.name === value1 || key1.type === syntax_11.Syntax.Literal && key1.value === value1;
                          };
                          Parser1.prototype.parseObjectProperty = function(hasProto1) {
                              var node1 = this.createNode();
                              var token1 = this.lookahead;
                              var kind1;
                              var key1 = null;
                              var value1 = null;
                              var computed1 = false;
                              var method1 = false;
                              var shorthand1 = false;
                              var isAsync1 = false;
                              if (token1.type === 3 /* Identifier */ ) {
                                  var id1 = token1.value;
                                  this.nextToken();
                                  computed1 = this.match("[");
                                  isAsync1 = !this.hasLineTerminator && id1 === "async" && !this.match(":") && !this.match("(") && !this.match("*") && !this.match(",");
                                  key1 = isAsync1 ? this.parseObjectPropertyKey() : this.finalize(node1, new Node1.Identifier(id1));
                              } else if (this.match("*")) this.nextToken();
                              else {
                                  computed1 = this.match("[");
                                  key1 = this.parseObjectPropertyKey();
                              }
                              var lookaheadPropertyKey1 = this.qualifiedPropertyName(this.lookahead);
                              if (token1.type === 3 /* Identifier */  && !isAsync1 && token1.value === "get" && lookaheadPropertyKey1) {
                                  kind1 = "get";
                                  computed1 = this.match("[");
                                  key1 = this.parseObjectPropertyKey();
                                  this.context.allowYield = false;
                                  value1 = this.parseGetterMethod();
                              } else if (token1.type === 3 /* Identifier */  && !isAsync1 && token1.value === "set" && lookaheadPropertyKey1) {
                                  kind1 = "set";
                                  computed1 = this.match("[");
                                  key1 = this.parseObjectPropertyKey();
                                  value1 = this.parseSetterMethod();
                              } else if (token1.type === 7 /* Punctuator */  && token1.value === "*" && lookaheadPropertyKey1) {
                                  kind1 = "init";
                                  computed1 = this.match("[");
                                  key1 = this.parseObjectPropertyKey();
                                  value1 = this.parseGeneratorMethod();
                                  method1 = true;
                              } else {
                                  if (!key1) this.throwUnexpectedToken(this.lookahead);
                                  kind1 = "init";
                                  if (this.match(":") && !isAsync1) {
                                      if (!computed1 && this.isPropertyKey(key1, "__proto__")) {
                                          if (hasProto1.value) this.tolerateError(messages_11.Messages.DuplicateProtoProperty);
                                          hasProto1.value = true;
                                      }
                                      this.nextToken();
                                      value1 = this.inheritCoverGrammar(this.parseAssignmentExpression);
                                  } else if (this.match("(")) {
                                      value1 = isAsync1 ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
                                      method1 = true;
                                  } else if (token1.type === 3 /* Identifier */ ) {
                                      var id1 = this.finalize(node1, new Node1.Identifier(token1.value));
                                      if (this.match("=")) {
                                          this.context.firstCoverInitializedNameError = this.lookahead;
                                          this.nextToken();
                                          shorthand1 = true;
                                          var init1 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                                          value1 = this.finalize(node1, new Node1.AssignmentPattern(id1, init1));
                                      } else {
                                          shorthand1 = true;
                                          value1 = id1;
                                      }
                                  } else this.throwUnexpectedToken(this.nextToken());
                              }
                              return this.finalize(node1, new Node1.Property(kind1, key1, computed1, value1, method1, shorthand1));
                          };
                          Parser1.prototype.parseObjectInitializer = function() {
                              var node1 = this.createNode();
                              this.expect("{");
                              var properties1 = [];
                              var hasProto1 = {
                                  value: false
                              };
                              while(!this.match("}")){
                                  properties1.push(this.parseObjectProperty(hasProto1));
                                  if (!this.match("}")) this.expectCommaSeparator();
                              }
                              this.expect("}");
                              return this.finalize(node1, new Node1.ObjectExpression(properties1));
                          };
                          // https://tc39.github.io/ecma262/#sec-template-literals
                          Parser1.prototype.parseTemplateHead = function() {
                              assert_11.assert(this.lookahead.head, "Template literal must start with a template head");
                              var node1 = this.createNode();
                              var token1 = this.nextToken();
                              var raw1 = token1.value;
                              var cooked1 = token1.cooked;
                              return this.finalize(node1, new Node1.TemplateElement({
                                  raw: raw1,
                                  cooked: cooked1
                              }, token1.tail));
                          };
                          Parser1.prototype.parseTemplateElement = function() {
                              if (this.lookahead.type !== 10 /* Template */ ) this.throwUnexpectedToken();
                              var node1 = this.createNode();
                              var token1 = this.nextToken();
                              var raw1 = token1.value;
                              var cooked1 = token1.cooked;
                              return this.finalize(node1, new Node1.TemplateElement({
                                  raw: raw1,
                                  cooked: cooked1
                              }, token1.tail));
                          };
                          Parser1.prototype.parseTemplateLiteral = function() {
                              var node1 = this.createNode();
                              var expressions1 = [];
                              var quasis1 = [];
                              var quasi1 = this.parseTemplateHead();
                              quasis1.push(quasi1);
                              while(!quasi1.tail){
                                  expressions1.push(this.parseExpression());
                                  quasi1 = this.parseTemplateElement();
                                  quasis1.push(quasi1);
                              }
                              return this.finalize(node1, new Node1.TemplateLiteral(quasis1, expressions1));
                          };
                          // https://tc39.github.io/ecma262/#sec-grouping-operator
                          Parser1.prototype.reinterpretExpressionAsPattern = function(expr1) {
                              switch(expr1.type){
                                  case syntax_11.Syntax.Identifier:
                                  case syntax_11.Syntax.MemberExpression:
                                  case syntax_11.Syntax.RestElement:
                                  case syntax_11.Syntax.AssignmentPattern:
                                      break;
                                  case syntax_11.Syntax.SpreadElement:
                                      expr1.type = syntax_11.Syntax.RestElement;
                                      this.reinterpretExpressionAsPattern(expr1.argument);
                                      break;
                                  case syntax_11.Syntax.ArrayExpression:
                                      expr1.type = syntax_11.Syntax.ArrayPattern;
                                      for(var i3 = 0; i3 < expr1.elements.length; i3++)if (expr1.elements[i3] !== null) this.reinterpretExpressionAsPattern(expr1.elements[i3]);
                                      break;
                                  case syntax_11.Syntax.ObjectExpression:
                                      expr1.type = syntax_11.Syntax.ObjectPattern;
                                      for(var i3 = 0; i3 < expr1.properties.length; i3++)this.reinterpretExpressionAsPattern(expr1.properties[i3].value);
                                      break;
                                  case syntax_11.Syntax.AssignmentExpression:
                                      expr1.type = syntax_11.Syntax.AssignmentPattern;
                                      delete expr1.operator;
                                      this.reinterpretExpressionAsPattern(expr1.left);
                                      break;
                                  default:
                                      break;
                              }
                          };
                          Parser1.prototype.parseGroupExpression = function() {
                              var expr1;
                              this.expect("(");
                              if (this.match(")")) {
                                  this.nextToken();
                                  if (!this.match("=>")) this.expect("=>");
                                  expr1 = {
                                      type: ArrowParameterPlaceHolder1,
                                      params: [],
                                      async: false
                                  };
                              } else {
                                  var startToken1 = this.lookahead;
                                  var params1 = [];
                                  if (this.match("...")) {
                                      expr1 = this.parseRestElement(params1);
                                      this.expect(")");
                                      if (!this.match("=>")) this.expect("=>");
                                      expr1 = {
                                          type: ArrowParameterPlaceHolder1,
                                          params: [
                                              expr1
                                          ],
                                          async: false
                                      };
                                  } else {
                                      var arrow1 = false;
                                      this.context.isBindingElement = true;
                                      expr1 = this.inheritCoverGrammar(this.parseAssignmentExpression);
                                      if (this.match(",")) {
                                          var expressions1 = [];
                                          this.context.isAssignmentTarget = false;
                                          expressions1.push(expr1);
                                          while(this.lookahead.type !== 2 /* EOF */ ){
                                              if (!this.match(",")) break;
                                              this.nextToken();
                                              if (this.match(")")) {
                                                  this.nextToken();
                                                  for(var i3 = 0; i3 < expressions1.length; i3++)this.reinterpretExpressionAsPattern(expressions1[i3]);
                                                  arrow1 = true;
                                                  expr1 = {
                                                      type: ArrowParameterPlaceHolder1,
                                                      params: expressions1,
                                                      async: false
                                                  };
                                              } else if (this.match("...")) {
                                                  if (!this.context.isBindingElement) this.throwUnexpectedToken(this.lookahead);
                                                  expressions1.push(this.parseRestElement(params1));
                                                  this.expect(")");
                                                  if (!this.match("=>")) this.expect("=>");
                                                  this.context.isBindingElement = false;
                                                  for(var i3 = 0; i3 < expressions1.length; i3++)this.reinterpretExpressionAsPattern(expressions1[i3]);
                                                  arrow1 = true;
                                                  expr1 = {
                                                      type: ArrowParameterPlaceHolder1,
                                                      params: expressions1,
                                                      async: false
                                                  };
                                              } else expressions1.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
                                              if (arrow1) break;
                                          }
                                          if (!arrow1) expr1 = this.finalize(this.startNode(startToken1), new Node1.SequenceExpression(expressions1));
                                      }
                                      if (!arrow1) {
                                          this.expect(")");
                                          if (this.match("=>")) {
                                              if (expr1.type === syntax_11.Syntax.Identifier && expr1.name === "yield") {
                                                  arrow1 = true;
                                                  expr1 = {
                                                      type: ArrowParameterPlaceHolder1,
                                                      params: [
                                                          expr1
                                                      ],
                                                      async: false
                                                  };
                                              }
                                              if (!arrow1) {
                                                  if (!this.context.isBindingElement) this.throwUnexpectedToken(this.lookahead);
                                                  if (expr1.type === syntax_11.Syntax.SequenceExpression) for(var i3 = 0; i3 < expr1.expressions.length; i3++)this.reinterpretExpressionAsPattern(expr1.expressions[i3]);
                                                  else this.reinterpretExpressionAsPattern(expr1);
                                                  var parameters1 = expr1.type === syntax_11.Syntax.SequenceExpression ? expr1.expressions : [
                                                      expr1
                                                  ];
                                                  expr1 = {
                                                      type: ArrowParameterPlaceHolder1,
                                                      params: parameters1,
                                                      async: false
                                                  };
                                              }
                                          }
                                          this.context.isBindingElement = false;
                                      }
                                  }
                              }
                              return expr1;
                          };
                          // https://tc39.github.io/ecma262/#sec-left-hand-side-expressions
                          Parser1.prototype.parseArguments = function() {
                              this.expect("(");
                              var args1 = [];
                              if (!this.match(")")) while(true){
                                  var expr1 = this.match("...") ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAssignmentExpression);
                                  args1.push(expr1);
                                  if (this.match(")")) break;
                                  this.expectCommaSeparator();
                                  if (this.match(")")) break;
                              }
                              this.expect(")");
                              return args1;
                          };
                          Parser1.prototype.isIdentifierName = function(token1) {
                              return token1.type === 3 /* Identifier */  || token1.type === 4 /* Keyword */  || token1.type === 1 /* BooleanLiteral */  || token1.type === 5 /* NullLiteral */ ;
                          };
                          Parser1.prototype.parseIdentifierName = function() {
                              var node1 = this.createNode();
                              var token1 = this.nextToken();
                              if (!this.isIdentifierName(token1)) this.throwUnexpectedToken(token1);
                              return this.finalize(node1, new Node1.Identifier(token1.value));
                          };
                          Parser1.prototype.parseNewExpression = function() {
                              var node1 = this.createNode();
                              var id1 = this.parseIdentifierName();
                              assert_11.assert(id1.name === "new", "New expression must start with `new`");
                              var expr1;
                              if (this.match(".")) {
                                  this.nextToken();
                                  if (this.lookahead.type === 3 /* Identifier */  && this.context.inFunctionBody && this.lookahead.value === "target") {
                                      var property1 = this.parseIdentifierName();
                                      expr1 = new Node1.MetaProperty(id1, property1);
                                  } else this.throwUnexpectedToken(this.lookahead);
                              } else {
                                  var callee1 = this.isolateCoverGrammar(this.parseLeftHandSideExpression);
                                  var args1 = this.match("(") ? this.parseArguments() : [];
                                  expr1 = new Node1.NewExpression(callee1, args1);
                                  this.context.isAssignmentTarget = false;
                                  this.context.isBindingElement = false;
                              }
                              return this.finalize(node1, expr1);
                          };
                          Parser1.prototype.parseAsyncArgument = function() {
                              var arg1 = this.parseAssignmentExpression();
                              this.context.firstCoverInitializedNameError = null;
                              return arg1;
                          };
                          Parser1.prototype.parseAsyncArguments = function() {
                              this.expect("(");
                              var args1 = [];
                              if (!this.match(")")) while(true){
                                  var expr1 = this.match("...") ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAsyncArgument);
                                  args1.push(expr1);
                                  if (this.match(")")) break;
                                  this.expectCommaSeparator();
                                  if (this.match(")")) break;
                              }
                              this.expect(")");
                              return args1;
                          };
                          Parser1.prototype.parseLeftHandSideExpressionAllowCall = function() {
                              var startToken1 = this.lookahead;
                              var maybeAsync1 = this.matchContextualKeyword("async");
                              var previousAllowIn1 = this.context.allowIn;
                              this.context.allowIn = true;
                              var expr1;
                              if (this.matchKeyword("super") && this.context.inFunctionBody) {
                                  expr1 = this.createNode();
                                  this.nextToken();
                                  expr1 = this.finalize(expr1, new Node1.Super());
                                  if (!this.match("(") && !this.match(".") && !this.match("[")) this.throwUnexpectedToken(this.lookahead);
                              } else expr1 = this.inheritCoverGrammar(this.matchKeyword("new") ? this.parseNewExpression : this.parsePrimaryExpression);
                              while(true){
                                  if (this.match(".")) {
                                      this.context.isBindingElement = false;
                                      this.context.isAssignmentTarget = true;
                                      this.expect(".");
                                      var property1 = this.parseIdentifierName();
                                      expr1 = this.finalize(this.startNode(startToken1), new Node1.StaticMemberExpression(expr1, property1));
                                  } else if (this.match("(")) {
                                      var asyncArrow1 = maybeAsync1 && startToken1.lineNumber === this.lookahead.lineNumber;
                                      this.context.isBindingElement = false;
                                      this.context.isAssignmentTarget = false;
                                      var args1 = asyncArrow1 ? this.parseAsyncArguments() : this.parseArguments();
                                      expr1 = this.finalize(this.startNode(startToken1), new Node1.CallExpression(expr1, args1));
                                      if (asyncArrow1 && this.match("=>")) {
                                          for(var i3 = 0; i3 < args1.length; ++i3)this.reinterpretExpressionAsPattern(args1[i3]);
                                          expr1 = {
                                              type: ArrowParameterPlaceHolder1,
                                              params: args1,
                                              async: true
                                          };
                                      }
                                  } else if (this.match("[")) {
                                      this.context.isBindingElement = false;
                                      this.context.isAssignmentTarget = true;
                                      this.expect("[");
                                      var property1 = this.isolateCoverGrammar(this.parseExpression);
                                      this.expect("]");
                                      expr1 = this.finalize(this.startNode(startToken1), new Node1.ComputedMemberExpression(expr1, property1));
                                  } else if (this.lookahead.type === 10 /* Template */  && this.lookahead.head) {
                                      var quasi1 = this.parseTemplateLiteral();
                                      expr1 = this.finalize(this.startNode(startToken1), new Node1.TaggedTemplateExpression(expr1, quasi1));
                                  } else break;
                              }
                              this.context.allowIn = previousAllowIn1;
                              return expr1;
                          };
                          Parser1.prototype.parseSuper = function() {
                              var node1 = this.createNode();
                              this.expectKeyword("super");
                              if (!this.match("[") && !this.match(".")) this.throwUnexpectedToken(this.lookahead);
                              return this.finalize(node1, new Node1.Super());
                          };
                          Parser1.prototype.parseLeftHandSideExpression = function() {
                              assert_11.assert(this.context.allowIn, "callee of new expression always allow in keyword.");
                              var node1 = this.startNode(this.lookahead);
                              var expr1 = this.matchKeyword("super") && this.context.inFunctionBody ? this.parseSuper() : this.inheritCoverGrammar(this.matchKeyword("new") ? this.parseNewExpression : this.parsePrimaryExpression);
                              while(true){
                                  if (this.match("[")) {
                                      this.context.isBindingElement = false;
                                      this.context.isAssignmentTarget = true;
                                      this.expect("[");
                                      var property1 = this.isolateCoverGrammar(this.parseExpression);
                                      this.expect("]");
                                      expr1 = this.finalize(node1, new Node1.ComputedMemberExpression(expr1, property1));
                                  } else if (this.match(".")) {
                                      this.context.isBindingElement = false;
                                      this.context.isAssignmentTarget = true;
                                      this.expect(".");
                                      var property1 = this.parseIdentifierName();
                                      expr1 = this.finalize(node1, new Node1.StaticMemberExpression(expr1, property1));
                                  } else if (this.lookahead.type === 10 /* Template */  && this.lookahead.head) {
                                      var quasi1 = this.parseTemplateLiteral();
                                      expr1 = this.finalize(node1, new Node1.TaggedTemplateExpression(expr1, quasi1));
                                  } else break;
                              }
                              return expr1;
                          };
                          // https://tc39.github.io/ecma262/#sec-update-expressions
                          Parser1.prototype.parseUpdateExpression = function() {
                              var expr1;
                              var startToken1 = this.lookahead;
                              if (this.match("++") || this.match("--")) {
                                  var node1 = this.startNode(startToken1);
                                  var token1 = this.nextToken();
                                  expr1 = this.inheritCoverGrammar(this.parseUnaryExpression);
                                  if (this.context.strict && expr1.type === syntax_11.Syntax.Identifier && this.scanner.isRestrictedWord(expr1.name)) this.tolerateError(messages_11.Messages.StrictLHSPrefix);
                                  if (!this.context.isAssignmentTarget) this.tolerateError(messages_11.Messages.InvalidLHSInAssignment);
                                  var prefix1 = true;
                                  expr1 = this.finalize(node1, new Node1.UpdateExpression(token1.value, expr1, prefix1));
                                  this.context.isAssignmentTarget = false;
                                  this.context.isBindingElement = false;
                              } else {
                                  expr1 = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
                                  if (!this.hasLineTerminator && this.lookahead.type === 7 /* Punctuator */ ) {
                                      if (this.match("++") || this.match("--")) {
                                          if (this.context.strict && expr1.type === syntax_11.Syntax.Identifier && this.scanner.isRestrictedWord(expr1.name)) this.tolerateError(messages_11.Messages.StrictLHSPostfix);
                                          if (!this.context.isAssignmentTarget) this.tolerateError(messages_11.Messages.InvalidLHSInAssignment);
                                          this.context.isAssignmentTarget = false;
                                          this.context.isBindingElement = false;
                                          var operator1 = this.nextToken().value;
                                          var prefix1 = false;
                                          expr1 = this.finalize(this.startNode(startToken1), new Node1.UpdateExpression(operator1, expr1, prefix1));
                                      }
                                  }
                              }
                              return expr1;
                          };
                          // https://tc39.github.io/ecma262/#sec-unary-operators
                          Parser1.prototype.parseAwaitExpression = function() {
                              var node1 = this.createNode();
                              this.nextToken();
                              var argument1 = this.parseUnaryExpression();
                              return this.finalize(node1, new Node1.AwaitExpression(argument1));
                          };
                          Parser1.prototype.parseUnaryExpression = function() {
                              var expr1;
                              if (this.match("+") || this.match("-") || this.match("~") || this.match("!") || this.matchKeyword("delete") || this.matchKeyword("void") || this.matchKeyword("typeof")) {
                                  var node1 = this.startNode(this.lookahead);
                                  var token1 = this.nextToken();
                                  expr1 = this.inheritCoverGrammar(this.parseUnaryExpression);
                                  expr1 = this.finalize(node1, new Node1.UnaryExpression(token1.value, expr1));
                                  if (this.context.strict && expr1.operator === "delete" && expr1.argument.type === syntax_11.Syntax.Identifier) this.tolerateError(messages_11.Messages.StrictDelete);
                                  this.context.isAssignmentTarget = false;
                                  this.context.isBindingElement = false;
                              } else if (this.context.await && this.matchContextualKeyword("await")) expr1 = this.parseAwaitExpression();
                              else expr1 = this.parseUpdateExpression();
                              return expr1;
                          };
                          Parser1.prototype.parseExponentiationExpression = function() {
                              var startToken1 = this.lookahead;
                              var expr1 = this.inheritCoverGrammar(this.parseUnaryExpression);
                              if (expr1.type !== syntax_11.Syntax.UnaryExpression && this.match("**")) {
                                  this.nextToken();
                                  this.context.isAssignmentTarget = false;
                                  this.context.isBindingElement = false;
                                  var left1 = expr1;
                                  var right1 = this.isolateCoverGrammar(this.parseExponentiationExpression);
                                  expr1 = this.finalize(this.startNode(startToken1), new Node1.BinaryExpression("**", left1, right1));
                              }
                              return expr1;
                          };
                          // https://tc39.github.io/ecma262/#sec-exp-operator
                          // https://tc39.github.io/ecma262/#sec-multiplicative-operators
                          // https://tc39.github.io/ecma262/#sec-additive-operators
                          // https://tc39.github.io/ecma262/#sec-bitwise-shift-operators
                          // https://tc39.github.io/ecma262/#sec-relational-operators
                          // https://tc39.github.io/ecma262/#sec-equality-operators
                          // https://tc39.github.io/ecma262/#sec-binary-bitwise-operators
                          // https://tc39.github.io/ecma262/#sec-binary-logical-operators
                          Parser1.prototype.binaryPrecedence = function(token1) {
                              var op1 = token1.value;
                              var precedence1;
                              if (token1.type === 7 /* Punctuator */ ) precedence1 = this.operatorPrecedence[op1] || 0;
                              else if (token1.type === 4 /* Keyword */ ) precedence1 = op1 === "instanceof" || this.context.allowIn && op1 === "in" ? 7 : 0;
                              else precedence1 = 0;
                              return precedence1;
                          };
                          Parser1.prototype.parseBinaryExpression = function() {
                              var startToken1 = this.lookahead;
                              var expr1 = this.inheritCoverGrammar(this.parseExponentiationExpression);
                              var token1 = this.lookahead;
                              var prec1 = this.binaryPrecedence(token1);
                              if (prec1 > 0) {
                                  this.nextToken();
                                  this.context.isAssignmentTarget = false;
                                  this.context.isBindingElement = false;
                                  var markers1 = [
                                      startToken1,
                                      this.lookahead
                                  ];
                                  var left1 = expr1;
                                  var right1 = this.isolateCoverGrammar(this.parseExponentiationExpression);
                                  var stack1 = [
                                      left1,
                                      token1.value,
                                      right1
                                  ];
                                  var precedences1 = [
                                      prec1
                                  ];
                                  while(true){
                                      prec1 = this.binaryPrecedence(this.lookahead);
                                      if (prec1 <= 0) break;
                                      // Reduce: make a binary expression from the three topmost entries.
                                      while(stack1.length > 2 && prec1 <= precedences1[precedences1.length - 1]){
                                          right1 = stack1.pop();
                                          var operator1 = stack1.pop();
                                          precedences1.pop();
                                          left1 = stack1.pop();
                                          markers1.pop();
                                          var node1 = this.startNode(markers1[markers1.length - 1]);
                                          stack1.push(this.finalize(node1, new Node1.BinaryExpression(operator1, left1, right1)));
                                      }
                                      // Shift.
                                      stack1.push(this.nextToken().value);
                                      precedences1.push(prec1);
                                      markers1.push(this.lookahead);
                                      stack1.push(this.isolateCoverGrammar(this.parseExponentiationExpression));
                                  }
                                  // Final reduce to clean-up the stack.
                                  var i3 = stack1.length - 1;
                                  expr1 = stack1[i3];
                                  var lastMarker1 = markers1.pop();
                                  while(i3 > 1){
                                      var marker1 = markers1.pop();
                                      var lastLineStart1 = lastMarker1 && lastMarker1.lineStart;
                                      var node1 = this.startNode(marker1, lastLineStart1);
                                      var operator1 = stack1[i3 - 1];
                                      expr1 = this.finalize(node1, new Node1.BinaryExpression(operator1, stack1[i3 - 2], expr1));
                                      i3 -= 2;
                                      lastMarker1 = marker1;
                                  }
                              }
                              return expr1;
                          };
                          // https://tc39.github.io/ecma262/#sec-conditional-operator
                          Parser1.prototype.parseConditionalExpression = function() {
                              var startToken1 = this.lookahead;
                              var expr1 = this.inheritCoverGrammar(this.parseBinaryExpression);
                              if (this.match("?")) {
                                  this.nextToken();
                                  var previousAllowIn1 = this.context.allowIn;
                                  this.context.allowIn = true;
                                  var consequent1 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                                  this.context.allowIn = previousAllowIn1;
                                  this.expect(":");
                                  var alternate1 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                                  expr1 = this.finalize(this.startNode(startToken1), new Node1.ConditionalExpression(expr1, consequent1, alternate1));
                                  this.context.isAssignmentTarget = false;
                                  this.context.isBindingElement = false;
                              }
                              return expr1;
                          };
                          // https://tc39.github.io/ecma262/#sec-assignment-operators
                          Parser1.prototype.checkPatternParam = function(options1, param1) {
                              switch(param1.type){
                                  case syntax_11.Syntax.Identifier:
                                      this.validateParam(options1, param1, param1.name);
                                      break;
                                  case syntax_11.Syntax.RestElement:
                                      this.checkPatternParam(options1, param1.argument);
                                      break;
                                  case syntax_11.Syntax.AssignmentPattern:
                                      this.checkPatternParam(options1, param1.left);
                                      break;
                                  case syntax_11.Syntax.ArrayPattern:
                                      for(var i3 = 0; i3 < param1.elements.length; i3++)if (param1.elements[i3] !== null) this.checkPatternParam(options1, param1.elements[i3]);
                                      break;
                                  case syntax_11.Syntax.ObjectPattern:
                                      for(var i3 = 0; i3 < param1.properties.length; i3++)this.checkPatternParam(options1, param1.properties[i3].value);
                                      break;
                                  default:
                                      break;
                              }
                              options1.simple = options1.simple && param1 instanceof Node1.Identifier;
                          };
                          Parser1.prototype.reinterpretAsCoverFormalsList = function(expr1) {
                              var params1 = [
                                  expr1
                              ];
                              var options1;
                              var asyncArrow1 = false;
                              switch(expr1.type){
                                  case syntax_11.Syntax.Identifier:
                                      break;
                                  case ArrowParameterPlaceHolder1:
                                      params1 = expr1.params;
                                      asyncArrow1 = expr1.async;
                                      break;
                                  default:
                                      return null;
                              }
                              options1 = {
                                  simple: true,
                                  paramSet: {}
                              };
                              for(var i3 = 0; i3 < params1.length; ++i3){
                                  var param1 = params1[i3];
                                  if (param1.type === syntax_11.Syntax.AssignmentPattern) {
                                      if (param1.right.type === syntax_11.Syntax.YieldExpression) {
                                          if (param1.right.argument) this.throwUnexpectedToken(this.lookahead);
                                          param1.right.type = syntax_11.Syntax.Identifier;
                                          param1.right.name = "yield";
                                          delete param1.right.argument;
                                          delete param1.right.delegate;
                                      }
                                  } else if (asyncArrow1 && param1.type === syntax_11.Syntax.Identifier && param1.name === "await") this.throwUnexpectedToken(this.lookahead);
                                  this.checkPatternParam(options1, param1);
                                  params1[i3] = param1;
                              }
                              if (this.context.strict || !this.context.allowYield) for(var i3 = 0; i3 < params1.length; ++i3){
                                  var param1 = params1[i3];
                                  if (param1.type === syntax_11.Syntax.YieldExpression) this.throwUnexpectedToken(this.lookahead);
                              }
                              if (options1.message === messages_11.Messages.StrictParamDupe) {
                                  var token1 = this.context.strict ? options1.stricted : options1.firstRestricted;
                                  this.throwUnexpectedToken(token1, options1.message);
                              }
                              return {
                                  simple: options1.simple,
                                  params: params1,
                                  stricted: options1.stricted,
                                  firstRestricted: options1.firstRestricted,
                                  message: options1.message
                              };
                          };
                          Parser1.prototype.parseAssignmentExpression = function() {
                              var expr1;
                              if (!this.context.allowYield && this.matchKeyword("yield")) expr1 = this.parseYieldExpression();
                              else {
                                  var startToken1 = this.lookahead;
                                  var token1 = startToken1;
                                  expr1 = this.parseConditionalExpression();
                                  if (token1.type === 3 /* Identifier */  && token1.lineNumber === this.lookahead.lineNumber && token1.value === "async") {
                                      if (this.lookahead.type === 3 /* Identifier */  || this.matchKeyword("yield")) {
                                          var arg1 = this.parsePrimaryExpression();
                                          this.reinterpretExpressionAsPattern(arg1);
                                          expr1 = {
                                              type: ArrowParameterPlaceHolder1,
                                              params: [
                                                  arg1
                                              ],
                                              async: true
                                          };
                                      }
                                  }
                                  if (expr1.type === ArrowParameterPlaceHolder1 || this.match("=>")) {
                                      // https://tc39.github.io/ecma262/#sec-arrow-function-definitions
                                      this.context.isAssignmentTarget = false;
                                      this.context.isBindingElement = false;
                                      var isAsync1 = expr1.async;
                                      var list1 = this.reinterpretAsCoverFormalsList(expr1);
                                      if (list1) {
                                          if (this.hasLineTerminator) this.tolerateUnexpectedToken(this.lookahead);
                                          this.context.firstCoverInitializedNameError = null;
                                          var previousStrict1 = this.context.strict;
                                          var previousAllowStrictDirective1 = this.context.allowStrictDirective;
                                          this.context.allowStrictDirective = list1.simple;
                                          var previousAllowYield1 = this.context.allowYield;
                                          var previousAwait1 = this.context.await;
                                          this.context.allowYield = true;
                                          this.context.await = isAsync1;
                                          var node1 = this.startNode(startToken1);
                                          this.expect("=>");
                                          var body1 = void 0;
                                          if (this.match("{")) {
                                              var previousAllowIn1 = this.context.allowIn;
                                              this.context.allowIn = true;
                                              body1 = this.parseFunctionSourceElements();
                                              this.context.allowIn = previousAllowIn1;
                                          } else body1 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                                          var expression1 = body1.type !== syntax_11.Syntax.BlockStatement;
                                          if (this.context.strict && list1.firstRestricted) this.throwUnexpectedToken(list1.firstRestricted, list1.message);
                                          if (this.context.strict && list1.stricted) this.tolerateUnexpectedToken(list1.stricted, list1.message);
                                          expr1 = isAsync1 ? this.finalize(node1, new Node1.AsyncArrowFunctionExpression(list1.params, body1, expression1)) : this.finalize(node1, new Node1.ArrowFunctionExpression(list1.params, body1, expression1));
                                          this.context.strict = previousStrict1;
                                          this.context.allowStrictDirective = previousAllowStrictDirective1;
                                          this.context.allowYield = previousAllowYield1;
                                          this.context.await = previousAwait1;
                                      }
                                  } else if (this.matchAssign()) {
                                      if (!this.context.isAssignmentTarget) this.tolerateError(messages_11.Messages.InvalidLHSInAssignment);
                                      if (this.context.strict && expr1.type === syntax_11.Syntax.Identifier) {
                                          var id1 = expr1;
                                          if (this.scanner.isRestrictedWord(id1.name)) this.tolerateUnexpectedToken(token1, messages_11.Messages.StrictLHSAssignment);
                                          if (this.scanner.isStrictModeReservedWord(id1.name)) this.tolerateUnexpectedToken(token1, messages_11.Messages.StrictReservedWord);
                                      }
                                      if (!this.match("=")) {
                                          this.context.isAssignmentTarget = false;
                                          this.context.isBindingElement = false;
                                      } else this.reinterpretExpressionAsPattern(expr1);
                                      token1 = this.nextToken();
                                      var operator1 = token1.value;
                                      var right1 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                                      expr1 = this.finalize(this.startNode(startToken1), new Node1.AssignmentExpression(operator1, expr1, right1));
                                      this.context.firstCoverInitializedNameError = null;
                                  }
                              }
                              return expr1;
                          };
                          // https://tc39.github.io/ecma262/#sec-comma-operator
                          Parser1.prototype.parseExpression = function() {
                              var startToken1 = this.lookahead;
                              var expr1 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                              if (this.match(",")) {
                                  var expressions1 = [];
                                  expressions1.push(expr1);
                                  while(this.lookahead.type !== 2 /* EOF */ ){
                                      if (!this.match(",")) break;
                                      this.nextToken();
                                      expressions1.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
                                  }
                                  expr1 = this.finalize(this.startNode(startToken1), new Node1.SequenceExpression(expressions1));
                              }
                              return expr1;
                          };
                          // https://tc39.github.io/ecma262/#sec-block
                          Parser1.prototype.parseStatementListItem = function() {
                              var statement1;
                              this.context.isAssignmentTarget = true;
                              this.context.isBindingElement = true;
                              if (this.lookahead.type === 4 /* Keyword */ ) switch(this.lookahead.value){
                                  case "export":
                                      if (!this.context.isModule) this.tolerateUnexpectedToken(this.lookahead, messages_11.Messages.IllegalExportDeclaration);
                                      statement1 = this.parseExportDeclaration();
                                      break;
                                  case "import":
                                      if (!this.context.isModule) this.tolerateUnexpectedToken(this.lookahead, messages_11.Messages.IllegalImportDeclaration);
                                      statement1 = this.parseImportDeclaration();
                                      break;
                                  case "const":
                                      statement1 = this.parseLexicalDeclaration({
                                          inFor: false
                                      });
                                      break;
                                  case "function":
                                      statement1 = this.parseFunctionDeclaration();
                                      break;
                                  case "class":
                                      statement1 = this.parseClassDeclaration();
                                      break;
                                  case "let":
                                      statement1 = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({
                                          inFor: false
                                      }) : this.parseStatement();
                                      break;
                                  default:
                                      statement1 = this.parseStatement();
                                      break;
                              }
                              else statement1 = this.parseStatement();
                              return statement1;
                          };
                          Parser1.prototype.parseBlock = function() {
                              var node1 = this.createNode();
                              this.expect("{");
                              var block1 = [];
                              while(true){
                                  if (this.match("}")) break;
                                  block1.push(this.parseStatementListItem());
                              }
                              this.expect("}");
                              return this.finalize(node1, new Node1.BlockStatement(block1));
                          };
                          // https://tc39.github.io/ecma262/#sec-let-and-const-declarations
                          Parser1.prototype.parseLexicalBinding = function(kind1, options1) {
                              var node1 = this.createNode();
                              var params1 = [];
                              var id1 = this.parsePattern(params1, kind1);
                              if (this.context.strict && id1.type === syntax_11.Syntax.Identifier) {
                                  if (this.scanner.isRestrictedWord(id1.name)) this.tolerateError(messages_11.Messages.StrictVarName);
                              }
                              var init1 = null;
                              if (kind1 === "const") {
                                  if (!this.matchKeyword("in") && !this.matchContextualKeyword("of")) {
                                      if (this.match("=")) {
                                          this.nextToken();
                                          init1 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                                      } else this.throwError(messages_11.Messages.DeclarationMissingInitializer, "const");
                                  }
                              } else if (!options1.inFor && id1.type !== syntax_11.Syntax.Identifier || this.match("=")) {
                                  this.expect("=");
                                  init1 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                              }
                              return this.finalize(node1, new Node1.VariableDeclarator(id1, init1));
                          };
                          Parser1.prototype.parseBindingList = function(kind1, options1) {
                              var list1 = [
                                  this.parseLexicalBinding(kind1, options1)
                              ];
                              while(this.match(",")){
                                  this.nextToken();
                                  list1.push(this.parseLexicalBinding(kind1, options1));
                              }
                              return list1;
                          };
                          Parser1.prototype.isLexicalDeclaration = function() {
                              var state1 = this.scanner.saveState();
                              this.scanner.scanComments();
                              var next1 = this.scanner.lex();
                              this.scanner.restoreState(state1);
                              return next1.type === 3 /* Identifier */  || next1.type === 7 /* Punctuator */  && next1.value === "[" || next1.type === 7 /* Punctuator */  && next1.value === "{" || next1.type === 4 /* Keyword */  && next1.value === "let" || next1.type === 4 /* Keyword */  && next1.value === "yield";
                          };
                          Parser1.prototype.parseLexicalDeclaration = function(options1) {
                              var node1 = this.createNode();
                              var kind1 = this.nextToken().value;
                              assert_11.assert(kind1 === "let" || kind1 === "const", "Lexical declaration must be either let or const");
                              var declarations1 = this.parseBindingList(kind1, options1);
                              this.consumeSemicolon();
                              return this.finalize(node1, new Node1.VariableDeclaration(declarations1, kind1));
                          };
                          // https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns
                          Parser1.prototype.parseBindingRestElement = function(params1, kind1) {
                              var node1 = this.createNode();
                              this.expect("...");
                              var arg1 = this.parsePattern(params1, kind1);
                              return this.finalize(node1, new Node1.RestElement(arg1));
                          };
                          Parser1.prototype.parseArrayPattern = function(params1, kind1) {
                              var node1 = this.createNode();
                              this.expect("[");
                              var elements1 = [];
                              while(!this.match("]"))if (this.match(",")) {
                                  this.nextToken();
                                  elements1.push(null);
                              } else {
                                  if (this.match("...")) {
                                      elements1.push(this.parseBindingRestElement(params1, kind1));
                                      break;
                                  } else elements1.push(this.parsePatternWithDefault(params1, kind1));
                                  if (!this.match("]")) this.expect(",");
                              }
                              this.expect("]");
                              return this.finalize(node1, new Node1.ArrayPattern(elements1));
                          };
                          Parser1.prototype.parsePropertyPattern = function(params1, kind1) {
                              var node1 = this.createNode();
                              var computed1 = false;
                              var shorthand1 = false;
                              var method1 = false;
                              var key1;
                              var value1;
                              if (this.lookahead.type === 3 /* Identifier */ ) {
                                  var keyToken1 = this.lookahead;
                                  key1 = this.parseVariableIdentifier();
                                  var init1 = this.finalize(node1, new Node1.Identifier(keyToken1.value));
                                  if (this.match("=")) {
                                      params1.push(keyToken1);
                                      shorthand1 = true;
                                      this.nextToken();
                                      var expr1 = this.parseAssignmentExpression();
                                      value1 = this.finalize(this.startNode(keyToken1), new Node1.AssignmentPattern(init1, expr1));
                                  } else if (!this.match(":")) {
                                      params1.push(keyToken1);
                                      shorthand1 = true;
                                      value1 = init1;
                                  } else {
                                      this.expect(":");
                                      value1 = this.parsePatternWithDefault(params1, kind1);
                                  }
                              } else {
                                  computed1 = this.match("[");
                                  key1 = this.parseObjectPropertyKey();
                                  this.expect(":");
                                  value1 = this.parsePatternWithDefault(params1, kind1);
                              }
                              return this.finalize(node1, new Node1.Property("init", key1, computed1, value1, method1, shorthand1));
                          };
                          Parser1.prototype.parseObjectPattern = function(params1, kind1) {
                              var node1 = this.createNode();
                              var properties1 = [];
                              this.expect("{");
                              while(!this.match("}")){
                                  properties1.push(this.parsePropertyPattern(params1, kind1));
                                  if (!this.match("}")) this.expect(",");
                              }
                              this.expect("}");
                              return this.finalize(node1, new Node1.ObjectPattern(properties1));
                          };
                          Parser1.prototype.parsePattern = function(params1, kind1) {
                              var pattern1;
                              if (this.match("[")) pattern1 = this.parseArrayPattern(params1, kind1);
                              else if (this.match("{")) pattern1 = this.parseObjectPattern(params1, kind1);
                              else {
                                  if (this.matchKeyword("let") && (kind1 === "const" || kind1 === "let")) this.tolerateUnexpectedToken(this.lookahead, messages_11.Messages.LetInLexicalBinding);
                                  params1.push(this.lookahead);
                                  pattern1 = this.parseVariableIdentifier(kind1);
                              }
                              return pattern1;
                          };
                          Parser1.prototype.parsePatternWithDefault = function(params1, kind1) {
                              var startToken1 = this.lookahead;
                              var pattern1 = this.parsePattern(params1, kind1);
                              if (this.match("=")) {
                                  this.nextToken();
                                  var previousAllowYield1 = this.context.allowYield;
                                  this.context.allowYield = true;
                                  var right1 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                                  this.context.allowYield = previousAllowYield1;
                                  pattern1 = this.finalize(this.startNode(startToken1), new Node1.AssignmentPattern(pattern1, right1));
                              }
                              return pattern1;
                          };
                          // https://tc39.github.io/ecma262/#sec-variable-statement
                          Parser1.prototype.parseVariableIdentifier = function(kind1) {
                              var node1 = this.createNode();
                              var token1 = this.nextToken();
                              if (token1.type === 4 /* Keyword */  && token1.value === "yield") {
                                  if (this.context.strict) this.tolerateUnexpectedToken(token1, messages_11.Messages.StrictReservedWord);
                                  else if (!this.context.allowYield) this.throwUnexpectedToken(token1);
                              } else if (token1.type !== 3 /* Identifier */ ) {
                                  if (this.context.strict && token1.type === 4 /* Keyword */  && this.scanner.isStrictModeReservedWord(token1.value)) this.tolerateUnexpectedToken(token1, messages_11.Messages.StrictReservedWord);
                                  else if (this.context.strict || token1.value !== "let" || kind1 !== "var") this.throwUnexpectedToken(token1);
                              } else if ((this.context.isModule || this.context.await) && token1.type === 3 /* Identifier */  && token1.value === "await") this.tolerateUnexpectedToken(token1);
                              return this.finalize(node1, new Node1.Identifier(token1.value));
                          };
                          Parser1.prototype.parseVariableDeclaration = function(options1) {
                              var node1 = this.createNode();
                              var params1 = [];
                              var id1 = this.parsePattern(params1, "var");
                              if (this.context.strict && id1.type === syntax_11.Syntax.Identifier) {
                                  if (this.scanner.isRestrictedWord(id1.name)) this.tolerateError(messages_11.Messages.StrictVarName);
                              }
                              var init1 = null;
                              if (this.match("=")) {
                                  this.nextToken();
                                  init1 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                              } else if (id1.type !== syntax_11.Syntax.Identifier && !options1.inFor) this.expect("=");
                              return this.finalize(node1, new Node1.VariableDeclarator(id1, init1));
                          };
                          Parser1.prototype.parseVariableDeclarationList = function(options1) {
                              var opt1 = {
                                  inFor: options1.inFor
                              };
                              var list1 = [];
                              list1.push(this.parseVariableDeclaration(opt1));
                              while(this.match(",")){
                                  this.nextToken();
                                  list1.push(this.parseVariableDeclaration(opt1));
                              }
                              return list1;
                          };
                          Parser1.prototype.parseVariableStatement = function() {
                              var node1 = this.createNode();
                              this.expectKeyword("var");
                              var declarations1 = this.parseVariableDeclarationList({
                                  inFor: false
                              });
                              this.consumeSemicolon();
                              return this.finalize(node1, new Node1.VariableDeclaration(declarations1, "var"));
                          };
                          // https://tc39.github.io/ecma262/#sec-empty-statement
                          Parser1.prototype.parseEmptyStatement = function() {
                              var node1 = this.createNode();
                              this.expect(";");
                              return this.finalize(node1, new Node1.EmptyStatement());
                          };
                          // https://tc39.github.io/ecma262/#sec-expression-statement
                          Parser1.prototype.parseExpressionStatement = function() {
                              var node1 = this.createNode();
                              var expr1 = this.parseExpression();
                              this.consumeSemicolon();
                              return this.finalize(node1, new Node1.ExpressionStatement(expr1));
                          };
                          // https://tc39.github.io/ecma262/#sec-if-statement
                          Parser1.prototype.parseIfClause = function() {
                              if (this.context.strict && this.matchKeyword("function")) this.tolerateError(messages_11.Messages.StrictFunction);
                              return this.parseStatement();
                          };
                          Parser1.prototype.parseIfStatement = function() {
                              var node1 = this.createNode();
                              var consequent1;
                              var alternate1 = null;
                              this.expectKeyword("if");
                              this.expect("(");
                              var test1 = this.parseExpression();
                              if (!this.match(")") && this.config.tolerant) {
                                  this.tolerateUnexpectedToken(this.nextToken());
                                  consequent1 = this.finalize(this.createNode(), new Node1.EmptyStatement());
                              } else {
                                  this.expect(")");
                                  consequent1 = this.parseIfClause();
                                  if (this.matchKeyword("else")) {
                                      this.nextToken();
                                      alternate1 = this.parseIfClause();
                                  }
                              }
                              return this.finalize(node1, new Node1.IfStatement(test1, consequent1, alternate1));
                          };
                          // https://tc39.github.io/ecma262/#sec-do-while-statement
                          Parser1.prototype.parseDoWhileStatement = function() {
                              var node1 = this.createNode();
                              this.expectKeyword("do");
                              var previousInIteration1 = this.context.inIteration;
                              this.context.inIteration = true;
                              var body1 = this.parseStatement();
                              this.context.inIteration = previousInIteration1;
                              this.expectKeyword("while");
                              this.expect("(");
                              var test1 = this.parseExpression();
                              if (!this.match(")") && this.config.tolerant) this.tolerateUnexpectedToken(this.nextToken());
                              else {
                                  this.expect(")");
                                  if (this.match(";")) this.nextToken();
                              }
                              return this.finalize(node1, new Node1.DoWhileStatement(body1, test1));
                          };
                          // https://tc39.github.io/ecma262/#sec-while-statement
                          Parser1.prototype.parseWhileStatement = function() {
                              var node1 = this.createNode();
                              var body1;
                              this.expectKeyword("while");
                              this.expect("(");
                              var test1 = this.parseExpression();
                              if (!this.match(")") && this.config.tolerant) {
                                  this.tolerateUnexpectedToken(this.nextToken());
                                  body1 = this.finalize(this.createNode(), new Node1.EmptyStatement());
                              } else {
                                  this.expect(")");
                                  var previousInIteration1 = this.context.inIteration;
                                  this.context.inIteration = true;
                                  body1 = this.parseStatement();
                                  this.context.inIteration = previousInIteration1;
                              }
                              return this.finalize(node1, new Node1.WhileStatement(test1, body1));
                          };
                          // https://tc39.github.io/ecma262/#sec-for-statement
                          // https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements
                          Parser1.prototype.parseForStatement = function() {
                              var init1 = null;
                              var test1 = null;
                              var update1 = null;
                              var forIn1 = true;
                              var left1, right1;
                              var node1 = this.createNode();
                              this.expectKeyword("for");
                              this.expect("(");
                              if (this.match(";")) this.nextToken();
                              else {
                                  if (this.matchKeyword("var")) {
                                      init1 = this.createNode();
                                      this.nextToken();
                                      var previousAllowIn1 = this.context.allowIn;
                                      this.context.allowIn = false;
                                      var declarations1 = this.parseVariableDeclarationList({
                                          inFor: true
                                      });
                                      this.context.allowIn = previousAllowIn1;
                                      if (declarations1.length === 1 && this.matchKeyword("in")) {
                                          var decl1 = declarations1[0];
                                          if (decl1.init && (decl1.id.type === syntax_11.Syntax.ArrayPattern || decl1.id.type === syntax_11.Syntax.ObjectPattern || this.context.strict)) this.tolerateError(messages_11.Messages.ForInOfLoopInitializer, "for-in");
                                          init1 = this.finalize(init1, new Node1.VariableDeclaration(declarations1, "var"));
                                          this.nextToken();
                                          left1 = init1;
                                          right1 = this.parseExpression();
                                          init1 = null;
                                      } else if (declarations1.length === 1 && declarations1[0].init === null && this.matchContextualKeyword("of")) {
                                          init1 = this.finalize(init1, new Node1.VariableDeclaration(declarations1, "var"));
                                          this.nextToken();
                                          left1 = init1;
                                          right1 = this.parseAssignmentExpression();
                                          init1 = null;
                                          forIn1 = false;
                                      } else {
                                          init1 = this.finalize(init1, new Node1.VariableDeclaration(declarations1, "var"));
                                          this.expect(";");
                                      }
                                  } else if (this.matchKeyword("const") || this.matchKeyword("let")) {
                                      init1 = this.createNode();
                                      var kind1 = this.nextToken().value;
                                      if (!this.context.strict && this.lookahead.value === "in") {
                                          init1 = this.finalize(init1, new Node1.Identifier(kind1));
                                          this.nextToken();
                                          left1 = init1;
                                          right1 = this.parseExpression();
                                          init1 = null;
                                      } else {
                                          var previousAllowIn1 = this.context.allowIn;
                                          this.context.allowIn = false;
                                          var declarations1 = this.parseBindingList(kind1, {
                                              inFor: true
                                          });
                                          this.context.allowIn = previousAllowIn1;
                                          if (declarations1.length === 1 && declarations1[0].init === null && this.matchKeyword("in")) {
                                              init1 = this.finalize(init1, new Node1.VariableDeclaration(declarations1, kind1));
                                              this.nextToken();
                                              left1 = init1;
                                              right1 = this.parseExpression();
                                              init1 = null;
                                          } else if (declarations1.length === 1 && declarations1[0].init === null && this.matchContextualKeyword("of")) {
                                              init1 = this.finalize(init1, new Node1.VariableDeclaration(declarations1, kind1));
                                              this.nextToken();
                                              left1 = init1;
                                              right1 = this.parseAssignmentExpression();
                                              init1 = null;
                                              forIn1 = false;
                                          } else {
                                              this.consumeSemicolon();
                                              init1 = this.finalize(init1, new Node1.VariableDeclaration(declarations1, kind1));
                                          }
                                      }
                                  } else {
                                      var initStartToken1 = this.lookahead;
                                      var previousAllowIn1 = this.context.allowIn;
                                      this.context.allowIn = false;
                                      init1 = this.inheritCoverGrammar(this.parseAssignmentExpression);
                                      this.context.allowIn = previousAllowIn1;
                                      if (this.matchKeyword("in")) {
                                          if (!this.context.isAssignmentTarget || init1.type === syntax_11.Syntax.AssignmentExpression) this.tolerateError(messages_11.Messages.InvalidLHSInForIn);
                                          this.nextToken();
                                          this.reinterpretExpressionAsPattern(init1);
                                          left1 = init1;
                                          right1 = this.parseExpression();
                                          init1 = null;
                                      } else if (this.matchContextualKeyword("of")) {
                                          if (!this.context.isAssignmentTarget || init1.type === syntax_11.Syntax.AssignmentExpression) this.tolerateError(messages_11.Messages.InvalidLHSInForLoop);
                                          this.nextToken();
                                          this.reinterpretExpressionAsPattern(init1);
                                          left1 = init1;
                                          right1 = this.parseAssignmentExpression();
                                          init1 = null;
                                          forIn1 = false;
                                      } else {
                                          if (this.match(",")) {
                                              var initSeq1 = [
                                                  init1
                                              ];
                                              while(this.match(",")){
                                                  this.nextToken();
                                                  initSeq1.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
                                              }
                                              init1 = this.finalize(this.startNode(initStartToken1), new Node1.SequenceExpression(initSeq1));
                                          }
                                          this.expect(";");
                                      }
                                  }
                              }
                              if (typeof left1 === "undefined") {
                                  if (!this.match(";")) test1 = this.parseExpression();
                                  this.expect(";");
                                  if (!this.match(")")) update1 = this.parseExpression();
                              }
                              var body1;
                              if (!this.match(")") && this.config.tolerant) {
                                  this.tolerateUnexpectedToken(this.nextToken());
                                  body1 = this.finalize(this.createNode(), new Node1.EmptyStatement());
                              } else {
                                  this.expect(")");
                                  var previousInIteration1 = this.context.inIteration;
                                  this.context.inIteration = true;
                                  body1 = this.isolateCoverGrammar(this.parseStatement);
                                  this.context.inIteration = previousInIteration1;
                              }
                              return typeof left1 === "undefined" ? this.finalize(node1, new Node1.ForStatement(init1, test1, update1, body1)) : forIn1 ? this.finalize(node1, new Node1.ForInStatement(left1, right1, body1)) : this.finalize(node1, new Node1.ForOfStatement(left1, right1, body1));
                          };
                          // https://tc39.github.io/ecma262/#sec-continue-statement
                          Parser1.prototype.parseContinueStatement = function() {
                              var node1 = this.createNode();
                              this.expectKeyword("continue");
                              var label1 = null;
                              if (this.lookahead.type === 3 /* Identifier */  && !this.hasLineTerminator) {
                                  var id1 = this.parseVariableIdentifier();
                                  label1 = id1;
                                  var key1 = "$" + id1.name;
                                  if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key1)) this.throwError(messages_11.Messages.UnknownLabel, id1.name);
                              }
                              this.consumeSemicolon();
                              if (label1 === null && !this.context.inIteration) this.throwError(messages_11.Messages.IllegalContinue);
                              return this.finalize(node1, new Node1.ContinueStatement(label1));
                          };
                          // https://tc39.github.io/ecma262/#sec-break-statement
                          Parser1.prototype.parseBreakStatement = function() {
                              var node1 = this.createNode();
                              this.expectKeyword("break");
                              var label1 = null;
                              if (this.lookahead.type === 3 /* Identifier */  && !this.hasLineTerminator) {
                                  var id1 = this.parseVariableIdentifier();
                                  var key1 = "$" + id1.name;
                                  if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key1)) this.throwError(messages_11.Messages.UnknownLabel, id1.name);
                                  label1 = id1;
                              }
                              this.consumeSemicolon();
                              if (label1 === null && !this.context.inIteration && !this.context.inSwitch) this.throwError(messages_11.Messages.IllegalBreak);
                              return this.finalize(node1, new Node1.BreakStatement(label1));
                          };
                          // https://tc39.github.io/ecma262/#sec-return-statement
                          Parser1.prototype.parseReturnStatement = function() {
                              if (!this.context.inFunctionBody) this.tolerateError(messages_11.Messages.IllegalReturn);
                              var node1 = this.createNode();
                              this.expectKeyword("return");
                              var hasArgument1 = !this.match(";") && !this.match("}") && !this.hasLineTerminator && this.lookahead.type !== 2 /* EOF */  || this.lookahead.type === 8 /* StringLiteral */  || this.lookahead.type === 10 /* Template */ ;
                              var argument1 = hasArgument1 ? this.parseExpression() : null;
                              this.consumeSemicolon();
                              return this.finalize(node1, new Node1.ReturnStatement(argument1));
                          };
                          // https://tc39.github.io/ecma262/#sec-with-statement
                          Parser1.prototype.parseWithStatement = function() {
                              if (this.context.strict) this.tolerateError(messages_11.Messages.StrictModeWith);
                              var node1 = this.createNode();
                              var body1;
                              this.expectKeyword("with");
                              this.expect("(");
                              var object1 = this.parseExpression();
                              if (!this.match(")") && this.config.tolerant) {
                                  this.tolerateUnexpectedToken(this.nextToken());
                                  body1 = this.finalize(this.createNode(), new Node1.EmptyStatement());
                              } else {
                                  this.expect(")");
                                  body1 = this.parseStatement();
                              }
                              return this.finalize(node1, new Node1.WithStatement(object1, body1));
                          };
                          // https://tc39.github.io/ecma262/#sec-switch-statement
                          Parser1.prototype.parseSwitchCase = function() {
                              var node1 = this.createNode();
                              var test1;
                              if (this.matchKeyword("default")) {
                                  this.nextToken();
                                  test1 = null;
                              } else {
                                  this.expectKeyword("case");
                                  test1 = this.parseExpression();
                              }
                              this.expect(":");
                              var consequent1 = [];
                              while(true){
                                  if (this.match("}") || this.matchKeyword("default") || this.matchKeyword("case")) break;
                                  consequent1.push(this.parseStatementListItem());
                              }
                              return this.finalize(node1, new Node1.SwitchCase(test1, consequent1));
                          };
                          Parser1.prototype.parseSwitchStatement = function() {
                              var node1 = this.createNode();
                              this.expectKeyword("switch");
                              this.expect("(");
                              var discriminant1 = this.parseExpression();
                              this.expect(")");
                              var previousInSwitch1 = this.context.inSwitch;
                              this.context.inSwitch = true;
                              var cases1 = [];
                              var defaultFound1 = false;
                              this.expect("{");
                              while(true){
                                  if (this.match("}")) break;
                                  var clause1 = this.parseSwitchCase();
                                  if (clause1.test === null) {
                                      if (defaultFound1) this.throwError(messages_11.Messages.MultipleDefaultsInSwitch);
                                      defaultFound1 = true;
                                  }
                                  cases1.push(clause1);
                              }
                              this.expect("}");
                              this.context.inSwitch = previousInSwitch1;
                              return this.finalize(node1, new Node1.SwitchStatement(discriminant1, cases1));
                          };
                          // https://tc39.github.io/ecma262/#sec-labelled-statements
                          Parser1.prototype.parseLabelledStatement = function() {
                              var node1 = this.createNode();
                              var expr1 = this.parseExpression();
                              var statement1;
                              if (expr1.type === syntax_11.Syntax.Identifier && this.match(":")) {
                                  this.nextToken();
                                  var id1 = expr1;
                                  var key1 = "$" + id1.name;
                                  if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key1)) this.throwError(messages_11.Messages.Redeclaration, "Label", id1.name);
                                  this.context.labelSet[key1] = true;
                                  var body1 = void 0;
                                  if (this.matchKeyword("class")) {
                                      this.tolerateUnexpectedToken(this.lookahead);
                                      body1 = this.parseClassDeclaration();
                                  } else if (this.matchKeyword("function")) {
                                      var token1 = this.lookahead;
                                      var declaration1 = this.parseFunctionDeclaration();
                                      if (this.context.strict) this.tolerateUnexpectedToken(token1, messages_11.Messages.StrictFunction);
                                      else if (declaration1.generator) this.tolerateUnexpectedToken(token1, messages_11.Messages.GeneratorInLegacyContext);
                                      body1 = declaration1;
                                  } else body1 = this.parseStatement();
                                  delete this.context.labelSet[key1];
                                  statement1 = new Node1.LabeledStatement(id1, body1);
                              } else {
                                  this.consumeSemicolon();
                                  statement1 = new Node1.ExpressionStatement(expr1);
                              }
                              return this.finalize(node1, statement1);
                          };
                          // https://tc39.github.io/ecma262/#sec-throw-statement
                          Parser1.prototype.parseThrowStatement = function() {
                              var node1 = this.createNode();
                              this.expectKeyword("throw");
                              if (this.hasLineTerminator) this.throwError(messages_11.Messages.NewlineAfterThrow);
                              var argument1 = this.parseExpression();
                              this.consumeSemicolon();
                              return this.finalize(node1, new Node1.ThrowStatement(argument1));
                          };
                          // https://tc39.github.io/ecma262/#sec-try-statement
                          Parser1.prototype.parseCatchClause = function() {
                              var node1 = this.createNode();
                              this.expectKeyword("catch");
                              this.expect("(");
                              if (this.match(")")) this.throwUnexpectedToken(this.lookahead);
                              var params1 = [];
                              var param1 = this.parsePattern(params1);
                              var paramMap1 = {};
                              for(var i3 = 0; i3 < params1.length; i3++){
                                  var key1 = "$" + params1[i3].value;
                                  if (Object.prototype.hasOwnProperty.call(paramMap1, key1)) this.tolerateError(messages_11.Messages.DuplicateBinding, params1[i3].value);
                                  paramMap1[key1] = true;
                              }
                              if (this.context.strict && param1.type === syntax_11.Syntax.Identifier) {
                                  if (this.scanner.isRestrictedWord(param1.name)) this.tolerateError(messages_11.Messages.StrictCatchVariable);
                              }
                              this.expect(")");
                              var body1 = this.parseBlock();
                              return this.finalize(node1, new Node1.CatchClause(param1, body1));
                          };
                          Parser1.prototype.parseFinallyClause = function() {
                              this.expectKeyword("finally");
                              return this.parseBlock();
                          };
                          Parser1.prototype.parseTryStatement = function() {
                              var node1 = this.createNode();
                              this.expectKeyword("try");
                              var block1 = this.parseBlock();
                              var handler1 = this.matchKeyword("catch") ? this.parseCatchClause() : null;
                              var finalizer1 = this.matchKeyword("finally") ? this.parseFinallyClause() : null;
                              if (!handler1 && !finalizer1) this.throwError(messages_11.Messages.NoCatchOrFinally);
                              return this.finalize(node1, new Node1.TryStatement(block1, handler1, finalizer1));
                          };
                          // https://tc39.github.io/ecma262/#sec-debugger-statement
                          Parser1.prototype.parseDebuggerStatement = function() {
                              var node1 = this.createNode();
                              this.expectKeyword("debugger");
                              this.consumeSemicolon();
                              return this.finalize(node1, new Node1.DebuggerStatement());
                          };
                          // https://tc39.github.io/ecma262/#sec-ecmascript-language-statements-and-declarations
                          Parser1.prototype.parseStatement = function() {
                              var statement1;
                              switch(this.lookahead.type){
                                  case 1 /* BooleanLiteral */ :
                                  case 5 /* NullLiteral */ :
                                  case 6 /* NumericLiteral */ :
                                  case 8 /* StringLiteral */ :
                                  case 10 /* Template */ :
                                  case 9 /* RegularExpression */ :
                                      statement1 = this.parseExpressionStatement();
                                      break;
                                  case 7 /* Punctuator */ :
                                      var value1 = this.lookahead.value;
                                      if (value1 === "{") statement1 = this.parseBlock();
                                      else if (value1 === "(") statement1 = this.parseExpressionStatement();
                                      else if (value1 === ";") statement1 = this.parseEmptyStatement();
                                      else statement1 = this.parseExpressionStatement();
                                      break;
                                  case 3 /* Identifier */ :
                                      statement1 = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();
                                      break;
                                  case 4 /* Keyword */ :
                                      switch(this.lookahead.value){
                                          case "break":
                                              statement1 = this.parseBreakStatement();
                                              break;
                                          case "continue":
                                              statement1 = this.parseContinueStatement();
                                              break;
                                          case "debugger":
                                              statement1 = this.parseDebuggerStatement();
                                              break;
                                          case "do":
                                              statement1 = this.parseDoWhileStatement();
                                              break;
                                          case "for":
                                              statement1 = this.parseForStatement();
                                              break;
                                          case "function":
                                              statement1 = this.parseFunctionDeclaration();
                                              break;
                                          case "if":
                                              statement1 = this.parseIfStatement();
                                              break;
                                          case "return":
                                              statement1 = this.parseReturnStatement();
                                              break;
                                          case "switch":
                                              statement1 = this.parseSwitchStatement();
                                              break;
                                          case "throw":
                                              statement1 = this.parseThrowStatement();
                                              break;
                                          case "try":
                                              statement1 = this.parseTryStatement();
                                              break;
                                          case "var":
                                              statement1 = this.parseVariableStatement();
                                              break;
                                          case "while":
                                              statement1 = this.parseWhileStatement();
                                              break;
                                          case "with":
                                              statement1 = this.parseWithStatement();
                                              break;
                                          default:
                                              statement1 = this.parseExpressionStatement();
                                              break;
                                      }
                                      break;
                                  default:
                                      statement1 = this.throwUnexpectedToken(this.lookahead);
                              }
                              return statement1;
                          };
                          // https://tc39.github.io/ecma262/#sec-function-definitions
                          Parser1.prototype.parseFunctionSourceElements = function() {
                              var node1 = this.createNode();
                              this.expect("{");
                              var body1 = this.parseDirectivePrologues();
                              var previousLabelSet1 = this.context.labelSet;
                              var previousInIteration1 = this.context.inIteration;
                              var previousInSwitch1 = this.context.inSwitch;
                              var previousInFunctionBody1 = this.context.inFunctionBody;
                              this.context.labelSet = {};
                              this.context.inIteration = false;
                              this.context.inSwitch = false;
                              this.context.inFunctionBody = true;
                              while(this.lookahead.type !== 2 /* EOF */ ){
                                  if (this.match("}")) break;
                                  body1.push(this.parseStatementListItem());
                              }
                              this.expect("}");
                              this.context.labelSet = previousLabelSet1;
                              this.context.inIteration = previousInIteration1;
                              this.context.inSwitch = previousInSwitch1;
                              this.context.inFunctionBody = previousInFunctionBody1;
                              return this.finalize(node1, new Node1.BlockStatement(body1));
                          };
                          Parser1.prototype.validateParam = function(options1, param1, name1) {
                              var key1 = "$" + name1;
                              if (this.context.strict) {
                                  if (this.scanner.isRestrictedWord(name1)) {
                                      options1.stricted = param1;
                                      options1.message = messages_11.Messages.StrictParamName;
                                  }
                                  if (Object.prototype.hasOwnProperty.call(options1.paramSet, key1)) {
                                      options1.stricted = param1;
                                      options1.message = messages_11.Messages.StrictParamDupe;
                                  }
                              } else if (!options1.firstRestricted) {
                                  if (this.scanner.isRestrictedWord(name1)) {
                                      options1.firstRestricted = param1;
                                      options1.message = messages_11.Messages.StrictParamName;
                                  } else if (this.scanner.isStrictModeReservedWord(name1)) {
                                      options1.firstRestricted = param1;
                                      options1.message = messages_11.Messages.StrictReservedWord;
                                  } else if (Object.prototype.hasOwnProperty.call(options1.paramSet, key1)) {
                                      options1.stricted = param1;
                                      options1.message = messages_11.Messages.StrictParamDupe;
                                  }
                              }
                              /* istanbul ignore next */ if (typeof Object.defineProperty === "function") Object.defineProperty(options1.paramSet, key1, {
                                  value: true,
                                  enumerable: true,
                                  writable: true,
                                  configurable: true
                              });
                              else options1.paramSet[key1] = true;
                          };
                          Parser1.prototype.parseRestElement = function(params1) {
                              var node1 = this.createNode();
                              this.expect("...");
                              var arg1 = this.parsePattern(params1);
                              if (this.match("=")) this.throwError(messages_11.Messages.DefaultRestParameter);
                              if (!this.match(")")) this.throwError(messages_11.Messages.ParameterAfterRestParameter);
                              return this.finalize(node1, new Node1.RestElement(arg1));
                          };
                          Parser1.prototype.parseFormalParameter = function(options1) {
                              var params1 = [];
                              var param1 = this.match("...") ? this.parseRestElement(params1) : this.parsePatternWithDefault(params1);
                              for(var i3 = 0; i3 < params1.length; i3++)this.validateParam(options1, params1[i3], params1[i3].value);
                              options1.simple = options1.simple && param1 instanceof Node1.Identifier;
                              options1.params.push(param1);
                          };
                          Parser1.prototype.parseFormalParameters = function(firstRestricted1) {
                              var options1;
                              options1 = {
                                  simple: true,
                                  params: [],
                                  firstRestricted: firstRestricted1
                              };
                              this.expect("(");
                              if (!this.match(")")) {
                                  options1.paramSet = {};
                                  while(this.lookahead.type !== 2 /* EOF */ ){
                                      this.parseFormalParameter(options1);
                                      if (this.match(")")) break;
                                      this.expect(",");
                                      if (this.match(")")) break;
                                  }
                              }
                              this.expect(")");
                              return {
                                  simple: options1.simple,
                                  params: options1.params,
                                  stricted: options1.stricted,
                                  firstRestricted: options1.firstRestricted,
                                  message: options1.message
                              };
                          };
                          Parser1.prototype.matchAsyncFunction = function() {
                              var match1 = this.matchContextualKeyword("async");
                              if (match1) {
                                  var state1 = this.scanner.saveState();
                                  this.scanner.scanComments();
                                  var next1 = this.scanner.lex();
                                  this.scanner.restoreState(state1);
                                  match1 = state1.lineNumber === next1.lineNumber && next1.type === 4 /* Keyword */  && next1.value === "function";
                              }
                              return match1;
                          };
                          Parser1.prototype.parseFunctionDeclaration = function(identifierIsOptional1) {
                              var node1 = this.createNode();
                              var isAsync1 = this.matchContextualKeyword("async");
                              if (isAsync1) this.nextToken();
                              this.expectKeyword("function");
                              var isGenerator1 = isAsync1 ? false : this.match("*");
                              if (isGenerator1) this.nextToken();
                              var message1;
                              var id1 = null;
                              var firstRestricted1 = null;
                              if (!identifierIsOptional1 || !this.match("(")) {
                                  var token1 = this.lookahead;
                                  id1 = this.parseVariableIdentifier();
                                  if (this.context.strict) {
                                      if (this.scanner.isRestrictedWord(token1.value)) this.tolerateUnexpectedToken(token1, messages_11.Messages.StrictFunctionName);
                                  } else {
                                      if (this.scanner.isRestrictedWord(token1.value)) {
                                          firstRestricted1 = token1;
                                          message1 = messages_11.Messages.StrictFunctionName;
                                      } else if (this.scanner.isStrictModeReservedWord(token1.value)) {
                                          firstRestricted1 = token1;
                                          message1 = messages_11.Messages.StrictReservedWord;
                                      }
                                  }
                              }
                              var previousAllowAwait1 = this.context.await;
                              var previousAllowYield1 = this.context.allowYield;
                              this.context.await = isAsync1;
                              this.context.allowYield = !isGenerator1;
                              var formalParameters1 = this.parseFormalParameters(firstRestricted1);
                              var params1 = formalParameters1.params;
                              var stricted1 = formalParameters1.stricted;
                              firstRestricted1 = formalParameters1.firstRestricted;
                              if (formalParameters1.message) message1 = formalParameters1.message;
                              var previousStrict1 = this.context.strict;
                              var previousAllowStrictDirective1 = this.context.allowStrictDirective;
                              this.context.allowStrictDirective = formalParameters1.simple;
                              var body1 = this.parseFunctionSourceElements();
                              if (this.context.strict && firstRestricted1) this.throwUnexpectedToken(firstRestricted1, message1);
                              if (this.context.strict && stricted1) this.tolerateUnexpectedToken(stricted1, message1);
                              this.context.strict = previousStrict1;
                              this.context.allowStrictDirective = previousAllowStrictDirective1;
                              this.context.await = previousAllowAwait1;
                              this.context.allowYield = previousAllowYield1;
                              return isAsync1 ? this.finalize(node1, new Node1.AsyncFunctionDeclaration(id1, params1, body1)) : this.finalize(node1, new Node1.FunctionDeclaration(id1, params1, body1, isGenerator1));
                          };
                          Parser1.prototype.parseFunctionExpression = function() {
                              var node1 = this.createNode();
                              var isAsync1 = this.matchContextualKeyword("async");
                              if (isAsync1) this.nextToken();
                              this.expectKeyword("function");
                              var isGenerator1 = isAsync1 ? false : this.match("*");
                              if (isGenerator1) this.nextToken();
                              var message1;
                              var id1 = null;
                              var firstRestricted1;
                              var previousAllowAwait1 = this.context.await;
                              var previousAllowYield1 = this.context.allowYield;
                              this.context.await = isAsync1;
                              this.context.allowYield = !isGenerator1;
                              if (!this.match("(")) {
                                  var token1 = this.lookahead;
                                  id1 = !this.context.strict && !isGenerator1 && this.matchKeyword("yield") ? this.parseIdentifierName() : this.parseVariableIdentifier();
                                  if (this.context.strict) {
                                      if (this.scanner.isRestrictedWord(token1.value)) this.tolerateUnexpectedToken(token1, messages_11.Messages.StrictFunctionName);
                                  } else {
                                      if (this.scanner.isRestrictedWord(token1.value)) {
                                          firstRestricted1 = token1;
                                          message1 = messages_11.Messages.StrictFunctionName;
                                      } else if (this.scanner.isStrictModeReservedWord(token1.value)) {
                                          firstRestricted1 = token1;
                                          message1 = messages_11.Messages.StrictReservedWord;
                                      }
                                  }
                              }
                              var formalParameters1 = this.parseFormalParameters(firstRestricted1);
                              var params1 = formalParameters1.params;
                              var stricted1 = formalParameters1.stricted;
                              firstRestricted1 = formalParameters1.firstRestricted;
                              if (formalParameters1.message) message1 = formalParameters1.message;
                              var previousStrict1 = this.context.strict;
                              var previousAllowStrictDirective1 = this.context.allowStrictDirective;
                              this.context.allowStrictDirective = formalParameters1.simple;
                              var body1 = this.parseFunctionSourceElements();
                              if (this.context.strict && firstRestricted1) this.throwUnexpectedToken(firstRestricted1, message1);
                              if (this.context.strict && stricted1) this.tolerateUnexpectedToken(stricted1, message1);
                              this.context.strict = previousStrict1;
                              this.context.allowStrictDirective = previousAllowStrictDirective1;
                              this.context.await = previousAllowAwait1;
                              this.context.allowYield = previousAllowYield1;
                              return isAsync1 ? this.finalize(node1, new Node1.AsyncFunctionExpression(id1, params1, body1)) : this.finalize(node1, new Node1.FunctionExpression(id1, params1, body1, isGenerator1));
                          };
                          // https://tc39.github.io/ecma262/#sec-directive-prologues-and-the-use-strict-directive
                          Parser1.prototype.parseDirective = function() {
                              var token1 = this.lookahead;
                              var node1 = this.createNode();
                              var expr1 = this.parseExpression();
                              var directive1 = expr1.type === syntax_11.Syntax.Literal ? this.getTokenRaw(token1).slice(1, -1) : null;
                              this.consumeSemicolon();
                              return this.finalize(node1, directive1 ? new Node1.Directive(expr1, directive1) : new Node1.ExpressionStatement(expr1));
                          };
                          Parser1.prototype.parseDirectivePrologues = function() {
                              var firstRestricted1 = null;
                              var body1 = [];
                              while(true){
                                  var token1 = this.lookahead;
                                  if (token1.type !== 8 /* StringLiteral */ ) break;
                                  var statement1 = this.parseDirective();
                                  body1.push(statement1);
                                  var directive1 = statement1.directive;
                                  if (typeof directive1 !== "string") break;
                                  if (directive1 === "use strict") {
                                      this.context.strict = true;
                                      if (firstRestricted1) this.tolerateUnexpectedToken(firstRestricted1, messages_11.Messages.StrictOctalLiteral);
                                      if (!this.context.allowStrictDirective) this.tolerateUnexpectedToken(token1, messages_11.Messages.IllegalLanguageModeDirective);
                                  } else if (!firstRestricted1 && token1.octal) firstRestricted1 = token1;
                              }
                              return body1;
                          };
                          // https://tc39.github.io/ecma262/#sec-method-definitions
                          Parser1.prototype.qualifiedPropertyName = function(token1) {
                              switch(token1.type){
                                  case 3 /* Identifier */ :
                                  case 8 /* StringLiteral */ :
                                  case 1 /* BooleanLiteral */ :
                                  case 5 /* NullLiteral */ :
                                  case 6 /* NumericLiteral */ :
                                  case 4 /* Keyword */ :
                                      return true;
                                  case 7 /* Punctuator */ :
                                      return token1.value === "[";
                                  default:
                                      break;
                              }
                              return false;
                          };
                          Parser1.prototype.parseGetterMethod = function() {
                              var node1 = this.createNode();
                              var isGenerator1 = false;
                              var previousAllowYield1 = this.context.allowYield;
                              this.context.allowYield = !isGenerator1;
                              var formalParameters1 = this.parseFormalParameters();
                              if (formalParameters1.params.length > 0) this.tolerateError(messages_11.Messages.BadGetterArity);
                              var method1 = this.parsePropertyMethod(formalParameters1);
                              this.context.allowYield = previousAllowYield1;
                              return this.finalize(node1, new Node1.FunctionExpression(null, formalParameters1.params, method1, isGenerator1));
                          };
                          Parser1.prototype.parseSetterMethod = function() {
                              var node1 = this.createNode();
                              var isGenerator1 = false;
                              var previousAllowYield1 = this.context.allowYield;
                              this.context.allowYield = !isGenerator1;
                              var formalParameters1 = this.parseFormalParameters();
                              if (formalParameters1.params.length !== 1) this.tolerateError(messages_11.Messages.BadSetterArity);
                              else if (formalParameters1.params[0] instanceof Node1.RestElement) this.tolerateError(messages_11.Messages.BadSetterRestParameter);
                              var method1 = this.parsePropertyMethod(formalParameters1);
                              this.context.allowYield = previousAllowYield1;
                              return this.finalize(node1, new Node1.FunctionExpression(null, formalParameters1.params, method1, isGenerator1));
                          };
                          Parser1.prototype.parseGeneratorMethod = function() {
                              var node1 = this.createNode();
                              var isGenerator1 = true;
                              var previousAllowYield1 = this.context.allowYield;
                              this.context.allowYield = true;
                              var params1 = this.parseFormalParameters();
                              this.context.allowYield = false;
                              var method1 = this.parsePropertyMethod(params1);
                              this.context.allowYield = previousAllowYield1;
                              return this.finalize(node1, new Node1.FunctionExpression(null, params1.params, method1, isGenerator1));
                          };
                          // https://tc39.github.io/ecma262/#sec-generator-function-definitions
                          Parser1.prototype.isStartOfExpression = function() {
                              var start1 = true;
                              var value1 = this.lookahead.value;
                              switch(this.lookahead.type){
                                  case 7 /* Punctuator */ :
                                      start1 = value1 === "[" || value1 === "(" || value1 === "{" || value1 === "+" || value1 === "-" || value1 === "!" || value1 === "~" || value1 === "++" || value1 === "--" || value1 === "/" || value1 === "/="; // regular expression literal
                                      break;
                                  case 4 /* Keyword */ :
                                      start1 = value1 === "class" || value1 === "delete" || value1 === "function" || value1 === "let" || value1 === "new" || value1 === "super" || value1 === "this" || value1 === "typeof" || value1 === "void" || value1 === "yield";
                                      break;
                                  default:
                                      break;
                              }
                              return start1;
                          };
                          Parser1.prototype.parseYieldExpression = function() {
                              var node1 = this.createNode();
                              this.expectKeyword("yield");
                              var argument1 = null;
                              var delegate1 = false;
                              if (!this.hasLineTerminator) {
                                  var previousAllowYield1 = this.context.allowYield;
                                  this.context.allowYield = false;
                                  delegate1 = this.match("*");
                                  if (delegate1) {
                                      this.nextToken();
                                      argument1 = this.parseAssignmentExpression();
                                  } else if (this.isStartOfExpression()) argument1 = this.parseAssignmentExpression();
                                  this.context.allowYield = previousAllowYield1;
                              }
                              return this.finalize(node1, new Node1.YieldExpression(argument1, delegate1));
                          };
                          // https://tc39.github.io/ecma262/#sec-class-definitions
                          Parser1.prototype.parseClassElement = function(hasConstructor1) {
                              var token1 = this.lookahead;
                              var node1 = this.createNode();
                              var kind1 = "";
                              var key1 = null;
                              var value1 = null;
                              var computed1 = false;
                              var method1 = false;
                              var isStatic1 = false;
                              var isAsync1 = false;
                              if (this.match("*")) this.nextToken();
                              else {
                                  computed1 = this.match("[");
                                  key1 = this.parseObjectPropertyKey();
                                  var id1 = key1;
                                  if (id1.name === "static" && (this.qualifiedPropertyName(this.lookahead) || this.match("*"))) {
                                      token1 = this.lookahead;
                                      isStatic1 = true;
                                      computed1 = this.match("[");
                                      if (this.match("*")) this.nextToken();
                                      else key1 = this.parseObjectPropertyKey();
                                  }
                                  if (token1.type === 3 /* Identifier */  && !this.hasLineTerminator && token1.value === "async") {
                                      var punctuator1 = this.lookahead.value;
                                      if (punctuator1 !== ":" && punctuator1 !== "(" && punctuator1 !== "*") {
                                          isAsync1 = true;
                                          token1 = this.lookahead;
                                          key1 = this.parseObjectPropertyKey();
                                          if (token1.type === 3 /* Identifier */  && token1.value === "constructor") this.tolerateUnexpectedToken(token1, messages_11.Messages.ConstructorIsAsync);
                                      }
                                  }
                              }
                              var lookaheadPropertyKey1 = this.qualifiedPropertyName(this.lookahead);
                              if (token1.type === 3 /* Identifier */ ) {
                                  if (token1.value === "get" && lookaheadPropertyKey1) {
                                      kind1 = "get";
                                      computed1 = this.match("[");
                                      key1 = this.parseObjectPropertyKey();
                                      this.context.allowYield = false;
                                      value1 = this.parseGetterMethod();
                                  } else if (token1.value === "set" && lookaheadPropertyKey1) {
                                      kind1 = "set";
                                      computed1 = this.match("[");
                                      key1 = this.parseObjectPropertyKey();
                                      value1 = this.parseSetterMethod();
                                  }
                              } else if (token1.type === 7 /* Punctuator */  && token1.value === "*" && lookaheadPropertyKey1) {
                                  kind1 = "init";
                                  computed1 = this.match("[");
                                  key1 = this.parseObjectPropertyKey();
                                  value1 = this.parseGeneratorMethod();
                                  method1 = true;
                              }
                              if (!kind1 && key1 && this.match("(")) {
                                  kind1 = "init";
                                  value1 = isAsync1 ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
                                  method1 = true;
                              }
                              if (!kind1) this.throwUnexpectedToken(this.lookahead);
                              if (kind1 === "init") kind1 = "method";
                              if (!computed1) {
                                  if (isStatic1 && this.isPropertyKey(key1, "prototype")) this.throwUnexpectedToken(token1, messages_11.Messages.StaticPrototype);
                                  if (!isStatic1 && this.isPropertyKey(key1, "constructor")) {
                                      if (kind1 !== "method" || !method1 || value1 && value1.generator) this.throwUnexpectedToken(token1, messages_11.Messages.ConstructorSpecialMethod);
                                      if (hasConstructor1.value) this.throwUnexpectedToken(token1, messages_11.Messages.DuplicateConstructor);
                                      else hasConstructor1.value = true;
                                      kind1 = "constructor";
                                  }
                              }
                              return this.finalize(node1, new Node1.MethodDefinition(key1, computed1, value1, kind1, isStatic1));
                          };
                          Parser1.prototype.parseClassElementList = function() {
                              var body1 = [];
                              var hasConstructor1 = {
                                  value: false
                              };
                              this.expect("{");
                              while(!this.match("}"))if (this.match(";")) this.nextToken();
                              else body1.push(this.parseClassElement(hasConstructor1));
                              this.expect("}");
                              return body1;
                          };
                          Parser1.prototype.parseClassBody = function() {
                              var node1 = this.createNode();
                              var elementList1 = this.parseClassElementList();
                              return this.finalize(node1, new Node1.ClassBody(elementList1));
                          };
                          Parser1.prototype.parseClassDeclaration = function(identifierIsOptional1) {
                              var node1 = this.createNode();
                              var previousStrict1 = this.context.strict;
                              this.context.strict = true;
                              this.expectKeyword("class");
                              var id1 = identifierIsOptional1 && this.lookahead.type !== 3 /* Identifier */  ? null : this.parseVariableIdentifier();
                              var superClass1 = null;
                              if (this.matchKeyword("extends")) {
                                  this.nextToken();
                                  superClass1 = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
                              }
                              var classBody1 = this.parseClassBody();
                              this.context.strict = previousStrict1;
                              return this.finalize(node1, new Node1.ClassDeclaration(id1, superClass1, classBody1));
                          };
                          Parser1.prototype.parseClassExpression = function() {
                              var node1 = this.createNode();
                              var previousStrict1 = this.context.strict;
                              this.context.strict = true;
                              this.expectKeyword("class");
                              var id1 = this.lookahead.type === 3 /* Identifier */  ? this.parseVariableIdentifier() : null;
                              var superClass1 = null;
                              if (this.matchKeyword("extends")) {
                                  this.nextToken();
                                  superClass1 = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
                              }
                              var classBody1 = this.parseClassBody();
                              this.context.strict = previousStrict1;
                              return this.finalize(node1, new Node1.ClassExpression(id1, superClass1, classBody1));
                          };
                          // https://tc39.github.io/ecma262/#sec-scripts
                          // https://tc39.github.io/ecma262/#sec-modules
                          Parser1.prototype.parseModule = function() {
                              this.context.strict = true;
                              this.context.isModule = true;
                              this.scanner.isModule = true;
                              var node1 = this.createNode();
                              var body1 = this.parseDirectivePrologues();
                              while(this.lookahead.type !== 2 /* EOF */ )body1.push(this.parseStatementListItem());
                              return this.finalize(node1, new Node1.Module(body1));
                          };
                          Parser1.prototype.parseScript = function() {
                              var node1 = this.createNode();
                              var body1 = this.parseDirectivePrologues();
                              while(this.lookahead.type !== 2 /* EOF */ )body1.push(this.parseStatementListItem());
                              return this.finalize(node1, new Node1.Script(body1));
                          };
                          // https://tc39.github.io/ecma262/#sec-imports
                          Parser1.prototype.parseModuleSpecifier = function() {
                              var node1 = this.createNode();
                              if (this.lookahead.type !== 8 /* StringLiteral */ ) this.throwError(messages_11.Messages.InvalidModuleSpecifier);
                              var token1 = this.nextToken();
                              var raw1 = this.getTokenRaw(token1);
                              return this.finalize(node1, new Node1.Literal(token1.value, raw1));
                          };
                          // import {<foo as bar>} ...;
                          Parser1.prototype.parseImportSpecifier = function() {
                              var node1 = this.createNode();
                              var imported1;
                              var local1;
                              if (this.lookahead.type === 3 /* Identifier */ ) {
                                  imported1 = this.parseVariableIdentifier();
                                  local1 = imported1;
                                  if (this.matchContextualKeyword("as")) {
                                      this.nextToken();
                                      local1 = this.parseVariableIdentifier();
                                  }
                              } else {
                                  imported1 = this.parseIdentifierName();
                                  local1 = imported1;
                                  if (this.matchContextualKeyword("as")) {
                                      this.nextToken();
                                      local1 = this.parseVariableIdentifier();
                                  } else this.throwUnexpectedToken(this.nextToken());
                              }
                              return this.finalize(node1, new Node1.ImportSpecifier(local1, imported1));
                          };
                          // {foo, bar as bas}
                          Parser1.prototype.parseNamedImports = function() {
                              this.expect("{");
                              var specifiers1 = [];
                              while(!this.match("}")){
                                  specifiers1.push(this.parseImportSpecifier());
                                  if (!this.match("}")) this.expect(",");
                              }
                              this.expect("}");
                              return specifiers1;
                          };
                          // import <foo> ...;
                          Parser1.prototype.parseImportDefaultSpecifier = function() {
                              var node1 = this.createNode();
                              var local1 = this.parseIdentifierName();
                              return this.finalize(node1, new Node1.ImportDefaultSpecifier(local1));
                          };
                          // import <* as foo> ...;
                          Parser1.prototype.parseImportNamespaceSpecifier = function() {
                              var node1 = this.createNode();
                              this.expect("*");
                              if (!this.matchContextualKeyword("as")) this.throwError(messages_11.Messages.NoAsAfterImportNamespace);
                              this.nextToken();
                              var local1 = this.parseIdentifierName();
                              return this.finalize(node1, new Node1.ImportNamespaceSpecifier(local1));
                          };
                          Parser1.prototype.parseImportDeclaration = function() {
                              if (this.context.inFunctionBody) this.throwError(messages_11.Messages.IllegalImportDeclaration);
                              var node1 = this.createNode();
                              this.expectKeyword("import");
                              var src2;
                              var specifiers1 = [];
                              if (this.lookahead.type === 8 /* StringLiteral */ ) // import 'foo';
                              src2 = this.parseModuleSpecifier();
                              else {
                                  if (this.match("{")) // import {bar}
                                  specifiers1 = specifiers1.concat(this.parseNamedImports());
                                  else if (this.match("*")) // import * as foo
                                  specifiers1.push(this.parseImportNamespaceSpecifier());
                                  else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword("default")) {
                                      // import foo
                                      specifiers1.push(this.parseImportDefaultSpecifier());
                                      if (this.match(",")) {
                                          this.nextToken();
                                          if (this.match("*")) // import foo, * as foo
                                          specifiers1.push(this.parseImportNamespaceSpecifier());
                                          else if (this.match("{")) // import foo, {bar}
                                          specifiers1 = specifiers1.concat(this.parseNamedImports());
                                          else this.throwUnexpectedToken(this.lookahead);
                                      }
                                  } else this.throwUnexpectedToken(this.nextToken());
                                  if (!this.matchContextualKeyword("from")) {
                                      var message1 = this.lookahead.value ? messages_11.Messages.UnexpectedToken : messages_11.Messages.MissingFromClause;
                                      this.throwError(message1, this.lookahead.value);
                                  }
                                  this.nextToken();
                                  src2 = this.parseModuleSpecifier();
                              }
                              this.consumeSemicolon();
                              return this.finalize(node1, new Node1.ImportDeclaration(specifiers1, src2));
                          };
                          // https://tc39.github.io/ecma262/#sec-exports
                          Parser1.prototype.parseExportSpecifier = function() {
                              var node1 = this.createNode();
                              var local1 = this.parseIdentifierName();
                              var exported1 = local1;
                              if (this.matchContextualKeyword("as")) {
                                  this.nextToken();
                                  exported1 = this.parseIdentifierName();
                              }
                              return this.finalize(node1, new Node1.ExportSpecifier(local1, exported1));
                          };
                          Parser1.prototype.parseExportDeclaration = function() {
                              if (this.context.inFunctionBody) this.throwError(messages_11.Messages.IllegalExportDeclaration);
                              var node1 = this.createNode();
                              this.expectKeyword("export");
                              var exportDeclaration1;
                              if (this.matchKeyword("default")) {
                                  // export default ...
                                  this.nextToken();
                                  if (this.matchKeyword("function")) {
                                      // export default function foo () {}
                                      // export default function () {}
                                      var declaration1 = this.parseFunctionDeclaration(true);
                                      exportDeclaration1 = this.finalize(node1, new Node1.ExportDefaultDeclaration(declaration1));
                                  } else if (this.matchKeyword("class")) {
                                      // export default class foo {}
                                      var declaration1 = this.parseClassDeclaration(true);
                                      exportDeclaration1 = this.finalize(node1, new Node1.ExportDefaultDeclaration(declaration1));
                                  } else if (this.matchContextualKeyword("async")) {
                                      // export default async function f () {}
                                      // export default async function () {}
                                      // export default async x => x
                                      var declaration1 = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression();
                                      exportDeclaration1 = this.finalize(node1, new Node1.ExportDefaultDeclaration(declaration1));
                                  } else {
                                      if (this.matchContextualKeyword("from")) this.throwError(messages_11.Messages.UnexpectedToken, this.lookahead.value);
                                      // export default {};
                                      // export default [];
                                      // export default (1 + 2);
                                      var declaration1 = this.match("{") ? this.parseObjectInitializer() : this.match("[") ? this.parseArrayInitializer() : this.parseAssignmentExpression();
                                      this.consumeSemicolon();
                                      exportDeclaration1 = this.finalize(node1, new Node1.ExportDefaultDeclaration(declaration1));
                                  }
                              } else if (this.match("*")) {
                                  // export * from 'foo';
                                  this.nextToken();
                                  if (!this.matchContextualKeyword("from")) {
                                      var message1 = this.lookahead.value ? messages_11.Messages.UnexpectedToken : messages_11.Messages.MissingFromClause;
                                      this.throwError(message1, this.lookahead.value);
                                  }
                                  this.nextToken();
                                  var src2 = this.parseModuleSpecifier();
                                  this.consumeSemicolon();
                                  exportDeclaration1 = this.finalize(node1, new Node1.ExportAllDeclaration(src2));
                              } else if (this.lookahead.type === 4 /* Keyword */ ) {
                                  // export var f = 1;
                                  var declaration1 = void 0;
                                  switch(this.lookahead.value){
                                      case "let":
                                      case "const":
                                          declaration1 = this.parseLexicalDeclaration({
                                              inFor: false
                                          });
                                          break;
                                      case "var":
                                      case "class":
                                      case "function":
                                          declaration1 = this.parseStatementListItem();
                                          break;
                                      default:
                                          this.throwUnexpectedToken(this.lookahead);
                                  }
                                  exportDeclaration1 = this.finalize(node1, new Node1.ExportNamedDeclaration(declaration1, [], null));
                              } else if (this.matchAsyncFunction()) {
                                  var declaration1 = this.parseFunctionDeclaration();
                                  exportDeclaration1 = this.finalize(node1, new Node1.ExportNamedDeclaration(declaration1, [], null));
                              } else {
                                  var specifiers1 = [];
                                  var source1 = null;
                                  var isExportFromIdentifier1 = false;
                                  this.expect("{");
                                  while(!this.match("}")){
                                      isExportFromIdentifier1 = isExportFromIdentifier1 || this.matchKeyword("default");
                                      specifiers1.push(this.parseExportSpecifier());
                                      if (!this.match("}")) this.expect(",");
                                  }
                                  this.expect("}");
                                  if (this.matchContextualKeyword("from")) {
                                      // export {default} from 'foo';
                                      // export {foo} from 'foo';
                                      this.nextToken();
                                      source1 = this.parseModuleSpecifier();
                                      this.consumeSemicolon();
                                  } else if (isExportFromIdentifier1) {
                                      // export {default}; // missing fromClause
                                      var message1 = this.lookahead.value ? messages_11.Messages.UnexpectedToken : messages_11.Messages.MissingFromClause;
                                      this.throwError(message1, this.lookahead.value);
                                  } else // export {foo};
                                  this.consumeSemicolon();
                                  exportDeclaration1 = this.finalize(node1, new Node1.ExportNamedDeclaration(null, specifiers1, source1));
                              }
                              return exportDeclaration1;
                          };
                          return Parser1;
                      }();
                      exports1.Parser = Parser1;
                  /***/ },
                  /* 9 */ /***/ function(module1, exports1) {
                      "use strict";
                      // Ensure the condition is true, otherwise throw an error.
                      // This is only to have a better contract semantic, i.e. another safety net
                      // to catch a logic error. The condition shall be fulfilled in normal case.
                      // Do NOT use this to enforce a certain condition on any user input.
                      Object.defineProperty(exports1, "__esModule", {
                          value: true
                      });
                      function assert1(condition1, message1) {
                          /* istanbul ignore if */ if (!condition1) throw new Error("ASSERT: " + message1);
                      }
                      exports1.assert = assert1;
                  /***/ },
                  /* 10 */ /***/ function(module1, exports1) {
                      "use strict";
                      /* tslint:disable:max-classes-per-file */ Object.defineProperty(exports1, "__esModule", {
                          value: true
                      });
                      var ErrorHandler1 = function() {
                          function ErrorHandler1() {
                              this.errors = [];
                              this.tolerant = false;
                          }
                          ErrorHandler1.prototype.recordError = function(error1) {
                              this.errors.push(error1);
                          };
                          ErrorHandler1.prototype.tolerate = function(error1) {
                              if (this.tolerant) this.recordError(error1);
                              else throw error1;
                          };
                          ErrorHandler1.prototype.constructError = function(msg1, column1) {
                              var error1 = new Error(msg1);
                              try {
                                  throw error1;
                              } catch (base1) {
                                  /* istanbul ignore else */ if (Object.create && Object.defineProperty) {
                                      error1 = Object.create(base1);
                                      Object.defineProperty(error1, "column", {
                                          value: column1
                                      });
                                  }
                              }
                              /* istanbul ignore next */ return error1;
                          };
                          ErrorHandler1.prototype.createError = function(index3, line1, col1, description1) {
                              var msg1 = "Line " + line1 + ": " + description1;
                              var error1 = this.constructError(msg1, col1);
                              error1.index = index3;
                              error1.lineNumber = line1;
                              error1.description = description1;
                              return error1;
                          };
                          ErrorHandler1.prototype.throwError = function(index3, line1, col1, description1) {
                              throw this.createError(index3, line1, col1, description1);
                          };
                          ErrorHandler1.prototype.tolerateError = function(index3, line1, col1, description1) {
                              var error1 = this.createError(index3, line1, col1, description1);
                              if (this.tolerant) this.recordError(error1);
                              else throw error1;
                          };
                          return ErrorHandler1;
                      }();
                      exports1.ErrorHandler = ErrorHandler1;
                  /***/ },
                  /* 11 */ /***/ function(module1, exports1) {
                      "use strict";
                      Object.defineProperty(exports1, "__esModule", {
                          value: true
                      });
                      // Error messages should be identical to V8.
                      exports1.Messages = {
                          BadGetterArity: "Getter must not have any formal parameters",
                          BadSetterArity: "Setter must have exactly one formal parameter",
                          BadSetterRestParameter: "Setter function argument must not be a rest parameter",
                          ConstructorIsAsync: "Class constructor may not be an async method",
                          ConstructorSpecialMethod: "Class constructor may not be an accessor",
                          DeclarationMissingInitializer: "Missing initializer in %0 declaration",
                          DefaultRestParameter: "Unexpected token =",
                          DuplicateBinding: "Duplicate binding %0",
                          DuplicateConstructor: "A class may only have one constructor",
                          DuplicateProtoProperty: "Duplicate __proto__ fields are not allowed in object literals",
                          ForInOfLoopInitializer: "%0 loop variable declaration may not have an initializer",
                          GeneratorInLegacyContext: "Generator declarations are not allowed in legacy contexts",
                          IllegalBreak: "Illegal break statement",
                          IllegalContinue: "Illegal continue statement",
                          IllegalExportDeclaration: "Unexpected token",
                          IllegalImportDeclaration: "Unexpected token",
                          IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list",
                          IllegalReturn: "Illegal return statement",
                          InvalidEscapedReservedWord: "Keyword must not contain escaped characters",
                          InvalidHexEscapeSequence: "Invalid hexadecimal escape sequence",
                          InvalidLHSInAssignment: "Invalid left-hand side in assignment",
                          InvalidLHSInForIn: "Invalid left-hand side in for-in",
                          InvalidLHSInForLoop: "Invalid left-hand side in for-loop",
                          InvalidModuleSpecifier: "Unexpected token",
                          InvalidRegExp: "Invalid regular expression",
                          LetInLexicalBinding: "let is disallowed as a lexically bound name",
                          MissingFromClause: "Unexpected token",
                          MultipleDefaultsInSwitch: "More than one default clause in switch statement",
                          NewlineAfterThrow: "Illegal newline after throw",
                          NoAsAfterImportNamespace: "Unexpected token",
                          NoCatchOrFinally: "Missing catch or finally after try",
                          ParameterAfterRestParameter: "Rest parameter must be last formal parameter",
                          Redeclaration: "%0 '%1' has already been declared",
                          StaticPrototype: "Classes may not have static property named prototype",
                          StrictCatchVariable: "Catch variable may not be eval or arguments in strict mode",
                          StrictDelete: "Delete of an unqualified identifier in strict mode.",
                          StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block",
                          StrictFunctionName: "Function name may not be eval or arguments in strict mode",
                          StrictLHSAssignment: "Assignment to eval or arguments is not allowed in strict mode",
                          StrictLHSPostfix: "Postfix increment/decrement may not have eval or arguments operand in strict mode",
                          StrictLHSPrefix: "Prefix increment/decrement may not have eval or arguments operand in strict mode",
                          StrictModeWith: "Strict mode code may not include a with statement",
                          StrictOctalLiteral: "Octal literals are not allowed in strict mode.",
                          StrictParamDupe: "Strict mode function may not have duplicate parameter names",
                          StrictParamName: "Parameter name eval or arguments is not allowed in strict mode",
                          StrictReservedWord: "Use of future reserved word in strict mode",
                          StrictVarName: "Variable name may not be eval or arguments in strict mode",
                          TemplateOctalLiteral: "Octal literals are not allowed in template strings.",
                          UnexpectedEOS: "Unexpected end of input",
                          UnexpectedIdentifier: "Unexpected identifier",
                          UnexpectedNumber: "Unexpected number",
                          UnexpectedReserved: "Unexpected reserved word",
                          UnexpectedString: "Unexpected string",
                          UnexpectedTemplate: "Unexpected quasi %0",
                          UnexpectedToken: "Unexpected token %0",
                          UnexpectedTokenIllegal: "Unexpected token ILLEGAL",
                          UnknownLabel: "Undefined label '%0'",
                          UnterminatedRegExp: "Invalid regular expression: missing /"
                      };
                  /***/ },
                  /* 12 */ /***/ function(module1, exports1, __webpack_require__1) {
                      "use strict";
                      Object.defineProperty(exports1, "__esModule", {
                          value: true
                      });
                      var assert_11 = __webpack_require__1(9);
                      var character_11 = __webpack_require__1(4);
                      var messages_11 = __webpack_require__1(11);
                      function hexValue1(ch1) {
                          return "0123456789abcdef".indexOf(ch1.toLowerCase());
                      }
                      function octalValue1(ch1) {
                          return "01234567".indexOf(ch1);
                      }
                      var Scanner1 = function() {
                          function Scanner1(code1, handler1) {
                              this.source = code1;
                              this.errorHandler = handler1;
                              this.trackComment = false;
                              this.isModule = false;
                              this.length = code1.length;
                              this.index = 0;
                              this.lineNumber = code1.length > 0 ? 1 : 0;
                              this.lineStart = 0;
                              this.curlyStack = [];
                          }
                          Scanner1.prototype.saveState = function() {
                              return {
                                  index: this.index,
                                  lineNumber: this.lineNumber,
                                  lineStart: this.lineStart
                              };
                          };
                          Scanner1.prototype.restoreState = function(state1) {
                              this.index = state1.index;
                              this.lineNumber = state1.lineNumber;
                              this.lineStart = state1.lineStart;
                          };
                          Scanner1.prototype.eof = function() {
                              return this.index >= this.length;
                          };
                          Scanner1.prototype.throwUnexpectedToken = function(message1) {
                              if (message1 === void 0) message1 = messages_11.Messages.UnexpectedTokenIllegal;
                              return this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message1);
                          };
                          Scanner1.prototype.tolerateUnexpectedToken = function(message1) {
                              if (message1 === void 0) message1 = messages_11.Messages.UnexpectedTokenIllegal;
                              this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, message1);
                          };
                          // https://tc39.github.io/ecma262/#sec-comments
                          Scanner1.prototype.skipSingleLineComment = function(offset2) {
                              var comments1 = [];
                              var start1, loc1;
                              if (this.trackComment) {
                                  comments1 = [];
                                  start1 = this.index - offset2;
                                  loc1 = {
                                      start: {
                                          line: this.lineNumber,
                                          column: this.index - this.lineStart - offset2
                                      },
                                      end: {}
                                  };
                              }
                              while(!this.eof()){
                                  var ch1 = this.source.charCodeAt(this.index);
                                  ++this.index;
                                  if (character_11.Character.isLineTerminator(ch1)) {
                                      if (this.trackComment) {
                                          loc1.end = {
                                              line: this.lineNumber,
                                              column: this.index - this.lineStart - 1
                                          };
                                          var entry1 = {
                                              multiLine: false,
                                              slice: [
                                                  start1 + offset2,
                                                  this.index - 1
                                              ],
                                              range: [
                                                  start1,
                                                  this.index - 1
                                              ],
                                              loc: loc1
                                          };
                                          comments1.push(entry1);
                                      }
                                      if (ch1 === 13 && this.source.charCodeAt(this.index) === 10) ++this.index;
                                      ++this.lineNumber;
                                      this.lineStart = this.index;
                                      return comments1;
                                  }
                              }
                              if (this.trackComment) {
                                  loc1.end = {
                                      line: this.lineNumber,
                                      column: this.index - this.lineStart
                                  };
                                  var entry1 = {
                                      multiLine: false,
                                      slice: [
                                          start1 + offset2,
                                          this.index
                                      ],
                                      range: [
                                          start1,
                                          this.index
                                      ],
                                      loc: loc1
                                  };
                                  comments1.push(entry1);
                              }
                              return comments1;
                          };
                          Scanner1.prototype.skipMultiLineComment = function() {
                              var comments1 = [];
                              var start1, loc1;
                              if (this.trackComment) {
                                  comments1 = [];
                                  start1 = this.index - 2;
                                  loc1 = {
                                      start: {
                                          line: this.lineNumber,
                                          column: this.index - this.lineStart - 2
                                      },
                                      end: {}
                                  };
                              }
                              while(!this.eof()){
                                  var ch1 = this.source.charCodeAt(this.index);
                                  if (character_11.Character.isLineTerminator(ch1)) {
                                      if (ch1 === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) ++this.index;
                                      ++this.lineNumber;
                                      ++this.index;
                                      this.lineStart = this.index;
                                  } else if (ch1 === 0x2A) {
                                      // Block comment ends with '*/'.
                                      if (this.source.charCodeAt(this.index + 1) === 0x2F) {
                                          this.index += 2;
                                          if (this.trackComment) {
                                              loc1.end = {
                                                  line: this.lineNumber,
                                                  column: this.index - this.lineStart
                                              };
                                              var entry1 = {
                                                  multiLine: true,
                                                  slice: [
                                                      start1 + 2,
                                                      this.index - 2
                                                  ],
                                                  range: [
                                                      start1,
                                                      this.index
                                                  ],
                                                  loc: loc1
                                              };
                                              comments1.push(entry1);
                                          }
                                          return comments1;
                                      }
                                      ++this.index;
                                  } else ++this.index;
                              }
                              // Ran off the end of the file - the whole thing is a comment
                              if (this.trackComment) {
                                  loc1.end = {
                                      line: this.lineNumber,
                                      column: this.index - this.lineStart
                                  };
                                  var entry1 = {
                                      multiLine: true,
                                      slice: [
                                          start1 + 2,
                                          this.index
                                      ],
                                      range: [
                                          start1,
                                          this.index
                                      ],
                                      loc: loc1
                                  };
                                  comments1.push(entry1);
                              }
                              this.tolerateUnexpectedToken();
                              return comments1;
                          };
                          Scanner1.prototype.scanComments = function() {
                              var comments1;
                              if (this.trackComment) comments1 = [];
                              var start1 = this.index === 0;
                              while(!this.eof()){
                                  var ch1 = this.source.charCodeAt(this.index);
                                  if (character_11.Character.isWhiteSpace(ch1)) ++this.index;
                                  else if (character_11.Character.isLineTerminator(ch1)) {
                                      ++this.index;
                                      if (ch1 === 0x0D && this.source.charCodeAt(this.index) === 0x0A) ++this.index;
                                      ++this.lineNumber;
                                      this.lineStart = this.index;
                                      start1 = true;
                                  } else if (ch1 === 0x2F) {
                                      ch1 = this.source.charCodeAt(this.index + 1);
                                      if (ch1 === 0x2F) {
                                          this.index += 2;
                                          var comment1 = this.skipSingleLineComment(2);
                                          if (this.trackComment) comments1 = comments1.concat(comment1);
                                          start1 = true;
                                      } else if (ch1 === 0x2A) {
                                          this.index += 2;
                                          var comment1 = this.skipMultiLineComment();
                                          if (this.trackComment) comments1 = comments1.concat(comment1);
                                      } else break;
                                  } else if (start1 && ch1 === 0x2D) {
                                      // U+003E is '>'
                                      if (this.source.charCodeAt(this.index + 1) === 0x2D && this.source.charCodeAt(this.index + 2) === 0x3E) {
                                          // '-->' is a single-line comment
                                          this.index += 3;
                                          var comment1 = this.skipSingleLineComment(3);
                                          if (this.trackComment) comments1 = comments1.concat(comment1);
                                      } else break;
                                  } else if (ch1 === 0x3C && !this.isModule) {
                                      if (this.source.slice(this.index + 1, this.index + 4) === "!--") {
                                          this.index += 4; // `<!--`
                                          var comment1 = this.skipSingleLineComment(4);
                                          if (this.trackComment) comments1 = comments1.concat(comment1);
                                      } else break;
                                  } else break;
                              }
                              return comments1;
                          };
                          // https://tc39.github.io/ecma262/#sec-future-reserved-words
                          Scanner1.prototype.isFutureReservedWord = function(id1) {
                              switch(id1){
                                  case "enum":
                                  case "export":
                                  case "import":
                                  case "super":
                                      return true;
                                  default:
                                      return false;
                              }
                          };
                          Scanner1.prototype.isStrictModeReservedWord = function(id1) {
                              switch(id1){
                                  case "implements":
                                  case "interface":
                                  case "package":
                                  case "private":
                                  case "protected":
                                  case "public":
                                  case "static":
                                  case "yield":
                                  case "let":
                                      return true;
                                  default:
                                      return false;
                              }
                          };
                          Scanner1.prototype.isRestrictedWord = function(id1) {
                              return id1 === "eval" || id1 === "arguments";
                          };
                          // https://tc39.github.io/ecma262/#sec-keywords
                          Scanner1.prototype.isKeyword = function(id1) {
                              switch(id1.length){
                                  case 2:
                                      return id1 === "if" || id1 === "in" || id1 === "do";
                                  case 3:
                                      return id1 === "var" || id1 === "for" || id1 === "new" || id1 === "try" || id1 === "let";
                                  case 4:
                                      return id1 === "this" || id1 === "else" || id1 === "case" || id1 === "void" || id1 === "with" || id1 === "enum";
                                  case 5:
                                      return id1 === "while" || id1 === "break" || id1 === "catch" || id1 === "throw" || id1 === "const" || id1 === "yield" || id1 === "class" || id1 === "super";
                                  case 6:
                                      return id1 === "return" || id1 === "typeof" || id1 === "delete" || id1 === "switch" || id1 === "export" || id1 === "import";
                                  case 7:
                                      return id1 === "default" || id1 === "finally" || id1 === "extends";
                                  case 8:
                                      return id1 === "function" || id1 === "continue" || id1 === "debugger";
                                  case 10:
                                      return id1 === "instanceof";
                                  default:
                                      return false;
                              }
                          };
                          Scanner1.prototype.codePointAt = function(i3) {
                              var cp1 = this.source.charCodeAt(i3);
                              if (cp1 >= 0xD800 && cp1 <= 0xDBFF) {
                                  var second1 = this.source.charCodeAt(i3 + 1);
                                  if (second1 >= 0xDC00 && second1 <= 0xDFFF) {
                                      var first1 = cp1;
                                      cp1 = (first1 - 0xD800) * 0x400 + second1 - 0xDC00 + 0x10000;
                                  }
                              }
                              return cp1;
                          };
                          Scanner1.prototype.scanHexEscape = function(prefix1) {
                              var len1 = prefix1 === "u" ? 4 : 2;
                              var code1 = 0;
                              for(var i3 = 0; i3 < len1; ++i3){
                                  if (!this.eof() && character_11.Character.isHexDigit(this.source.charCodeAt(this.index))) code1 = code1 * 16 + hexValue1(this.source[this.index++]);
                                  else return null;
                              }
                              return String.fromCharCode(code1);
                          };
                          Scanner1.prototype.scanUnicodeCodePointEscape = function() {
                              var ch1 = this.source[this.index];
                              var code1 = 0;
                              // At least, one hex digit is required.
                              if (ch1 === "}") this.throwUnexpectedToken();
                              while(!this.eof()){
                                  ch1 = this.source[this.index++];
                                  if (!character_11.Character.isHexDigit(ch1.charCodeAt(0))) break;
                                  code1 = code1 * 16 + hexValue1(ch1);
                              }
                              if (code1 > 0x10FFFF || ch1 !== "}") this.throwUnexpectedToken();
                              return character_11.Character.fromCodePoint(code1);
                          };
                          Scanner1.prototype.getIdentifier = function() {
                              var start1 = this.index++;
                              while(!this.eof()){
                                  var ch1 = this.source.charCodeAt(this.index);
                                  if (ch1 === 0x5C) {
                                      // Blackslash (U+005C) marks Unicode escape sequence.
                                      this.index = start1;
                                      return this.getComplexIdentifier();
                                  } else if (ch1 >= 0xD800 && ch1 < 0xDFFF) {
                                      // Need to handle surrogate pairs.
                                      this.index = start1;
                                      return this.getComplexIdentifier();
                                  }
                                  if (character_11.Character.isIdentifierPart(ch1)) ++this.index;
                                  else break;
                              }
                              return this.source.slice(start1, this.index);
                          };
                          Scanner1.prototype.getComplexIdentifier = function() {
                              var cp1 = this.codePointAt(this.index);
                              var id1 = character_11.Character.fromCodePoint(cp1);
                              this.index += id1.length;
                              // '\u' (U+005C, U+0075) denotes an escaped character.
                              var ch1;
                              if (cp1 === 0x5C) {
                                  if (this.source.charCodeAt(this.index) !== 0x75) this.throwUnexpectedToken();
                                  ++this.index;
                                  if (this.source[this.index] === "{") {
                                      ++this.index;
                                      ch1 = this.scanUnicodeCodePointEscape();
                                  } else {
                                      ch1 = this.scanHexEscape("u");
                                      if (ch1 === null || ch1 === "\\" || !character_11.Character.isIdentifierStart(ch1.charCodeAt(0))) this.throwUnexpectedToken();
                                  }
                                  id1 = ch1;
                              }
                              while(!this.eof()){
                                  cp1 = this.codePointAt(this.index);
                                  if (!character_11.Character.isIdentifierPart(cp1)) break;
                                  ch1 = character_11.Character.fromCodePoint(cp1);
                                  id1 += ch1;
                                  this.index += ch1.length;
                                  // '\u' (U+005C, U+0075) denotes an escaped character.
                                  if (cp1 === 0x5C) {
                                      id1 = id1.substr(0, id1.length - 1);
                                      if (this.source.charCodeAt(this.index) !== 0x75) this.throwUnexpectedToken();
                                      ++this.index;
                                      if (this.source[this.index] === "{") {
                                          ++this.index;
                                          ch1 = this.scanUnicodeCodePointEscape();
                                      } else {
                                          ch1 = this.scanHexEscape("u");
                                          if (ch1 === null || ch1 === "\\" || !character_11.Character.isIdentifierPart(ch1.charCodeAt(0))) this.throwUnexpectedToken();
                                      }
                                      id1 += ch1;
                                  }
                              }
                              return id1;
                          };
                          Scanner1.prototype.octalToDecimal = function(ch1) {
                              // \0 is not octal escape sequence
                              var octal1 = ch1 !== "0";
                              var code1 = octalValue1(ch1);
                              if (!this.eof() && character_11.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
                                  octal1 = true;
                                  code1 = code1 * 8 + octalValue1(this.source[this.index++]);
                                  // 3 digits are only allowed when string starts
                                  // with 0, 1, 2, 3
                                  if ("0123".indexOf(ch1) >= 0 && !this.eof() && character_11.Character.isOctalDigit(this.source.charCodeAt(this.index))) code1 = code1 * 8 + octalValue1(this.source[this.index++]);
                              }
                              return {
                                  code: code1,
                                  octal: octal1
                              };
                          };
                          // https://tc39.github.io/ecma262/#sec-names-and-keywords
                          Scanner1.prototype.scanIdentifier = function() {
                              var type1;
                              var start1 = this.index;
                              // Backslash (U+005C) starts an escaped character.
                              var id1 = this.source.charCodeAt(start1) === 0x5C ? this.getComplexIdentifier() : this.getIdentifier();
                              // There is no keyword or literal with only one character.
                              // Thus, it must be an identifier.
                              if (id1.length === 1) type1 = 3 /* Identifier */ ;
                              else if (this.isKeyword(id1)) type1 = 4 /* Keyword */ ;
                              else if (id1 === "null") type1 = 5 /* NullLiteral */ ;
                              else if (id1 === "true" || id1 === "false") type1 = 1 /* BooleanLiteral */ ;
                              else type1 = 3 /* Identifier */ ;
                              if (type1 !== 3 /* Identifier */  && start1 + id1.length !== this.index) {
                                  var restore1 = this.index;
                                  this.index = start1;
                                  this.tolerateUnexpectedToken(messages_11.Messages.InvalidEscapedReservedWord);
                                  this.index = restore1;
                              }
                              return {
                                  type: type1,
                                  value: id1,
                                  lineNumber: this.lineNumber,
                                  lineStart: this.lineStart,
                                  start: start1,
                                  end: this.index
                              };
                          };
                          // https://tc39.github.io/ecma262/#sec-punctuators
                          Scanner1.prototype.scanPunctuator = function() {
                              var start1 = this.index;
                              // Check for most common single-character punctuators.
                              var str1 = this.source[this.index];
                              switch(str1){
                                  case "(":
                                  case "{":
                                      if (str1 === "{") this.curlyStack.push("{");
                                      ++this.index;
                                      break;
                                  case ".":
                                      ++this.index;
                                      if (this.source[this.index] === "." && this.source[this.index + 1] === ".") {
                                          // Spread operator: ...
                                          this.index += 2;
                                          str1 = "...";
                                      }
                                      break;
                                  case "}":
                                      ++this.index;
                                      this.curlyStack.pop();
                                      break;
                                  case ")":
                                  case ";":
                                  case ",":
                                  case "[":
                                  case "]":
                                  case ":":
                                  case "?":
                                  case "~":
                                      ++this.index;
                                      break;
                                  default:
                                      // 4-character punctuator.
                                      str1 = this.source.substr(this.index, 4);
                                      if (str1 === ">>>=") this.index += 4;
                                      else {
                                          // 3-character punctuators.
                                          str1 = str1.substr(0, 3);
                                          if (str1 === "===" || str1 === "!==" || str1 === ">>>" || str1 === "<<=" || str1 === ">>=" || str1 === "**=") this.index += 3;
                                          else {
                                              // 2-character punctuators.
                                              str1 = str1.substr(0, 2);
                                              if (str1 === "&&" || str1 === "||" || str1 === "==" || str1 === "!=" || str1 === "+=" || str1 === "-=" || str1 === "*=" || str1 === "/=" || str1 === "++" || str1 === "--" || str1 === "<<" || str1 === ">>" || str1 === "&=" || str1 === "|=" || str1 === "^=" || str1 === "%=" || str1 === "<=" || str1 === ">=" || str1 === "=>" || str1 === "**") this.index += 2;
                                              else {
                                                  // 1-character punctuators.
                                                  str1 = this.source[this.index];
                                                  if ("<>=!+-*%&|^/".indexOf(str1) >= 0) ++this.index;
                                              }
                                          }
                                      }
                              }
                              if (this.index === start1) this.throwUnexpectedToken();
                              return {
                                  type: 7 /* Punctuator */ ,
                                  value: str1,
                                  lineNumber: this.lineNumber,
                                  lineStart: this.lineStart,
                                  start: start1,
                                  end: this.index
                              };
                          };
                          // https://tc39.github.io/ecma262/#sec-literals-numeric-literals
                          Scanner1.prototype.scanHexLiteral = function(start1) {
                              var num1 = "";
                              while(!this.eof()){
                                  if (!character_11.Character.isHexDigit(this.source.charCodeAt(this.index))) break;
                                  num1 += this.source[this.index++];
                              }
                              if (num1.length === 0) this.throwUnexpectedToken();
                              if (character_11.Character.isIdentifierStart(this.source.charCodeAt(this.index))) this.throwUnexpectedToken();
                              return {
                                  type: 6 /* NumericLiteral */ ,
                                  value: parseInt("0x" + num1, 16),
                                  lineNumber: this.lineNumber,
                                  lineStart: this.lineStart,
                                  start: start1,
                                  end: this.index
                              };
                          };
                          Scanner1.prototype.scanBinaryLiteral = function(start1) {
                              var num1 = "";
                              var ch1;
                              while(!this.eof()){
                                  ch1 = this.source[this.index];
                                  if (ch1 !== "0" && ch1 !== "1") break;
                                  num1 += this.source[this.index++];
                              }
                              if (num1.length === 0) // only 0b or 0B
                              this.throwUnexpectedToken();
                              if (!this.eof()) {
                                  ch1 = this.source.charCodeAt(this.index);
                                  /* istanbul ignore else */ if (character_11.Character.isIdentifierStart(ch1) || character_11.Character.isDecimalDigit(ch1)) this.throwUnexpectedToken();
                              }
                              return {
                                  type: 6 /* NumericLiteral */ ,
                                  value: parseInt(num1, 2),
                                  lineNumber: this.lineNumber,
                                  lineStart: this.lineStart,
                                  start: start1,
                                  end: this.index
                              };
                          };
                          Scanner1.prototype.scanOctalLiteral = function(prefix1, start1) {
                              var num1 = "";
                              var octal1 = false;
                              if (character_11.Character.isOctalDigit(prefix1.charCodeAt(0))) {
                                  octal1 = true;
                                  num1 = "0" + this.source[this.index++];
                              } else ++this.index;
                              while(!this.eof()){
                                  if (!character_11.Character.isOctalDigit(this.source.charCodeAt(this.index))) break;
                                  num1 += this.source[this.index++];
                              }
                              if (!octal1 && num1.length === 0) // only 0o or 0O
                              this.throwUnexpectedToken();
                              if (character_11.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_11.Character.isDecimalDigit(this.source.charCodeAt(this.index))) this.throwUnexpectedToken();
                              return {
                                  type: 6 /* NumericLiteral */ ,
                                  value: parseInt(num1, 8),
                                  octal: octal1,
                                  lineNumber: this.lineNumber,
                                  lineStart: this.lineStart,
                                  start: start1,
                                  end: this.index
                              };
                          };
                          Scanner1.prototype.isImplicitOctalLiteral = function() {
                              // Implicit octal, unless there is a non-octal digit.
                              // (Annex B.1.1 on Numeric Literals)
                              for(var i3 = this.index + 1; i3 < this.length; ++i3){
                                  var ch1 = this.source[i3];
                                  if (ch1 === "8" || ch1 === "9") return false;
                                  if (!character_11.Character.isOctalDigit(ch1.charCodeAt(0))) return true;
                              }
                              return true;
                          };
                          Scanner1.prototype.scanNumericLiteral = function() {
                              var start1 = this.index;
                              var ch1 = this.source[start1];
                              assert_11.assert(character_11.Character.isDecimalDigit(ch1.charCodeAt(0)) || ch1 === ".", "Numeric literal must start with a decimal digit or a decimal point");
                              var num1 = "";
                              if (ch1 !== ".") {
                                  num1 = this.source[this.index++];
                                  ch1 = this.source[this.index];
                                  // Hex number starts with '0x'.
                                  // Octal number starts with '0'.
                                  // Octal number in ES6 starts with '0o'.
                                  // Binary number in ES6 starts with '0b'.
                                  if (num1 === "0") {
                                      if (ch1 === "x" || ch1 === "X") {
                                          ++this.index;
                                          return this.scanHexLiteral(start1);
                                      }
                                      if (ch1 === "b" || ch1 === "B") {
                                          ++this.index;
                                          return this.scanBinaryLiteral(start1);
                                      }
                                      if (ch1 === "o" || ch1 === "O") return this.scanOctalLiteral(ch1, start1);
                                      if (ch1 && character_11.Character.isOctalDigit(ch1.charCodeAt(0))) {
                                          if (this.isImplicitOctalLiteral()) return this.scanOctalLiteral(ch1, start1);
                                      }
                                  }
                                  while(character_11.Character.isDecimalDigit(this.source.charCodeAt(this.index)))num1 += this.source[this.index++];
                                  ch1 = this.source[this.index];
                              }
                              if (ch1 === ".") {
                                  num1 += this.source[this.index++];
                                  while(character_11.Character.isDecimalDigit(this.source.charCodeAt(this.index)))num1 += this.source[this.index++];
                                  ch1 = this.source[this.index];
                              }
                              if (ch1 === "e" || ch1 === "E") {
                                  num1 += this.source[this.index++];
                                  ch1 = this.source[this.index];
                                  if (ch1 === "+" || ch1 === "-") num1 += this.source[this.index++];
                                  if (character_11.Character.isDecimalDigit(this.source.charCodeAt(this.index))) while(character_11.Character.isDecimalDigit(this.source.charCodeAt(this.index)))num1 += this.source[this.index++];
                                  else this.throwUnexpectedToken();
                              }
                              if (character_11.Character.isIdentifierStart(this.source.charCodeAt(this.index))) this.throwUnexpectedToken();
                              return {
                                  type: 6 /* NumericLiteral */ ,
                                  value: parseFloat(num1),
                                  lineNumber: this.lineNumber,
                                  lineStart: this.lineStart,
                                  start: start1,
                                  end: this.index
                              };
                          };
                          // https://tc39.github.io/ecma262/#sec-literals-string-literals
                          Scanner1.prototype.scanStringLiteral = function() {
                              var start1 = this.index;
                              var quote1 = this.source[start1];
                              assert_11.assert(quote1 === "'" || quote1 === '"', "String literal must starts with a quote");
                              ++this.index;
                              var octal1 = false;
                              var str1 = "";
                              while(!this.eof()){
                                  var ch1 = this.source[this.index++];
                                  if (ch1 === quote1) {
                                      quote1 = "";
                                      break;
                                  } else if (ch1 === "\\") {
                                      ch1 = this.source[this.index++];
                                      if (!ch1 || !character_11.Character.isLineTerminator(ch1.charCodeAt(0))) switch(ch1){
                                          case "u":
                                              if (this.source[this.index] === "{") {
                                                  ++this.index;
                                                  str1 += this.scanUnicodeCodePointEscape();
                                              } else {
                                                  var unescaped_11 = this.scanHexEscape(ch1);
                                                  if (unescaped_11 === null) this.throwUnexpectedToken();
                                                  str1 += unescaped_11;
                                              }
                                              break;
                                          case "x":
                                              var unescaped1 = this.scanHexEscape(ch1);
                                              if (unescaped1 === null) this.throwUnexpectedToken(messages_11.Messages.InvalidHexEscapeSequence);
                                              str1 += unescaped1;
                                              break;
                                          case "n":
                                              str1 += "\n";
                                              break;
                                          case "r":
                                              str1 += "\r";
                                              break;
                                          case "t":
                                              str1 += "	";
                                              break;
                                          case "b":
                                              str1 += "\b";
                                              break;
                                          case "f":
                                              str1 += "\f";
                                              break;
                                          case "v":
                                              str1 += "\v";
                                              break;
                                          case "8":
                                          case "9":
                                              str1 += ch1;
                                              this.tolerateUnexpectedToken();
                                              break;
                                          default:
                                              if (ch1 && character_11.Character.isOctalDigit(ch1.charCodeAt(0))) {
                                                  var octToDec1 = this.octalToDecimal(ch1);
                                                  octal1 = octToDec1.octal || octal1;
                                                  str1 += String.fromCharCode(octToDec1.code);
                                              } else str1 += ch1;
                                              break;
                                      }
                                      else {
                                          ++this.lineNumber;
                                          if (ch1 === "\r" && this.source[this.index] === "\n") ++this.index;
                                          this.lineStart = this.index;
                                      }
                                  } else if (character_11.Character.isLineTerminator(ch1.charCodeAt(0))) break;
                                  else str1 += ch1;
                              }
                              if (quote1 !== "") {
                                  this.index = start1;
                                  this.throwUnexpectedToken();
                              }
                              return {
                                  type: 8 /* StringLiteral */ ,
                                  value: str1,
                                  octal: octal1,
                                  lineNumber: this.lineNumber,
                                  lineStart: this.lineStart,
                                  start: start1,
                                  end: this.index
                              };
                          };
                          // https://tc39.github.io/ecma262/#sec-template-literal-lexical-components
                          Scanner1.prototype.scanTemplate = function() {
                              var cooked1 = "";
                              var terminated1 = false;
                              var start1 = this.index;
                              var head1 = this.source[start1] === "`";
                              var tail1 = false;
                              var rawOffset1 = 2;
                              ++this.index;
                              while(!this.eof()){
                                  var ch1 = this.source[this.index++];
                                  if (ch1 === "`") {
                                      rawOffset1 = 1;
                                      tail1 = true;
                                      terminated1 = true;
                                      break;
                                  } else if (ch1 === "$") {
                                      if (this.source[this.index] === "{") {
                                          this.curlyStack.push("${");
                                          ++this.index;
                                          terminated1 = true;
                                          break;
                                      }
                                      cooked1 += ch1;
                                  } else if (ch1 === "\\") {
                                      ch1 = this.source[this.index++];
                                      if (!character_11.Character.isLineTerminator(ch1.charCodeAt(0))) switch(ch1){
                                          case "n":
                                              cooked1 += "\n";
                                              break;
                                          case "r":
                                              cooked1 += "\r";
                                              break;
                                          case "t":
                                              cooked1 += "	";
                                              break;
                                          case "u":
                                              if (this.source[this.index] === "{") {
                                                  ++this.index;
                                                  cooked1 += this.scanUnicodeCodePointEscape();
                                              } else {
                                                  var restore1 = this.index;
                                                  var unescaped_21 = this.scanHexEscape(ch1);
                                                  if (unescaped_21 !== null) cooked1 += unescaped_21;
                                                  else {
                                                      this.index = restore1;
                                                      cooked1 += ch1;
                                                  }
                                              }
                                              break;
                                          case "x":
                                              var unescaped1 = this.scanHexEscape(ch1);
                                              if (unescaped1 === null) this.throwUnexpectedToken(messages_11.Messages.InvalidHexEscapeSequence);
                                              cooked1 += unescaped1;
                                              break;
                                          case "b":
                                              cooked1 += "\b";
                                              break;
                                          case "f":
                                              cooked1 += "\f";
                                              break;
                                          case "v":
                                              cooked1 += "\v";
                                              break;
                                          default:
                                              if (ch1 === "0") {
                                                  if (character_11.Character.isDecimalDigit(this.source.charCodeAt(this.index))) // Illegal: \01 \02 and so on
                                                  this.throwUnexpectedToken(messages_11.Messages.TemplateOctalLiteral);
                                                  cooked1 += "\x00";
                                              } else if (character_11.Character.isOctalDigit(ch1.charCodeAt(0))) // Illegal: \1 \2
                                              this.throwUnexpectedToken(messages_11.Messages.TemplateOctalLiteral);
                                              else cooked1 += ch1;
                                              break;
                                      }
                                      else {
                                          ++this.lineNumber;
                                          if (ch1 === "\r" && this.source[this.index] === "\n") ++this.index;
                                          this.lineStart = this.index;
                                      }
                                  } else if (character_11.Character.isLineTerminator(ch1.charCodeAt(0))) {
                                      ++this.lineNumber;
                                      if (ch1 === "\r" && this.source[this.index] === "\n") ++this.index;
                                      this.lineStart = this.index;
                                      cooked1 += "\n";
                                  } else cooked1 += ch1;
                              }
                              if (!terminated1) this.throwUnexpectedToken();
                              if (!head1) this.curlyStack.pop();
                              return {
                                  type: 10 /* Template */ ,
                                  value: this.source.slice(start1 + 1, this.index - rawOffset1),
                                  cooked: cooked1,
                                  head: head1,
                                  tail: tail1,
                                  lineNumber: this.lineNumber,
                                  lineStart: this.lineStart,
                                  start: start1,
                                  end: this.index
                              };
                          };
                          // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals
                          Scanner1.prototype.testRegExp = function(pattern1, flags1) {
                              // The BMP character to use as a replacement for astral symbols when
                              // translating an ES6 "u"-flagged pattern to an ES5-compatible
                              // approximation.
                              // Note: replacing with '\uFFFF' enables false positives in unlikely
                              // scenarios. For example, `[\u{1044f}-\u{10440}]` is an invalid
                              // pattern that would not be detected by this substitution.
                              var astralSubstitute1 = "￿";
                              var tmp1 = pattern1;
                              var self1 = this;
                              if (flags1.indexOf("u") >= 0) tmp1 = tmp1.replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function($01, $11, $21) {
                                  var codePoint1 = parseInt($11 || $21, 16);
                                  if (codePoint1 > 0x10FFFF) self1.throwUnexpectedToken(messages_11.Messages.InvalidRegExp);
                                  if (codePoint1 <= 0xFFFF) return String.fromCharCode(codePoint1);
                                  return astralSubstitute1;
                              }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, astralSubstitute1);
                              // First, detect invalid regular expressions.
                              try {
                                  RegExp(tmp1);
                              } catch (e1) {
                                  this.throwUnexpectedToken(messages_11.Messages.InvalidRegExp);
                              }
                              // Return a regular expression object for this pattern-flag pair, or
                              // `null` in case the current environment doesn't support the flags it
                              // uses.
                              try {
                                  return new RegExp(pattern1, flags1);
                              } catch (exception1) {
                                  /* istanbul ignore next */ return null;
                              }
                          };
                          Scanner1.prototype.scanRegExpBody = function() {
                              var ch1 = this.source[this.index];
                              assert_11.assert(ch1 === "/", "Regular expression literal must start with a slash");
                              var str1 = this.source[this.index++];
                              var classMarker1 = false;
                              var terminated1 = false;
                              while(!this.eof()){
                                  ch1 = this.source[this.index++];
                                  str1 += ch1;
                                  if (ch1 === "\\") {
                                      ch1 = this.source[this.index++];
                                      // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals
                                      if (character_11.Character.isLineTerminator(ch1.charCodeAt(0))) this.throwUnexpectedToken(messages_11.Messages.UnterminatedRegExp);
                                      str1 += ch1;
                                  } else if (character_11.Character.isLineTerminator(ch1.charCodeAt(0))) this.throwUnexpectedToken(messages_11.Messages.UnterminatedRegExp);
                                  else if (classMarker1) {
                                      if (ch1 === "]") classMarker1 = false;
                                  } else {
                                      if (ch1 === "/") {
                                          terminated1 = true;
                                          break;
                                      } else if (ch1 === "[") classMarker1 = true;
                                  }
                              }
                              if (!terminated1) this.throwUnexpectedToken(messages_11.Messages.UnterminatedRegExp);
                              // Exclude leading and trailing slash.
                              return str1.substr(1, str1.length - 2);
                          };
                          Scanner1.prototype.scanRegExpFlags = function() {
                              var str1 = "";
                              var flags1 = "";
                              while(!this.eof()){
                                  var ch1 = this.source[this.index];
                                  if (!character_11.Character.isIdentifierPart(ch1.charCodeAt(0))) break;
                                  ++this.index;
                                  if (ch1 === "\\" && !this.eof()) {
                                      ch1 = this.source[this.index];
                                      if (ch1 === "u") {
                                          ++this.index;
                                          var restore1 = this.index;
                                          var char1 = this.scanHexEscape("u");
                                          if (char1 !== null) {
                                              flags1 += char1;
                                              for(str1 += "\\u"; restore1 < this.index; ++restore1)str1 += this.source[restore1];
                                          } else {
                                              this.index = restore1;
                                              flags1 += "u";
                                              str1 += "\\u";
                                          }
                                          this.tolerateUnexpectedToken();
                                      } else {
                                          str1 += "\\";
                                          this.tolerateUnexpectedToken();
                                      }
                                  } else {
                                      flags1 += ch1;
                                      str1 += ch1;
                                  }
                              }
                              return flags1;
                          };
                          Scanner1.prototype.scanRegExp = function() {
                              var start1 = this.index;
                              var pattern1 = this.scanRegExpBody();
                              var flags1 = this.scanRegExpFlags();
                              var value1 = this.testRegExp(pattern1, flags1);
                              return {
                                  type: 9 /* RegularExpression */ ,
                                  value: "",
                                  pattern: pattern1,
                                  flags: flags1,
                                  regex: value1,
                                  lineNumber: this.lineNumber,
                                  lineStart: this.lineStart,
                                  start: start1,
                                  end: this.index
                              };
                          };
                          Scanner1.prototype.lex = function() {
                              if (this.eof()) return {
                                  type: 2 /* EOF */ ,
                                  value: "",
                                  lineNumber: this.lineNumber,
                                  lineStart: this.lineStart,
                                  start: this.index,
                                  end: this.index
                              };
                              var cp1 = this.source.charCodeAt(this.index);
                              if (character_11.Character.isIdentifierStart(cp1)) return this.scanIdentifier();
                              // Very common: ( and ) and ;
                              if (cp1 === 0x28 || cp1 === 0x29 || cp1 === 0x3B) return this.scanPunctuator();
                              // String literal starts with single quote (U+0027) or double quote (U+0022).
                              if (cp1 === 0x27 || cp1 === 0x22) return this.scanStringLiteral();
                              // Dot (.) U+002E can also start a floating-point number, hence the need
                              // to check the next character.
                              if (cp1 === 0x2E) {
                                  if (character_11.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) return this.scanNumericLiteral();
                                  return this.scanPunctuator();
                              }
                              if (character_11.Character.isDecimalDigit(cp1)) return this.scanNumericLiteral();
                              // Template literals start with ` (U+0060) for template head
                              // or } (U+007D) for template middle or template tail.
                              if (cp1 === 0x60 || cp1 === 0x7D && this.curlyStack[this.curlyStack.length - 1] === "${") return this.scanTemplate();
                              // Possible identifier start in a surrogate pair.
                              if (cp1 >= 0xD800 && cp1 < 0xDFFF) {
                                  if (character_11.Character.isIdentifierStart(this.codePointAt(this.index))) return this.scanIdentifier();
                              }
                              return this.scanPunctuator();
                          };
                          return Scanner1;
                      }();
                      exports1.Scanner = Scanner1;
                  /***/ },
                  /* 13 */ /***/ function(module1, exports1) {
                      "use strict";
                      Object.defineProperty(exports1, "__esModule", {
                          value: true
                      });
                      exports1.TokenName = {};
                      exports1.TokenName[1 /* BooleanLiteral */ ] = "Boolean";
                      exports1.TokenName[2 /* EOF */ ] = "<end>";
                      exports1.TokenName[3 /* Identifier */ ] = "Identifier";
                      exports1.TokenName[4 /* Keyword */ ] = "Keyword";
                      exports1.TokenName[5 /* NullLiteral */ ] = "Null";
                      exports1.TokenName[6 /* NumericLiteral */ ] = "Numeric";
                      exports1.TokenName[7 /* Punctuator */ ] = "Punctuator";
                      exports1.TokenName[8 /* StringLiteral */ ] = "String";
                      exports1.TokenName[9 /* RegularExpression */ ] = "RegularExpression";
                      exports1.TokenName[10 /* Template */ ] = "Template";
                  /***/ },
                  /* 14 */ /***/ function(module1, exports1) {
                      "use strict";
                      // Generated by generate-xhtml-entities.js. DO NOT MODIFY!
                      Object.defineProperty(exports1, "__esModule", {
                          value: true
                      });
                      exports1.XHTMLEntities = {
                          quot: '"',
                          amp: "&",
                          apos: "'",
                          gt: ">",
                          nbsp: "\xa0",
                          iexcl: "\xa1",
                          cent: "\xa2",
                          pound: "\xa3",
                          curren: "\xa4",
                          yen: "\xa5",
                          brvbar: "\xa6",
                          sect: "\xa7",
                          uml: "\xa8",
                          copy: "\xa9",
                          ordf: "\xaa",
                          laquo: "\xab",
                          not: "\xac",
                          shy: "\xad",
                          reg: "\xae",
                          macr: "\xaf",
                          deg: "\xb0",
                          plusmn: "\xb1",
                          sup2: "\xb2",
                          sup3: "\xb3",
                          acute: "\xb4",
                          micro: "\xb5",
                          para: "\xb6",
                          middot: "\xb7",
                          cedil: "\xb8",
                          sup1: "\xb9",
                          ordm: "\xba",
                          raquo: "\xbb",
                          frac14: "\xbc",
                          frac12: "\xbd",
                          frac34: "\xbe",
                          iquest: "\xbf",
                          Agrave: "\xc0",
                          Aacute: "\xc1",
                          Acirc: "\xc2",
                          Atilde: "\xc3",
                          Auml: "\xc4",
                          Aring: "\xc5",
                          AElig: "\xc6",
                          Ccedil: "\xc7",
                          Egrave: "\xc8",
                          Eacute: "\xc9",
                          Ecirc: "\xca",
                          Euml: "\xcb",
                          Igrave: "\xcc",
                          Iacute: "\xcd",
                          Icirc: "\xce",
                          Iuml: "\xcf",
                          ETH: "\xd0",
                          Ntilde: "\xd1",
                          Ograve: "\xd2",
                          Oacute: "\xd3",
                          Ocirc: "\xd4",
                          Otilde: "\xd5",
                          Ouml: "\xd6",
                          times: "\xd7",
                          Oslash: "\xd8",
                          Ugrave: "\xd9",
                          Uacute: "\xda",
                          Ucirc: "\xdb",
                          Uuml: "\xdc",
                          Yacute: "\xdd",
                          THORN: "\xde",
                          szlig: "\xdf",
                          agrave: "\xe0",
                          aacute: "\xe1",
                          acirc: "\xe2",
                          atilde: "\xe3",
                          auml: "\xe4",
                          aring: "\xe5",
                          aelig: "\xe6",
                          ccedil: "\xe7",
                          egrave: "\xe8",
                          eacute: "\xe9",
                          ecirc: "\xea",
                          euml: "\xeb",
                          igrave: "\xec",
                          iacute: "\xed",
                          icirc: "\xee",
                          iuml: "\xef",
                          eth: "\xf0",
                          ntilde: "\xf1",
                          ograve: "\xf2",
                          oacute: "\xf3",
                          ocirc: "\xf4",
                          otilde: "\xf5",
                          ouml: "\xf6",
                          divide: "\xf7",
                          oslash: "\xf8",
                          ugrave: "\xf9",
                          uacute: "\xfa",
                          ucirc: "\xfb",
                          uuml: "\xfc",
                          yacute: "\xfd",
                          thorn: "\xfe",
                          yuml: "\xff",
                          OElig: "Œ",
                          oelig: "œ",
                          Scaron: "Š",
                          scaron: "š",
                          Yuml: "Ÿ",
                          fnof: "ƒ",
                          circ: "ˆ",
                          tilde: "˜",
                          Alpha: "Α",
                          Beta: "Β",
                          Gamma: "Γ",
                          Delta: "Δ",
                          Epsilon: "Ε",
                          Zeta: "Ζ",
                          Eta: "Η",
                          Theta: "Θ",
                          Iota: "Ι",
                          Kappa: "Κ",
                          Lambda: "Λ",
                          Mu: "Μ",
                          Nu: "Ν",
                          Xi: "Ξ",
                          Omicron: "Ο",
                          Pi: "Π",
                          Rho: "Ρ",
                          Sigma: "Σ",
                          Tau: "Τ",
                          Upsilon: "Υ",
                          Phi: "Φ",
                          Chi: "Χ",
                          Psi: "Ψ",
                          Omega: "Ω",
                          alpha: "α",
                          beta: "β",
                          gamma: "γ",
                          delta: "δ",
                          epsilon: "ε",
                          zeta: "ζ",
                          eta: "η",
                          theta: "θ",
                          iota: "ι",
                          kappa: "κ",
                          lambda: "λ",
                          mu: "μ",
                          nu: "ν",
                          xi: "ξ",
                          omicron: "ο",
                          pi: "π",
                          rho: "ρ",
                          sigmaf: "ς",
                          sigma: "σ",
                          tau: "τ",
                          upsilon: "υ",
                          phi: "φ",
                          chi: "χ",
                          psi: "ψ",
                          omega: "ω",
                          thetasym: "ϑ",
                          upsih: "ϒ",
                          piv: "ϖ",
                          ensp: " ",
                          emsp: " ",
                          thinsp: " ",
                          zwnj: "‌",
                          zwj: "‍",
                          lrm: "‎",
                          rlm: "‏",
                          ndash: "–",
                          mdash: "—",
                          lsquo: "‘",
                          rsquo: "’",
                          sbquo: "‚",
                          ldquo: "“",
                          rdquo: "”",
                          bdquo: "„",
                          dagger: "†",
                          Dagger: "‡",
                          bull: "•",
                          hellip: "…",
                          permil: "‰",
                          prime: "′",
                          Prime: "″",
                          lsaquo: "‹",
                          rsaquo: "›",
                          oline: "‾",
                          frasl: "⁄",
                          euro: "€",
                          image: "ℑ",
                          weierp: "℘",
                          real: "ℜ",
                          trade: "™",
                          alefsym: "ℵ",
                          larr: "←",
                          uarr: "↑",
                          rarr: "→",
                          darr: "↓",
                          harr: "↔",
                          crarr: "↵",
                          lArr: "⇐",
                          uArr: "⇑",
                          rArr: "⇒",
                          dArr: "⇓",
                          hArr: "⇔",
                          forall: "∀",
                          part: "∂",
                          exist: "∃",
                          empty: "∅",
                          nabla: "∇",
                          isin: "∈",
                          notin: "∉",
                          ni: "∋",
                          prod: "∏",
                          sum: "∑",
                          minus: "−",
                          lowast: "∗",
                          radic: "√",
                          prop: "∝",
                          infin: "∞",
                          ang: "∠",
                          and: "∧",
                          or: "∨",
                          cap: "∩",
                          cup: "∪",
                          int: "∫",
                          there4: "∴",
                          sim: "∼",
                          cong: "≅",
                          asymp: "≈",
                          ne: "≠",
                          equiv: "≡",
                          le: "≤",
                          ge: "≥",
                          sub: "⊂",
                          sup: "⊃",
                          nsub: "⊄",
                          sube: "⊆",
                          supe: "⊇",
                          oplus: "⊕",
                          otimes: "⊗",
                          perp: "⊥",
                          sdot: "⋅",
                          lceil: "⌈",
                          rceil: "⌉",
                          lfloor: "⌊",
                          rfloor: "⌋",
                          loz: "◊",
                          spades: "♠",
                          clubs: "♣",
                          hearts: "♥",
                          diams: "♦",
                          lang: "⟨",
                          rang: "⟩"
                      };
                  /***/ },
                  /* 15 */ /***/ function(module1, exports1, __webpack_require__1) {
                      "use strict";
                      Object.defineProperty(exports1, "__esModule", {
                          value: true
                      });
                      var error_handler_11 = __webpack_require__1(10);
                      var scanner_11 = __webpack_require__1(12);
                      var token_11 = __webpack_require__1(13);
                      var Reader1 = function() {
                          function Reader1() {
                              this.values = [];
                              this.curly = this.paren = -1;
                          }
                          // A function following one of those tokens is an expression.
                          Reader1.prototype.beforeFunctionExpression = function(t4) {
                              return [
                                  "(",
                                  "{",
                                  "[",
                                  "in",
                                  "typeof",
                                  "instanceof",
                                  "new",
                                  "return",
                                  "case",
                                  "delete",
                                  "throw",
                                  "void",
                                  // assignment operators
                                  "=",
                                  "+=",
                                  "-=",
                                  "*=",
                                  "**=",
                                  "/=",
                                  "%=",
                                  "<<=",
                                  ">>=",
                                  ">>>=",
                                  "&=",
                                  "|=",
                                  "^=",
                                  ",",
                                  // binary/unary operators
                                  "+",
                                  "-",
                                  "*",
                                  "**",
                                  "/",
                                  "%",
                                  "++",
                                  "--",
                                  "<<",
                                  ">>",
                                  ">>>",
                                  "&",
                                  "|",
                                  "^",
                                  "!",
                                  "~",
                                  "&&",
                                  "||",
                                  "?",
                                  ":",
                                  "===",
                                  "==",
                                  ">=",
                                  "<=",
                                  "<",
                                  ">",
                                  "!=",
                                  "!=="
                              ].indexOf(t4) >= 0;
                          };
                          // Determine if forward slash (/) is an operator or part of a regular expression
                          // https://github.com/mozilla/sweet.js/wiki/design
                          Reader1.prototype.isRegexStart = function() {
                              var previous1 = this.values[this.values.length - 1];
                              var regex1 = previous1 !== null;
                              switch(previous1){
                                  case "this":
                                  case "]":
                                      regex1 = false;
                                      break;
                                  case ")":
                                      var keyword1 = this.values[this.paren - 1];
                                      regex1 = keyword1 === "if" || keyword1 === "while" || keyword1 === "for" || keyword1 === "with";
                                      break;
                                  case "}":
                                      // Dividing a function by anything makes little sense,
                                      // but we have to check for that.
                                      regex1 = false;
                                      if (this.values[this.curly - 3] === "function") {
                                          // Anonymous function, e.g. function(){} /42
                                          var check1 = this.values[this.curly - 4];
                                          regex1 = check1 ? !this.beforeFunctionExpression(check1) : false;
                                      } else if (this.values[this.curly - 4] === "function") {
                                          // Named function, e.g. function f(){} /42/
                                          var check1 = this.values[this.curly - 5];
                                          regex1 = check1 ? !this.beforeFunctionExpression(check1) : true;
                                      }
                                      break;
                                  default:
                                      break;
                              }
                              return regex1;
                          };
                          Reader1.prototype.push = function(token1) {
                              if (token1.type === 7 /* Punctuator */  || token1.type === 4 /* Keyword */ ) {
                                  if (token1.value === "{") this.curly = this.values.length;
                                  else if (token1.value === "(") this.paren = this.values.length;
                                  this.values.push(token1.value);
                              } else this.values.push(null);
                          };
                          return Reader1;
                      }();
                      var Tokenizer1 = function() {
                          function Tokenizer1(code1, config1) {
                              this.errorHandler = new error_handler_11.ErrorHandler();
                              this.errorHandler.tolerant = config1 ? typeof config1.tolerant === "boolean" && config1.tolerant : false;
                              this.scanner = new scanner_11.Scanner(code1, this.errorHandler);
                              this.scanner.trackComment = config1 ? typeof config1.comment === "boolean" && config1.comment : false;
                              this.trackRange = config1 ? typeof config1.range === "boolean" && config1.range : false;
                              this.trackLoc = config1 ? typeof config1.loc === "boolean" && config1.loc : false;
                              this.buffer = [];
                              this.reader = new Reader1();
                          }
                          Tokenizer1.prototype.errors = function() {
                              return this.errorHandler.errors;
                          };
                          Tokenizer1.prototype.getNextToken = function() {
                              if (this.buffer.length === 0) {
                                  var comments1 = this.scanner.scanComments();
                                  if (this.scanner.trackComment) for(var i3 = 0; i3 < comments1.length; ++i3){
                                      var e1 = comments1[i3];
                                      var value1 = this.scanner.source.slice(e1.slice[0], e1.slice[1]);
                                      var comment1 = {
                                          type: e1.multiLine ? "BlockComment" : "LineComment",
                                          value: value1
                                      };
                                      if (this.trackRange) comment1.range = e1.range;
                                      if (this.trackLoc) comment1.loc = e1.loc;
                                      this.buffer.push(comment1);
                                  }
                                  if (!this.scanner.eof()) {
                                      var loc1 = void 0;
                                      if (this.trackLoc) loc1 = {
                                          start: {
                                              line: this.scanner.lineNumber,
                                              column: this.scanner.index - this.scanner.lineStart
                                          },
                                          end: {}
                                      };
                                      var startRegex1 = this.scanner.source[this.scanner.index] === "/" && this.reader.isRegexStart();
                                      var token1 = startRegex1 ? this.scanner.scanRegExp() : this.scanner.lex();
                                      this.reader.push(token1);
                                      var entry1 = {
                                          type: token_11.TokenName[token1.type],
                                          value: this.scanner.source.slice(token1.start, token1.end)
                                      };
                                      if (this.trackRange) entry1.range = [
                                          token1.start,
                                          token1.end
                                      ];
                                      if (this.trackLoc) {
                                          loc1.end = {
                                              line: this.scanner.lineNumber,
                                              column: this.scanner.index - this.scanner.lineStart
                                          };
                                          entry1.loc = loc1;
                                      }
                                      if (token1.type === 9 /* RegularExpression */ ) {
                                          var pattern1 = token1.pattern;
                                          var flags1 = token1.flags;
                                          entry1.regex = {
                                              pattern: pattern1,
                                              flags: flags1
                                          };
                                      }
                                      this.buffer.push(entry1);
                                  }
                              }
                              return this.buffer.shift();
                          };
                          return Tokenizer1;
                      }();
                      exports1.Tokenizer = Tokenizer1;
                  /***/ }
              ]);
          });
      });
      var esprima$1 = /*@__PURE__*/ getDefaultExportFromCjs(esprima);
      function buildGeoSource(geo1) {
          return "\nfloat surfaceDistance(vec3 p) {\n	vec3 normal = vec3(0.0,1.0,0.0);\n	vec3 mouseIntersect = vec3(0.0,1.0,0.0);\n    float d = 100.0;\n    vec3 op = p;\n".concat(geo1, "\n    return scope_0_d;\n}");
      }
      function buildColorSource(col1, useLighting1) {
          var lgt1 = useLighting1 ? "" : "    return scope_0_material.albedo;";
          return "\nvec3 shade(vec3 p, vec3 normal) {\n    float d = 100.0;\n    vec3 op = p;\n	vec3 lightDirection = vec3(0.0, 1.0, 0.0);\n	vec3 backgroundColor = vec3(1.0, 1.0, 1.0);\n	vec3 mouseIntersect = vec3(0.0,1.0,0.0);\n	#ifdef USE_PBR\n	Material material = Material(vec3(1.0),0.5,0.7,1.0);\n	Material selectedMaterial = Material(vec3(1.0),0.5,0.7,1.0);\n	#else\n	float light = 1.0;\n	float occ = 1.0;\n    vec3 color = vec3(1.0,1.0,1.0);\n	vec3 selectedColor = vec3(1.0,1.0,1.0);\n	#endif\n".concat(col1, "\n").concat(lgt1, "\n	#ifdef USE_PBR\n	return pbrLighting(\n		worldPos.xyz,\n		normal,\n		lightDirection,\n		scope_0_material,\n		backgroundColor\n		);\n	#else\n	return scope_0_material.albedo*simpleLighting(p, normal, lightDirection, );*occ;\n	#endif\n}");
      } // Converts binary math operators to our own version
      function replaceBinaryOp(syntaxTree1) {
          if (_typeof(syntaxTree1) === "object") {
              for(var node1 in syntaxTree1)if (syntaxTree1.hasOwnProperty(node1)) replaceBinaryOp(syntaxTree1[node1]);
          } // handles -variable
          if (syntaxTree1 !== null && syntaxTree1["type"] === "UnaryExpression") {
              if (syntaxTree1["operator"] == "-" && syntaxTree1["argument"] && syntaxTree1["argument"]["type"] == "Identifier") {
                  Object.assign(syntaxTree1, {
                      "type": "CallExpression",
                      "callee": {
                          "type": "Identifier",
                          "name": "mult"
                      },
                      "arguments": [
                          {
                              "type": "UnaryExpression",
                              "operator": "-",
                              "argument": {
                                  "type": "Literal",
                                  "value": 1,
                                  "raw": "1"
                              },
                              "prefix": true
                          },
                          {
                              "type": "Identifier",
                              "name": syntaxTree1["argument"]["name"]
                          }
                      ]
                  });
                  delete syntaxTree1["prefix"];
              }
          }
          if (syntaxTree1 !== null && syntaxTree1["type"] === "BinaryExpression") {
              var op1 = syntaxTree1["operator"];
              if (op1 === "*" || op1 === "/" || op1 === "-" || op1 === "+") {
                  if (op1 === "*") syntaxTree1["callee"] = {
                      type: "Identifier",
                      name: "mult"
                  };
                  else if (op1 === "/") syntaxTree1["callee"] = {
                      type: "Identifier",
                      name: "divide"
                  };
                  else if (op1 === "-") syntaxTree1["callee"] = {
                      type: "Identifier",
                      name: "sub"
                  };
                  else if (op1 === "+") syntaxTree1["callee"] = {
                      type: "Identifier",
                      name: "add"
                  };
                  syntaxTree1["type"] = "CallExpression";
                  syntaxTree1["arguments"] = [
                      syntaxTree1["left"],
                      syntaxTree1["right"]
                  ];
                  syntaxTree1["operator"] = undefined;
              }
          }
      }
      function replaceOperatorOverload(syntaxTree1) {
          try {
              if (syntaxTree1 && _typeof(syntaxTree1) === "object") {
                  for(var node1 in syntaxTree1)if (syntaxTree1.hasOwnProperty(node1)) replaceOperatorOverload(syntaxTree1[node1]);
              }
              if (syntaxTree1 && _typeof(syntaxTree1) === "object" && "type" in syntaxTree1 && syntaxTree1.type === "ExpressionStatement" && "expression" in syntaxTree1 && syntaxTree1.expression.type === "AssignmentExpression") {
                  var op1 = syntaxTree1.expression.operator;
                  if (op1 === "+=" || op1 === "-=" || op1 === "/=" || op1 === "*=" || op1 === "%=") {
                      syntaxTree1.expression.operator = "=";
                      syntaxTree1.expression.right = {
                          type: "BinaryExpression",
                          left: syntaxTree1.expression.left,
                          right: syntaxTree1.expression.right
                      };
                      if (op1 === "+=") syntaxTree1.expression.right.operator = "+";
                      else if (op1 === "-=") syntaxTree1.expression.right.operator = "-";
                      else if (op1 === "/=") syntaxTree1.expression.right.operator = "/";
                      else if (op1 === "*=") syntaxTree1.expression.right.operator = "*";
                      else if (op1 === "%=") syntaxTree1.expression.right.operator = "%";
                  }
              }
          } catch (e1) {
              console.error(e1);
              throw e1;
          }
      }
      function replaceSliderInput(syntaxTree1) {
          try {
              if (syntaxTree1 && _typeof(syntaxTree1) === "object") {
                  for(var node1 in syntaxTree1)if (syntaxTree1.hasOwnProperty(node1)) replaceSliderInput(syntaxTree1[node1]);
              }
              if (syntaxTree1 && _typeof(syntaxTree1) === "object" && "type" in syntaxTree1 && syntaxTree1["type"] === "VariableDeclaration") {
                  var d7 = syntaxTree1["declarations"][0];
                  var name1 = d7.id.name;
                  if (d7 && d7.init && d7.init.callee !== undefined && (d7.init.callee.name === "input" || d7.init.callee.name === "input2D")) d7.init.arguments.unshift({
                      type: "Literal",
                      value: name1,
                      raw: name1
                  });
              }
          } catch (e1) {
              console.error(e1);
              throw e1;
          }
      }
      function uniformsToGLSL(uniforms1) {
          var uniformsHeader1 = "";
          for(var i3 = 0; i3 < uniforms1.length; i3++){
              var uniform1 = uniforms1[i3];
              uniformsHeader1 += "uniform ".concat(uniform1.type, " ").concat(uniform1.name, ";\n");
          }
          return uniformsHeader1;
      }
      function baseUniforms() {
          return [
              {
                  name: "time",
                  type: "float",
                  value: 0.0
              },
              {
                  name: "opacity",
                  type: "float",
                  value: 1.0
              },
              {
                  name: "_scale",
                  type: "float",
                  value: 1.0
              },
              {
                  name: "mouse",
                  type: "vec3",
                  value: [
                      0.5,
                      0.5,
                      0.5
                  ]
              },
              {
                  name: "stepSize",
                  type: "float",
                  value: 0.85
              },
              {
                  name: "resolution",
                  type: "vec2",
                  value: [
                      800,
                      600
                  ]
              }
          ];
      }
      function bindStaticData(staticData1, spCode1) {
          spCode1 = convertFunctionToString(spCode1);
          return "const staticData = JSON.parse(`".concat(JSON.stringify(staticData1), "`)\n") + spCode1;
      }
      function replaceMathOps(codeSrc1) {
          var tree1 = esprima.parse(codeSrc1);
          replaceOperatorOverload(tree1);
          replaceBinaryOp(tree1);
          replaceSliderInput(tree1);
          return escodegen.generate(tree1);
      }
      function sculptToGLSL(userProvidedSrc) {
          var PI = Math.PI;
          var TWO_PI = Math.PI * 2;
          var TAU = TWO_PI;
          var debug = false;
          userProvidedSrc = replaceMathOps(userProvidedSrc);
          if (debug) console.log("tree", tree);
          var generatedJSFuncsSource = "";
          var geoSrc = "";
          var colorSrc = "";
          var userGLSL = "";
          var varCount = 0;
          var primCount = 0;
          var stateCount = 0;
          var useLighting = true;
          var enable2DFlag = false;
          var stateStack = [];
          var uniforms = baseUniforms();
          var stepSizeConstant = 0.85;
          var maxIterations = 300; ////////////////////////////////////////////////////////////
          // Generates JS from headers referenced in the bindings.js
          var dimsMapping = {
              float: 1,
              vec2: 2,
              vec3: 3,
              vec4: 4
          };
          function glslFunc(src2) {
              userGLSL += src2 + "\n";
              var state1 = glslParser.runParse(src2, {});
              if (state1.errors.length) state1.errors.forEach(function(err1) {
                  compileError("glsl error: ".concat(err1));
              });
              var func1 = state1.ast[state1.ast.length - 1];
              var proto1 = func1.proto_type;
              var funcName1 = proto1.identifier;
              var params1 = proto1.parameters;
              var returnType1 = proto1.return_type.specifier.type_name;
              var funcArgCount1 = params1.length;
              var boundFunc1 = function boundFunc1() {
                  if (arguments.length !== funcArgCount1) compileError("Incorrect number of arguments: function ".concat(funcName1, " takes ").concat(funcArgCount1, " and was given ").concat(arguments.length));
                  var expression1 = funcName1 + "(";
                  for(var i3 = 0; i3 < funcArgCount1; i3++){
                      var userParam1 = i3 < 0 || arguments.length <= i3 ? undefined : arguments[i3];
                      var requiredParam1 = params1[i3];
                      var reqDim1 = requiredParam1.type.specifier.type_specifier.size;
                      if (reqDim1 === 1) ensureScalar(funcName1, userParam1);
                      else ensureDims(funcName1, reqDim1, userParam1);
                      expression1 += collapseToString(userParam1);
                      if (i3 < funcArgCount1 - 1) expression1 += ", ";
                  }
                  expression1 += ")";
                  return makeVarWithDims(expression1, proto1.return_type.specifier.type_specifier.size, false);
              };
              return boundFunc1;
          }
          function glslFuncES3(src2) {
              userGLSL += src2 + "\n";
              var parsedSrc1;
              try {
                  parsedSrc1 = dist.parser.parse(src2);
              } catch (e1) {
                  compileError("glsl error in glslFuncES3 when parsing: ".concat(e1));
              }
              var prototype1 = parsedSrc1.program[parsedSrc1.program.length - 1].prototype;
              var funcName1 = prototype1.header.name.identifier;
              var returnType1 = prototype1.header.returnType.specifier.specifier.token;
              var params1 = prototype1.parameters;
              var checkTypes1 = returnType1 === "void" || returnType1 in dimsMapping;
              if (!checkTypes1) compileError("glsl error: glslFuncES3 currently supports binding to ".concat(Object.keys(dimsMapping), " Return type was ").concat(returnType1));
              params1.forEach(function(param1) {
                  var type1 = param1.declaration.specifier.specifier.token;
                  checkTypes1 = checkTypes1 && type1 in dimsMapping;
                  if (debug) console.log("glslFunc", funcName1, type1, checkTypes1);
                  if (!checkTypes1) compileError("glsl error: glslFuncES3 currently supports binding to ".concat(Object.keys(dimsMapping), " param type was ").concat(type1));
              });
              var funcArgCount1 = params1.length;
              var boundFunc1 = function boundFunc1() {
                  if (arguments.length !== funcArgCount1) compileError("Incorrect number of arguments: function ".concat(funcName1, " takes ").concat(funcArgCount1, " and was given ").concat(arguments.length));
                  var expression1 = funcName1 + "(";
                  for(var i3 = 0; i3 < funcArgCount1; i3++){
                      var userParam1 = i3 < 0 || arguments.length <= i3 ? undefined : arguments[i3];
                      var type1 = params1[i3].declaration.specifier.specifier.token;
                      var reqDim1 = dimsMapping[type1];
                      if (reqDim1 === 1) ensureScalar(funcName1, userParam1);
                      else ensureDims(funcName1, reqDim1, userParam1);
                      expression1 += collapseToString(userParam1);
                      if (i3 < funcArgCount1 - 1) expression1 += ", ";
                  }
                  expression1 += ")";
                  return makeVarWithDims(expression1, dimsMapping[returnType1], false);
              };
              return boundFunc1;
          }
          function glslSDF(src2) {
              var sdfFunc1 = glslFunc(src2);
              return function() {
                  for(var _len1 = arguments.length, args1 = new Array(_len1), _key1 = 0; _key1 < _len1; _key1++)args1[_key1] = arguments[_key1];
                  setSDF(sdfFunc1.apply(void 0, [
                      getSpace()
                  ].concat(args1)));
              };
          } ////////////// DESTRUCT SDFs
          var boundSDFs = {};
          for(var _i = 0, _Object$entries = Object.entries(sdfs); _i < _Object$entries.length; _i++){
              var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), key = _Object$entries$_i[0], value = _Object$entries$_i[1];
              boundSDFs[key] = glslSDF(value);
          }
          var boxFrame = boundSDFs.boxFrame, link = boundSDFs.link, cappedTorus = boundSDFs.cappedTorus; //
          function box(arg_01, arg_11, arg_21) {
              if (arg_11 !== undefined) {
                  ensureScalar("box", arg_01);
                  ensureScalar("box", arg_11);
                  ensureScalar("box", arg_21);
                  applyMode("box(".concat(getCurrentState().p, ", ").concat(collapseToString(arg_01), ", ").concat(collapseToString(arg_11), ", ").concat(collapseToString(arg_21), ")"));
              } else if (arg_01.type === "vec3") applyMode("box(".concat(getCurrentState().p, ", ").concat(collapseToString(arg_01), ")"));
              else compileError("'box' accepts either an x, y, z, or a vec3");
          }
          function torus(arg_01, arg_11) {
              overloadVec2GeomFunc("torus", arg_01, arg_11);
          }
          function cylinder(arg_01, arg_11) {
              overloadVec2GeomFunc("cylinder", arg_01, arg_11);
          }
          function overloadVec2GeomFunc(funcName1, arg_01, arg_11) {
              if (arg_11 !== undefined) {
                  ensureScalar(funcName1, arg_01);
                  ensureScalar(funcName1, arg_11);
                  applyMode("".concat(funcName1, "(").concat(getCurrentState().p, ", ").concat(collapseToString(arg_01), ", ").concat(collapseToString(arg_11), ")"));
              } else if (arg_01.type === "vec2") applyMode("".concat(funcName1, "(").concat(getCurrentState().p, ", ").concat(collapseToString(arg_01), ")"));
              else compileError("'".concat(funcName1, "' accepts either an x, y or a vec2"));
          }
          var primitivesJS = "";
          for(var _i2 = 0, _Object$entries2 = Object.entries(geometryFunctions); _i2 < _Object$entries2.length; _i2++){
              var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2), funcName = _Object$entries2$_i[0], body = _Object$entries2$_i[1];
              var argList = body["args"];
              primitivesJS += "function " + funcName + "(";
              for(var argIdx = 0; argIdx < argList.length; argIdx++){
                  if (argIdx !== 0) primitivesJS += ", ";
                  primitivesJS += "arg_" + argIdx;
              }
              primitivesJS += ") {\n";
              var argIdxB = 0;
              var _iterator = _createForOfIteratorHelper(argList), _step;
              try {
                  for(_iterator.s(); !(_step = _iterator.n()).done;){
                      var argDim = _step.value;
                      if (argDim === 1) primitivesJS += '    ensureScalar("' + funcName + '", arg_' + argIdxB + ");\n";
                      argIdxB += 1;
                  }
              } catch (err) {
                  _iterator.e(err);
              } finally{
                  _iterator.f();
              }
              primitivesJS += '    applyMode("' + funcName + '("+getCurrentState().p+", " + ';
              for(var _argIdx = 0; _argIdx < argList.length; _argIdx++){
                  primitivesJS += "collapseToString(arg_" + _argIdx + ") + ";
                  if (_argIdx < argList.length - 1) primitivesJS += '", " + ';
              }
              primitivesJS += '")");\n}\n\n';
          }
          generatedJSFuncsSource += primitivesJS;
          function generateGLSLWrapper(funcJSON1) {
              var wrapperSrc1 = "";
              for(var _i31 = 0, _Object$entries31 = Object.entries(funcJSON1); _i31 < _Object$entries31.length; _i31++){
                  var _Object$entries3$_i1 = _slicedToArray(_Object$entries31[_i31], 2), _funcName1 = _Object$entries3$_i1[0], _body1 = _Object$entries3$_i1[1];
                  var _argList1 = _body1["args"];
                  var returnType1 = _body1["ret"];
                  wrapperSrc1 += "function " + _funcName1 + "(";
                  for(var _argIdx21 = 0; _argIdx21 < _argList1.length; _argIdx21++){
                      if (_argIdx21 !== 0) wrapperSrc1 += ", ";
                      wrapperSrc1 += "arg_" + _argIdx21;
                  }
                  wrapperSrc1 += ") {\n";
                  var _argIdxB1 = 0;
                  var _iterator21 = _createForOfIteratorHelper(_argList1), _step21;
                  try {
                      for(_iterator21.s(); !(_step21 = _iterator21.n()).done;){
                          var arg1 = _step21.value;
                          wrapperSrc1 += "    arg_" + _argIdxB1 + " = tryMakeNum(arg_" + _argIdxB1 + ");\n";
                          _argIdxB1 += 1;
                      } // debug here
                  } catch (err1) {
                      _iterator21.e(err1);
                  } finally{
                      _iterator21.f();
                  }
                  wrapperSrc1 += '    return new makeVarWithDims("' + _funcName1 + '(" + ';
                  for(var _argIdx31 = 0; _argIdx31 < _argList1.length; _argIdx31++){
                      wrapperSrc1 += "arg_" + _argIdx31 + " + ";
                      if (_argIdx31 < _argList1.length - 1) wrapperSrc1 += '", " + ';
                  }
                  wrapperSrc1 += '")", ' + returnType1 + ");\n}\n";
              }
              return wrapperSrc1;
          }
          function mix(arg_01, arg_11, arg_21) {
              ensureSameDims("mix", arg_01, arg_11);
              if (arg_21.dims !== 1 && arg_21.dims !== arg_01.dims) compileError("'mix' third argument must be float or match dim of first args");
              if (typeof arg_11 == "number" || arg_11.type == "float") {
                  arg_01 = tryMakeNum(arg_01);
                  arg_11 = tryMakeNum(arg_11);
              }
              arg_21 = tryMakeNum(arg_21);
              return new makeVarWithDims("mix(".concat(collapseToString(arg_01), ", ").concat(collapseToString(arg_11), ", ").concat(collapseToString(arg_21), ")"), arg_01.dims);
          }
          function pow(arg_01, arg_11) {
              if (typeof arg_11 == "number" || arg_11.type == "float") {
                  arg_01 = tryMakeNum(arg_01);
                  arg_11 = tryMakeNum(arg_11);
              }
              ensureSameDims("pow", arg_01, arg_11);
              return new makeVarWithDims("pow(".concat(collapseToString(arg_01), ", ").concat(collapseToString(arg_11), ")"), arg_01.dims);
          }
          function ensureSameDims(funcName1) {
              for(var _len21 = arguments.length, args1 = new Array(_len21 > 1 ? _len21 - 1 : 0), _key21 = 1; _key21 < _len21; _key21++)args1[_key21 - 1] = arguments[_key21];
              var dims1 = args1.map(function(arg1) {
                  if (arg1.type === undefined) return _typeof(arg1); //compileError("'"+funcName+"' expected a vector");
                  return arg1.dim;
              });
              var initialDim1 = dims1[0];
              for(var i3 = 1; i3 < dims1.length; i3++){
                  var next1 = dims1[i3];
                  if (initialDim1 !== next1) compileError("'".concat(funcName1, "' argument dimensions do not match"));
              }
          }
          var mathFunctionsJS = generateGLSLWrapper(mathFunctions);
          generatedJSFuncsSource += mathFunctionsJS;
          var builtInOtherJS = generateGLSLWrapper(glslBuiltInOther);
          generatedJSFuncsSource += builtInOtherJS;
          var builtInOneToOneJS = "";
          var _iterator3 = _createForOfIteratorHelper(glslBuiltInOneToOne), _step3;
          try {
              for(_iterator3.s(); !(_step3 = _iterator3.n()).done;){
                  var _funcName2 = _step3.value;
                  builtInOneToOneJS += "function ".concat(_funcName2, '(x) {\n    x = tryMakeNum(x);\n	// debug here\n	return new makeVarWithDims("').concat(_funcName2, '(" + x + ")", x.dims);\n}\n');
              }
          } catch (err) {
              _iterator3.e(err);
          } finally{
              _iterator3.f();
          }
          generatedJSFuncsSource += builtInOneToOneJS; ////////////////////////////////////////////////////////////
          //End Auto Generated Code
          // set step size directly
          function setStepSize(val1) {
              if (typeof val1 !== "number") compileError("setStepSize accepts only a constant number. Was given: '" + val1.type + "'");
              stepSizeConstant = val1;
          } // set step size on a scale 0-100
          function setGeometryQuality(val1) {
              if (typeof val1 !== "number") compileError("setGeometryQuality accepts only a constant number between 0 and 100. Was given: '" + val1.type + "'");
              stepSizeConstant = 1 - 0.01 * val1 * 0.995;
          }
          function setMaxIterations(val1) {
              if (typeof val1 !== "number" || val1 < 0) compileError("setMaxIterations accepts only a constant number >= 0. Was given: '" + val1.type + "'");
              maxIterations = Math.round(val1);
          }
          function getCurrentState() {
              return stateStack[stateStack.length - 1];
          }
          function getCurrentMode() {
              return getCurrentState().mode;
          }
          function getCurrentDist() {
              return getCurrentState().id + "d";
          }
          function getCurrentPos() {
              return getCurrentState().id + "p";
          }
          function getMainMaterial() {
              return getCurrentState().id + "material";
          }
          function getCurrentMaterial() {
              return getCurrentState().id + "currentMaterial";
          }
          function appendSources(source1) {
              geoSrc += "    " + source1;
              colorSrc += "    " + source1;
          }
          function appendColorSource(source1) {
              colorSrc += "    " + source1;
          } // General Variable class
          function makeVar(source1, type1, dims1, inline1) {
              this.type = type1;
              this.dims = dims1;
              if (inline1) this.name = source1;
              else {
                  var vname1 = "v_" + varCount;
                  appendSources(this.type + " " + vname1 + " = " + source1 + ";\n");
                  varCount += 1;
                  this.name = vname1;
              }
              this.toString = function() {
                  return this.name;
              };
              return this;
          } // Need to handle cases like - vec3(v.x, 0.1, mult(0.1, time))
          function float(source1, inline1) {
              //if (typeof source !== 'string') {
              source1 = collapseToString(source1); //}
              return new makeVar(source1, "float", 1, inline1);
          }
          function vec2(source1, y3, inline1) {
              if (y3 === undefined) y3 = source1;
              if (typeof source1 !== "string") source1 = "vec2(" + collapseToString(source1) + ", " + collapseToString(y3) + ")";
              var self1 = new makeVar(source1, "vec2", 2, inline1);
              var currX1 = new makeVarWithDims(self1.name + ".x", 1, true);
              var currY1 = new makeVarWithDims(self1.name + ".y", 1, true);
              var objs1 = {
                  x: currX1,
                  y: currY1
              };
              applyVectorAssignmentOverload(self1, objs1);
              return self1;
          }
          function vec3(source1, y3, z3, inline1) {
              if (y3 === undefined) {
                  y3 = source1;
                  z3 = source1;
              }
              if (typeof source1 !== "string") source1 = "vec3(" + collapseToString(source1) + ", " + collapseToString(y3) + ", " + collapseToString(z3) + ")";
              var self1 = new makeVar(source1, "vec3", 3, inline1);
              var currX1 = new makeVarWithDims(self1.name + ".x", 1, true);
              var currY1 = new makeVarWithDims(self1.name + ".y", 1, true);
              var currZ1 = new makeVarWithDims(self1.name + ".z", 1, true);
              var objs1 = {
                  x: currX1,
                  y: currY1,
                  z: currZ1
              };
              applyVectorAssignmentOverload(self1, objs1);
              return self1;
          }
          function vec4(source1, y3, z3, w2, inline1) {
              if (y3 === undefined && z3 === undefined) {
                  y3 = source1;
                  z3 = source1;
                  w2 = source1;
              }
              if (typeof source1 !== "string") source1 = "vec4(" + collapseToString(source1) + ", " + collapseToString(y3) + ", " + collapseToString(z3) + ", " + collapseToString(w2) + ")";
              var self1 = new makeVar(source1, "vec4", 4, inline1);
              var currX1 = new makeVarWithDims(self1.name + ".x", 1, true);
              var currY1 = new makeVarWithDims(self1.name + ".y", 1, true);
              var currZ1 = new makeVarWithDims(self1.name + ".z", 1, true);
              var currW1 = new makeVarWithDims(self1.name + ".w", 1, true);
              var objs1 = {
                  x: currX1,
                  y: currY1,
                  z: currZ1,
                  w: currW1
              };
              applyVectorAssignmentOverload(self1, objs1);
              return self1;
          } // allows the user to re-assign a vector's components
          function applyVectorAssignmentOverload(self1, objs1) {
              Object.entries(objs1).forEach(function(_ref1) {
                  var _ref21 = _slicedToArray(_ref1, 2), key1 = _ref21[0], func1 = _ref21[1];
                  Object.defineProperty(self1, key1, {
                      get: function get1() {
                          return func1;
                      },
                      set: function set1(val1) {
                          return appendSources("".concat(self1.name, ".").concat(key1, " = ").concat(val1, ";\n"));
                      }
                  });
              });
          }
          function makeVarWithDims(source1, dims1, inline1) {
              if (dims1 < 1 || dims1 > 4) compileError("Tried creating variable with dim: " + dims1);
              if (dims1 === 1) return new float(source1, inline1);
              if (dims1 === 2) return new vec2(source1, null, inline1);
              if (dims1 === 3) return new vec3(source1, null, null, inline1);
              if (dims1 === 4) return new vec4(source1, null, null, null, inline1);
          } // Modes enum
          var modes = {
              UNION: 10,
              DIFFERENCE: 11,
              INTERSECT: 12,
              BLEND: 13,
              MIXGEO: 14
          };
          var additiveModes = [
              modes.UNION,
              modes.BLEND,
              modes.MIXGEO
          ];
          var materialModes = {
              NORMAL: 20,
              // F it let's start at 20 why not
              MIXMAT: 21
          };
          var time = new float("time", true);
          var mouse = new vec3("mouse", null, null, true);
          var normal = new vec3("normal", null, null, true);
          function mouseIntersection() {
              appendColorSource("mouseIntersect = mouseIntersection();\n");
              return new vec3("mouseIntersect", null, null, true);
          }
          function getRayDirection() {
              return new vec3("getRayDirection()", null, null, false);
          }
          function compileError(err1) {
              // todo: throw actual error (and color error?)
              console.error(err1, " char: " + geoSrc.length);
              throw err1;
          }
          function ensureScalar(funcName1, val1) {
              var tp1 = _typeof(val1);
              if (typeof val1 !== "number" && val1.type !== "float") compileError("'" + funcName1 + "'" + " accepts only a scalar. Was given: '" + val1.type + "'");
          }
          function ensureDims(funcName1, size1, val1) {
              // for now this only verifies vector dims not scalars/floats!
              if (val1.type === undefined) compileError("'" + funcName1 + "' expected a vector");
              if (size1 !== val1.dims) compileError("'" + funcName1 + "' expected a vector dim: " + size1 + ", was given: " + val1.dims);
          }
          function ensureGroupOp(funcName1, a3, b3) {
              if (typeof a3 !== "string" && typeof b3 !== "string") {
                  if (a3.dims !== 1 && b3.dims !== 1 && a3.dims !== b3.dims) compileError("'" + funcName1 + "'" + " dimension mismatch. Was given: '" + a3.type + "' and '" + b3.type + "'");
              }
          }
          function collapseToString(val1) {
              if (typeof val1 === "string") return val1;
              else if (typeof val1 === "number") return val1.toFixed(8);
              else return val1.toString();
          }
          function mixMat(amount1) {
              getCurrentState().materialMode = materialModes.MIXMAT;
              ensureScalar("mixMat", amount1);
              getCurrentState().matMixAmount = amount1;
          }
          function resetMixColor() {
              getCurrentState().materialMode = materialModes.NORMAL;
          } // Modes (prepend these with GEO or something to indicate they are geometry modes?)
          function union() {
              getCurrentState().mode = modes.UNION;
          }
          function difference() {
              getCurrentState().mode = modes.DIFFERENCE;
          }
          function intersect() {
              getCurrentState().mode = modes.INTERSECT;
          }
          function blend(amount1) {
              getCurrentState().mode = modes.BLEND;
              ensureScalar("blend", amount1);
              getCurrentState().blendAmount = amount1;
          }
          function mixGeo(amount1) {
              getCurrentState().mode = modes.MIXGEO;
              ensureScalar("mixGeo", amount1);
              getCurrentState().mixAmount = amount1;
          }
          function getMode() {
              switch(getCurrentMode()){
                  case modes.UNION:
                      return [
                          "add"
                      ];
                  case modes.DIFFERENCE:
                      return [
                          "subtract"
                      ];
                  case modes.INTERSECT:
                      return [
                          "intersect"
                      ];
                  case modes.BLEND:
                      return [
                          "smoothAdd",
                          getCurrentState().blendAmount
                      ];
                  case modes.MIXGEO:
                      return [
                          "mix",
                          getCurrentState().mixAmount
                      ];
                  default:
                      return [
                          "add"
                      ];
              }
          }
          function applyMode(prim1, finalCol1) {
              var primName1 = "prim_" + primCount;
              primCount += 1;
              appendSources("float " + primName1 + " = " + prim1 + ";\n");
              if (additiveModes.includes(getCurrentMode())) {
                  var selectedCC1 = finalCol1 !== undefined ? finalCol1 : getCurrentMaterial();
                  if (getCurrentState().materialMode === materialModes.NORMAL) appendColorSource("if (" + primName1 + " < " + getCurrentDist() + ") { " + getMainMaterial() + " = " + selectedCC1 + "; }\n");
                  else if (getCurrentState().materialMode === materialModes.MIXMAT) appendColorSource(getMainMaterial() + " = blendMaterial(" + selectedCC1 + ", " + getMainMaterial() + ", " + collapseToString(getCurrentState().matMixAmount) + ");\n");
              }
              var cmode1 = getMode();
              appendSources(getCurrentDist() + " = " + cmode1[0] + "( " + primName1 + ", " + getCurrentDist() + " " + (cmode1.length > 1 ? "," + collapseToString(cmode1[1]) : "") + " );\n");
          }
          function getSpace() {
              return makeVarWithDims(getCurrentState().p.name, 3);
          }
          function pushState() {
              stateStack.push({
                  id: "scope_" + stateCount + "_",
                  mode: modes.UNION,
                  materialMode: materialModes.NORMAL,
                  matMixAmount: 0.0,
                  blendAmount: 0.0,
                  mixAmount: 0.0
              });
              appendSources("float " + getCurrentDist() + " = 100.0;\n");
              var lastP1 = stateStack.length > 1 ? stateStack[stateStack.length - 2].id + "p" : "p";
              var lastMat1 = stateStack.length > 1 ? stateStack[stateStack.length - 2].id + "currentMaterial" : "material";
              appendSources("vec3 " + getCurrentPos() + " = " + lastP1 + ";\n");
              appendColorSource("Material " + getMainMaterial() + " = " + lastMat1 + ";\n");
              appendColorSource("Material " + getCurrentMaterial() + " = " + lastMat1 + ";\n");
              getCurrentState().p = vec3(getCurrentPos(), null, null, true);
              stateCount++;
          }
          function popState() {
              var lastDist1 = getCurrentDist();
              var lastMaty1 = getMainMaterial();
              stateStack.pop();
              applyMode(lastDist1, lastMaty1);
          } // !!! puts initial state on stack, this never comes off !!!
          pushState();
          function shape(func1) {
              var makeShape1 = function makeShape1() {
                  pushState();
                  var output1 = func1.apply(this, arguments);
                  popState();
                  return output1;
              };
              return makeShape1;
          }
          function tryMakeNum(v4) {
              if (typeof v4 === "number") return new float(v4);
              else return v4;
          } /// Math ///
          // Group ops
          function mult(a3, b3) {
              if (typeof a3 === "number" && typeof b3 === "number") return a3 * b3;
              a3 = tryMakeNum(a3);
              b3 = tryMakeNum(b3);
              if (debug) {
                  console.log("multiplying...");
                  console.log("a: ", a3);
                  console.log("b: ", b3);
              }
              ensureGroupOp("mult", a3, b3);
              var dims1 = Math.max(a3.dims, b3.dims);
              return new makeVarWithDims("(" + collapseToString(a3) + "*" + collapseToString(b3) + ")", dims1);
          }
          function add(a3, b3) {
              if (typeof a3 === "number" && typeof b3 === "number") return a3 + b3;
              a3 = tryMakeNum(a3);
              b3 = tryMakeNum(b3);
              if (debug) {
                  console.log("adding...");
                  console.log("a: ", a3);
                  console.log("b: ", b3);
              }
              ensureGroupOp("add", a3, b3);
              var dims1 = Math.max(a3.dims, b3.dims);
              return new makeVarWithDims("(" + collapseToString(a3) + "+" + collapseToString(b3) + ")", dims1);
          }
          function sub(a3, b3) {
              if (typeof a3 === "number" && typeof b3 === "number") return a3 - b3;
              a3 = tryMakeNum(a3);
              b3 = tryMakeNum(b3);
              if (debug) {
                  console.log("subtracting...");
                  console.log("a: ", a3);
                  console.log("b: ", b3);
              }
              ensureGroupOp("sub", a3, b3);
              var dims1 = Math.max(a3.dims, b3.dims);
              return new makeVarWithDims("(" + collapseToString(a3) + "-" + collapseToString(b3) + ")", dims1);
          }
          function divide(a3, b3) {
              if (typeof a3 === "number" && typeof b3 === "number") return a3 / b3;
              a3 = tryMakeNum(a3);
              b3 = tryMakeNum(b3);
              if (debug) {
                  console.log("dividing...");
                  console.log("a: ", a3);
                  console.log("b: ", b3);
              }
              ensureGroupOp("divide", a3, b3);
              var dims1 = Math.max(a3.dims, b3.dims);
              return new makeVarWithDims("(" + collapseToString(a3) + "/" + collapseToString(b3) + ")", dims1);
          }
          function setSDF(dist1) {
              ensureScalar("setSDF", dist1);
              applyMode(collapseToString(dist1));
          }
          function getSDF() {
              return float(getCurrentDist(), true);
          }
          function extractSDF(prim1) {
              return function() {
                  var curD1 = float(getCurrentDist(), false);
                  prim1.apply(void 0, arguments);
                  var extractedSDF1 = float(getCurrentDist(), false);
                  appendSources("".concat(getCurrentDist(), " = ").concat(collapseToString(curD1), ";\n"));
                  return extractedSDF1;
              };
          } // Displacements
          function reset() {
              if (stateStack.length > 1) appendSources(getCurrentPos() + " = " + stateStack[stateStack.length - 2].id + "p;\n");
              else appendSources(getCurrentPos() + " = op;\n");
          }
          function displace(xc1, yc1, zc1) {
              if (yc1 === undefined || zc1 === undefined) appendSources(getCurrentPos() + " -= " + collapseToString(xc1) + ";\n");
              else {
                  ensureScalar("displace", xc1);
                  ensureScalar("displace", yc1);
                  ensureScalar("displace", zc1);
                  appendSources(getCurrentPos() + " -= vec3( " + collapseToString(xc1) + ", " + collapseToString(yc1) + ", " + collapseToString(zc1) + ");\n");
              }
          }
          function setSpace(xc1, yc1, zc1) {
              if (yc1 === undefined || zc1 === undefined) appendSources(getCurrentPos() + " = " + collapseToString(xc1) + ";\n");
              else {
                  ensureScalar("setSpace", xc1);
                  ensureScalar("setSpace", yc1);
                  ensureScalar("setSpace", zc1);
                  appendSources(getCurrentPos() + " = vec3( " + collapseToString(xc1) + ", " + collapseToString(yc1) + ", " + collapseToString(zc1) + ");\n");
              }
          }
          function repeat(spacing1, repetitions1) {
              var spc1 = collapseToString(spacing1);
              var reps1 = collapseToString(repetitions1);
              appendSources(getCurrentPos() + " = " + getCurrentPos() + "-" + spc1 + "*clamp(round(" + getCurrentPos() + "/" + spc1 + "),-" + reps1 + " ," + reps1 + ");\n");
          }
          function rotateX(angle1) {
              ensureScalar("rotateX", angle1);
              appendSources(getCurrentPos() + ".yz = " + getCurrentPos() + ".yz*rot2(" + collapseToString(angle1) + ");\n");
          }
          function rotateY(angle1) {
              ensureScalar("rotateY", angle1);
              appendSources(getCurrentPos() + ".xz = " + getCurrentPos() + ".xz*rot2(" + collapseToString(angle1) + ");\n");
          }
          function rotateZ(angle1) {
              ensureScalar("rotateZ", angle1);
              appendSources(getCurrentPos() + ".xy = " + getCurrentPos() + ".xy*rot2(" + collapseToString(angle1) + ");\n");
          }
          function mirrorX() {
              appendSources(getCurrentPos() + ".x = abs(" + getCurrentPos() + ".x);\n");
          }
          function mirrorY() {
              appendSources(getCurrentPos() + ".y = abs(" + getCurrentPos() + ".y);\n");
          }
          function mirrorZ() {
              appendSources(getCurrentPos() + ".z = abs(" + getCurrentPos() + ".z);\n");
          }
          function mirrorXYZ() {
              appendSources(getCurrentPos() + " = abs(" + getCurrentPos() + ");\n");
          }
          function flipX() {
              appendSources(getCurrentPos() + ".x = -" + getCurrentPos() + ".x;\n");
          }
          function flipY() {
              appendSources(getCurrentPos() + ".y = -" + getCurrentPos() + ".y;\n");
          }
          function flipZ() {
              appendSources(getCurrentPos() + ".z = -" + getCurrentPos() + ".z;\n");
          }
          function expand(amount1) {
              ensureScalar("expand", amount1);
              appendSources(getCurrentDist() + " -= " + collapseToString(amount1) + ";\n");
          }
          function shell(depth1) {
              ensureScalar("shell", depth1);
              appendSources(getCurrentDist() + " = shell( " + getCurrentDist() + "," + collapseToString(depth1) + ");\n");
          } // Color/Lighting
          function color(col1, green1, blue1) {
              if (green1 !== undefined) {
                  ensureScalar("color", col1);
                  ensureScalar("color", green1);
                  ensureScalar("color", blue1);
                  appendColorSource(getCurrentMaterial() + ".albedo = vec3(" + collapseToString(col1) + ", " + collapseToString(green1) + ", " + collapseToString(blue1) + ");\n");
              } else {
                  if (col1.type !== "vec3") compileError("albedo must be vec3");
                  appendColorSource(getCurrentMaterial() + ".albedo = " + collapseToString(col1) + ";\n");
              }
          }
          function metal(val1) {
              ensureScalar("metal", val1);
              appendColorSource(getCurrentMaterial() + ".metallic = " + collapseToString(val1) + ";\n");
          }
          function shine(val1) {
              ensureScalar("shine", val1);
              appendColorSource(getCurrentMaterial() + ".roughness = 1.0-" + collapseToString(val1) + ";\n");
          }
          function fresnel(val1) {
              ensureScalar("fresnel", val1);
              return pow(1 + dot(getRayDirection(), normal), val1);
          }
          function lightDirection(x4, y3, z3) {
              if (y3 === undefined || z3 === undefined) appendColorSource("lightDirection = " + collapseToString(x4) + ";\n");
              else {
                  ensureScalar("lightDirection", x4);
                  ensureScalar("lightDirection", y3);
                  ensureScalar("lightDirection", z3);
                  appendColorSource("lightDirection = vec3( " + collapseToString(x4) + ", " + collapseToString(y3) + ", " + collapseToString(z3) + ");\n");
              }
          }
          function backgroundColor(x4, y3, z3) {
              if (y3 === undefined || z3 === undefined) appendColorSource("backgroundColor = " + collapseToString(x4) + ";\n");
              else {
                  ensureScalar("backgroundColor", x4);
                  ensureScalar("backgroundColor", y3);
                  ensureScalar("backgroundColor", z3);
                  appendColorSource("backgroundColor = vec3( " + collapseToString(x4) + ", " + collapseToString(y3) + ", " + collapseToString(z3) + ");\n");
              }
          } // should this also be 'op'?
          function noLighting() {
              useLighting = false;
          } // replaced with a noop for now to prevent errors
          function basicLighting() {}
          function occlusion(amount1) {
              var amt1 = "1.0";
              if (amount1 !== undefined) {
                  ensureScalar("occlusion", amount1);
                  amt1 = collapseToString(amount1);
              }
              appendColorSource(getCurrentMaterial() + ".ao = mix(1.0, occlusion(op,normal), " + amt1 + ");\n");
          }
          function test() {
              appendSources("//this is a test\n");
          }
          function input(name1) {
              var value1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.0;
              var min1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.0;
              var max1 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1.0;
              if (typeof value1 !== "number" || typeof min1 !== "number" || typeof max1 !== "number") compileError("input value, min, and max must be constant numbers");
              uniforms.push({
                  name: name1,
                  type: "float",
                  value: value1,
                  min: min1,
                  max: max1
              });
              return new float(name1, true);
          }
          function input2D(name1) {
              var value1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                  x: 0.0,
                  y: 0.0
              };
              var min1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
                  x: 0.0,
                  y: 0.0
              };
              var max1 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
                  x: 1.0,
                  y: 1.0
              };
              if (typeof value1 === "number" && typeof min1 === "number" && _typeof(max1) === "object") {
                  // syntax input2D(.2, 1.2);
                  var x4 = value1;
                  var y3 = min1;
                  uniforms.push({
                      name: name1,
                      type: "vec2",
                      value: {
                          x: x4,
                          y: y3
                      },
                      min: {
                          x: 0,
                          y: 0
                      },
                      max: {
                          x: 1,
                          y: 1
                      }
                  });
                  return new vec2(name1, true);
              }
              if (_typeof(value1) !== "object" || _typeof(min1) !== "object" || _typeof(max1) !== "object") compileError("input2D: value, min, and max must be a vec2");
              var xyExist1 = [
                  value1,
                  min1,
                  max1
              ].reduce(function(acc1, curr1) {
                  return acc1 && "x" in curr1 && "y" in curr1;
              });
              if (!xyExist1) compileError("input2D: value, min, and max must be a vec2");
              uniforms.push({
                  name: name1,
                  type: "vec2",
                  value: value1,
                  min: min1,
                  max: max1
              });
              return new vec2(name1, true);
          }
          function getPixelCoord() {
              return makeVarWithDims("gl_FragCoord.xy", 2, true);
          }
          function getResolution() {
              return makeVarWithDims("resolution", 2, true);
          }
          function get2DCoords() {
              return makeVarWithDims("vec2((gl_FragCoord.x/resolution.x-0.5)*(resolution.x/resolution.y),gl_FragCoord.y/resolution.y-0.5)", 2, false);
          }
          function enable2D() {
              setMaxIterations(0);
              noLighting();
              enable2DFlag = true;
              return get2DCoords();
          }
          /*
      function input2(name, x, y) {
      console.log('input2',name, x, y);
      let uniform = {name, type: 'vec2'};
      let out = x;
      if(y === undefined) {
          uniform.value = x;
      } else {
          out = new vec2(x, y, true);
          uniform.value = out;
      }
      uniforms.push(uniform);
      return out;
      }
      */ var error = undefined;
          function revolve2D(sdf1) {
              return function(r1) {
                  ensureScalar("revolve2D", r1);
                  var s10 = getSpace();
                  var q3 = vec2(length(vec3(s10.x, s10.z, 0)) - r1, s10.y);
                  for(var _len31 = arguments.length, args1 = new Array(_len31 > 1 ? _len31 - 1 : 0), _key31 = 1; _key31 < _len31; _key31++)args1[_key31 - 1] = arguments[_key31];
                  setSDF(sdf1.apply(void 0, [
                      q3
                  ].concat(args1)));
              };
          } //https://iquilezles.org/www/articles/distfunctions/distfunctions.htm
          function extrude2D(sdf1) {
              return function(h1) {
                  ensureScalar("extrude2D", h1);
                  var s10 = getSpace();
                  for(var _len41 = arguments.length, args1 = new Array(_len41 > 1 ? _len41 - 1 : 0), _key41 = 1; _key41 < _len41; _key41++)args1[_key41 - 1] = arguments[_key41];
                  var d7 = sdf1.apply(void 0, [
                      vec2(s10.x, s10.y)
                  ].concat(args1));
                  var w2 = vec2(d7, abs(s10.z) - h1);
                  var t4 = vec3(max(w2.x, 0.0), max(w2.y, 0.0), 0);
                  setSDF(min(max(w2.x, w2.y), 0.0) + length(t4));
              };
          }
          function getSpherical() {
              return toSpherical(getSpace());
          }
          function mirrorN(iterations1, scale1) {
              ensureScalar("mirrorN", scale1);
              for(var i3 = iterations1 - 1; i3 >= 0; i3--){
                  mirrorXYZ();
                  displace(scale1 * pow(2, i3));
              }
          }
          function grid() {
              var num1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;
              var scale1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.2;
              var roundness1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.05;
              // ensureScalar('num', num);
              ensureScalar("num", scale1);
              ensureScalar("num", roundness1); // num = collapseToString(num);
              // scale = collapseToString(scale);
              // roundness = collapseToString(roundness);
              shape(function() {
                  mirrorN(num1, scale1);
                  boxFrame(vec3(scale1), 0);
                  expand(roundness1 * scale1);
              })();
          }
          function repeatLinear(scale1, spacing1, counts1) {
              ensureDims("repeatLinear", 3, scale1);
              ensureDims("repeatLinear", 3, spacing1);
              ensureDims("repeatLinear", 3, counts1);
              spacing1 *= 2 * scale1;
              counts1 -= 1;
              var s10 = getSpace();
              var rounded1 = floor(s10 / spacing1 + 0.5);
              var clamped1 = vec3(clamp(rounded1.x, -1 * counts1.x, counts1.x), clamp(rounded1.y, -1 * counts1.y, counts1.y), clamp(rounded1.z, -1 * counts1.z, counts1.z));
              displace(spacing1 * clamped1); // return instance x, y, z index
              // and instances local coordinates
              var coordScaled1 = s10 / spacing1;
              var index3 = floor(coordScaled1 + 0.5);
              return {
                  index: index3,
                  local: coordScaled1 - index3
              };
          } // based on https://mercury.sexy/hg_sdf/
          function repeatRadial(repeats1) {
              ensureScalar("repeatRadial", repeats1);
              var s10 = getSpace();
              var p6 = vec3(s10.x, 0, s10.z);
              var angle1 = 2 * PI / repeats1;
              var a3 = atan(p6.z, p6.x) + angle1 / 2;
              var r1 = length(p6);
              var c4 = floor(a3 / angle1);
              var ma1 = mod(a3, angle1) - angle1 / 2;
              var px1 = cos(ma1) * r1;
              var pz1 = sin(ma1) * r1;
              setSpace(vec3(px1, s10.y, pz1));
              var absC1 = abs(c4); // account for odd number of repeats
              var diff1 = step(absC1, repeats1 / 2);
              c4 = diff1 * absC1 + (1 - diff1) * c4; // return radial index
              return c4;
          }
          function scaleShape(primitive1, factor1) {
              return function() {
                  setSpace(getSpace() / factor1);
                  primitive1.apply(void 0, arguments);
                  setSDF(getSDF() * factor1);
              };
          } // Define any code that needs to reference auto generated from bindings.js code here
          var postGeneratedFunctions = replaceMathOps([
              getSpherical,
              fresnel,
              revolve2D,
              extrude2D,
              mirrorN,
              grid,
              repeatLinear,
              repeatRadial,
              scaleShape
          ].map(function(el1) {
              return el1.toString();
          }).join("\n"));
          eval(generatedJSFuncsSource + postGeneratedFunctions + userProvidedSrc);
          if (enable2DFlag) setSDF(0);
          var geoFinal = userGLSL + "\n" + buildGeoSource(geoSrc);
          var colorFinal = buildColorSource(colorSrc, useLighting);
          return {
              uniforms: uniforms,
              stepSizeConstant: stepSizeConstant,
              maxIterations: maxIterations,
              userGLSL: userGLSL,
              geoGLSL: geoFinal,
              colorGLSL: colorFinal,
              error: error
          };
      }
      var defaultFragSourceGLSL = "float surfaceDistance(vec3 p) {\n    float d = sphere(p, 0.3);\n	return d;\n}\n\nvec3 shade(vec3 p, vec3 normal) {\n    vec3 lightDirection = vec3(0.0, 1.0, 0.0);\n    float light = simpleLighting(p, normal, lightDirection);\n    vec3 color = vec3(1.0, 1.0, 1.0);\n	return color*light;\n}\n";
      var threeJSVertexSource = "\nvarying vec4 worldPos;\n//varying vec2 vUv;\nvarying vec3 sculptureCenter;\nvoid main()\n{\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n    worldPos = modelMatrix*vec4(position,1.0);\n    sculptureCenter = (modelMatrix * vec4(0., 0., 0., 1.)).xyz;\n    //vUv = uv;\n    gl_Position = projectionMatrix * mvPosition;\n}\n";
      var minimalVertexSource = "#version 300 es\nin vec3 coordinates;\nout vec3 sculptureCenter;\nvoid main(void) {\n     sculptureCenter = vec3(0.0);\n     gl_Position = vec4(coordinates, 1.0);\n}";
      var threeHeader = "\nuniform mat4 projectionMatrix;\nuniform sampler2D msdf;\n\n//varying vec2 vUv;\nvarying vec4 worldPos;\nvarying vec3 sculptureCenter;\n";
      var minimalHeader = "#version 300 es\nprecision highp float;\nuniform mat4 projectionMatrix;\nin vec3 sculptureCenter;\nout vec4 pc_fragColor;\n#define cameraPosition vec3(0.0,0.0,-2.0)\n#define vUv vec2(0.0)\n#define worldPos vec4(vec2((gl_FragCoord.x/resolution.x-0.5)*(resolution.x/resolution.y),gl_FragCoord.y/resolution.y-0.5)*1.75,0.0,0.0)\n";
      var usePBRHeader = "#define USE_PBR\n";
      var useHemisphereLight = "#define HEMISPHERE_LIGHT\n";
      var sculptureStarterCode = "\nfloat surfaceDistance(vec3 p);\n\nconst float PI = 3.14159265;\nconst float TAU = PI*2.0;\nconst float TWO_PI = TAU;\n\nconst float max_dist = 100.0;\nconst float intersection_threshold = 0.00001;\n\nstruct Material {\n    vec3 albedo;\n    float metallic;\n    float roughness;\n    float ao;\n};\n\nMaterial blendMaterial(Material a, Material b, float amount) {\n    return Material(\n        mix(a.albedo, b.albedo, amount), \n        mix(a.metallic, b.metallic, amount), \n        mix(a.roughness, b.roughness, amount), \n        mix(a.ao, b.ao, amount)\n    );\n}\n\n// Trig functions normalized to the range 0.0-1.0\nfloat nsin(float x) {\n    return sin(x)*0.5+0.5;\n}\n\nfloat ncos(float x) {\n    return cos(x)*0.5+0.5;\n}\n\nfloat softSquare(float x, int pw) {\n    return 1.0/(pow(tan(x),float(pw+1)*2.0)+1.0);\n}\n\n// Simple oscillators \n\nfloat osc(float freq, float amp, float base, float phase) {\n    return base+amp*sin(TWO_PI*(freq*time+phase));\n}\n\nfloat osc(float freq, float amp, float base) {\n    return osc(freq, amp, base, 0.0);\n}\n\nfloat osc(float freq, float amp) {\n    return osc(freq, amp, 1.0);\n}\n\nfloat osc(float freq) {\n    return osc(freq, 0.5);\n}\n\nfloat osc() {\n    return osc(1.0);\n}\n\n// Color Conversion\n// https://www.shadertoy.com/view/lsS3Wc\nvec3 hsv2rgb( vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec3 rgb2hsv( vec3 c)\n{\n    const float eps = 0.0000001;\n    vec4 k = vec4(0.0, -1.0/3.0, 2.0/3.0, -1.0);\n    vec4 p = mix(vec4(c.zy, k.wz), vec4(c.yz, k.xy), (c.z<c.y) ? 1.0 : 0.0);\n    vec4 q = mix(vec4(p.xyw, c.x), vec4(c.x, p.yzx), (p.x<c.x) ? 1.0 : 0.0);\n    float d = q.x - min(q.w, q.y);\n    return vec3(abs(q.z + (q.w - q.y) / (6.0*d+eps)), d / (q.x+eps), q.x);\n}\n\n\n// Primitives\n\nfloat line(vec3 p, vec3 a, vec3 b) {\n	vec3 pa = p-a;\n  	vec3 ba = b-a;\n	float t = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n  	return length(pa - ba*t);\n}\n\n//line with radius\nfloat line( vec3 p, vec3 a, vec3 b, float radius ){\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - radius;\n}\n\nfloat sphere( vec3 p, float size ){\n  return length(p)-size;\n}\n\nfloat uBox( vec3 p, vec3 b ){\n  return length(max(abs(p)-b,0.0));\n}\n\nfloat uRoundBox( vec3 p, vec3 b, float r ){\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat box( vec3 p, vec3 box ){\n  vec3 d = abs(p) - box;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat box( vec3 p, float bx, float by, float bz) {\n    vec3 box = vec3(bx,by,bz);\n    vec3 d = abs(p) - box;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat roundedBox( vec3 p, vec3 box , float r){\n  return length(max(abs(p)-box,0.0))-r;\n}\n\nfloat torus( vec3 p, vec2 t ){\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat torus( vec3 p, float tx, float ty ){\n    vec2 q = vec2(length(p.xz)-tx,p.y);\n    return length(q)-ty;\n}\n\nfloat infCylinder( vec3 p, vec3 c )\n{\n  return length(p.xz-c.xy)-c.z;\n}\n\nfloat cylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat cylinder( vec3 p, float hx, float hy)\n{\n    return cylinder(p, vec2(hx,hy));\n}\n\nfloat cone( vec3 p, vec2 c )\n{\n    // c must be normalized\n    float q = length(p.xy);\n    return dot(c,vec2(q,p.z));\n}\n\nfloat plane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\nfloat plane( vec3 p, float nx, float ny, float nz, float nw)\n{\n  // n must be normalized\n  return dot(p,normalize(vec3(nx,ny,nz))) + nw;\n}\n\nfloat hexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n}\n\nfloat triPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\nfloat capsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat triangularPrism( vec3 p, vec2 h ) {\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\nfloat cappedCone( vec3 p, vec3 c )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    vec2 v = vec2( c.z*c.y/c.x, -c.z );\n    vec2 w = v - q;\n    vec2 vv = vec2( dot(v,v), v.x*v.x );\n    vec2 qv = vec2( dot(v,w), v.x*w.x );\n    vec2 d = max(qv,0.0)*qv/vv;\n    return sqrt( dot(w,w) - max(d.x,d.y) ) * sign(max(q.y*v.x-q.x*v.y,w.y));\n}\n\nfloat roundCone(vec3 p, vec3 a, vec3 b, float r1, float r2)\n{\n    // sampling independent computations (only depend on shape)\n    vec3  ba = b - a;\n    float l2 = dot(ba,ba);\n    float rr = r1 - r2;\n    float a2 = l2 - rr*rr;\n    float il2 = 1.0/l2;\n    \n    // sampling dependant computations\n    vec3 pa = p - a;\n    float y = dot(pa,ba);\n    float z = y - l2;\n    vec3 rv = pa*l2 - ba*y;\n    float x2 = dot(rv,rv);\n    float y2 = y*y*l2;\n    float z2 = z*z*l2;\n\n    // single square root!\n    float k = sign(rr)*rr*rr*x2;\n    if( sign(z)*a2*z2 > k ) return  sqrt(x2 + z2)        *il2 - r2;\n    if( sign(y)*a2*y2 < k ) return  sqrt(x2 + y2)        *il2 - r1;\n                            return (sqrt(x2*a2*il2)+y*rr)*il2 - r1;\n}\n\nfloat ellipsoid( vec3 p, vec3 r )\n{\n    return (length( p/r ) - 1.0) * min(min(r.x,r.y),r.z);\n}\n\nvec3 toSpherical(vec3 p) {\n    float phi = atan(p.x,p.z);\n    float r = length(p);\n    float theta = acos(-p.y/r);\n    return vec3(r,theta,phi);\n}\n\nvec3 fromSpherical(vec3 p) {\n    return vec3(p.x*sin(p.y)*cos(p.z), p.x*sin(p.y)*sin(p.z), p.x*cos(p.y));\n}\n\nfloat dot2( vec3 v ) { return dot(v,v); }\n\nfloat uTriangle( vec3 p, vec3 a, vec3 b, vec3 c )\n{\n    vec3 ba = b - a; vec3 pa = p - a;\n    vec3 cb = c - b; vec3 pb = p - b;\n    vec3 ac = a - c; vec3 pc = p - c;\n    vec3 nor = cross( ba, ac );\n    return sqrt(\n    (sign(dot(cross(ba,nor),pa)) +\n     sign(dot(cross(cb,nor),pb)) +\n     sign(dot(cross(ac,nor),pc))<2.0)\n     ?\n     min( min(\n     dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),\n     dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),\n     dot2(ac*clamp(dot(ac,pc)/dot2(ac),0.0,1.0)-pc) )\n     :\n     dot(nor,pa)*dot(nor,pa)/dot2(nor) );\n}\n\nfloat add( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n\nfloat add(float d1, float d2, float d3) {\n   return min(d1, min(d2,d3));\n}\n\nfloat add(float d1, float d2, float d3, float d4) {\n    return min(min(d1,d2),min(d3,d4));\n}\n\nfloat add(float d1, float d2, float d3, float d4, float d5) {\n    return min(min(min(d1,d2), min(d3,d4)),d5);\n}\n\nfloat add(float d1, float d2, float d3, float d4, float d5, float d6) {\n    return min(min(min(d1,d2),min(d3,d4)),min(d5,d6));\n}\n\nfloat add(float d1, float d2, float d3, float d4, float d5, float d6, float d7) {\n    return min(min(min(d1,d2),min(d3,d4)),min(min(d5,d6),d7));\n}\n\nfloat subtract( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\nfloat intersect( float d1, float d2 )\n{\n    return max(d1,d2);\n}\n\nfloat shell(float d, float thickness) {\n    return abs(d)-thickness;\n}\n\nvec3 repeat3D(vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\nfloat repeat1D(float p, float size)\n{\n	float halfSize = size * 0.5;\n	float c = floor((p + halfSize) / size);\n  	p = mod(p + halfSize, size)-halfSize;\n  	return c;\n}\n\nmat2 rot2(float a)\n{\n    float c = cos(a); float s = sin(a);\n	return mat2(c, s, -s, c);\n}\n\n// from https://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/\nvec3 rotateVec(vec3 inputVec, vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s, \n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c ) * inputVec;\n}\n\n// polynomial smooth min (k = 0.1) (from IQ)\nfloat smoothAdd( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat smoothSubtract(float a,float b, float k)\n{\n    return -smoothAdd(-a,-b,k);\n}\n\nvec2 _hash( vec2 p ) // replace this by something better\n{\n	p = vec2( dot(p,vec2(127.1,311.7)),\n			  dot(p,vec2(269.5,183.3)) );\n	return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n	vec2 i = floor( p + (p.x+p.y)*K1 );\n	\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = step(a.yx,a.xy);    \n    vec2 b = a - o + K2;\n	vec2 c = a - 1.0 + 2.0*K2;\n    vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n	vec3 n = h*h*h*h*vec3( dot(a,_hash(i+0.0)), dot(b,_hash(i+o)), dot(c,_hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\n// from https://www.shadertoy.com/view/4djSRW\nfloat _hash13(vec3 p3)\n{\n    p3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 _hash33(vec3 p3)\n{\n    p3 = fract(p3 * vec3(.1031,.11369,.13787));\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\n// simplex noise from https://www.shadertoy.com/view/4sc3z2\nfloat noise(vec3 p)\n{\n    const float K1 = 0.333333333;\n    const float K2 = 0.166666667;\n    \n    vec3 i = floor(p + (p.x + p.y + p.z) * K1);\n    vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);\n    \n    // thx nikita: https://www.shadertoy.com/view/XsX3zB\n    vec3 e = step(vec3(0.0), d0 - d0.yzx);\n	vec3 i1 = e * (1.0 - e.zxy);\n	vec3 i2 = 1.0 - e.zxy * (1.0 - e);\n    \n    vec3 d1 = d0 - (i1 - 1.0 * K2);\n    vec3 d2 = d0 - (i2 - 2.0 * K2);\n    vec3 d3 = d0 - (1.0 - 3.0 * K2);\n    \n    vec4 h = max(0.6 - vec4(dot(d0, d0), dot(d1, d1), dot(d2, d2), dot(d3, d3)), 0.0);\n    vec4 n = h * h * h * h * vec4(dot(d0, _hash33(i)), dot(d1, _hash33(i + i1)), dot(d2, _hash33(i + i2)), dot(d3, _hash33(i + 1.0)));\n    \n    return dot(vec4(31.316), n);\n}\n\nfloat fractalNoise(vec3 p, float falloff, int iterations) {\n    float v = 0.0;\n    float amp = 1.0;\n    float invFalloff = 1.0/falloff;\n    for (int i=0; i<10; i++) {\n        v += noise(p)*amp;\n	if (i>=iterations) break;\n        amp *= invFalloff;\n        p *= falloff;\n    }\n    return v;\n} \n\nfloat fractalNoise(vec3 p) {\n    return fractalNoise(p, 2.0, 5);\n}\n\n// Adapted from IQ's usage at https://www.shadertoy.com/view/lllXz4\n// Spherical Fibonnacci points, Benjamin Keinert, Matthias Innmann,\n// Michael Sanger and Marc Stamminger\n\nconst float PHI = 1.61803398875;\n\nvec4 sphericalDistribution( vec3 p, float n )\n{\n    p = normalize(p);\n    float m = 1.0 - 1.0/n;\n\n    float phi = min(atan(p.y, p.x), PI), cosTheta = p.z;\n\n    float k = max(2.0, floor( log(n * PI * sqrt(5.0) * (1.0 - cosTheta*cosTheta))/ log(PHI+1.0)));\n    float Fk = pow(PHI, k)/sqrt(5.0);\n    vec2 F = vec2( round(Fk), round(Fk * PHI) ); // k, k+1\n\n    vec2 ka = 2.0*F/n;\n    vec2 kb = 2.0*PI*( fract((F+1.0)*PHI) - (PHI-1.0) );\n\n    mat2 iB = mat2( ka.y, -ka.x,\n    kb.y, -kb.x ) / (ka.y*kb.x - ka.x*kb.y);\n\n    vec2 c = floor( iB * vec2(phi, cosTheta - m));\n    float d = 8.0;\n    float j = 0.0;\n    vec3 bestQ = vec3(0.0,0.0,8.0);\n    for( int s=0; s<4; s++ )\n    {\n        vec2 uv = vec2( float(s-2*(s/2)), float(s/2) );\n\n        float i = dot(F, uv + c); // all quantities are ingeters (can take a round() for extra safety)\n\n        float phi = 2.0*PI*fract(i*PHI);\n        float cosTheta = m - 2.0*i/n;\n        float sinTheta = sqrt(1.0 - cosTheta*cosTheta);\n\n        vec3 q = vec3( cos(phi)*sinTheta, sin(phi)*sinTheta, cosTheta );\n        float squaredDistance = dot(q-p, q-p);\n        if (squaredDistance < d)\n        {\n            d = squaredDistance;\n            j = i;\n            bestQ = q;\n        }\n    }\n    return vec4(bestQ,sqrt(d));\n}\n\n// Compute intersection of ray and SDF. You probably won't need to modify this.\nfloat intersect(vec3 ro, vec3 rd, float stepFraction) {\n    float t = 0.0;\n	for(int i = 0; i < MAX_ITERATIONS; ++i) {\n		float h = surfaceDistance((ro+rd*t));\n		if(h < intersection_threshold || t > max_dist) break;\n		t += h*STEP_SIZE_CONSTANT;\n    }\n	return t;\n}\n\nvec3 getRayDirection() {\n	return normalize(worldPos.xyz-cameraPosition);\n}\n\nvec3 mouseIntersection() {\n    vec3 rayDirection = getRayDirection();\n    return mouse+rayDirection*intersect(mouse, rayDirection, 0.8);\n}\n\n// Calculate the normal of a SDF\nvec3 calcNormal( vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.0005;\n    return normalize( e.xyy*surfaceDistance( pos + e.xyy ) + \n		      e.yyx*surfaceDistance( pos + e.yyx ) + \n		      e.yxy*surfaceDistance( pos + e.yxy ) + \n		      e.xxx*surfaceDistance( pos + e.xxx ) );\n}\n\n// from https://learnopengl.com/PBR/Lighting\nvec3 fresnelSchlick(float cosTheta, vec3 F0)\n{\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\n}  \n\nfloat DistributionGGX(vec3 N, vec3 H, float roughness)\n{\n    float a      = roughness*roughness;\n    float a2     = a*a;\n    float NdotH  = max(dot(N, H), 0.0);\n    float NdotH2 = NdotH*NdotH;\n	\n    float num   = a2;\n    float denom = (NdotH2 * (a2 - 1.0) + 1.0);\n    denom = PI * denom * denom;\n	\n    return num / denom;\n}\n\nfloat GeometrySchlickGGX(float NdotV, float roughness)\n{\n    float r = (roughness + 1.0);\n    float k = (r*r) / 8.0;\n\n    float num   = NdotV;\n    float denom = NdotV * (1.0 - k) + k;\n	\n    return num / denom;\n}\n\nfloat GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)\n{\n    float NdotV = max(dot(N, V), 0.0);\n    float NdotL = max(dot(N, L), 0.0);\n    float ggx2  = GeometrySchlickGGX(NdotV, roughness);\n    float ggx1  = GeometrySchlickGGX(NdotL, roughness);\n	\n    return ggx1 * ggx2;\n}\n\n// adapted from https://learnopengl.com/PBR/Lighting\nvec3 pbrLighting(vec3 WordPos, vec3 N, vec3 lightdir, Material mat, vec3 backgroundColor) {\n\n    vec3 V = -getRayDirection();\n    vec3 F0 = vec3(0.04); \n    F0 = mix(F0, mat.albedo, mat.metallic);\n	\n    // reflectance equation\n    vec3 Lo = vec3(0.0);\n\n    // calculate per-light radiance\n    vec3 L = normalize(lightdir);\n    vec3 H = normalize(V + L);        \n    \n    // cook-torrance brdf\n    float NDF = DistributionGGX(N, H, mat.roughness);        \n    float G   = GeometrySmith(N, V, L, mat.roughness);      \n    vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0);    \n\n    vec3 kS = F;\n    vec3 kD = vec3(1.0) - kS;\n    kD *= 1.0 - mat.metallic;	  \n    \n    vec3 numerator    = NDF * G * F;\n    float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);\n    vec3 specular     = numerator / max(denominator, 0.001);  \n    \n    // add to outgoing radiance Lo\n    float NdotL = max(dot(N, L), 0.0);                \n    Lo += (kD * mat.albedo / PI + specular) * NdotL;  \n  \n    float hemi = 1.0;\n    #ifdef HEMISPHERE_LIGHT\n    // ground is black, taken into account by ambient light\n    hemi = NdotL*1.25;\n    #endif\n\n    vec3 ambient = (vec3(1.2+hemi) * mat.albedo) * mat.ao;\n    vec3 color = ambient + Lo*1.7;\n    \n    /// this section adds edge glow as if there were a white env map ///\n    /// there should probably be a way to disable it //\n    float lt = 1.0-max(dot(N,V),0.0);\n    lt = pow(lt,6.0);\n    color += 16.0*lt*(0.2+mat.albedo)*mat.metallic*backgroundColor*(1.3-mat.roughness);\n    ///\n    \n    color = color / (color + vec3(1.0));\n    color = pow(color, vec3(1.0/2.2));\n   \n    return color;\n}\n\nfloat simpleLighting(vec3 p, vec3 normal, vec3 lightdir) {\n    // Simple phong-like shading\n    float value = clamp(dot(normal, normalize(lightdir)),0.0, 1.0);\n    return value * 0.3 + 0.7;\n}\n\nfloat specularLighting(vec3 p, vec3 normal, vec3 lightDirection, float shine) {\n    float lamb = clamp(dot(normal,normalize(lightDirection)),0.0,1.0);\n    float spec = pow(lamb, exp(10.0*shine));\n    lamb = 0.4*lamb + 0.4 + 0.2*spec;\n    return lamb;\n}\n\nfloat shadow(vec3 p, vec3 lightDirection, float amount) {\n    float t = intersect(p+0.001*lightDirection, lightDirection, stepSize);\n    return t < (max_dist - 0.1) ? 1.0-amount : 1.0;\n}\n\n// From https://www.shadertoy.com/view/XslSWl\nfloat occlusion(vec3 p,vec3 n) { \n    const int AO_SAMPLES = 8;\n    const float INV_AO_SAMPLES = 1.0/float(AO_SAMPLES);\n    const float R = 0.9;\n    const float D = 0.8;\n    float r = 0.0;\n    for(int i = 0; i < AO_SAMPLES; i++) {\n        float f = float(i)*INV_AO_SAMPLES;\n        float h = 0.05+f*R;\n        float d = surfaceDistance(p + n * h) - 0.003;\n        r += clamp(h*D-d,0.0,1.0) * (1.0-f);\n    }    \n    return clamp(1.0-r,0.0,1.0);\n}\n";
      var fragFooter = "\n// For advanced users //\nvoid main() {\n\n    vec3 rayOrigin = (cameraPosition - sculptureCenter) / max(intersection_threshold, _scale);\n    vec3 rayDirection = getRayDirection();\n    float t = intersect(rayOrigin, rayDirection, stepSize);\n    if(t < max_dist) {\n        vec3 p = (rayOrigin + rayDirection*t);\n        //vec4 sp = projectionMatrix*viewMatrix*vec4(p,1.0); //could be used to set FragDepth\n        vec3 normal = calcNormal(p);\n        // p *= _scale;\n        vec3 col = shade(p, normal);\n        pc_fragColor = vec4(col, opacity);\n        \n    } else {\n        discard;\n    }\n}\n";
      /**
     * @license
     * Copyright 2010-2022 Three.js Authors
     * SPDX-License-Identifier: MIT
     */ const REVISION = "138";
      const MOUSE = {
          LEFT: 0,
          MIDDLE: 1,
          RIGHT: 2,
          ROTATE: 0,
          DOLLY: 1,
          PAN: 2
      };
      const TOUCH = {
          ROTATE: 0,
          PAN: 1,
          DOLLY_PAN: 2,
          DOLLY_ROTATE: 3
      };
      const CullFaceNone = 0;
      const CullFaceBack = 1;
      const CullFaceFront = 2;
      const CullFaceFrontBack = 3;
      const BasicShadowMap = 0;
      const PCFShadowMap = 1;
      const PCFSoftShadowMap = 2;
      const VSMShadowMap = 3;
      const FrontSide = 0;
      const BackSide = 1;
      const DoubleSide = 2;
      const FlatShading = 1;
      const SmoothShading = 2;
      const NoBlending = 0;
      const NormalBlending = 1;
      const AdditiveBlending = 2;
      const SubtractiveBlending = 3;
      const MultiplyBlending = 4;
      const CustomBlending = 5;
      const AddEquation = 100;
      const SubtractEquation = 101;
      const ReverseSubtractEquation = 102;
      const MinEquation = 103;
      const MaxEquation = 104;
      const ZeroFactor = 200;
      const OneFactor = 201;
      const SrcColorFactor = 202;
      const OneMinusSrcColorFactor = 203;
      const SrcAlphaFactor = 204;
      const OneMinusSrcAlphaFactor = 205;
      const DstAlphaFactor = 206;
      const OneMinusDstAlphaFactor = 207;
      const DstColorFactor = 208;
      const OneMinusDstColorFactor = 209;
      const SrcAlphaSaturateFactor = 210;
      const NeverDepth = 0;
      const AlwaysDepth = 1;
      const LessDepth = 2;
      const LessEqualDepth = 3;
      const EqualDepth = 4;
      const GreaterEqualDepth = 5;
      const GreaterDepth = 6;
      const NotEqualDepth = 7;
      const MultiplyOperation = 0;
      const MixOperation = 1;
      const AddOperation = 2;
      const NoToneMapping = 0;
      const LinearToneMapping = 1;
      const ReinhardToneMapping = 2;
      const CineonToneMapping = 3;
      const ACESFilmicToneMapping = 4;
      const CustomToneMapping = 5;
      const UVMapping = 300;
      const CubeReflectionMapping = 301;
      const CubeRefractionMapping = 302;
      const EquirectangularReflectionMapping = 303;
      const EquirectangularRefractionMapping = 304;
      const CubeUVReflectionMapping = 306;
      const CubeUVRefractionMapping = 307;
      const RepeatWrapping = 1000;
      const ClampToEdgeWrapping = 1001;
      const MirroredRepeatWrapping = 1002;
      const NearestFilter = 1003;
      const NearestMipmapNearestFilter = 1004;
      const NearestMipMapNearestFilter = 1004;
      const NearestMipmapLinearFilter = 1005;
      const NearestMipMapLinearFilter = 1005;
      const LinearFilter = 1006;
      const LinearMipmapNearestFilter = 1007;
      const LinearMipMapNearestFilter = 1007;
      const LinearMipmapLinearFilter = 1008;
      const LinearMipMapLinearFilter = 1008;
      const UnsignedByteType = 1009;
      const ByteType = 1010;
      const ShortType = 1011;
      const UnsignedShortType = 1012;
      const IntType = 1013;
      const UnsignedIntType = 1014;
      const FloatType = 1015;
      const HalfFloatType = 1016;
      const UnsignedShort4444Type = 1017;
      const UnsignedShort5551Type = 1018;
      const UnsignedInt248Type = 1020;
      const AlphaFormat = 1021;
      const RGBFormat = 1022;
      const RGBAFormat = 1023;
      const LuminanceFormat = 1024;
      const LuminanceAlphaFormat = 1025;
      const DepthFormat = 1026;
      const DepthStencilFormat = 1027;
      const RedFormat = 1028;
      const RedIntegerFormat = 1029;
      const RGFormat = 1030;
      const RGIntegerFormat = 1031;
      const RGBAIntegerFormat = 1033;
      const RGB_S3TC_DXT1_Format = 33776;
      const RGBA_S3TC_DXT1_Format = 33777;
      const RGBA_S3TC_DXT3_Format = 33778;
      const RGBA_S3TC_DXT5_Format = 33779;
      const RGB_PVRTC_4BPPV1_Format = 35840;
      const RGB_PVRTC_2BPPV1_Format = 35841;
      const RGBA_PVRTC_4BPPV1_Format = 35842;
      const RGBA_PVRTC_2BPPV1_Format = 35843;
      const RGB_ETC1_Format = 36196;
      const RGB_ETC2_Format = 37492;
      const RGBA_ETC2_EAC_Format = 37496;
      const RGBA_ASTC_4x4_Format = 37808;
      const RGBA_ASTC_5x4_Format = 37809;
      const RGBA_ASTC_5x5_Format = 37810;
      const RGBA_ASTC_6x5_Format = 37811;
      const RGBA_ASTC_6x6_Format = 37812;
      const RGBA_ASTC_8x5_Format = 37813;
      const RGBA_ASTC_8x6_Format = 37814;
      const RGBA_ASTC_8x8_Format = 37815;
      const RGBA_ASTC_10x5_Format = 37816;
      const RGBA_ASTC_10x6_Format = 37817;
      const RGBA_ASTC_10x8_Format = 37818;
      const RGBA_ASTC_10x10_Format = 37819;
      const RGBA_ASTC_12x10_Format = 37820;
      const RGBA_ASTC_12x12_Format = 37821;
      const RGBA_BPTC_Format = 36492;
      const LoopOnce = 2200;
      const LoopRepeat = 2201;
      const LoopPingPong = 2202;
      const InterpolateDiscrete = 2300;
      const InterpolateLinear = 2301;
      const InterpolateSmooth = 2302;
      const ZeroCurvatureEnding = 2400;
      const ZeroSlopeEnding = 2401;
      const WrapAroundEnding = 2402;
      const NormalAnimationBlendMode = 2500;
      const AdditiveAnimationBlendMode = 2501;
      const TrianglesDrawMode = 0;
      const TriangleStripDrawMode = 1;
      const TriangleFanDrawMode = 2;
      const LinearEncoding = 3000;
      const sRGBEncoding = 3001;
      const BasicDepthPacking = 3200;
      const RGBADepthPacking = 3201;
      const TangentSpaceNormalMap = 0;
      const ObjectSpaceNormalMap = 1;
      const ZeroStencilOp = 0;
      const KeepStencilOp = 7680;
      const ReplaceStencilOp = 7681;
      const IncrementStencilOp = 7682;
      const DecrementStencilOp = 7683;
      const IncrementWrapStencilOp = 34055;
      const DecrementWrapStencilOp = 34056;
      const InvertStencilOp = 5386;
      const NeverStencilFunc = 512;
      const LessStencilFunc = 513;
      const EqualStencilFunc = 514;
      const LessEqualStencilFunc = 515;
      const GreaterStencilFunc = 516;
      const NotEqualStencilFunc = 517;
      const GreaterEqualStencilFunc = 518;
      const AlwaysStencilFunc = 519;
      const StaticDrawUsage = 35044;
      const DynamicDrawUsage = 35048;
      const StreamDrawUsage = 35040;
      const StaticReadUsage = 35045;
      const DynamicReadUsage = 35049;
      const StreamReadUsage = 35041;
      const StaticCopyUsage = 35046;
      const DynamicCopyUsage = 35050;
      const StreamCopyUsage = 35042;
      const GLSL1 = "100";
      const GLSL3 = "300 es";
      const _SRGBAFormat = 1035; // fallback for WebGL 1
      /**
     * https://github.com/mrdoob/eventdispatcher.js/
     */ class EventDispatcher {
          addEventListener(type1, listener1) {
              if (this._listeners === undefined) this._listeners = {};
              const listeners1 = this._listeners;
              if (listeners1[type1] === undefined) listeners1[type1] = [];
              if (listeners1[type1].indexOf(listener1) === -1) listeners1[type1].push(listener1);
          }
          hasEventListener(type1, listener1) {
              if (this._listeners === undefined) return false;
              const listeners1 = this._listeners;
              return listeners1[type1] !== undefined && listeners1[type1].indexOf(listener1) !== -1;
          }
          removeEventListener(type1, listener1) {
              if (this._listeners === undefined) return;
              const listeners1 = this._listeners;
              const listenerArray1 = listeners1[type1];
              if (listenerArray1 !== undefined) {
                  const index3 = listenerArray1.indexOf(listener1);
                  if (index3 !== -1) listenerArray1.splice(index3, 1);
              }
          }
          dispatchEvent(event1) {
              if (this._listeners === undefined) return;
              const listeners1 = this._listeners;
              const listenerArray1 = listeners1[event1.type];
              if (listenerArray1 !== undefined) {
                  event1.target = this;
                  // Make a copy, in case listeners are removed while iterating.
                  const array1 = listenerArray1.slice(0);
                  for(let i3 = 0, l1 = array1.length; i3 < l1; i3++)array1[i3].call(this, event1);
                  event1.target = null;
              }
          }
      }
      const _lut = [];
      for(let i = 0; i < 256; i++)_lut[i] = (i < 16 ? "0" : "") + i.toString(16);
      let _seed = 1234567;
      const DEG2RAD = Math.PI / 180;
      const RAD2DEG = 180 / Math.PI;
      // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
      function generateUUID() {
          const d01 = Math.random() * 0xffffffff | 0;
          const d11 = Math.random() * 0xffffffff | 0;
          const d21 = Math.random() * 0xffffffff | 0;
          const d31 = Math.random() * 0xffffffff | 0;
          const uuid1 = _lut[d01 & 0xff] + _lut[d01 >> 8 & 0xff] + _lut[d01 >> 16 & 0xff] + _lut[d01 >> 24 & 0xff] + "-" + _lut[d11 & 0xff] + _lut[d11 >> 8 & 0xff] + "-" + _lut[d11 >> 16 & 0x0f | 0x40] + _lut[d11 >> 24 & 0xff] + "-" + _lut[d21 & 0x3f | 0x80] + _lut[d21 >> 8 & 0xff] + "-" + _lut[d21 >> 16 & 0xff] + _lut[d21 >> 24 & 0xff] + _lut[d31 & 0xff] + _lut[d31 >> 8 & 0xff] + _lut[d31 >> 16 & 0xff] + _lut[d31 >> 24 & 0xff];
          // .toUpperCase() here flattens concatenated strings to save heap memory space.
          return uuid1.toUpperCase();
      }
      function clamp$1(value1, min1, max1) {
          return Math.max(min1, Math.min(max1, value1));
      }
      // compute euclidian modulo of m % n
      // https://en.wikipedia.org/wiki/Modulo_operation
      function euclideanModulo(n3, m1) {
          return (n3 % m1 + m1) % m1;
      }
      // Linear mapping from range <a1, a2> to range <b1, b2>
      function mapLinear(x4, a15, a25, b15, b25) {
          return b15 + (x4 - a15) * (b25 - b15) / (a25 - a15);
      }
      // https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/
      function inverseLerp(x4, y3, value1) {
          if (x4 !== y3) return (value1 - x4) / (y3 - x4);
          else return 0;
      }
      // https://en.wikipedia.org/wiki/Linear_interpolation
      function lerp(x4, y3, t4) {
          return (1 - t4) * x4 + t4 * y3;
      }
      // http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/
      function damp(x4, y3, lambda1, dt3) {
          return lerp(x4, y3, 1 - Math.exp(-lambda1 * dt3));
      }
      // https://www.desmos.com/calculator/vcsjnyz7x4
      function pingpong(x4, length1 = 1) {
          return length1 - Math.abs(euclideanModulo(x4, length1 * 2) - length1);
      }
      // http://en.wikipedia.org/wiki/Smoothstep
      function smoothstep(x4, min1, max1) {
          if (x4 <= min1) return 0;
          if (x4 >= max1) return 1;
          x4 = (x4 - min1) / (max1 - min1);
          return x4 * x4 * (3 - 2 * x4);
      }
      function smootherstep(x4, min1, max1) {
          if (x4 <= min1) return 0;
          if (x4 >= max1) return 1;
          x4 = (x4 - min1) / (max1 - min1);
          return x4 * x4 * x4 * (x4 * (x4 * 6 - 15) + 10);
      }
      // Random integer from <low, high> interval
      function randInt(low1, high1) {
          return low1 + Math.floor(Math.random() * (high1 - low1 + 1));
      }
      // Random float from <low, high> interval
      function randFloat(low1, high1) {
          return low1 + Math.random() * (high1 - low1);
      }
      // Random float from <-range/2, range/2> interval
      function randFloatSpread(range1) {
          return range1 * (0.5 - Math.random());
      }
      // Deterministic pseudo-random float in the interval [ 0, 1 ]
      function seededRandom(s10) {
          if (s10 !== undefined) _seed = s10 % 2147483647;
          // Park-Miller algorithm
          _seed = _seed * 16807 % 2147483647;
          return (_seed - 1) / 2147483646;
      }
      function degToRad(degrees1) {
          return degrees1 * DEG2RAD;
      }
      function radToDeg(radians1) {
          return radians1 * RAD2DEG;
      }
      function isPowerOfTwo(value1) {
          return (value1 & value1 - 1) === 0 && value1 !== 0;
      }
      function ceilPowerOfTwo(value1) {
          return Math.pow(2, Math.ceil(Math.log(value1) / Math.LN2));
      }
      function floorPowerOfTwo(value1) {
          return Math.pow(2, Math.floor(Math.log(value1) / Math.LN2));
      }
      function setQuaternionFromProperEuler(q3, a3, b3, c4, order1) {
          // Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles
          // rotations are applied to the axes in the order specified by 'order'
          // rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
          // angles are in radians
          const cos1 = Math.cos;
          const sin1 = Math.sin;
          const c21 = cos1(b3 / 2);
          const s21 = sin1(b3 / 2);
          const c131 = cos1((a3 + c4) / 2);
          const s131 = sin1((a3 + c4) / 2);
          const c1_31 = cos1((a3 - c4) / 2);
          const s1_31 = sin1((a3 - c4) / 2);
          const c3_11 = cos1((c4 - a3) / 2);
          const s3_11 = sin1((c4 - a3) / 2);
          switch(order1){
              case "XYX":
                  q3.set(c21 * s131, s21 * c1_31, s21 * s1_31, c21 * c131);
                  break;
              case "YZY":
                  q3.set(s21 * s1_31, c21 * s131, s21 * c1_31, c21 * c131);
                  break;
              case "ZXZ":
                  q3.set(s21 * c1_31, s21 * s1_31, c21 * s131, c21 * c131);
                  break;
              case "XZX":
                  q3.set(c21 * s131, s21 * s3_11, s21 * c3_11, c21 * c131);
                  break;
              case "YXY":
                  q3.set(s21 * c3_11, c21 * s131, s21 * s3_11, c21 * c131);
                  break;
              case "ZYZ":
                  q3.set(s21 * s3_11, s21 * c3_11, c21 * s131, c21 * c131);
                  break;
              default:
                  console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + order1);
          }
      }
      var MathUtils = /*#__PURE__*/ Object.freeze({
          __proto__: null,
          DEG2RAD: DEG2RAD,
          RAD2DEG: RAD2DEG,
          generateUUID: generateUUID,
          clamp: clamp$1,
          euclideanModulo: euclideanModulo,
          mapLinear: mapLinear,
          inverseLerp: inverseLerp,
          lerp: lerp,
          damp: damp,
          pingpong: pingpong,
          smoothstep: smoothstep,
          smootherstep: smootherstep,
          randInt: randInt,
          randFloat: randFloat,
          randFloatSpread: randFloatSpread,
          seededRandom: seededRandom,
          degToRad: degToRad,
          radToDeg: radToDeg,
          isPowerOfTwo: isPowerOfTwo,
          ceilPowerOfTwo: ceilPowerOfTwo,
          floorPowerOfTwo: floorPowerOfTwo,
          setQuaternionFromProperEuler: setQuaternionFromProperEuler
      });
      class Vector2 {
          constructor(x4 = 0, y3 = 0){
              this.x = x4;
              this.y = y3;
          }
          get width() {
              return this.x;
          }
          set width(value1) {
              this.x = value1;
          }
          get height() {
              return this.y;
          }
          set height(value1) {
              this.y = value1;
          }
          set(x4, y3) {
              this.x = x4;
              this.y = y3;
              return this;
          }
          setScalar(scalar1) {
              this.x = scalar1;
              this.y = scalar1;
              return this;
          }
          setX(x4) {
              this.x = x4;
              return this;
          }
          setY(y3) {
              this.y = y3;
              return this;
          }
          setComponent(index3, value1) {
              switch(index3){
                  case 0:
                      this.x = value1;
                      break;
                  case 1:
                      this.y = value1;
                      break;
                  default:
                      throw new Error("index is out of range: " + index3);
              }
              return this;
          }
          getComponent(index3) {
              switch(index3){
                  case 0:
                      return this.x;
                  case 1:
                      return this.y;
                  default:
                      throw new Error("index is out of range: " + index3);
              }
          }
          clone() {
              return new this.constructor(this.x, this.y);
          }
          copy(v4) {
              this.x = v4.x;
              this.y = v4.y;
              return this;
          }
          add(v4, w2) {
              if (w2 !== undefined) {
                  console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");
                  return this.addVectors(v4, w2);
              }
              this.x += v4.x;
              this.y += v4.y;
              return this;
          }
          addScalar(s10) {
              this.x += s10;
              this.y += s10;
              return this;
          }
          addVectors(a3, b3) {
              this.x = a3.x + b3.x;
              this.y = a3.y + b3.y;
              return this;
          }
          addScaledVector(v4, s10) {
              this.x += v4.x * s10;
              this.y += v4.y * s10;
              return this;
          }
          sub(v4, w2) {
              if (w2 !== undefined) {
                  console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");
                  return this.subVectors(v4, w2);
              }
              this.x -= v4.x;
              this.y -= v4.y;
              return this;
          }
          subScalar(s10) {
              this.x -= s10;
              this.y -= s10;
              return this;
          }
          subVectors(a3, b3) {
              this.x = a3.x - b3.x;
              this.y = a3.y - b3.y;
              return this;
          }
          multiply(v4) {
              this.x *= v4.x;
              this.y *= v4.y;
              return this;
          }
          multiplyScalar(scalar1) {
              this.x *= scalar1;
              this.y *= scalar1;
              return this;
          }
          divide(v4) {
              this.x /= v4.x;
              this.y /= v4.y;
              return this;
          }
          divideScalar(scalar1) {
              return this.multiplyScalar(1 / scalar1);
          }
          applyMatrix3(m1) {
              const x4 = this.x, y3 = this.y;
              const e1 = m1.elements;
              this.x = e1[0] * x4 + e1[3] * y3 + e1[6];
              this.y = e1[1] * x4 + e1[4] * y3 + e1[7];
              return this;
          }
          min(v4) {
              this.x = Math.min(this.x, v4.x);
              this.y = Math.min(this.y, v4.y);
              return this;
          }
          max(v4) {
              this.x = Math.max(this.x, v4.x);
              this.y = Math.max(this.y, v4.y);
              return this;
          }
          clamp(min1, max1) {
              // assumes min < max, componentwise
              this.x = Math.max(min1.x, Math.min(max1.x, this.x));
              this.y = Math.max(min1.y, Math.min(max1.y, this.y));
              return this;
          }
          clampScalar(minVal1, maxVal1) {
              this.x = Math.max(minVal1, Math.min(maxVal1, this.x));
              this.y = Math.max(minVal1, Math.min(maxVal1, this.y));
              return this;
          }
          clampLength(min1, max1) {
              const length1 = this.length();
              return this.divideScalar(length1 || 1).multiplyScalar(Math.max(min1, Math.min(max1, length1)));
          }
          floor() {
              this.x = Math.floor(this.x);
              this.y = Math.floor(this.y);
              return this;
          }
          ceil() {
              this.x = Math.ceil(this.x);
              this.y = Math.ceil(this.y);
              return this;
          }
          round() {
              this.x = Math.round(this.x);
              this.y = Math.round(this.y);
              return this;
          }
          roundToZero() {
              this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
              this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
              return this;
          }
          negate() {
              this.x = -this.x;
              this.y = -this.y;
              return this;
          }
          dot(v4) {
              return this.x * v4.x + this.y * v4.y;
          }
          cross(v4) {
              return this.x * v4.y - this.y * v4.x;
          }
          lengthSq() {
              return this.x * this.x + this.y * this.y;
          }
          length() {
              return Math.sqrt(this.x * this.x + this.y * this.y);
          }
          manhattanLength() {
              return Math.abs(this.x) + Math.abs(this.y);
          }
          normalize() {
              return this.divideScalar(this.length() || 1);
          }
          angle() {
              // computes the angle in radians with respect to the positive x-axis
              const angle1 = Math.atan2(-this.y, -this.x) + Math.PI;
              return angle1;
          }
          distanceTo(v4) {
              return Math.sqrt(this.distanceToSquared(v4));
          }
          distanceToSquared(v4) {
              const dx1 = this.x - v4.x, dy1 = this.y - v4.y;
              return dx1 * dx1 + dy1 * dy1;
          }
          manhattanDistanceTo(v4) {
              return Math.abs(this.x - v4.x) + Math.abs(this.y - v4.y);
          }
          setLength(length1) {
              return this.normalize().multiplyScalar(length1);
          }
          lerp(v4, alpha1) {
              this.x += (v4.x - this.x) * alpha1;
              this.y += (v4.y - this.y) * alpha1;
              return this;
          }
          lerpVectors(v11, v21, alpha1) {
              this.x = v11.x + (v21.x - v11.x) * alpha1;
              this.y = v11.y + (v21.y - v11.y) * alpha1;
              return this;
          }
          equals(v4) {
              return v4.x === this.x && v4.y === this.y;
          }
          fromArray(array1, offset2 = 0) {
              this.x = array1[offset2];
              this.y = array1[offset2 + 1];
              return this;
          }
          toArray(array1 = [], offset2 = 0) {
              array1[offset2] = this.x;
              array1[offset2 + 1] = this.y;
              return array1;
          }
          fromBufferAttribute(attribute3, index3, offset2) {
              if (offset2 !== undefined) console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute().");
              this.x = attribute3.getX(index3);
              this.y = attribute3.getY(index3);
              return this;
          }
          rotateAround(center1, angle1) {
              const c4 = Math.cos(angle1), s10 = Math.sin(angle1);
              const x4 = this.x - center1.x;
              const y3 = this.y - center1.y;
              this.x = x4 * c4 - y3 * s10 + center1.x;
              this.y = x4 * s10 + y3 * c4 + center1.y;
              return this;
          }
          random() {
              this.x = Math.random();
              this.y = Math.random();
              return this;
          }
          *[Symbol.iterator]() {
              yield this.x;
              yield this.y;
          }
      }
      Vector2.prototype.isVector2 = true;
      class Matrix3 {
          constructor(){
              this.elements = [
                  1,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  1
              ];
              if (arguments.length > 0) console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.");
          }
          set(n111, n121, n131, n211, n221, n231, n311, n321, n331) {
              const te1 = this.elements;
              te1[0] = n111;
              te1[1] = n211;
              te1[2] = n311;
              te1[3] = n121;
              te1[4] = n221;
              te1[5] = n321;
              te1[6] = n131;
              te1[7] = n231;
              te1[8] = n331;
              return this;
          }
          identity() {
              this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
              return this;
          }
          copy(m1) {
              const te1 = this.elements;
              const me16 = m1.elements;
              te1[0] = me16[0];
              te1[1] = me16[1];
              te1[2] = me16[2];
              te1[3] = me16[3];
              te1[4] = me16[4];
              te1[5] = me16[5];
              te1[6] = me16[6];
              te1[7] = me16[7];
              te1[8] = me16[8];
              return this;
          }
          extractBasis(xAxis1, yAxis1, zAxis1) {
              xAxis1.setFromMatrix3Column(this, 0);
              yAxis1.setFromMatrix3Column(this, 1);
              zAxis1.setFromMatrix3Column(this, 2);
              return this;
          }
          setFromMatrix4(m1) {
              const me16 = m1.elements;
              this.set(me16[0], me16[4], me16[8], me16[1], me16[5], me16[9], me16[2], me16[6], me16[10]);
              return this;
          }
          multiply(m1) {
              return this.multiplyMatrices(this, m1);
          }
          premultiply(m1) {
              return this.multiplyMatrices(m1, this);
          }
          multiplyMatrices(a3, b3) {
              const ae1 = a3.elements;
              const be1 = b3.elements;
              const te1 = this.elements;
              const a111 = ae1[0], a121 = ae1[3], a131 = ae1[6];
              const a211 = ae1[1], a221 = ae1[4], a231 = ae1[7];
              const a311 = ae1[2], a321 = ae1[5], a331 = ae1[8];
              const b111 = be1[0], b121 = be1[3], b131 = be1[6];
              const b211 = be1[1], b221 = be1[4], b231 = be1[7];
              const b311 = be1[2], b321 = be1[5], b331 = be1[8];
              te1[0] = a111 * b111 + a121 * b211 + a131 * b311;
              te1[3] = a111 * b121 + a121 * b221 + a131 * b321;
              te1[6] = a111 * b131 + a121 * b231 + a131 * b331;
              te1[1] = a211 * b111 + a221 * b211 + a231 * b311;
              te1[4] = a211 * b121 + a221 * b221 + a231 * b321;
              te1[7] = a211 * b131 + a221 * b231 + a231 * b331;
              te1[2] = a311 * b111 + a321 * b211 + a331 * b311;
              te1[5] = a311 * b121 + a321 * b221 + a331 * b321;
              te1[8] = a311 * b131 + a321 * b231 + a331 * b331;
              return this;
          }
          multiplyScalar(s10) {
              const te1 = this.elements;
              te1[0] *= s10;
              te1[3] *= s10;
              te1[6] *= s10;
              te1[1] *= s10;
              te1[4] *= s10;
              te1[7] *= s10;
              te1[2] *= s10;
              te1[5] *= s10;
              te1[8] *= s10;
              return this;
          }
          determinant() {
              const te1 = this.elements;
              const a3 = te1[0], b3 = te1[1], c4 = te1[2], d7 = te1[3], e1 = te1[4], f1 = te1[5], g1 = te1[6], h1 = te1[7], i3 = te1[8];
              return a3 * e1 * i3 - a3 * f1 * h1 - b3 * d7 * i3 + b3 * f1 * g1 + c4 * d7 * h1 - c4 * e1 * g1;
          }
          invert() {
              const te1 = this.elements, n111 = te1[0], n211 = te1[1], n311 = te1[2], n121 = te1[3], n221 = te1[4], n321 = te1[5], n131 = te1[6], n231 = te1[7], n331 = te1[8], t111 = n331 * n221 - n321 * n231, t121 = n321 * n131 - n331 * n121, t131 = n231 * n121 - n221 * n131, det1 = n111 * t111 + n211 * t121 + n311 * t131;
              if (det1 === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
              const detInv1 = 1 / det1;
              te1[0] = t111 * detInv1;
              te1[1] = (n311 * n231 - n331 * n211) * detInv1;
              te1[2] = (n321 * n211 - n311 * n221) * detInv1;
              te1[3] = t121 * detInv1;
              te1[4] = (n331 * n111 - n311 * n131) * detInv1;
              te1[5] = (n311 * n121 - n321 * n111) * detInv1;
              te1[6] = t131 * detInv1;
              te1[7] = (n211 * n131 - n231 * n111) * detInv1;
              te1[8] = (n221 * n111 - n211 * n121) * detInv1;
              return this;
          }
          transpose() {
              let tmp1;
              const m1 = this.elements;
              tmp1 = m1[1];
              m1[1] = m1[3];
              m1[3] = tmp1;
              tmp1 = m1[2];
              m1[2] = m1[6];
              m1[6] = tmp1;
              tmp1 = m1[5];
              m1[5] = m1[7];
              m1[7] = tmp1;
              return this;
          }
          getNormalMatrix(matrix41) {
              return this.setFromMatrix4(matrix41).invert().transpose();
          }
          transposeIntoArray(r1) {
              const m1 = this.elements;
              r1[0] = m1[0];
              r1[1] = m1[3];
              r1[2] = m1[6];
              r1[3] = m1[1];
              r1[4] = m1[4];
              r1[5] = m1[7];
              r1[6] = m1[2];
              r1[7] = m1[5];
              r1[8] = m1[8];
              return this;
          }
          setUvTransform(tx1, ty1, sx1, sy1, rotation1, cx1, cy1) {
              const c4 = Math.cos(rotation1);
              const s10 = Math.sin(rotation1);
              this.set(sx1 * c4, sx1 * s10, -sx1 * (c4 * cx1 + s10 * cy1) + cx1 + tx1, -sy1 * s10, sy1 * c4, -sy1 * (-s10 * cx1 + c4 * cy1) + cy1 + ty1, 0, 0, 1);
              return this;
          }
          scale(sx1, sy1) {
              const te1 = this.elements;
              te1[0] *= sx1;
              te1[3] *= sx1;
              te1[6] *= sx1;
              te1[1] *= sy1;
              te1[4] *= sy1;
              te1[7] *= sy1;
              return this;
          }
          rotate(theta1) {
              const c4 = Math.cos(theta1);
              const s10 = Math.sin(theta1);
              const te1 = this.elements;
              const a111 = te1[0], a121 = te1[3], a131 = te1[6];
              const a211 = te1[1], a221 = te1[4], a231 = te1[7];
              te1[0] = c4 * a111 + s10 * a211;
              te1[3] = c4 * a121 + s10 * a221;
              te1[6] = c4 * a131 + s10 * a231;
              te1[1] = -s10 * a111 + c4 * a211;
              te1[4] = -s10 * a121 + c4 * a221;
              te1[7] = -s10 * a131 + c4 * a231;
              return this;
          }
          translate(tx1, ty1) {
              const te1 = this.elements;
              te1[0] += tx1 * te1[2];
              te1[3] += tx1 * te1[5];
              te1[6] += tx1 * te1[8];
              te1[1] += ty1 * te1[2];
              te1[4] += ty1 * te1[5];
              te1[7] += ty1 * te1[8];
              return this;
          }
          equals(matrix1) {
              const te1 = this.elements;
              const me16 = matrix1.elements;
              for(let i3 = 0; i3 < 9; i3++){
                  if (te1[i3] !== me16[i3]) return false;
              }
              return true;
          }
          fromArray(array1, offset2 = 0) {
              for(let i3 = 0; i3 < 9; i3++)this.elements[i3] = array1[i3 + offset2];
              return this;
          }
          toArray(array1 = [], offset2 = 0) {
              const te1 = this.elements;
              array1[offset2] = te1[0];
              array1[offset2 + 1] = te1[1];
              array1[offset2 + 2] = te1[2];
              array1[offset2 + 3] = te1[3];
              array1[offset2 + 4] = te1[4];
              array1[offset2 + 5] = te1[5];
              array1[offset2 + 6] = te1[6];
              array1[offset2 + 7] = te1[7];
              array1[offset2 + 8] = te1[8];
              return array1;
          }
          clone() {
              return new this.constructor().fromArray(this.elements);
          }
      }
      Matrix3.prototype.isMatrix3 = true;
      function arrayNeedsUint32(array1) {
          // assumes larger values usually on last
          for(let i3 = array1.length - 1; i3 >= 0; --i3){
              if (array1[i3] > 65535) return true;
          }
          return false;
      }
      const TYPED_ARRAYS = {
          Int8Array: Int8Array,
          Uint8Array: Uint8Array,
          Uint8ClampedArray: Uint8ClampedArray,
          Int16Array: Int16Array,
          Uint16Array: Uint16Array,
          Int32Array: Int32Array,
          Uint32Array: Uint32Array,
          Float32Array: Float32Array,
          Float64Array: Float64Array
      };
      function getTypedArray(type1, buffer1) {
          return new TYPED_ARRAYS[type1](buffer1);
      }
      function createElementNS(name1) {
          return document.createElementNS("http://www.w3.org/1999/xhtml", name1);
      }
      const _colorKeywords = {
          "aliceblue": 0xF0F8FF,
          "antiquewhite": 0xFAEBD7,
          "aqua": 0x00FFFF,
          "aquamarine": 0x7FFFD4,
          "azure": 0xF0FFFF,
          "beige": 0xF5F5DC,
          "bisque": 0xFFE4C4,
          "black": 0x000000,
          "blanchedalmond": 0xFFEBCD,
          "blue": 0x0000FF,
          "blueviolet": 0x8A2BE2,
          "brown": 0xA52A2A,
          "burlywood": 0xDEB887,
          "cadetblue": 0x5F9EA0,
          "chartreuse": 0x7FFF00,
          "chocolate": 0xD2691E,
          "coral": 0xFF7F50,
          "cornflowerblue": 0x6495ED,
          "cornsilk": 0xFFF8DC,
          "crimson": 0xDC143C,
          "cyan": 0x00FFFF,
          "darkblue": 0x00008B,
          "darkcyan": 0x008B8B,
          "darkgoldenrod": 0xB8860B,
          "darkgray": 0xA9A9A9,
          "darkgreen": 0x006400,
          "darkgrey": 0xA9A9A9,
          "darkkhaki": 0xBDB76B,
          "darkmagenta": 0x8B008B,
          "darkolivegreen": 0x556B2F,
          "darkorange": 0xFF8C00,
          "darkorchid": 0x9932CC,
          "darkred": 0x8B0000,
          "darksalmon": 0xE9967A,
          "darkseagreen": 0x8FBC8F,
          "darkslateblue": 0x483D8B,
          "darkslategray": 0x2F4F4F,
          "darkslategrey": 0x2F4F4F,
          "darkturquoise": 0x00CED1,
          "darkviolet": 0x9400D3,
          "deeppink": 0xFF1493,
          "deepskyblue": 0x00BFFF,
          "dimgray": 0x696969,
          "dimgrey": 0x696969,
          "dodgerblue": 0x1E90FF,
          "firebrick": 0xB22222,
          "floralwhite": 0xFFFAF0,
          "forestgreen": 0x228B22,
          "fuchsia": 0xFF00FF,
          "gainsboro": 0xDCDCDC,
          "ghostwhite": 0xF8F8FF,
          "gold": 0xFFD700,
          "goldenrod": 0xDAA520,
          "gray": 0x808080,
          "green": 0x008000,
          "greenyellow": 0xADFF2F,
          "grey": 0x808080,
          "honeydew": 0xF0FFF0,
          "hotpink": 0xFF69B4,
          "indianred": 0xCD5C5C,
          "indigo": 0x4B0082,
          "ivory": 0xFFFFF0,
          "khaki": 0xF0E68C,
          "lavender": 0xE6E6FA,
          "lavenderblush": 0xFFF0F5,
          "lawngreen": 0x7CFC00,
          "lemonchiffon": 0xFFFACD,
          "lightblue": 0xADD8E6,
          "lightcoral": 0xF08080,
          "lightcyan": 0xE0FFFF,
          "lightgoldenrodyellow": 0xFAFAD2,
          "lightgray": 0xD3D3D3,
          "lightgreen": 0x90EE90,
          "lightgrey": 0xD3D3D3,
          "lightpink": 0xFFB6C1,
          "lightsalmon": 0xFFA07A,
          "lightseagreen": 0x20B2AA,
          "lightskyblue": 0x87CEFA,
          "lightslategray": 0x778899,
          "lightslategrey": 0x778899,
          "lightsteelblue": 0xB0C4DE,
          "lightyellow": 0xFFFFE0,
          "lime": 0x00FF00,
          "limegreen": 0x32CD32,
          "linen": 0xFAF0E6,
          "magenta": 0xFF00FF,
          "maroon": 0x800000,
          "mediumaquamarine": 0x66CDAA,
          "mediumblue": 0x0000CD,
          "mediumorchid": 0xBA55D3,
          "mediumpurple": 0x9370DB,
          "mediumseagreen": 0x3CB371,
          "mediumslateblue": 0x7B68EE,
          "mediumspringgreen": 0x00FA9A,
          "mediumturquoise": 0x48D1CC,
          "mediumvioletred": 0xC71585,
          "midnightblue": 0x191970,
          "mintcream": 0xF5FFFA,
          "mistyrose": 0xFFE4E1,
          "moccasin": 0xFFE4B5,
          "navajowhite": 0xFFDEAD,
          "navy": 0x000080,
          "oldlace": 0xFDF5E6,
          "olive": 0x808000,
          "olivedrab": 0x6B8E23,
          "orange": 0xFFA500,
          "orangered": 0xFF4500,
          "orchid": 0xDA70D6,
          "palegoldenrod": 0xEEE8AA,
          "palegreen": 0x98FB98,
          "paleturquoise": 0xAFEEEE,
          "palevioletred": 0xDB7093,
          "papayawhip": 0xFFEFD5,
          "peachpuff": 0xFFDAB9,
          "peru": 0xCD853F,
          "pink": 0xFFC0CB,
          "plum": 0xDDA0DD,
          "powderblue": 0xB0E0E6,
          "purple": 0x800080,
          "rebeccapurple": 0x663399,
          "red": 0xFF0000,
          "rosybrown": 0xBC8F8F,
          "royalblue": 0x4169E1,
          "saddlebrown": 0x8B4513,
          "salmon": 0xFA8072,
          "sandybrown": 0xF4A460,
          "seagreen": 0x2E8B57,
          "seashell": 0xFFF5EE,
          "sienna": 0xA0522D,
          "silver": 0xC0C0C0,
          "skyblue": 0x87CEEB,
          "slateblue": 0x6A5ACD,
          "slategray": 0x708090,
          "slategrey": 0x708090,
          "snow": 0xFFFAFA,
          "springgreen": 0x00FF7F,
          "steelblue": 0x4682B4,
          "tan": 0xD2B48C,
          "teal": 0x008080,
          "thistle": 0xD8BFD8,
          "tomato": 0xFF6347,
          "turquoise": 0x40E0D0,
          "violet": 0xEE82EE,
          "wheat": 0xF5DEB3,
          "white": 0xFFFFFF,
          "whitesmoke": 0xF5F5F5,
          "yellow": 0xFFFF00,
          "yellowgreen": 0x9ACD32
      };
      const _hslA = {
          h: 0,
          s: 0,
          l: 0
      };
      const _hslB = {
          h: 0,
          s: 0,
          l: 0
      };
      function hue2rgb(p6, q3, t4) {
          if (t4 < 0) t4 += 1;
          if (t4 > 1) t4 -= 1;
          if (t4 < 1 / 6) return p6 + (q3 - p6) * 6 * t4;
          if (t4 < 0.5) return q3;
          if (t4 < 2 / 3) return p6 + (q3 - p6) * 6 * (2 / 3 - t4);
          return p6;
      }
      function SRGBToLinear(c4) {
          return c4 < 0.04045 ? c4 * 0.0773993808 : Math.pow(c4 * 0.9478672986 + 0.0521327014, 2.4);
      }
      function LinearToSRGB(c4) {
          return c4 < 0.0031308 ? c4 * 12.92 : 1.055 * Math.pow(c4, 0.41666) - 0.055;
      }
      class Color {
          constructor(r1, g1, b3){
              if (g1 === undefined && b3 === undefined) // r is THREE.Color, hex or string
              return this.set(r1);
              return this.setRGB(r1, g1, b3);
          }
          set(value1) {
              if (value1 && value1.isColor) this.copy(value1);
              else if (typeof value1 === "number") this.setHex(value1);
              else if (typeof value1 === "string") this.setStyle(value1);
              return this;
          }
          setScalar(scalar1) {
              this.r = scalar1;
              this.g = scalar1;
              this.b = scalar1;
              return this;
          }
          setHex(hex1) {
              hex1 = Math.floor(hex1);
              this.r = (hex1 >> 16 & 255) / 255;
              this.g = (hex1 >> 8 & 255) / 255;
              this.b = (hex1 & 255) / 255;
              return this;
          }
          setRGB(r1, g1, b3) {
              this.r = r1;
              this.g = g1;
              this.b = b3;
              return this;
          }
          setHSL(h1, s10, l1) {
              // h,s,l ranges are in 0.0 - 1.0
              h1 = euclideanModulo(h1, 1);
              s10 = clamp$1(s10, 0, 1);
              l1 = clamp$1(l1, 0, 1);
              if (s10 === 0) this.r = this.g = this.b = l1;
              else {
                  const p6 = l1 <= 0.5 ? l1 * (1 + s10) : l1 + s10 - l1 * s10;
                  const q3 = 2 * l1 - p6;
                  this.r = hue2rgb(q3, p6, h1 + 1 / 3);
                  this.g = hue2rgb(q3, p6, h1);
                  this.b = hue2rgb(q3, p6, h1 - 1 / 3);
              }
              return this;
          }
          setStyle(style1) {
              function handleAlpha1(string1) {
                  if (string1 === undefined) return;
                  if (parseFloat(string1) < 1) console.warn("THREE.Color: Alpha component of " + style1 + " will be ignored.");
              }
              let m1;
              if (m1 = /^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(style1)) {
                  // rgb / hsl
                  let color3;
                  const name1 = m1[1];
                  const components1 = m1[2];
                  switch(name1){
                      case "rgb":
                      case "rgba":
                          if (color3 = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components1)) {
                              // rgb(255,0,0) rgba(255,0,0,0.5)
                              this.r = Math.min(255, parseInt(color3[1], 10)) / 255;
                              this.g = Math.min(255, parseInt(color3[2], 10)) / 255;
                              this.b = Math.min(255, parseInt(color3[3], 10)) / 255;
                              handleAlpha1(color3[4]);
                              return this;
                          }
                          if (color3 = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components1)) {
                              // rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
                              this.r = Math.min(100, parseInt(color3[1], 10)) / 100;
                              this.g = Math.min(100, parseInt(color3[2], 10)) / 100;
                              this.b = Math.min(100, parseInt(color3[3], 10)) / 100;
                              handleAlpha1(color3[4]);
                              return this;
                          }
                          break;
                      case "hsl":
                      case "hsla":
                          if (color3 = /^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components1)) {
                              // hsl(120,50%,50%) hsla(120,50%,50%,0.5)
                              const h1 = parseFloat(color3[1]) / 360;
                              const s10 = parseInt(color3[2], 10) / 100;
                              const l1 = parseInt(color3[3], 10) / 100;
                              handleAlpha1(color3[4]);
                              return this.setHSL(h1, s10, l1);
                          }
                          break;
                  }
              } else if (m1 = /^\#([A-Fa-f\d]+)$/.exec(style1)) {
                  // hex color
                  const hex1 = m1[1];
                  const size1 = hex1.length;
                  if (size1 === 3) {
                      // #ff0
                      this.r = parseInt(hex1.charAt(0) + hex1.charAt(0), 16) / 255;
                      this.g = parseInt(hex1.charAt(1) + hex1.charAt(1), 16) / 255;
                      this.b = parseInt(hex1.charAt(2) + hex1.charAt(2), 16) / 255;
                      return this;
                  } else if (size1 === 6) {
                      // #ff0000
                      this.r = parseInt(hex1.charAt(0) + hex1.charAt(1), 16) / 255;
                      this.g = parseInt(hex1.charAt(2) + hex1.charAt(3), 16) / 255;
                      this.b = parseInt(hex1.charAt(4) + hex1.charAt(5), 16) / 255;
                      return this;
                  }
              }
              if (style1 && style1.length > 0) return this.setColorName(style1);
              return this;
          }
          setColorName(style1) {
              // color keywords
              const hex1 = _colorKeywords[style1.toLowerCase()];
              if (hex1 !== undefined) // red
              this.setHex(hex1);
              else // unknown color
              console.warn("THREE.Color: Unknown color " + style1);
              return this;
          }
          clone() {
              return new this.constructor(this.r, this.g, this.b);
          }
          copy(color3) {
              this.r = color3.r;
              this.g = color3.g;
              this.b = color3.b;
              return this;
          }
          copySRGBToLinear(color3) {
              this.r = SRGBToLinear(color3.r);
              this.g = SRGBToLinear(color3.g);
              this.b = SRGBToLinear(color3.b);
              return this;
          }
          copyLinearToSRGB(color3) {
              this.r = LinearToSRGB(color3.r);
              this.g = LinearToSRGB(color3.g);
              this.b = LinearToSRGB(color3.b);
              return this;
          }
          convertSRGBToLinear() {
              this.copySRGBToLinear(this);
              return this;
          }
          convertLinearToSRGB() {
              this.copyLinearToSRGB(this);
              return this;
          }
          getHex() {
              return this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;
          }
          getHexString() {
              return ("000000" + this.getHex().toString(16)).slice(-6);
          }
          getHSL(target1) {
              // h,s,l ranges are in 0.0 - 1.0
              const r1 = this.r, g1 = this.g, b3 = this.b;
              const max1 = Math.max(r1, g1, b3);
              const min1 = Math.min(r1, g1, b3);
              let hue1, saturation1;
              const lightness1 = (min1 + max1) / 2.0;
              if (min1 === max1) {
                  hue1 = 0;
                  saturation1 = 0;
              } else {
                  const delta1 = max1 - min1;
                  saturation1 = lightness1 <= 0.5 ? delta1 / (max1 + min1) : delta1 / (2 - max1 - min1);
                  switch(max1){
                      case r1:
                          hue1 = (g1 - b3) / delta1 + (g1 < b3 ? 6 : 0);
                          break;
                      case g1:
                          hue1 = (b3 - r1) / delta1 + 2;
                          break;
                      case b3:
                          hue1 = (r1 - g1) / delta1 + 4;
                          break;
                  }
                  hue1 /= 6;
              }
              target1.h = hue1;
              target1.s = saturation1;
              target1.l = lightness1;
              return target1;
          }
          getStyle() {
              return "rgb(" + (this.r * 255 | 0) + "," + (this.g * 255 | 0) + "," + (this.b * 255 | 0) + ")";
          }
          offsetHSL(h1, s10, l1) {
              this.getHSL(_hslA);
              _hslA.h += h1;
              _hslA.s += s10;
              _hslA.l += l1;
              this.setHSL(_hslA.h, _hslA.s, _hslA.l);
              return this;
          }
          add(color3) {
              this.r += color3.r;
              this.g += color3.g;
              this.b += color3.b;
              return this;
          }
          addColors(color11, color21) {
              this.r = color11.r + color21.r;
              this.g = color11.g + color21.g;
              this.b = color11.b + color21.b;
              return this;
          }
          addScalar(s10) {
              this.r += s10;
              this.g += s10;
              this.b += s10;
              return this;
          }
          sub(color3) {
              this.r = Math.max(0, this.r - color3.r);
              this.g = Math.max(0, this.g - color3.g);
              this.b = Math.max(0, this.b - color3.b);
              return this;
          }
          multiply(color3) {
              this.r *= color3.r;
              this.g *= color3.g;
              this.b *= color3.b;
              return this;
          }
          multiplyScalar(s10) {
              this.r *= s10;
              this.g *= s10;
              this.b *= s10;
              return this;
          }
          lerp(color3, alpha1) {
              this.r += (color3.r - this.r) * alpha1;
              this.g += (color3.g - this.g) * alpha1;
              this.b += (color3.b - this.b) * alpha1;
              return this;
          }
          lerpColors(color11, color21, alpha1) {
              this.r = color11.r + (color21.r - color11.r) * alpha1;
              this.g = color11.g + (color21.g - color11.g) * alpha1;
              this.b = color11.b + (color21.b - color11.b) * alpha1;
              return this;
          }
          lerpHSL(color3, alpha1) {
              this.getHSL(_hslA);
              color3.getHSL(_hslB);
              const h1 = lerp(_hslA.h, _hslB.h, alpha1);
              const s10 = lerp(_hslA.s, _hslB.s, alpha1);
              const l1 = lerp(_hslA.l, _hslB.l, alpha1);
              this.setHSL(h1, s10, l1);
              return this;
          }
          equals(c4) {
              return c4.r === this.r && c4.g === this.g && c4.b === this.b;
          }
          fromArray(array1, offset2 = 0) {
              this.r = array1[offset2];
              this.g = array1[offset2 + 1];
              this.b = array1[offset2 + 2];
              return this;
          }
          toArray(array1 = [], offset2 = 0) {
              array1[offset2] = this.r;
              array1[offset2 + 1] = this.g;
              array1[offset2 + 2] = this.b;
              return array1;
          }
          fromBufferAttribute(attribute3, index3) {
              this.r = attribute3.getX(index3);
              this.g = attribute3.getY(index3);
              this.b = attribute3.getZ(index3);
              if (attribute3.normalized === true) {
                  // assuming Uint8Array
                  this.r /= 255;
                  this.g /= 255;
                  this.b /= 255;
              }
              return this;
          }
          toJSON() {
              return this.getHex();
          }
      }
      Color.NAMES = _colorKeywords;
      Color.prototype.isColor = true;
      Color.prototype.r = 1;
      Color.prototype.g = 1;
      Color.prototype.b = 1;
      let _canvas;
      class ImageUtils {
          static getDataURL(image1) {
              if (/^data:/i.test(image1.src)) return image1.src;
              if (typeof HTMLCanvasElement == "undefined") return image1.src;
              let canvas1;
              if (image1 instanceof HTMLCanvasElement) canvas1 = image1;
              else {
                  if (_canvas === undefined) _canvas = createElementNS("canvas");
                  _canvas.width = image1.width;
                  _canvas.height = image1.height;
                  const context1 = _canvas.getContext("2d");
                  if (image1 instanceof ImageData) context1.putImageData(image1, 0, 0);
                  else context1.drawImage(image1, 0, 0, image1.width, image1.height);
                  canvas1 = _canvas;
              }
              if (canvas1.width > 2048 || canvas1.height > 2048) {
                  console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", image1);
                  return canvas1.toDataURL("image/jpeg", 0.6);
              } else return canvas1.toDataURL("image/png");
          }
          static sRGBToLinear(image1) {
              if (typeof HTMLImageElement !== "undefined" && image1 instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image1 instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image1 instanceof ImageBitmap) {
                  const canvas1 = createElementNS("canvas");
                  canvas1.width = image1.width;
                  canvas1.height = image1.height;
                  const context1 = canvas1.getContext("2d");
                  context1.drawImage(image1, 0, 0, image1.width, image1.height);
                  const imageData1 = context1.getImageData(0, 0, image1.width, image1.height);
                  const data1 = imageData1.data;
                  for(let i3 = 0; i3 < data1.length; i3++)data1[i3] = SRGBToLinear(data1[i3] / 255) * 255;
                  context1.putImageData(imageData1, 0, 0);
                  return canvas1;
              } else if (image1.data) {
                  const data1 = image1.data.slice(0);
                  for(let i3 = 0; i3 < data1.length; i3++)if (data1 instanceof Uint8Array || data1 instanceof Uint8ClampedArray) data1[i3] = Math.floor(SRGBToLinear(data1[i3] / 255) * 255);
                  else // assuming float
                  data1[i3] = SRGBToLinear(data1[i3]);
                  return {
                      data: data1,
                      width: image1.width,
                      height: image1.height
                  };
              } else {
                  console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.");
                  return image1;
              }
          }
      }
      class Source {
          constructor(data1 = null){
              this.uuid = generateUUID();
              this.data = data1;
              this.version = 0;
          }
          set needsUpdate(value1) {
              if (value1 === true) this.version++;
          }
          toJSON(meta1) {
              const isRootObject1 = meta1 === undefined || typeof meta1 === "string";
              if (!isRootObject1 && meta1.images[this.uuid] !== undefined) return meta1.images[this.uuid];
              const output1 = {
                  uuid: this.uuid,
                  url: ""
              };
              const data1 = this.data;
              if (data1 !== null) {
                  let url1;
                  if (Array.isArray(data1)) {
                      // cube texture
                      url1 = [];
                      for(let i3 = 0, l1 = data1.length; i3 < l1; i3++)if (data1[i3].isDataTexture) url1.push(serializeImage(data1[i3].image));
                      else url1.push(serializeImage(data1[i3]));
                  } else // texture
                  url1 = serializeImage(data1);
                  output1.url = url1;
              }
              if (!isRootObject1) meta1.images[this.uuid] = output1;
              return output1;
          }
      }
      function serializeImage(image1) {
          if (typeof HTMLImageElement !== "undefined" && image1 instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image1 instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image1 instanceof ImageBitmap) // default images
          return ImageUtils.getDataURL(image1);
          else {
              if (image1.data) // images of DataTexture
              return {
                  data: Array.prototype.slice.call(image1.data),
                  width: image1.width,
                  height: image1.height,
                  type: image1.data.constructor.name
              };
              else {
                  console.warn("THREE.Texture: Unable to serialize Texture.");
                  return {};
              }
          }
      }
      Source.prototype.isSource = true;
      let textureId = 0;
      class Texture extends EventDispatcher {
          constructor(image1 = Texture.DEFAULT_IMAGE, mapping1 = Texture.DEFAULT_MAPPING, wrapS1 = ClampToEdgeWrapping, wrapT1 = ClampToEdgeWrapping, magFilter1 = LinearFilter, minFilter1 = LinearMipmapLinearFilter, format1 = RGBAFormat, type1 = UnsignedByteType, anisotropy1 = 1, encoding1 = LinearEncoding){
              super();
              Object.defineProperty(this, "id", {
                  value: textureId++
              });
              this.uuid = generateUUID();
              this.name = "";
              this.source = new Source(image1);
              this.mipmaps = [];
              this.mapping = mapping1;
              this.wrapS = wrapS1;
              this.wrapT = wrapT1;
              this.magFilter = magFilter1;
              this.minFilter = minFilter1;
              this.anisotropy = anisotropy1;
              this.format = format1;
              this.internalFormat = null;
              this.type = type1;
              this.offset = new Vector2(0, 0);
              this.repeat = new Vector2(1, 1);
              this.center = new Vector2(0, 0);
              this.rotation = 0;
              this.matrixAutoUpdate = true;
              this.matrix = new Matrix3();
              this.generateMipmaps = true;
              this.premultiplyAlpha = false;
              this.flipY = true;
              this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)
              // Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
              //
              // Also changing the encoding after already used by a Material will not automatically make the Material
              // update. You need to explicitly call Material.needsUpdate to trigger it to recompile.
              this.encoding = encoding1;
              this.userData = {};
              this.version = 0;
              this.onUpdate = null;
              this.isRenderTargetTexture = false; // indicates whether a texture belongs to a render target or not
              this.needsPMREMUpdate = false; // indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target textures)
          }
          get image() {
              return this.source.data;
          }
          set image(value1) {
              this.source.data = value1;
          }
          updateMatrix() {
              this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
          }
          clone() {
              return new this.constructor().copy(this);
          }
          copy(source1) {
              this.name = source1.name;
              this.source = source1.source;
              this.mipmaps = source1.mipmaps.slice(0);
              this.mapping = source1.mapping;
              this.wrapS = source1.wrapS;
              this.wrapT = source1.wrapT;
              this.magFilter = source1.magFilter;
              this.minFilter = source1.minFilter;
              this.anisotropy = source1.anisotropy;
              this.format = source1.format;
              this.internalFormat = source1.internalFormat;
              this.type = source1.type;
              this.offset.copy(source1.offset);
              this.repeat.copy(source1.repeat);
              this.center.copy(source1.center);
              this.rotation = source1.rotation;
              this.matrixAutoUpdate = source1.matrixAutoUpdate;
              this.matrix.copy(source1.matrix);
              this.generateMipmaps = source1.generateMipmaps;
              this.premultiplyAlpha = source1.premultiplyAlpha;
              this.flipY = source1.flipY;
              this.unpackAlignment = source1.unpackAlignment;
              this.encoding = source1.encoding;
              this.userData = JSON.parse(JSON.stringify(source1.userData));
              this.needsUpdate = true;
              return this;
          }
          toJSON(meta1) {
              const isRootObject1 = meta1 === undefined || typeof meta1 === "string";
              if (!isRootObject1 && meta1.textures[this.uuid] !== undefined) return meta1.textures[this.uuid];
              const output1 = {
                  metadata: {
                      version: 4.5,
                      type: "Texture",
                      generator: "Texture.toJSON"
                  },
                  uuid: this.uuid,
                  name: this.name,
                  image: this.source.toJSON(meta1).uuid,
                  mapping: this.mapping,
                  repeat: [
                      this.repeat.x,
                      this.repeat.y
                  ],
                  offset: [
                      this.offset.x,
                      this.offset.y
                  ],
                  center: [
                      this.center.x,
                      this.center.y
                  ],
                  rotation: this.rotation,
                  wrap: [
                      this.wrapS,
                      this.wrapT
                  ],
                  format: this.format,
                  type: this.type,
                  encoding: this.encoding,
                  minFilter: this.minFilter,
                  magFilter: this.magFilter,
                  anisotropy: this.anisotropy,
                  flipY: this.flipY,
                  premultiplyAlpha: this.premultiplyAlpha,
                  unpackAlignment: this.unpackAlignment
              };
              if (JSON.stringify(this.userData) !== "{}") output1.userData = this.userData;
              if (!isRootObject1) meta1.textures[this.uuid] = output1;
              return output1;
          }
          dispose() {
              this.dispatchEvent({
                  type: "dispose"
              });
          }
          transformUv(uv4) {
              if (this.mapping !== UVMapping) return uv4;
              uv4.applyMatrix3(this.matrix);
              if (uv4.x < 0 || uv4.x > 1) switch(this.wrapS){
                  case RepeatWrapping:
                      uv4.x = uv4.x - Math.floor(uv4.x);
                      break;
                  case ClampToEdgeWrapping:
                      uv4.x = uv4.x < 0 ? 0 : 1;
                      break;
                  case MirroredRepeatWrapping:
                      if (Math.abs(Math.floor(uv4.x) % 2) === 1) uv4.x = Math.ceil(uv4.x) - uv4.x;
                      else uv4.x = uv4.x - Math.floor(uv4.x);
                      break;
              }
              if (uv4.y < 0 || uv4.y > 1) switch(this.wrapT){
                  case RepeatWrapping:
                      uv4.y = uv4.y - Math.floor(uv4.y);
                      break;
                  case ClampToEdgeWrapping:
                      uv4.y = uv4.y < 0 ? 0 : 1;
                      break;
                  case MirroredRepeatWrapping:
                      if (Math.abs(Math.floor(uv4.y) % 2) === 1) uv4.y = Math.ceil(uv4.y) - uv4.y;
                      else uv4.y = uv4.y - Math.floor(uv4.y);
                      break;
              }
              if (this.flipY) uv4.y = 1 - uv4.y;
              return uv4;
          }
          set needsUpdate(value1) {
              if (value1 === true) {
                  this.version++;
                  this.source.needsUpdate = true;
              }
          }
      }
      Texture.DEFAULT_IMAGE = null;
      Texture.DEFAULT_MAPPING = UVMapping;
      Texture.prototype.isTexture = true;
      class Vector4$1 {
          constructor(x4 = 0, y3 = 0, z3 = 0, w2 = 1){
              this.x = x4;
              this.y = y3;
              this.z = z3;
              this.w = w2;
          }
          get width() {
              return this.z;
          }
          set width(value1) {
              this.z = value1;
          }
          get height() {
              return this.w;
          }
          set height(value1) {
              this.w = value1;
          }
          set(x4, y3, z3, w2) {
              this.x = x4;
              this.y = y3;
              this.z = z3;
              this.w = w2;
              return this;
          }
          setScalar(scalar1) {
              this.x = scalar1;
              this.y = scalar1;
              this.z = scalar1;
              this.w = scalar1;
              return this;
          }
          setX(x4) {
              this.x = x4;
              return this;
          }
          setY(y3) {
              this.y = y3;
              return this;
          }
          setZ(z3) {
              this.z = z3;
              return this;
          }
          setW(w2) {
              this.w = w2;
              return this;
          }
          setComponent(index3, value1) {
              switch(index3){
                  case 0:
                      this.x = value1;
                      break;
                  case 1:
                      this.y = value1;
                      break;
                  case 2:
                      this.z = value1;
                      break;
                  case 3:
                      this.w = value1;
                      break;
                  default:
                      throw new Error("index is out of range: " + index3);
              }
              return this;
          }
          getComponent(index3) {
              switch(index3){
                  case 0:
                      return this.x;
                  case 1:
                      return this.y;
                  case 2:
                      return this.z;
                  case 3:
                      return this.w;
                  default:
                      throw new Error("index is out of range: " + index3);
              }
          }
          clone() {
              return new this.constructor(this.x, this.y, this.z, this.w);
          }
          copy(v4) {
              this.x = v4.x;
              this.y = v4.y;
              this.z = v4.z;
              this.w = v4.w !== undefined ? v4.w : 1;
              return this;
          }
          add(v4, w2) {
              if (w2 !== undefined) {
                  console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");
                  return this.addVectors(v4, w2);
              }
              this.x += v4.x;
              this.y += v4.y;
              this.z += v4.z;
              this.w += v4.w;
              return this;
          }
          addScalar(s10) {
              this.x += s10;
              this.y += s10;
              this.z += s10;
              this.w += s10;
              return this;
          }
          addVectors(a3, b3) {
              this.x = a3.x + b3.x;
              this.y = a3.y + b3.y;
              this.z = a3.z + b3.z;
              this.w = a3.w + b3.w;
              return this;
          }
          addScaledVector(v4, s10) {
              this.x += v4.x * s10;
              this.y += v4.y * s10;
              this.z += v4.z * s10;
              this.w += v4.w * s10;
              return this;
          }
          sub(v4, w2) {
              if (w2 !== undefined) {
                  console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");
                  return this.subVectors(v4, w2);
              }
              this.x -= v4.x;
              this.y -= v4.y;
              this.z -= v4.z;
              this.w -= v4.w;
              return this;
          }
          subScalar(s10) {
              this.x -= s10;
              this.y -= s10;
              this.z -= s10;
              this.w -= s10;
              return this;
          }
          subVectors(a3, b3) {
              this.x = a3.x - b3.x;
              this.y = a3.y - b3.y;
              this.z = a3.z - b3.z;
              this.w = a3.w - b3.w;
              return this;
          }
          multiply(v4) {
              this.x *= v4.x;
              this.y *= v4.y;
              this.z *= v4.z;
              this.w *= v4.w;
              return this;
          }
          multiplyScalar(scalar1) {
              this.x *= scalar1;
              this.y *= scalar1;
              this.z *= scalar1;
              this.w *= scalar1;
              return this;
          }
          applyMatrix4(m1) {
              const x4 = this.x, y3 = this.y, z3 = this.z, w2 = this.w;
              const e1 = m1.elements;
              this.x = e1[0] * x4 + e1[4] * y3 + e1[8] * z3 + e1[12] * w2;
              this.y = e1[1] * x4 + e1[5] * y3 + e1[9] * z3 + e1[13] * w2;
              this.z = e1[2] * x4 + e1[6] * y3 + e1[10] * z3 + e1[14] * w2;
              this.w = e1[3] * x4 + e1[7] * y3 + e1[11] * z3 + e1[15] * w2;
              return this;
          }
          divideScalar(scalar1) {
              return this.multiplyScalar(1 / scalar1);
          }
          setAxisAngleFromQuaternion(q3) {
              // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
              // q is assumed to be normalized
              this.w = 2 * Math.acos(q3.w);
              const s10 = Math.sqrt(1 - q3.w * q3.w);
              if (s10 < 0.0001) {
                  this.x = 1;
                  this.y = 0;
                  this.z = 0;
              } else {
                  this.x = q3.x / s10;
                  this.y = q3.y / s10;
                  this.z = q3.z / s10;
              }
              return this;
          }
          setAxisAngleFromRotationMatrix(m1) {
              // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm
              // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
              let angle1, x4, y3, z3; // variables for result
              const epsilon1 = 0.01, epsilon21 = 0.1, te1 = m1.elements, m111 = te1[0], m121 = te1[4], m131 = te1[8], m211 = te1[1], m221 = te1[5], m231 = te1[9], m311 = te1[2], m321 = te1[6], m331 = te1[10];
              if (Math.abs(m121 - m211) < epsilon1 && Math.abs(m131 - m311) < epsilon1 && Math.abs(m231 - m321) < epsilon1) {
                  // singularity found
                  // first check for identity matrix which must have +1 for all terms
                  // in leading diagonal and zero in other terms
                  if (Math.abs(m121 + m211) < epsilon21 && Math.abs(m131 + m311) < epsilon21 && Math.abs(m231 + m321) < epsilon21 && Math.abs(m111 + m221 + m331 - 3) < epsilon21) {
                      // this singularity is identity matrix so angle = 0
                      this.set(1, 0, 0, 0);
                      return this; // zero angle, arbitrary axis
                  }
                  // otherwise this singularity is angle = 180
                  angle1 = Math.PI;
                  const xx1 = (m111 + 1) / 2;
                  const yy1 = (m221 + 1) / 2;
                  const zz1 = (m331 + 1) / 2;
                  const xy1 = (m121 + m211) / 4;
                  const xz1 = (m131 + m311) / 4;
                  const yz1 = (m231 + m321) / 4;
                  if (xx1 > yy1 && xx1 > zz1) {
                      // m11 is the largest diagonal term
                      if (xx1 < epsilon1) {
                          x4 = 0;
                          y3 = 0.707106781;
                          z3 = 0.707106781;
                      } else {
                          x4 = Math.sqrt(xx1);
                          y3 = xy1 / x4;
                          z3 = xz1 / x4;
                      }
                  } else if (yy1 > zz1) {
                      // m22 is the largest diagonal term
                      if (yy1 < epsilon1) {
                          x4 = 0.707106781;
                          y3 = 0;
                          z3 = 0.707106781;
                      } else {
                          y3 = Math.sqrt(yy1);
                          x4 = xy1 / y3;
                          z3 = yz1 / y3;
                      }
                  } else // m33 is the largest diagonal term so base result on this
                  if (zz1 < epsilon1) {
                      x4 = 0.707106781;
                      y3 = 0.707106781;
                      z3 = 0;
                  } else {
                      z3 = Math.sqrt(zz1);
                      x4 = xz1 / z3;
                      y3 = yz1 / z3;
                  }
                  this.set(x4, y3, z3, angle1);
                  return this; // return 180 deg rotation
              }
              // as we have reached here there are no singularities so we can handle normally
              let s10 = Math.sqrt((m321 - m231) * (m321 - m231) + (m131 - m311) * (m131 - m311) + (m211 - m121) * (m211 - m121)); // used to normalize
              if (Math.abs(s10) < 0.001) s10 = 1;
              // prevent divide by zero, should not happen if matrix is orthogonal and should be
              // caught by singularity test above, but I've left it in just in case
              this.x = (m321 - m231) / s10;
              this.y = (m131 - m311) / s10;
              this.z = (m211 - m121) / s10;
              this.w = Math.acos((m111 + m221 + m331 - 1) / 2);
              return this;
          }
          min(v4) {
              this.x = Math.min(this.x, v4.x);
              this.y = Math.min(this.y, v4.y);
              this.z = Math.min(this.z, v4.z);
              this.w = Math.min(this.w, v4.w);
              return this;
          }
          max(v4) {
              this.x = Math.max(this.x, v4.x);
              this.y = Math.max(this.y, v4.y);
              this.z = Math.max(this.z, v4.z);
              this.w = Math.max(this.w, v4.w);
              return this;
          }
          clamp(min1, max1) {
              // assumes min < max, componentwise
              this.x = Math.max(min1.x, Math.min(max1.x, this.x));
              this.y = Math.max(min1.y, Math.min(max1.y, this.y));
              this.z = Math.max(min1.z, Math.min(max1.z, this.z));
              this.w = Math.max(min1.w, Math.min(max1.w, this.w));
              return this;
          }
          clampScalar(minVal1, maxVal1) {
              this.x = Math.max(minVal1, Math.min(maxVal1, this.x));
              this.y = Math.max(minVal1, Math.min(maxVal1, this.y));
              this.z = Math.max(minVal1, Math.min(maxVal1, this.z));
              this.w = Math.max(minVal1, Math.min(maxVal1, this.w));
              return this;
          }
          clampLength(min1, max1) {
              const length1 = this.length();
              return this.divideScalar(length1 || 1).multiplyScalar(Math.max(min1, Math.min(max1, length1)));
          }
          floor() {
              this.x = Math.floor(this.x);
              this.y = Math.floor(this.y);
              this.z = Math.floor(this.z);
              this.w = Math.floor(this.w);
              return this;
          }
          ceil() {
              this.x = Math.ceil(this.x);
              this.y = Math.ceil(this.y);
              this.z = Math.ceil(this.z);
              this.w = Math.ceil(this.w);
              return this;
          }
          round() {
              this.x = Math.round(this.x);
              this.y = Math.round(this.y);
              this.z = Math.round(this.z);
              this.w = Math.round(this.w);
              return this;
          }
          roundToZero() {
              this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
              this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
              this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
              this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);
              return this;
          }
          negate() {
              this.x = -this.x;
              this.y = -this.y;
              this.z = -this.z;
              this.w = -this.w;
              return this;
          }
          dot(v4) {
              return this.x * v4.x + this.y * v4.y + this.z * v4.z + this.w * v4.w;
          }
          lengthSq() {
              return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
          }
          length() {
              return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
          }
          manhattanLength() {
              return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
          }
          normalize() {
              return this.divideScalar(this.length() || 1);
          }
          setLength(length1) {
              return this.normalize().multiplyScalar(length1);
          }
          lerp(v4, alpha1) {
              this.x += (v4.x - this.x) * alpha1;
              this.y += (v4.y - this.y) * alpha1;
              this.z += (v4.z - this.z) * alpha1;
              this.w += (v4.w - this.w) * alpha1;
              return this;
          }
          lerpVectors(v11, v21, alpha1) {
              this.x = v11.x + (v21.x - v11.x) * alpha1;
              this.y = v11.y + (v21.y - v11.y) * alpha1;
              this.z = v11.z + (v21.z - v11.z) * alpha1;
              this.w = v11.w + (v21.w - v11.w) * alpha1;
              return this;
          }
          equals(v4) {
              return v4.x === this.x && v4.y === this.y && v4.z === this.z && v4.w === this.w;
          }
          fromArray(array1, offset2 = 0) {
              this.x = array1[offset2];
              this.y = array1[offset2 + 1];
              this.z = array1[offset2 + 2];
              this.w = array1[offset2 + 3];
              return this;
          }
          toArray(array1 = [], offset2 = 0) {
              array1[offset2] = this.x;
              array1[offset2 + 1] = this.y;
              array1[offset2 + 2] = this.z;
              array1[offset2 + 3] = this.w;
              return array1;
          }
          fromBufferAttribute(attribute3, index3, offset2) {
              if (offset2 !== undefined) console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute().");
              this.x = attribute3.getX(index3);
              this.y = attribute3.getY(index3);
              this.z = attribute3.getZ(index3);
              this.w = attribute3.getW(index3);
              return this;
          }
          random() {
              this.x = Math.random();
              this.y = Math.random();
              this.z = Math.random();
              this.w = Math.random();
              return this;
          }
          *[Symbol.iterator]() {
              yield this.x;
              yield this.y;
              yield this.z;
              yield this.w;
          }
      }
      Vector4$1.prototype.isVector4 = true;
      /*
     In options, we can specify:
     * Texture parameters for an auto-generated target texture
     * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
    */ class WebGLRenderTarget extends EventDispatcher {
          constructor(width1, height1, options1 = {}){
              super();
              this.width = width1;
              this.height = height1;
              this.depth = 1;
              this.scissor = new Vector4$1(0, 0, width1, height1);
              this.scissorTest = false;
              this.viewport = new Vector4$1(0, 0, width1, height1);
              const image1 = {
                  width: width1,
                  height: height1,
                  depth: 1
              };
              this.texture = new Texture(image1, options1.mapping, options1.wrapS, options1.wrapT, options1.magFilter, options1.minFilter, options1.format, options1.type, options1.anisotropy, options1.encoding);
              this.texture.isRenderTargetTexture = true;
              this.texture.generateMipmaps = options1.generateMipmaps !== undefined ? options1.generateMipmaps : false;
              this.texture.internalFormat = options1.internalFormat !== undefined ? options1.internalFormat : null;
              this.texture.minFilter = options1.minFilter !== undefined ? options1.minFilter : LinearFilter;
              this.depthBuffer = options1.depthBuffer !== undefined ? options1.depthBuffer : true;
              this.stencilBuffer = options1.stencilBuffer !== undefined ? options1.stencilBuffer : false;
              this.depthTexture = options1.depthTexture !== undefined ? options1.depthTexture : null;
              this.samples = options1.samples !== undefined ? options1.samples : 0;
          }
          setSize(width1, height1, depth1 = 1) {
              if (this.width !== width1 || this.height !== height1 || this.depth !== depth1) {
                  this.width = width1;
                  this.height = height1;
                  this.depth = depth1;
                  this.texture.image.width = width1;
                  this.texture.image.height = height1;
                  this.texture.image.depth = depth1;
                  this.dispose();
              }
              this.viewport.set(0, 0, width1, height1);
              this.scissor.set(0, 0, width1, height1);
          }
          clone() {
              return new this.constructor().copy(this);
          }
          copy(source1) {
              this.width = source1.width;
              this.height = source1.height;
              this.depth = source1.depth;
              this.viewport.copy(source1.viewport);
              this.texture = source1.texture.clone();
              // ensure image object is not shared, see #20328
              this.texture.image = Object.assign({}, source1.texture.image);
              this.depthBuffer = source1.depthBuffer;
              this.stencilBuffer = source1.stencilBuffer;
              if (source1.depthTexture !== null) this.depthTexture = source1.depthTexture.clone();
              this.samples = source1.samples;
              return this;
          }
          dispose() {
              this.dispatchEvent({
                  type: "dispose"
              });
          }
      }
      WebGLRenderTarget.prototype.isWebGLRenderTarget = true;
      class DataArrayTexture extends Texture {
          constructor(data1 = null, width1 = 1, height1 = 1, depth1 = 1){
              super(null);
              this.image = {
                  data: data1,
                  width: width1,
                  height: height1,
                  depth: depth1
              };
              this.magFilter = NearestFilter;
              this.minFilter = NearestFilter;
              this.wrapR = ClampToEdgeWrapping;
              this.generateMipmaps = false;
              this.flipY = false;
              this.unpackAlignment = 1;
          }
      }
      DataArrayTexture.prototype.isDataArrayTexture = true;
      class WebGLArrayRenderTarget extends WebGLRenderTarget {
          constructor(width1, height1, depth1){
              super(width1, height1);
              this.depth = depth1;
              this.texture = new DataArrayTexture(null, width1, height1, depth1);
              this.texture.isRenderTargetTexture = true;
          }
      }
      WebGLArrayRenderTarget.prototype.isWebGLArrayRenderTarget = true;
      class Data3DTexture extends Texture {
          constructor(data1 = null, width1 = 1, height1 = 1, depth1 = 1){
              // We're going to add .setXXX() methods for setting properties later.
              // Users can still set in DataTexture3D directly.
              //
              //	const texture = new THREE.DataTexture3D( data, width, height, depth );
              // 	texture.anisotropy = 16;
              //
              // See #14839
              super(null);
              this.image = {
                  data: data1,
                  width: width1,
                  height: height1,
                  depth: depth1
              };
              this.magFilter = NearestFilter;
              this.minFilter = NearestFilter;
              this.wrapR = ClampToEdgeWrapping;
              this.generateMipmaps = false;
              this.flipY = false;
              this.unpackAlignment = 1;
          }
      }
      Data3DTexture.prototype.isData3DTexture = true;
      class WebGL3DRenderTarget extends WebGLRenderTarget {
          constructor(width1, height1, depth1){
              super(width1, height1);
              this.depth = depth1;
              this.texture = new Data3DTexture(null, width1, height1, depth1);
              this.texture.isRenderTargetTexture = true;
          }
      }
      WebGL3DRenderTarget.prototype.isWebGL3DRenderTarget = true;
      class WebGLMultipleRenderTargets extends WebGLRenderTarget {
          constructor(width1, height1, count1, options1 = {}){
              super(width1, height1, options1);
              const texture1 = this.texture;
              this.texture = [];
              for(let i3 = 0; i3 < count1; i3++){
                  this.texture[i3] = texture1.clone();
                  this.texture[i3].isRenderTargetTexture = true;
              }
          }
          setSize(width1, height1, depth1 = 1) {
              if (this.width !== width1 || this.height !== height1 || this.depth !== depth1) {
                  this.width = width1;
                  this.height = height1;
                  this.depth = depth1;
                  for(let i3 = 0, il1 = this.texture.length; i3 < il1; i3++){
                      this.texture[i3].image.width = width1;
                      this.texture[i3].image.height = height1;
                      this.texture[i3].image.depth = depth1;
                  }
                  this.dispose();
              }
              this.viewport.set(0, 0, width1, height1);
              this.scissor.set(0, 0, width1, height1);
              return this;
          }
          copy(source1) {
              this.dispose();
              this.width = source1.width;
              this.height = source1.height;
              this.depth = source1.depth;
              this.viewport.set(0, 0, this.width, this.height);
              this.scissor.set(0, 0, this.width, this.height);
              this.depthBuffer = source1.depthBuffer;
              this.stencilBuffer = source1.stencilBuffer;
              this.depthTexture = source1.depthTexture;
              this.texture.length = 0;
              for(let i3 = 0, il1 = source1.texture.length; i3 < il1; i3++)this.texture[i3] = source1.texture[i3].clone();
              return this;
          }
      }
      WebGLMultipleRenderTargets.prototype.isWebGLMultipleRenderTargets = true;
      class Quaternion {
          constructor(x4 = 0, y3 = 0, z3 = 0, w2 = 1){
              this._x = x4;
              this._y = y3;
              this._z = z3;
              this._w = w2;
          }
          static slerp(qa1, qb1, qm1, t4) {
              console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.");
              return qm1.slerpQuaternions(qa1, qb1, t4);
          }
          static slerpFlat(dst1, dstOffset1, src01, srcOffset01, src11, srcOffset11, t4) {
              // fuzz-free, array-based Quaternion SLERP operation
              let x01 = src01[srcOffset01 + 0], y01 = src01[srcOffset01 + 1], z01 = src01[srcOffset01 + 2], w01 = src01[srcOffset01 + 3];
              const x11 = src11[srcOffset11 + 0], y11 = src11[srcOffset11 + 1], z11 = src11[srcOffset11 + 2], w11 = src11[srcOffset11 + 3];
              if (t4 === 0) {
                  dst1[dstOffset1 + 0] = x01;
                  dst1[dstOffset1 + 1] = y01;
                  dst1[dstOffset1 + 2] = z01;
                  dst1[dstOffset1 + 3] = w01;
                  return;
              }
              if (t4 === 1) {
                  dst1[dstOffset1 + 0] = x11;
                  dst1[dstOffset1 + 1] = y11;
                  dst1[dstOffset1 + 2] = z11;
                  dst1[dstOffset1 + 3] = w11;
                  return;
              }
              if (w01 !== w11 || x01 !== x11 || y01 !== y11 || z01 !== z11) {
                  let s10 = 1 - t4;
                  const cos1 = x01 * x11 + y01 * y11 + z01 * z11 + w01 * w11, dir1 = cos1 >= 0 ? 1 : -1, sqrSin1 = 1 - cos1 * cos1;
                  // Skip the Slerp for tiny steps to avoid numeric problems:
                  if (sqrSin1 > Number.EPSILON) {
                      const sin1 = Math.sqrt(sqrSin1), len1 = Math.atan2(sin1, cos1 * dir1);
                      s10 = Math.sin(s10 * len1) / sin1;
                      t4 = Math.sin(t4 * len1) / sin1;
                  }
                  const tDir1 = t4 * dir1;
                  x01 = x01 * s10 + x11 * tDir1;
                  y01 = y01 * s10 + y11 * tDir1;
                  z01 = z01 * s10 + z11 * tDir1;
                  w01 = w01 * s10 + w11 * tDir1;
                  // Normalize in case we just did a lerp:
                  if (s10 === 1 - t4) {
                      const f1 = 1 / Math.sqrt(x01 * x01 + y01 * y01 + z01 * z01 + w01 * w01);
                      x01 *= f1;
                      y01 *= f1;
                      z01 *= f1;
                      w01 *= f1;
                  }
              }
              dst1[dstOffset1] = x01;
              dst1[dstOffset1 + 1] = y01;
              dst1[dstOffset1 + 2] = z01;
              dst1[dstOffset1 + 3] = w01;
          }
          static multiplyQuaternionsFlat(dst1, dstOffset1, src01, srcOffset01, src11, srcOffset11) {
              const x01 = src01[srcOffset01];
              const y01 = src01[srcOffset01 + 1];
              const z01 = src01[srcOffset01 + 2];
              const w01 = src01[srcOffset01 + 3];
              const x11 = src11[srcOffset11];
              const y11 = src11[srcOffset11 + 1];
              const z11 = src11[srcOffset11 + 2];
              const w11 = src11[srcOffset11 + 3];
              dst1[dstOffset1] = x01 * w11 + w01 * x11 + y01 * z11 - z01 * y11;
              dst1[dstOffset1 + 1] = y01 * w11 + w01 * y11 + z01 * x11 - x01 * z11;
              dst1[dstOffset1 + 2] = z01 * w11 + w01 * z11 + x01 * y11 - y01 * x11;
              dst1[dstOffset1 + 3] = w01 * w11 - x01 * x11 - y01 * y11 - z01 * z11;
              return dst1;
          }
          get x() {
              return this._x;
          }
          set x(value1) {
              this._x = value1;
              this._onChangeCallback();
          }
          get y() {
              return this._y;
          }
          set y(value1) {
              this._y = value1;
              this._onChangeCallback();
          }
          get z() {
              return this._z;
          }
          set z(value1) {
              this._z = value1;
              this._onChangeCallback();
          }
          get w() {
              return this._w;
          }
          set w(value1) {
              this._w = value1;
              this._onChangeCallback();
          }
          set(x4, y3, z3, w2) {
              this._x = x4;
              this._y = y3;
              this._z = z3;
              this._w = w2;
              this._onChangeCallback();
              return this;
          }
          clone() {
              return new this.constructor(this._x, this._y, this._z, this._w);
          }
          copy(quaternion1) {
              this._x = quaternion1.x;
              this._y = quaternion1.y;
              this._z = quaternion1.z;
              this._w = quaternion1.w;
              this._onChangeCallback();
              return this;
          }
          setFromEuler(euler1, update1) {
              if (!(euler1 && euler1.isEuler)) throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
              const x4 = euler1._x, y3 = euler1._y, z3 = euler1._z, order1 = euler1._order;
              // http://www.mathworks.com/matlabcentral/fileexchange/
              // 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
              //	content/SpinCalc.m
              const cos1 = Math.cos;
              const sin1 = Math.sin;
              const c11 = cos1(x4 / 2);
              const c21 = cos1(y3 / 2);
              const c31 = cos1(z3 / 2);
              const s11 = sin1(x4 / 2);
              const s21 = sin1(y3 / 2);
              const s31 = sin1(z3 / 2);
              switch(order1){
                  case "XYZ":
                      this._x = s11 * c21 * c31 + c11 * s21 * s31;
                      this._y = c11 * s21 * c31 - s11 * c21 * s31;
                      this._z = c11 * c21 * s31 + s11 * s21 * c31;
                      this._w = c11 * c21 * c31 - s11 * s21 * s31;
                      break;
                  case "YXZ":
                      this._x = s11 * c21 * c31 + c11 * s21 * s31;
                      this._y = c11 * s21 * c31 - s11 * c21 * s31;
                      this._z = c11 * c21 * s31 - s11 * s21 * c31;
                      this._w = c11 * c21 * c31 + s11 * s21 * s31;
                      break;
                  case "ZXY":
                      this._x = s11 * c21 * c31 - c11 * s21 * s31;
                      this._y = c11 * s21 * c31 + s11 * c21 * s31;
                      this._z = c11 * c21 * s31 + s11 * s21 * c31;
                      this._w = c11 * c21 * c31 - s11 * s21 * s31;
                      break;
                  case "ZYX":
                      this._x = s11 * c21 * c31 - c11 * s21 * s31;
                      this._y = c11 * s21 * c31 + s11 * c21 * s31;
                      this._z = c11 * c21 * s31 - s11 * s21 * c31;
                      this._w = c11 * c21 * c31 + s11 * s21 * s31;
                      break;
                  case "YZX":
                      this._x = s11 * c21 * c31 + c11 * s21 * s31;
                      this._y = c11 * s21 * c31 + s11 * c21 * s31;
                      this._z = c11 * c21 * s31 - s11 * s21 * c31;
                      this._w = c11 * c21 * c31 - s11 * s21 * s31;
                      break;
                  case "XZY":
                      this._x = s11 * c21 * c31 - c11 * s21 * s31;
                      this._y = c11 * s21 * c31 - s11 * c21 * s31;
                      this._z = c11 * c21 * s31 + s11 * s21 * c31;
                      this._w = c11 * c21 * c31 + s11 * s21 * s31;
                      break;
                  default:
                      console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + order1);
              }
              if (update1 !== false) this._onChangeCallback();
              return this;
          }
          setFromAxisAngle(axis1, angle1) {
              // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
              // assumes axis is normalized
              const halfAngle1 = angle1 / 2, s10 = Math.sin(halfAngle1);
              this._x = axis1.x * s10;
              this._y = axis1.y * s10;
              this._z = axis1.z * s10;
              this._w = Math.cos(halfAngle1);
              this._onChangeCallback();
              return this;
          }
          setFromRotationMatrix(m1) {
              // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
              // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
              const te1 = m1.elements, m111 = te1[0], m121 = te1[4], m131 = te1[8], m211 = te1[1], m221 = te1[5], m231 = te1[9], m311 = te1[2], m321 = te1[6], m331 = te1[10], trace1 = m111 + m221 + m331;
              if (trace1 > 0) {
                  const s10 = 0.5 / Math.sqrt(trace1 + 1.0);
                  this._w = 0.25 / s10;
                  this._x = (m321 - m231) * s10;
                  this._y = (m131 - m311) * s10;
                  this._z = (m211 - m121) * s10;
              } else if (m111 > m221 && m111 > m331) {
                  const s10 = 2.0 * Math.sqrt(1.0 + m111 - m221 - m331);
                  this._w = (m321 - m231) / s10;
                  this._x = 0.25 * s10;
                  this._y = (m121 + m211) / s10;
                  this._z = (m131 + m311) / s10;
              } else if (m221 > m331) {
                  const s10 = 2.0 * Math.sqrt(1.0 + m221 - m111 - m331);
                  this._w = (m131 - m311) / s10;
                  this._x = (m121 + m211) / s10;
                  this._y = 0.25 * s10;
                  this._z = (m231 + m321) / s10;
              } else {
                  const s10 = 2.0 * Math.sqrt(1.0 + m331 - m111 - m221);
                  this._w = (m211 - m121) / s10;
                  this._x = (m131 + m311) / s10;
                  this._y = (m231 + m321) / s10;
                  this._z = 0.25 * s10;
              }
              this._onChangeCallback();
              return this;
          }
          setFromUnitVectors(vFrom1, vTo1) {
              // assumes direction vectors vFrom and vTo are normalized
              let r1 = vFrom1.dot(vTo1) + 1;
              if (r1 < Number.EPSILON) {
                  // vFrom and vTo point in opposite directions
                  r1 = 0;
                  if (Math.abs(vFrom1.x) > Math.abs(vFrom1.z)) {
                      this._x = -vFrom1.y;
                      this._y = vFrom1.x;
                      this._z = 0;
                      this._w = r1;
                  } else {
                      this._x = 0;
                      this._y = -vFrom1.z;
                      this._z = vFrom1.y;
                      this._w = r1;
                  }
              } else {
                  // crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3
                  this._x = vFrom1.y * vTo1.z - vFrom1.z * vTo1.y;
                  this._y = vFrom1.z * vTo1.x - vFrom1.x * vTo1.z;
                  this._z = vFrom1.x * vTo1.y - vFrom1.y * vTo1.x;
                  this._w = r1;
              }
              return this.normalize();
          }
          angleTo(q3) {
              return 2 * Math.acos(Math.abs(clamp$1(this.dot(q3), -1, 1)));
          }
          rotateTowards(q3, step1) {
              const angle1 = this.angleTo(q3);
              if (angle1 === 0) return this;
              const t4 = Math.min(1, step1 / angle1);
              this.slerp(q3, t4);
              return this;
          }
          identity() {
              return this.set(0, 0, 0, 1);
          }
          invert() {
              // quaternion is assumed to have unit length
              return this.conjugate();
          }
          conjugate() {
              this._x *= -1;
              this._y *= -1;
              this._z *= -1;
              this._onChangeCallback();
              return this;
          }
          dot(v4) {
              return this._x * v4._x + this._y * v4._y + this._z * v4._z + this._w * v4._w;
          }
          lengthSq() {
              return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
          }
          length() {
              return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
          }
          normalize() {
              let l1 = this.length();
              if (l1 === 0) {
                  this._x = 0;
                  this._y = 0;
                  this._z = 0;
                  this._w = 1;
              } else {
                  l1 = 1 / l1;
                  this._x = this._x * l1;
                  this._y = this._y * l1;
                  this._z = this._z * l1;
                  this._w = this._w * l1;
              }
              this._onChangeCallback();
              return this;
          }
          multiply(q3, p6) {
              if (p6 !== undefined) {
                  console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.");
                  return this.multiplyQuaternions(q3, p6);
              }
              return this.multiplyQuaternions(this, q3);
          }
          premultiply(q3) {
              return this.multiplyQuaternions(q3, this);
          }
          multiplyQuaternions(a3, b3) {
              // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
              const qax1 = a3._x, qay1 = a3._y, qaz1 = a3._z, qaw1 = a3._w;
              const qbx1 = b3._x, qby1 = b3._y, qbz1 = b3._z, qbw1 = b3._w;
              this._x = qax1 * qbw1 + qaw1 * qbx1 + qay1 * qbz1 - qaz1 * qby1;
              this._y = qay1 * qbw1 + qaw1 * qby1 + qaz1 * qbx1 - qax1 * qbz1;
              this._z = qaz1 * qbw1 + qaw1 * qbz1 + qax1 * qby1 - qay1 * qbx1;
              this._w = qaw1 * qbw1 - qax1 * qbx1 - qay1 * qby1 - qaz1 * qbz1;
              this._onChangeCallback();
              return this;
          }
          slerp(qb1, t4) {
              if (t4 === 0) return this;
              if (t4 === 1) return this.copy(qb1);
              const x4 = this._x, y3 = this._y, z3 = this._z, w2 = this._w;
              // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/
              let cosHalfTheta1 = w2 * qb1._w + x4 * qb1._x + y3 * qb1._y + z3 * qb1._z;
              if (cosHalfTheta1 < 0) {
                  this._w = -qb1._w;
                  this._x = -qb1._x;
                  this._y = -qb1._y;
                  this._z = -qb1._z;
                  cosHalfTheta1 = -cosHalfTheta1;
              } else this.copy(qb1);
              if (cosHalfTheta1 >= 1.0) {
                  this._w = w2;
                  this._x = x4;
                  this._y = y3;
                  this._z = z3;
                  return this;
              }
              const sqrSinHalfTheta1 = 1.0 - cosHalfTheta1 * cosHalfTheta1;
              if (sqrSinHalfTheta1 <= Number.EPSILON) {
                  const s10 = 1 - t4;
                  this._w = s10 * w2 + t4 * this._w;
                  this._x = s10 * x4 + t4 * this._x;
                  this._y = s10 * y3 + t4 * this._y;
                  this._z = s10 * z3 + t4 * this._z;
                  this.normalize();
                  this._onChangeCallback();
                  return this;
              }
              const sinHalfTheta1 = Math.sqrt(sqrSinHalfTheta1);
              const halfTheta1 = Math.atan2(sinHalfTheta1, cosHalfTheta1);
              const ratioA1 = Math.sin((1 - t4) * halfTheta1) / sinHalfTheta1, ratioB1 = Math.sin(t4 * halfTheta1) / sinHalfTheta1;
              this._w = w2 * ratioA1 + this._w * ratioB1;
              this._x = x4 * ratioA1 + this._x * ratioB1;
              this._y = y3 * ratioA1 + this._y * ratioB1;
              this._z = z3 * ratioA1 + this._z * ratioB1;
              this._onChangeCallback();
              return this;
          }
          slerpQuaternions(qa1, qb1, t4) {
              return this.copy(qa1).slerp(qb1, t4);
          }
          random() {
              // Derived from http://planning.cs.uiuc.edu/node198.html
              // Note, this source uses w, x, y, z ordering,
              // so we swap the order below.
              const u11 = Math.random();
              const sqrt1u11 = Math.sqrt(1 - u11);
              const sqrtu11 = Math.sqrt(u11);
              const u21 = 2 * Math.PI * Math.random();
              const u31 = 2 * Math.PI * Math.random();
              return this.set(sqrt1u11 * Math.cos(u21), sqrtu11 * Math.sin(u31), sqrtu11 * Math.cos(u31), sqrt1u11 * Math.sin(u21));
          }
          equals(quaternion1) {
              return quaternion1._x === this._x && quaternion1._y === this._y && quaternion1._z === this._z && quaternion1._w === this._w;
          }
          fromArray(array1, offset2 = 0) {
              this._x = array1[offset2];
              this._y = array1[offset2 + 1];
              this._z = array1[offset2 + 2];
              this._w = array1[offset2 + 3];
              this._onChangeCallback();
              return this;
          }
          toArray(array1 = [], offset2 = 0) {
              array1[offset2] = this._x;
              array1[offset2 + 1] = this._y;
              array1[offset2 + 2] = this._z;
              array1[offset2 + 3] = this._w;
              return array1;
          }
          fromBufferAttribute(attribute3, index3) {
              this._x = attribute3.getX(index3);
              this._y = attribute3.getY(index3);
              this._z = attribute3.getZ(index3);
              this._w = attribute3.getW(index3);
              return this;
          }
          _onChange(callback1) {
              this._onChangeCallback = callback1;
              return this;
          }
          _onChangeCallback() {}
      }
      Quaternion.prototype.isQuaternion = true;
      class Vector3 {
          constructor(x4 = 0, y3 = 0, z3 = 0){
              this.x = x4;
              this.y = y3;
              this.z = z3;
          }
          set(x4, y3, z3) {
              if (z3 === undefined) z3 = this.z; // sprite.scale.set(x,y)
              this.x = x4;
              this.y = y3;
              this.z = z3;
              return this;
          }
          setScalar(scalar1) {
              this.x = scalar1;
              this.y = scalar1;
              this.z = scalar1;
              return this;
          }
          setX(x4) {
              this.x = x4;
              return this;
          }
          setY(y3) {
              this.y = y3;
              return this;
          }
          setZ(z3) {
              this.z = z3;
              return this;
          }
          setComponent(index3, value1) {
              switch(index3){
                  case 0:
                      this.x = value1;
                      break;
                  case 1:
                      this.y = value1;
                      break;
                  case 2:
                      this.z = value1;
                      break;
                  default:
                      throw new Error("index is out of range: " + index3);
              }
              return this;
          }
          getComponent(index3) {
              switch(index3){
                  case 0:
                      return this.x;
                  case 1:
                      return this.y;
                  case 2:
                      return this.z;
                  default:
                      throw new Error("index is out of range: " + index3);
              }
          }
          clone() {
              return new this.constructor(this.x, this.y, this.z);
          }
          copy(v4) {
              this.x = v4.x;
              this.y = v4.y;
              this.z = v4.z;
              return this;
          }
          add(v4, w2) {
              if (w2 !== undefined) {
                  console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");
                  return this.addVectors(v4, w2);
              }
              this.x += v4.x;
              this.y += v4.y;
              this.z += v4.z;
              return this;
          }
          addScalar(s10) {
              this.x += s10;
              this.y += s10;
              this.z += s10;
              return this;
          }
          addVectors(a3, b3) {
              this.x = a3.x + b3.x;
              this.y = a3.y + b3.y;
              this.z = a3.z + b3.z;
              return this;
          }
          addScaledVector(v4, s10) {
              this.x += v4.x * s10;
              this.y += v4.y * s10;
              this.z += v4.z * s10;
              return this;
          }
          sub(v4, w2) {
              if (w2 !== undefined) {
                  console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");
                  return this.subVectors(v4, w2);
              }
              this.x -= v4.x;
              this.y -= v4.y;
              this.z -= v4.z;
              return this;
          }
          subScalar(s10) {
              this.x -= s10;
              this.y -= s10;
              this.z -= s10;
              return this;
          }
          subVectors(a3, b3) {
              this.x = a3.x - b3.x;
              this.y = a3.y - b3.y;
              this.z = a3.z - b3.z;
              return this;
          }
          multiply(v4, w2) {
              if (w2 !== undefined) {
                  console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.");
                  return this.multiplyVectors(v4, w2);
              }
              this.x *= v4.x;
              this.y *= v4.y;
              this.z *= v4.z;
              return this;
          }
          multiplyScalar(scalar1) {
              this.x *= scalar1;
              this.y *= scalar1;
              this.z *= scalar1;
              return this;
          }
          multiplyVectors(a3, b3) {
              this.x = a3.x * b3.x;
              this.y = a3.y * b3.y;
              this.z = a3.z * b3.z;
              return this;
          }
          applyEuler(euler1) {
              if (!(euler1 && euler1.isEuler)) console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.");
              return this.applyQuaternion(_quaternion$4.setFromEuler(euler1));
          }
          applyAxisAngle(axis1, angle1) {
              return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis1, angle1));
          }
          applyMatrix3(m1) {
              const x4 = this.x, y3 = this.y, z3 = this.z;
              const e1 = m1.elements;
              this.x = e1[0] * x4 + e1[3] * y3 + e1[6] * z3;
              this.y = e1[1] * x4 + e1[4] * y3 + e1[7] * z3;
              this.z = e1[2] * x4 + e1[5] * y3 + e1[8] * z3;
              return this;
          }
          applyNormalMatrix(m1) {
              return this.applyMatrix3(m1).normalize();
          }
          applyMatrix4(m1) {
              const x4 = this.x, y3 = this.y, z3 = this.z;
              const e1 = m1.elements;
              const w2 = 1 / (e1[3] * x4 + e1[7] * y3 + e1[11] * z3 + e1[15]);
              this.x = (e1[0] * x4 + e1[4] * y3 + e1[8] * z3 + e1[12]) * w2;
              this.y = (e1[1] * x4 + e1[5] * y3 + e1[9] * z3 + e1[13]) * w2;
              this.z = (e1[2] * x4 + e1[6] * y3 + e1[10] * z3 + e1[14]) * w2;
              return this;
          }
          applyQuaternion(q3) {
              const x4 = this.x, y3 = this.y, z3 = this.z;
              const qx1 = q3.x, qy1 = q3.y, qz1 = q3.z, qw1 = q3.w;
              // calculate quat * vector
              const ix1 = qw1 * x4 + qy1 * z3 - qz1 * y3;
              const iy1 = qw1 * y3 + qz1 * x4 - qx1 * z3;
              const iz1 = qw1 * z3 + qx1 * y3 - qy1 * x4;
              const iw1 = -qx1 * x4 - qy1 * y3 - qz1 * z3;
              // calculate result * inverse quat
              this.x = ix1 * qw1 + iw1 * -qx1 + iy1 * -qz1 - iz1 * -qy1;
              this.y = iy1 * qw1 + iw1 * -qy1 + iz1 * -qx1 - ix1 * -qz1;
              this.z = iz1 * qw1 + iw1 * -qz1 + ix1 * -qy1 - iy1 * -qx1;
              return this;
          }
          project(camera1) {
              return this.applyMatrix4(camera1.matrixWorldInverse).applyMatrix4(camera1.projectionMatrix);
          }
          unproject(camera1) {
              return this.applyMatrix4(camera1.projectionMatrixInverse).applyMatrix4(camera1.matrixWorld);
          }
          transformDirection(m1) {
              // input: THREE.Matrix4 affine matrix
              // vector interpreted as a direction
              const x4 = this.x, y3 = this.y, z3 = this.z;
              const e1 = m1.elements;
              this.x = e1[0] * x4 + e1[4] * y3 + e1[8] * z3;
              this.y = e1[1] * x4 + e1[5] * y3 + e1[9] * z3;
              this.z = e1[2] * x4 + e1[6] * y3 + e1[10] * z3;
              return this.normalize();
          }
          divide(v4) {
              this.x /= v4.x;
              this.y /= v4.y;
              this.z /= v4.z;
              return this;
          }
          divideScalar(scalar1) {
              return this.multiplyScalar(1 / scalar1);
          }
          min(v4) {
              this.x = Math.min(this.x, v4.x);
              this.y = Math.min(this.y, v4.y);
              this.z = Math.min(this.z, v4.z);
              return this;
          }
          max(v4) {
              this.x = Math.max(this.x, v4.x);
              this.y = Math.max(this.y, v4.y);
              this.z = Math.max(this.z, v4.z);
              return this;
          }
          clamp(min1, max1) {
              // assumes min < max, componentwise
              this.x = Math.max(min1.x, Math.min(max1.x, this.x));
              this.y = Math.max(min1.y, Math.min(max1.y, this.y));
              this.z = Math.max(min1.z, Math.min(max1.z, this.z));
              return this;
          }
          clampScalar(minVal1, maxVal1) {
              this.x = Math.max(minVal1, Math.min(maxVal1, this.x));
              this.y = Math.max(minVal1, Math.min(maxVal1, this.y));
              this.z = Math.max(minVal1, Math.min(maxVal1, this.z));
              return this;
          }
          clampLength(min1, max1) {
              const length1 = this.length();
              return this.divideScalar(length1 || 1).multiplyScalar(Math.max(min1, Math.min(max1, length1)));
          }
          floor() {
              this.x = Math.floor(this.x);
              this.y = Math.floor(this.y);
              this.z = Math.floor(this.z);
              return this;
          }
          ceil() {
              this.x = Math.ceil(this.x);
              this.y = Math.ceil(this.y);
              this.z = Math.ceil(this.z);
              return this;
          }
          round() {
              this.x = Math.round(this.x);
              this.y = Math.round(this.y);
              this.z = Math.round(this.z);
              return this;
          }
          roundToZero() {
              this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
              this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
              this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
              return this;
          }
          negate() {
              this.x = -this.x;
              this.y = -this.y;
              this.z = -this.z;
              return this;
          }
          dot(v4) {
              return this.x * v4.x + this.y * v4.y + this.z * v4.z;
          }
          // TODO lengthSquared?
          lengthSq() {
              return this.x * this.x + this.y * this.y + this.z * this.z;
          }
          length() {
              return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
          }
          manhattanLength() {
              return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
          }
          normalize() {
              return this.divideScalar(this.length() || 1);
          }
          setLength(length1) {
              return this.normalize().multiplyScalar(length1);
          }
          lerp(v4, alpha1) {
              this.x += (v4.x - this.x) * alpha1;
              this.y += (v4.y - this.y) * alpha1;
              this.z += (v4.z - this.z) * alpha1;
              return this;
          }
          lerpVectors(v11, v21, alpha1) {
              this.x = v11.x + (v21.x - v11.x) * alpha1;
              this.y = v11.y + (v21.y - v11.y) * alpha1;
              this.z = v11.z + (v21.z - v11.z) * alpha1;
              return this;
          }
          cross(v4, w2) {
              if (w2 !== undefined) {
                  console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.");
                  return this.crossVectors(v4, w2);
              }
              return this.crossVectors(this, v4);
          }
          crossVectors(a3, b3) {
              const ax1 = a3.x, ay1 = a3.y, az1 = a3.z;
              const bx1 = b3.x, by1 = b3.y, bz1 = b3.z;
              this.x = ay1 * bz1 - az1 * by1;
              this.y = az1 * bx1 - ax1 * bz1;
              this.z = ax1 * by1 - ay1 * bx1;
              return this;
          }
          projectOnVector(v4) {
              const denominator1 = v4.lengthSq();
              if (denominator1 === 0) return this.set(0, 0, 0);
              const scalar1 = v4.dot(this) / denominator1;
              return this.copy(v4).multiplyScalar(scalar1);
          }
          projectOnPlane(planeNormal1) {
              _vector$c.copy(this).projectOnVector(planeNormal1);
              return this.sub(_vector$c);
          }
          reflect(normal1) {
              // reflect incident vector off plane orthogonal to normal
              // normal is assumed to have unit length
              return this.sub(_vector$c.copy(normal1).multiplyScalar(2 * this.dot(normal1)));
          }
          angleTo(v4) {
              const denominator1 = Math.sqrt(this.lengthSq() * v4.lengthSq());
              if (denominator1 === 0) return Math.PI / 2;
              const theta1 = this.dot(v4) / denominator1;
              // clamp, to handle numerical problems
              return Math.acos(clamp$1(theta1, -1, 1));
          }
          distanceTo(v4) {
              return Math.sqrt(this.distanceToSquared(v4));
          }
          distanceToSquared(v4) {
              const dx1 = this.x - v4.x, dy1 = this.y - v4.y, dz1 = this.z - v4.z;
              return dx1 * dx1 + dy1 * dy1 + dz1 * dz1;
          }
          manhattanDistanceTo(v4) {
              return Math.abs(this.x - v4.x) + Math.abs(this.y - v4.y) + Math.abs(this.z - v4.z);
          }
          setFromSpherical(s10) {
              return this.setFromSphericalCoords(s10.radius, s10.phi, s10.theta);
          }
          setFromSphericalCoords(radius1, phi1, theta1) {
              const sinPhiRadius1 = Math.sin(phi1) * radius1;
              this.x = sinPhiRadius1 * Math.sin(theta1);
              this.y = Math.cos(phi1) * radius1;
              this.z = sinPhiRadius1 * Math.cos(theta1);
              return this;
          }
          setFromCylindrical(c4) {
              return this.setFromCylindricalCoords(c4.radius, c4.theta, c4.y);
          }
          setFromCylindricalCoords(radius1, theta1, y3) {
              this.x = radius1 * Math.sin(theta1);
              this.y = y3;
              this.z = radius1 * Math.cos(theta1);
              return this;
          }
          setFromMatrixPosition(m1) {
              const e1 = m1.elements;
              this.x = e1[12];
              this.y = e1[13];
              this.z = e1[14];
              return this;
          }
          setFromMatrixScale(m1) {
              const sx1 = this.setFromMatrixColumn(m1, 0).length();
              const sy1 = this.setFromMatrixColumn(m1, 1).length();
              const sz1 = this.setFromMatrixColumn(m1, 2).length();
              this.x = sx1;
              this.y = sy1;
              this.z = sz1;
              return this;
          }
          setFromMatrixColumn(m1, index3) {
              return this.fromArray(m1.elements, index3 * 4);
          }
          setFromMatrix3Column(m1, index3) {
              return this.fromArray(m1.elements, index3 * 3);
          }
          setFromEuler(e1) {
              this.x = e1._x;
              this.y = e1._y;
              this.z = e1._z;
              return this;
          }
          equals(v4) {
              return v4.x === this.x && v4.y === this.y && v4.z === this.z;
          }
          fromArray(array1, offset2 = 0) {
              this.x = array1[offset2];
              this.y = array1[offset2 + 1];
              this.z = array1[offset2 + 2];
              return this;
          }
          toArray(array1 = [], offset2 = 0) {
              array1[offset2] = this.x;
              array1[offset2 + 1] = this.y;
              array1[offset2 + 2] = this.z;
              return array1;
          }
          fromBufferAttribute(attribute3, index3, offset2) {
              if (offset2 !== undefined) console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute().");
              this.x = attribute3.getX(index3);
              this.y = attribute3.getY(index3);
              this.z = attribute3.getZ(index3);
              return this;
          }
          random() {
              this.x = Math.random();
              this.y = Math.random();
              this.z = Math.random();
              return this;
          }
          randomDirection() {
              // Derived from https://mathworld.wolfram.com/SpherePointPicking.html
              const u4 = (Math.random() - 0.5) * 2;
              const t4 = Math.random() * Math.PI * 2;
              const f1 = Math.sqrt(1 - u4 ** 2);
              this.x = f1 * Math.cos(t4);
              this.y = f1 * Math.sin(t4);
              this.z = u4;
              return this;
          }
          *[Symbol.iterator]() {
              yield this.x;
              yield this.y;
              yield this.z;
          }
      }
      Vector3.prototype.isVector3 = true;
      const _vector$c = /*@__PURE__*/ new Vector3();
      const _quaternion$4 = /*@__PURE__*/ new Quaternion();
      class Box3 {
          constructor(min1 = new Vector3(Infinity, Infinity, Infinity), max1 = new Vector3(-Infinity, -Infinity, -Infinity)){
              this.min = min1;
              this.max = max1;
          }
          set(min1, max1) {
              this.min.copy(min1);
              this.max.copy(max1);
              return this;
          }
          setFromArray(array1) {
              let minX1 = Infinity;
              let minY1 = Infinity;
              let minZ1 = Infinity;
              let maxX1 = -Infinity;
              let maxY1 = -Infinity;
              let maxZ1 = -Infinity;
              for(let i3 = 0, l1 = array1.length; i3 < l1; i3 += 3){
                  const x4 = array1[i3];
                  const y3 = array1[i3 + 1];
                  const z3 = array1[i3 + 2];
                  if (x4 < minX1) minX1 = x4;
                  if (y3 < minY1) minY1 = y3;
                  if (z3 < minZ1) minZ1 = z3;
                  if (x4 > maxX1) maxX1 = x4;
                  if (y3 > maxY1) maxY1 = y3;
                  if (z3 > maxZ1) maxZ1 = z3;
              }
              this.min.set(minX1, minY1, minZ1);
              this.max.set(maxX1, maxY1, maxZ1);
              return this;
          }
          setFromBufferAttribute(attribute3) {
              let minX1 = Infinity;
              let minY1 = Infinity;
              let minZ1 = Infinity;
              let maxX1 = -Infinity;
              let maxY1 = -Infinity;
              let maxZ1 = -Infinity;
              for(let i3 = 0, l1 = attribute3.count; i3 < l1; i3++){
                  const x4 = attribute3.getX(i3);
                  const y3 = attribute3.getY(i3);
                  const z3 = attribute3.getZ(i3);
                  if (x4 < minX1) minX1 = x4;
                  if (y3 < minY1) minY1 = y3;
                  if (z3 < minZ1) minZ1 = z3;
                  if (x4 > maxX1) maxX1 = x4;
                  if (y3 > maxY1) maxY1 = y3;
                  if (z3 > maxZ1) maxZ1 = z3;
              }
              this.min.set(minX1, minY1, minZ1);
              this.max.set(maxX1, maxY1, maxZ1);
              return this;
          }
          setFromPoints(points1) {
              this.makeEmpty();
              for(let i3 = 0, il1 = points1.length; i3 < il1; i3++)this.expandByPoint(points1[i3]);
              return this;
          }
          setFromCenterAndSize(center1, size1) {
              const halfSize1 = _vector$b.copy(size1).multiplyScalar(0.5);
              this.min.copy(center1).sub(halfSize1);
              this.max.copy(center1).add(halfSize1);
              return this;
          }
          setFromObject(object1, precise1 = false) {
              this.makeEmpty();
              return this.expandByObject(object1, precise1);
          }
          clone() {
              return new this.constructor().copy(this);
          }
          copy(box1) {
              this.min.copy(box1.min);
              this.max.copy(box1.max);
              return this;
          }
          makeEmpty() {
              this.min.x = this.min.y = this.min.z = Infinity;
              this.max.x = this.max.y = this.max.z = -Infinity;
              return this;
          }
          isEmpty() {
              // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
              return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
          }
          getCenter(target1) {
              return this.isEmpty() ? target1.set(0, 0, 0) : target1.addVectors(this.min, this.max).multiplyScalar(0.5);
          }
          getSize(target1) {
              return this.isEmpty() ? target1.set(0, 0, 0) : target1.subVectors(this.max, this.min);
          }
          expandByPoint(point1) {
              this.min.min(point1);
              this.max.max(point1);
              return this;
          }
          expandByVector(vector1) {
              this.min.sub(vector1);
              this.max.add(vector1);
              return this;
          }
          expandByScalar(scalar1) {
              this.min.addScalar(-scalar1);
              this.max.addScalar(scalar1);
              return this;
          }
          expandByObject(object1, precise1 = false) {
              // Computes the world-axis-aligned bounding box of an object (including its children),
              // accounting for both the object's, and children's, world transforms
              object1.updateWorldMatrix(false, false);
              const geometry1 = object1.geometry;
              if (geometry1 !== undefined) {
                  if (precise1 && geometry1.attributes != undefined && geometry1.attributes.position !== undefined) {
                      const position1 = geometry1.attributes.position;
                      for(let i3 = 0, l1 = position1.count; i3 < l1; i3++){
                          _vector$b.fromBufferAttribute(position1, i3).applyMatrix4(object1.matrixWorld);
                          this.expandByPoint(_vector$b);
                      }
                  } else {
                      if (geometry1.boundingBox === null) geometry1.computeBoundingBox();
                      _box$3.copy(geometry1.boundingBox);
                      _box$3.applyMatrix4(object1.matrixWorld);
                      this.union(_box$3);
                  }
              }
              const children1 = object1.children;
              for(let i3 = 0, l1 = children1.length; i3 < l1; i3++)this.expandByObject(children1[i3], precise1);
              return this;
          }
          containsPoint(point1) {
              return point1.x < this.min.x || point1.x > this.max.x || point1.y < this.min.y || point1.y > this.max.y || point1.z < this.min.z || point1.z > this.max.z ? false : true;
          }
          containsBox(box1) {
              return this.min.x <= box1.min.x && box1.max.x <= this.max.x && this.min.y <= box1.min.y && box1.max.y <= this.max.y && this.min.z <= box1.min.z && box1.max.z <= this.max.z;
          }
          getParameter(point1, target1) {
              // This can potentially have a divide by zero if the box
              // has a size dimension of 0.
              return target1.set((point1.x - this.min.x) / (this.max.x - this.min.x), (point1.y - this.min.y) / (this.max.y - this.min.y), (point1.z - this.min.z) / (this.max.z - this.min.z));
          }
          intersectsBox(box1) {
              // using 6 splitting planes to rule out intersections.
              return box1.max.x < this.min.x || box1.min.x > this.max.x || box1.max.y < this.min.y || box1.min.y > this.max.y || box1.max.z < this.min.z || box1.min.z > this.max.z ? false : true;
          }
          intersectsSphere(sphere1) {
              // Find the point on the AABB closest to the sphere center.
              this.clampPoint(sphere1.center, _vector$b);
              // If that point is inside the sphere, the AABB and sphere intersect.
              return _vector$b.distanceToSquared(sphere1.center) <= sphere1.radius * sphere1.radius;
          }
          intersectsPlane(plane1) {
              // We compute the minimum and maximum dot product values. If those values
              // are on the same side (back or front) of the plane, then there is no intersection.
              let min1, max1;
              if (plane1.normal.x > 0) {
                  min1 = plane1.normal.x * this.min.x;
                  max1 = plane1.normal.x * this.max.x;
              } else {
                  min1 = plane1.normal.x * this.max.x;
                  max1 = plane1.normal.x * this.min.x;
              }
              if (plane1.normal.y > 0) {
                  min1 += plane1.normal.y * this.min.y;
                  max1 += plane1.normal.y * this.max.y;
              } else {
                  min1 += plane1.normal.y * this.max.y;
                  max1 += plane1.normal.y * this.min.y;
              }
              if (plane1.normal.z > 0) {
                  min1 += plane1.normal.z * this.min.z;
                  max1 += plane1.normal.z * this.max.z;
              } else {
                  min1 += plane1.normal.z * this.max.z;
                  max1 += plane1.normal.z * this.min.z;
              }
              return min1 <= -plane1.constant && max1 >= -plane1.constant;
          }
          intersectsTriangle(triangle1) {
              if (this.isEmpty()) return false;
              // compute box center and extents
              this.getCenter(_center);
              _extents.subVectors(this.max, _center);
              // translate triangle to aabb origin
              _v0$2.subVectors(triangle1.a, _center);
              _v1$7.subVectors(triangle1.b, _center);
              _v2$3.subVectors(triangle1.c, _center);
              // compute edge vectors for triangle
              _f0.subVectors(_v1$7, _v0$2);
              _f1.subVectors(_v2$3, _v1$7);
              _f2.subVectors(_v0$2, _v2$3);
              // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
              // make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
              // axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
              let axes1 = [
                  0,
                  -_f0.z,
                  _f0.y,
                  0,
                  -_f1.z,
                  _f1.y,
                  0,
                  -_f2.z,
                  _f2.y,
                  _f0.z,
                  0,
                  -_f0.x,
                  _f1.z,
                  0,
                  -_f1.x,
                  _f2.z,
                  0,
                  -_f2.x,
                  -_f0.y,
                  _f0.x,
                  0,
                  -_f1.y,
                  _f1.x,
                  0,
                  -_f2.y,
                  _f2.x,
                  0
              ];
              if (!satForAxes(axes1, _v0$2, _v1$7, _v2$3, _extents)) return false;
              // test 3 face normals from the aabb
              axes1 = [
                  1,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  1
              ];
              if (!satForAxes(axes1, _v0$2, _v1$7, _v2$3, _extents)) return false;
              // finally testing the face normal of the triangle
              // use already existing triangle edge vectors here
              _triangleNormal.crossVectors(_f0, _f1);
              axes1 = [
                  _triangleNormal.x,
                  _triangleNormal.y,
                  _triangleNormal.z
              ];
              return satForAxes(axes1, _v0$2, _v1$7, _v2$3, _extents);
          }
          clampPoint(point1, target1) {
              return target1.copy(point1).clamp(this.min, this.max);
          }
          distanceToPoint(point1) {
              const clampedPoint1 = _vector$b.copy(point1).clamp(this.min, this.max);
              return clampedPoint1.sub(point1).length();
          }
          getBoundingSphere(target1) {
              this.getCenter(target1.center);
              target1.radius = this.getSize(_vector$b).length() * 0.5;
              return target1;
          }
          intersect(box1) {
              this.min.max(box1.min);
              this.max.min(box1.max);
              // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
              if (this.isEmpty()) this.makeEmpty();
              return this;
          }
          union(box1) {
              this.min.min(box1.min);
              this.max.max(box1.max);
              return this;
          }
          applyMatrix4(matrix1) {
              // transform of empty box is an empty box.
              if (this.isEmpty()) return this;
              // NOTE: I am using a binary pattern to specify all 2^3 combinations below
              _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix1); // 000
              _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix1); // 001
              _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix1); // 010
              _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix1); // 011
              _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix1); // 100
              _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix1); // 101
              _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix1); // 110
              _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix1); // 111
              this.setFromPoints(_points);
              return this;
          }
          translate(offset2) {
              this.min.add(offset2);
              this.max.add(offset2);
              return this;
          }
          equals(box1) {
              return box1.min.equals(this.min) && box1.max.equals(this.max);
          }
      }
      Box3.prototype.isBox3 = true;
      const _points = [
          /*@__PURE__*/ new Vector3(),
          /*@__PURE__*/ new Vector3(),
          /*@__PURE__*/ new Vector3(),
          /*@__PURE__*/ new Vector3(),
          /*@__PURE__*/ new Vector3(),
          /*@__PURE__*/ new Vector3(),
          /*@__PURE__*/ new Vector3(),
          /*@__PURE__*/ new Vector3()
      ];
      const _vector$b = /*@__PURE__*/ new Vector3();
      const _box$3 = /*@__PURE__*/ new Box3();
      // triangle centered vertices
      const _v0$2 = /*@__PURE__*/ new Vector3();
      const _v1$7 = /*@__PURE__*/ new Vector3();
      const _v2$3 = /*@__PURE__*/ new Vector3();
      // triangle edge vectors
      const _f0 = /*@__PURE__*/ new Vector3();
      const _f1 = /*@__PURE__*/ new Vector3();
      const _f2 = /*@__PURE__*/ new Vector3();
      const _center = /*@__PURE__*/ new Vector3();
      const _extents = /*@__PURE__*/ new Vector3();
      const _triangleNormal = /*@__PURE__*/ new Vector3();
      const _testAxis = /*@__PURE__*/ new Vector3();
      function satForAxes(axes1, v01, v11, v21, extents1) {
          for(let i3 = 0, j1 = axes1.length - 3; i3 <= j1; i3 += 3){
              _testAxis.fromArray(axes1, i3);
              // project the aabb onto the seperating axis
              const r1 = extents1.x * Math.abs(_testAxis.x) + extents1.y * Math.abs(_testAxis.y) + extents1.z * Math.abs(_testAxis.z);
              // project all 3 vertices of the triangle onto the seperating axis
              const p01 = v01.dot(_testAxis);
              const p11 = v11.dot(_testAxis);
              const p21 = v21.dot(_testAxis);
              // actual test, basically see if either of the most extreme of the triangle points intersects r
              if (Math.max(-Math.max(p01, p11, p21), Math.min(p01, p11, p21)) > r1) // points of the projected triangle are outside the projected half-length of the aabb
              // the axis is seperating and we can exit
              return false;
          }
          return true;
      }
      const _box$2 = /*@__PURE__*/ new Box3();
      const _v1$6 = /*@__PURE__*/ new Vector3();
      const _toFarthestPoint = /*@__PURE__*/ new Vector3();
      const _toPoint = /*@__PURE__*/ new Vector3();
      class Sphere {
          constructor(center1 = new Vector3(), radius1 = -1){
              this.center = center1;
              this.radius = radius1;
          }
          set(center1, radius1) {
              this.center.copy(center1);
              this.radius = radius1;
              return this;
          }
          setFromPoints(points1, optionalCenter1) {
              const center1 = this.center;
              if (optionalCenter1 !== undefined) center1.copy(optionalCenter1);
              else _box$2.setFromPoints(points1).getCenter(center1);
              let maxRadiusSq1 = 0;
              for(let i3 = 0, il1 = points1.length; i3 < il1; i3++)maxRadiusSq1 = Math.max(maxRadiusSq1, center1.distanceToSquared(points1[i3]));
              this.radius = Math.sqrt(maxRadiusSq1);
              return this;
          }
          copy(sphere1) {
              this.center.copy(sphere1.center);
              this.radius = sphere1.radius;
              return this;
          }
          isEmpty() {
              return this.radius < 0;
          }
          makeEmpty() {
              this.center.set(0, 0, 0);
              this.radius = -1;
              return this;
          }
          containsPoint(point1) {
              return point1.distanceToSquared(this.center) <= this.radius * this.radius;
          }
          distanceToPoint(point1) {
              return point1.distanceTo(this.center) - this.radius;
          }
          intersectsSphere(sphere1) {
              const radiusSum1 = this.radius + sphere1.radius;
              return sphere1.center.distanceToSquared(this.center) <= radiusSum1 * radiusSum1;
          }
          intersectsBox(box1) {
              return box1.intersectsSphere(this);
          }
          intersectsPlane(plane1) {
              return Math.abs(plane1.distanceToPoint(this.center)) <= this.radius;
          }
          clampPoint(point1, target1) {
              const deltaLengthSq1 = this.center.distanceToSquared(point1);
              target1.copy(point1);
              if (deltaLengthSq1 > this.radius * this.radius) {
                  target1.sub(this.center).normalize();
                  target1.multiplyScalar(this.radius).add(this.center);
              }
              return target1;
          }
          getBoundingBox(target1) {
              if (this.isEmpty()) {
                  // Empty sphere produces empty bounding box
                  target1.makeEmpty();
                  return target1;
              }
              target1.set(this.center, this.center);
              target1.expandByScalar(this.radius);
              return target1;
          }
          applyMatrix4(matrix1) {
              this.center.applyMatrix4(matrix1);
              this.radius = this.radius * matrix1.getMaxScaleOnAxis();
              return this;
          }
          translate(offset2) {
              this.center.add(offset2);
              return this;
          }
          expandByPoint(point1) {
              // from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671
              _toPoint.subVectors(point1, this.center);
              const lengthSq1 = _toPoint.lengthSq();
              if (lengthSq1 > this.radius * this.radius) {
                  const length1 = Math.sqrt(lengthSq1);
                  const missingRadiusHalf1 = (length1 - this.radius) * 0.5;
                  // Nudge this sphere towards the target point. Add half the missing distance to radius,
                  // and the other half to position. This gives a tighter enclosure, instead of if
                  // the whole missing distance were just added to radius.
                  this.center.add(_toPoint.multiplyScalar(missingRadiusHalf1 / length1));
                  this.radius += missingRadiusHalf1;
              }
              return this;
          }
          union(sphere1) {
              // from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769
              // To enclose another sphere into this sphere, we only need to enclose two points:
              // 1) Enclose the farthest point on the other sphere into this sphere.
              // 2) Enclose the opposite point of the farthest point into this sphere.
              if (this.center.equals(sphere1.center) === true) _toFarthestPoint.set(0, 0, 1).multiplyScalar(sphere1.radius);
              else _toFarthestPoint.subVectors(sphere1.center, this.center).normalize().multiplyScalar(sphere1.radius);
              this.expandByPoint(_v1$6.copy(sphere1.center).add(_toFarthestPoint));
              this.expandByPoint(_v1$6.copy(sphere1.center).sub(_toFarthestPoint));
              return this;
          }
          equals(sphere1) {
              return sphere1.center.equals(this.center) && sphere1.radius === this.radius;
          }
          clone() {
              return new this.constructor().copy(this);
          }
      }
      const _vector$a = /*@__PURE__*/ new Vector3();
      const _segCenter = /*@__PURE__*/ new Vector3();
      const _segDir = /*@__PURE__*/ new Vector3();
      const _diff = /*@__PURE__*/ new Vector3();
      const _edge1 = /*@__PURE__*/ new Vector3();
      const _edge2 = /*@__PURE__*/ new Vector3();
      const _normal$1 = /*@__PURE__*/ new Vector3();
      class Ray {
          constructor(origin1 = new Vector3(), direction1 = new Vector3(0, 0, -1)){
              this.origin = origin1;
              this.direction = direction1;
          }
          set(origin1, direction1) {
              this.origin.copy(origin1);
              this.direction.copy(direction1);
              return this;
          }
          copy(ray1) {
              this.origin.copy(ray1.origin);
              this.direction.copy(ray1.direction);
              return this;
          }
          at(t4, target1) {
              return target1.copy(this.direction).multiplyScalar(t4).add(this.origin);
          }
          lookAt(v4) {
              this.direction.copy(v4).sub(this.origin).normalize();
              return this;
          }
          recast(t4) {
              this.origin.copy(this.at(t4, _vector$a));
              return this;
          }
          closestPointToPoint(point1, target1) {
              target1.subVectors(point1, this.origin);
              const directionDistance1 = target1.dot(this.direction);
              if (directionDistance1 < 0) return target1.copy(this.origin);
              return target1.copy(this.direction).multiplyScalar(directionDistance1).add(this.origin);
          }
          distanceToPoint(point1) {
              return Math.sqrt(this.distanceSqToPoint(point1));
          }
          distanceSqToPoint(point1) {
              const directionDistance1 = _vector$a.subVectors(point1, this.origin).dot(this.direction);
              // point behind the ray
              if (directionDistance1 < 0) return this.origin.distanceToSquared(point1);
              _vector$a.copy(this.direction).multiplyScalar(directionDistance1).add(this.origin);
              return _vector$a.distanceToSquared(point1);
          }
          distanceSqToSegment(v01, v11, optionalPointOnRay1, optionalPointOnSegment1) {
              // from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h
              // It returns the min distance between the ray and the segment
              // defined by v0 and v1
              // It can also set two optional targets :
              // - The closest point on the ray
              // - The closest point on the segment
              _segCenter.copy(v01).add(v11).multiplyScalar(0.5);
              _segDir.copy(v11).sub(v01).normalize();
              _diff.copy(this.origin).sub(_segCenter);
              const segExtent1 = v01.distanceTo(v11) * 0.5;
              const a011 = -this.direction.dot(_segDir);
              const b01 = _diff.dot(this.direction);
              const b15 = -_diff.dot(_segDir);
              const c4 = _diff.lengthSq();
              const det1 = Math.abs(1 - a011 * a011);
              let s01, s11, sqrDist1, extDet1;
              if (det1 > 0) {
                  // The ray and segment are not parallel.
                  s01 = a011 * b15 - b01;
                  s11 = a011 * b01 - b15;
                  extDet1 = segExtent1 * det1;
                  if (s01 >= 0) {
                      if (s11 >= -extDet1) {
                          if (s11 <= extDet1) {
                              // region 0
                              // Minimum at interior points of ray and segment.
                              const invDet1 = 1 / det1;
                              s01 *= invDet1;
                              s11 *= invDet1;
                              sqrDist1 = s01 * (s01 + a011 * s11 + 2 * b01) + s11 * (a011 * s01 + s11 + 2 * b15) + c4;
                          } else {
                              // region 1
                              s11 = segExtent1;
                              s01 = Math.max(0, -(a011 * s11 + b01));
                              sqrDist1 = -s01 * s01 + s11 * (s11 + 2 * b15) + c4;
                          }
                      } else {
                          // region 5
                          s11 = -segExtent1;
                          s01 = Math.max(0, -(a011 * s11 + b01));
                          sqrDist1 = -s01 * s01 + s11 * (s11 + 2 * b15) + c4;
                      }
                  } else {
                      if (s11 <= -extDet1) {
                          // region 4
                          s01 = Math.max(0, -(-a011 * segExtent1 + b01));
                          s11 = s01 > 0 ? -segExtent1 : Math.min(Math.max(-segExtent1, -b15), segExtent1);
                          sqrDist1 = -s01 * s01 + s11 * (s11 + 2 * b15) + c4;
                      } else if (s11 <= extDet1) {
                          // region 3
                          s01 = 0;
                          s11 = Math.min(Math.max(-segExtent1, -b15), segExtent1);
                          sqrDist1 = s11 * (s11 + 2 * b15) + c4;
                      } else {
                          // region 2
                          s01 = Math.max(0, -(a011 * segExtent1 + b01));
                          s11 = s01 > 0 ? segExtent1 : Math.min(Math.max(-segExtent1, -b15), segExtent1);
                          sqrDist1 = -s01 * s01 + s11 * (s11 + 2 * b15) + c4;
                      }
                  }
              } else {
                  // Ray and segment are parallel.
                  s11 = a011 > 0 ? -segExtent1 : segExtent1;
                  s01 = Math.max(0, -(a011 * s11 + b01));
                  sqrDist1 = -s01 * s01 + s11 * (s11 + 2 * b15) + c4;
              }
              if (optionalPointOnRay1) optionalPointOnRay1.copy(this.direction).multiplyScalar(s01).add(this.origin);
              if (optionalPointOnSegment1) optionalPointOnSegment1.copy(_segDir).multiplyScalar(s11).add(_segCenter);
              return sqrDist1;
          }
          intersectSphere(sphere1, target1) {
              _vector$a.subVectors(sphere1.center, this.origin);
              const tca1 = _vector$a.dot(this.direction);
              const d21 = _vector$a.dot(_vector$a) - tca1 * tca1;
              const radius21 = sphere1.radius * sphere1.radius;
              if (d21 > radius21) return null;
              const thc1 = Math.sqrt(radius21 - d21);
              // t0 = first intersect point - entrance on front of sphere
              const t01 = tca1 - thc1;
              // t1 = second intersect point - exit point on back of sphere
              const t15 = tca1 + thc1;
              // test to see if both t0 and t1 are behind the ray - if so, return null
              if (t01 < 0 && t15 < 0) return null;
              // test to see if t0 is behind the ray:
              // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
              // in order to always return an intersect point that is in front of the ray.
              if (t01 < 0) return this.at(t15, target1);
              // else t0 is in front of the ray, so return the first collision point scaled by t0
              return this.at(t01, target1);
          }
          intersectsSphere(sphere1) {
              return this.distanceSqToPoint(sphere1.center) <= sphere1.radius * sphere1.radius;
          }
          distanceToPlane(plane1) {
              const denominator1 = plane1.normal.dot(this.direction);
              if (denominator1 === 0) {
                  // line is coplanar, return origin
                  if (plane1.distanceToPoint(this.origin) === 0) return 0;
                  // Null is preferable to undefined since undefined means.... it is undefined
                  return null;
              }
              const t4 = -(this.origin.dot(plane1.normal) + plane1.constant) / denominator1;
              // Return if the ray never intersects the plane
              return t4 >= 0 ? t4 : null;
          }
          intersectPlane(plane1, target1) {
              const t4 = this.distanceToPlane(plane1);
              if (t4 === null) return null;
              return this.at(t4, target1);
          }
          intersectsPlane(plane1) {
              // check if the ray lies on the plane first
              const distToPoint1 = plane1.distanceToPoint(this.origin);
              if (distToPoint1 === 0) return true;
              const denominator1 = plane1.normal.dot(this.direction);
              if (denominator1 * distToPoint1 < 0) return true;
              // ray origin is behind the plane (and is pointing behind it)
              return false;
          }
          intersectBox(box1, target1) {
              let tmin1, tmax1, tymin1, tymax1, tzmin1, tzmax1;
              const invdirx1 = 1 / this.direction.x, invdiry1 = 1 / this.direction.y, invdirz1 = 1 / this.direction.z;
              const origin1 = this.origin;
              if (invdirx1 >= 0) {
                  tmin1 = (box1.min.x - origin1.x) * invdirx1;
                  tmax1 = (box1.max.x - origin1.x) * invdirx1;
              } else {
                  tmin1 = (box1.max.x - origin1.x) * invdirx1;
                  tmax1 = (box1.min.x - origin1.x) * invdirx1;
              }
              if (invdiry1 >= 0) {
                  tymin1 = (box1.min.y - origin1.y) * invdiry1;
                  tymax1 = (box1.max.y - origin1.y) * invdiry1;
              } else {
                  tymin1 = (box1.max.y - origin1.y) * invdiry1;
                  tymax1 = (box1.min.y - origin1.y) * invdiry1;
              }
              if (tmin1 > tymax1 || tymin1 > tmax1) return null;
              // These lines also handle the case where tmin or tmax is NaN
              // (result of 0 * Infinity). x !== x returns true if x is NaN
              if (tymin1 > tmin1 || tmin1 !== tmin1) tmin1 = tymin1;
              if (tymax1 < tmax1 || tmax1 !== tmax1) tmax1 = tymax1;
              if (invdirz1 >= 0) {
                  tzmin1 = (box1.min.z - origin1.z) * invdirz1;
                  tzmax1 = (box1.max.z - origin1.z) * invdirz1;
              } else {
                  tzmin1 = (box1.max.z - origin1.z) * invdirz1;
                  tzmax1 = (box1.min.z - origin1.z) * invdirz1;
              }
              if (tmin1 > tzmax1 || tzmin1 > tmax1) return null;
              if (tzmin1 > tmin1 || tmin1 !== tmin1) tmin1 = tzmin1;
              if (tzmax1 < tmax1 || tmax1 !== tmax1) tmax1 = tzmax1;
              //return point closest to the ray (positive side)
              if (tmax1 < 0) return null;
              return this.at(tmin1 >= 0 ? tmin1 : tmax1, target1);
          }
          intersectsBox(box1) {
              return this.intersectBox(box1, _vector$a) !== null;
          }
          intersectTriangle(a3, b3, c4, backfaceCulling1, target1) {
              // Compute the offset origin, edges, and normal.
              // from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h
              _edge1.subVectors(b3, a3);
              _edge2.subVectors(c4, a3);
              _normal$1.crossVectors(_edge1, _edge2);
              // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
              // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
              //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
              //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
              //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
              let DdN1 = this.direction.dot(_normal$1);
              let sign1;
              if (DdN1 > 0) {
                  if (backfaceCulling1) return null;
                  sign1 = 1;
              } else if (DdN1 < 0) {
                  sign1 = -1;
                  DdN1 = -DdN1;
              } else return null;
              _diff.subVectors(this.origin, a3);
              const DdQxE21 = sign1 * this.direction.dot(_edge2.crossVectors(_diff, _edge2));
              // b1 < 0, no intersection
              if (DdQxE21 < 0) return null;
              const DdE1xQ1 = sign1 * this.direction.dot(_edge1.cross(_diff));
              // b2 < 0, no intersection
              if (DdE1xQ1 < 0) return null;
              // b1+b2 > 1, no intersection
              if (DdQxE21 + DdE1xQ1 > DdN1) return null;
              // Line intersects triangle, check if ray does.
              const QdN1 = -sign1 * _diff.dot(_normal$1);
              // t < 0, no intersection
              if (QdN1 < 0) return null;
              // Ray intersects triangle.
              return this.at(QdN1 / DdN1, target1);
          }
          applyMatrix4(matrix41) {
              this.origin.applyMatrix4(matrix41);
              this.direction.transformDirection(matrix41);
              return this;
          }
          equals(ray1) {
              return ray1.origin.equals(this.origin) && ray1.direction.equals(this.direction);
          }
          clone() {
              return new this.constructor().copy(this);
          }
      }
      class Matrix4 {
          constructor(){
              this.elements = [
                  1,
                  0,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  1
              ];
              if (arguments.length > 0) console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.");
          }
          set(n111, n121, n131, n141, n211, n221, n231, n241, n311, n321, n331, n341, n411, n421, n431, n441) {
              const te1 = this.elements;
              te1[0] = n111;
              te1[4] = n121;
              te1[8] = n131;
              te1[12] = n141;
              te1[1] = n211;
              te1[5] = n221;
              te1[9] = n231;
              te1[13] = n241;
              te1[2] = n311;
              te1[6] = n321;
              te1[10] = n331;
              te1[14] = n341;
              te1[3] = n411;
              te1[7] = n421;
              te1[11] = n431;
              te1[15] = n441;
              return this;
          }
          identity() {
              this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
              return this;
          }
          clone() {
              return new Matrix4().fromArray(this.elements);
          }
          copy(m1) {
              const te1 = this.elements;
              const me16 = m1.elements;
              te1[0] = me16[0];
              te1[1] = me16[1];
              te1[2] = me16[2];
              te1[3] = me16[3];
              te1[4] = me16[4];
              te1[5] = me16[5];
              te1[6] = me16[6];
              te1[7] = me16[7];
              te1[8] = me16[8];
              te1[9] = me16[9];
              te1[10] = me16[10];
              te1[11] = me16[11];
              te1[12] = me16[12];
              te1[13] = me16[13];
              te1[14] = me16[14];
              te1[15] = me16[15];
              return this;
          }
          copyPosition(m1) {
              const te1 = this.elements, me16 = m1.elements;
              te1[12] = me16[12];
              te1[13] = me16[13];
              te1[14] = me16[14];
              return this;
          }
          setFromMatrix3(m1) {
              const me16 = m1.elements;
              this.set(me16[0], me16[3], me16[6], 0, me16[1], me16[4], me16[7], 0, me16[2], me16[5], me16[8], 0, 0, 0, 0, 1);
              return this;
          }
          extractBasis(xAxis1, yAxis1, zAxis1) {
              xAxis1.setFromMatrixColumn(this, 0);
              yAxis1.setFromMatrixColumn(this, 1);
              zAxis1.setFromMatrixColumn(this, 2);
              return this;
          }
          makeBasis(xAxis1, yAxis1, zAxis1) {
              this.set(xAxis1.x, yAxis1.x, zAxis1.x, 0, xAxis1.y, yAxis1.y, zAxis1.y, 0, xAxis1.z, yAxis1.z, zAxis1.z, 0, 0, 0, 0, 1);
              return this;
          }
          extractRotation(m1) {
              // this method does not support reflection matrices
              const te1 = this.elements;
              const me16 = m1.elements;
              const scaleX1 = 1 / _v1$5.setFromMatrixColumn(m1, 0).length();
              const scaleY1 = 1 / _v1$5.setFromMatrixColumn(m1, 1).length();
              const scaleZ1 = 1 / _v1$5.setFromMatrixColumn(m1, 2).length();
              te1[0] = me16[0] * scaleX1;
              te1[1] = me16[1] * scaleX1;
              te1[2] = me16[2] * scaleX1;
              te1[3] = 0;
              te1[4] = me16[4] * scaleY1;
              te1[5] = me16[5] * scaleY1;
              te1[6] = me16[6] * scaleY1;
              te1[7] = 0;
              te1[8] = me16[8] * scaleZ1;
              te1[9] = me16[9] * scaleZ1;
              te1[10] = me16[10] * scaleZ1;
              te1[11] = 0;
              te1[12] = 0;
              te1[13] = 0;
              te1[14] = 0;
              te1[15] = 1;
              return this;
          }
          makeRotationFromEuler(euler1) {
              if (!(euler1 && euler1.isEuler)) console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
              const te1 = this.elements;
              const x4 = euler1.x, y3 = euler1.y, z3 = euler1.z;
              const a3 = Math.cos(x4), b3 = Math.sin(x4);
              const c4 = Math.cos(y3), d7 = Math.sin(y3);
              const e1 = Math.cos(z3), f1 = Math.sin(z3);
              if (euler1.order === "XYZ") {
                  const ae1 = a3 * e1, af1 = a3 * f1, be1 = b3 * e1, bf1 = b3 * f1;
                  te1[0] = c4 * e1;
                  te1[4] = -c4 * f1;
                  te1[8] = d7;
                  te1[1] = af1 + be1 * d7;
                  te1[5] = ae1 - bf1 * d7;
                  te1[9] = -b3 * c4;
                  te1[2] = bf1 - ae1 * d7;
                  te1[6] = be1 + af1 * d7;
                  te1[10] = a3 * c4;
              } else if (euler1.order === "YXZ") {
                  const ce1 = c4 * e1, cf1 = c4 * f1, de1 = d7 * e1, df1 = d7 * f1;
                  te1[0] = ce1 + df1 * b3;
                  te1[4] = de1 * b3 - cf1;
                  te1[8] = a3 * d7;
                  te1[1] = a3 * f1;
                  te1[5] = a3 * e1;
                  te1[9] = -b3;
                  te1[2] = cf1 * b3 - de1;
                  te1[6] = df1 + ce1 * b3;
                  te1[10] = a3 * c4;
              } else if (euler1.order === "ZXY") {
                  const ce1 = c4 * e1, cf1 = c4 * f1, de1 = d7 * e1, df1 = d7 * f1;
                  te1[0] = ce1 - df1 * b3;
                  te1[4] = -a3 * f1;
                  te1[8] = de1 + cf1 * b3;
                  te1[1] = cf1 + de1 * b3;
                  te1[5] = a3 * e1;
                  te1[9] = df1 - ce1 * b3;
                  te1[2] = -a3 * d7;
                  te1[6] = b3;
                  te1[10] = a3 * c4;
              } else if (euler1.order === "ZYX") {
                  const ae1 = a3 * e1, af1 = a3 * f1, be1 = b3 * e1, bf1 = b3 * f1;
                  te1[0] = c4 * e1;
                  te1[4] = be1 * d7 - af1;
                  te1[8] = ae1 * d7 + bf1;
                  te1[1] = c4 * f1;
                  te1[5] = bf1 * d7 + ae1;
                  te1[9] = af1 * d7 - be1;
                  te1[2] = -d7;
                  te1[6] = b3 * c4;
                  te1[10] = a3 * c4;
              } else if (euler1.order === "YZX") {
                  const ac1 = a3 * c4, ad1 = a3 * d7, bc1 = b3 * c4, bd1 = b3 * d7;
                  te1[0] = c4 * e1;
                  te1[4] = bd1 - ac1 * f1;
                  te1[8] = bc1 * f1 + ad1;
                  te1[1] = f1;
                  te1[5] = a3 * e1;
                  te1[9] = -b3 * e1;
                  te1[2] = -d7 * e1;
                  te1[6] = ad1 * f1 + bc1;
                  te1[10] = ac1 - bd1 * f1;
              } else if (euler1.order === "XZY") {
                  const ac1 = a3 * c4, ad1 = a3 * d7, bc1 = b3 * c4, bd1 = b3 * d7;
                  te1[0] = c4 * e1;
                  te1[4] = -f1;
                  te1[8] = d7 * e1;
                  te1[1] = ac1 * f1 + bd1;
                  te1[5] = a3 * e1;
                  te1[9] = ad1 * f1 - bc1;
                  te1[2] = bc1 * f1 - ad1;
                  te1[6] = b3 * e1;
                  te1[10] = bd1 * f1 + ac1;
              }
              // bottom row
              te1[3] = 0;
              te1[7] = 0;
              te1[11] = 0;
              // last column
              te1[12] = 0;
              te1[13] = 0;
              te1[14] = 0;
              te1[15] = 1;
              return this;
          }
          makeRotationFromQuaternion(q3) {
              return this.compose(_zero, q3, _one);
          }
          lookAt(eye1, target1, up1) {
              const te1 = this.elements;
              _z.subVectors(eye1, target1);
              if (_z.lengthSq() === 0) // eye and target are in the same position
              _z.z = 1;
              _z.normalize();
              _x.crossVectors(up1, _z);
              if (_x.lengthSq() === 0) {
                  // up and z are parallel
                  if (Math.abs(up1.z) === 1) _z.x += 0.0001;
                  else _z.z += 0.0001;
                  _z.normalize();
                  _x.crossVectors(up1, _z);
              }
              _x.normalize();
              _y.crossVectors(_z, _x);
              te1[0] = _x.x;
              te1[4] = _y.x;
              te1[8] = _z.x;
              te1[1] = _x.y;
              te1[5] = _y.y;
              te1[9] = _z.y;
              te1[2] = _x.z;
              te1[6] = _y.z;
              te1[10] = _z.z;
              return this;
          }
          multiply(m1, n3) {
              if (n3 !== undefined) {
                  console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.");
                  return this.multiplyMatrices(m1, n3);
              }
              return this.multiplyMatrices(this, m1);
          }
          premultiply(m1) {
              return this.multiplyMatrices(m1, this);
          }
          multiplyMatrices(a3, b3) {
              const ae1 = a3.elements;
              const be1 = b3.elements;
              const te1 = this.elements;
              const a111 = ae1[0], a121 = ae1[4], a131 = ae1[8], a141 = ae1[12];
              const a211 = ae1[1], a221 = ae1[5], a231 = ae1[9], a241 = ae1[13];
              const a311 = ae1[2], a321 = ae1[6], a331 = ae1[10], a341 = ae1[14];
              const a411 = ae1[3], a421 = ae1[7], a431 = ae1[11], a441 = ae1[15];
              const b111 = be1[0], b121 = be1[4], b131 = be1[8], b141 = be1[12];
              const b211 = be1[1], b221 = be1[5], b231 = be1[9], b241 = be1[13];
              const b311 = be1[2], b321 = be1[6], b331 = be1[10], b341 = be1[14];
              const b411 = be1[3], b421 = be1[7], b431 = be1[11], b441 = be1[15];
              te1[0] = a111 * b111 + a121 * b211 + a131 * b311 + a141 * b411;
              te1[4] = a111 * b121 + a121 * b221 + a131 * b321 + a141 * b421;
              te1[8] = a111 * b131 + a121 * b231 + a131 * b331 + a141 * b431;
              te1[12] = a111 * b141 + a121 * b241 + a131 * b341 + a141 * b441;
              te1[1] = a211 * b111 + a221 * b211 + a231 * b311 + a241 * b411;
              te1[5] = a211 * b121 + a221 * b221 + a231 * b321 + a241 * b421;
              te1[9] = a211 * b131 + a221 * b231 + a231 * b331 + a241 * b431;
              te1[13] = a211 * b141 + a221 * b241 + a231 * b341 + a241 * b441;
              te1[2] = a311 * b111 + a321 * b211 + a331 * b311 + a341 * b411;
              te1[6] = a311 * b121 + a321 * b221 + a331 * b321 + a341 * b421;
              te1[10] = a311 * b131 + a321 * b231 + a331 * b331 + a341 * b431;
              te1[14] = a311 * b141 + a321 * b241 + a331 * b341 + a341 * b441;
              te1[3] = a411 * b111 + a421 * b211 + a431 * b311 + a441 * b411;
              te1[7] = a411 * b121 + a421 * b221 + a431 * b321 + a441 * b421;
              te1[11] = a411 * b131 + a421 * b231 + a431 * b331 + a441 * b431;
              te1[15] = a411 * b141 + a421 * b241 + a431 * b341 + a441 * b441;
              return this;
          }
          multiplyScalar(s10) {
              const te1 = this.elements;
              te1[0] *= s10;
              te1[4] *= s10;
              te1[8] *= s10;
              te1[12] *= s10;
              te1[1] *= s10;
              te1[5] *= s10;
              te1[9] *= s10;
              te1[13] *= s10;
              te1[2] *= s10;
              te1[6] *= s10;
              te1[10] *= s10;
              te1[14] *= s10;
              te1[3] *= s10;
              te1[7] *= s10;
              te1[11] *= s10;
              te1[15] *= s10;
              return this;
          }
          determinant() {
              const te1 = this.elements;
              const n111 = te1[0], n121 = te1[4], n131 = te1[8], n141 = te1[12];
              const n211 = te1[1], n221 = te1[5], n231 = te1[9], n241 = te1[13];
              const n311 = te1[2], n321 = te1[6], n331 = te1[10], n341 = te1[14];
              const n411 = te1[3], n421 = te1[7], n431 = te1[11], n441 = te1[15];
              //TODO: make this more efficient
              //( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )
              return n411 * (+n141 * n231 * n321 - n131 * n241 * n321 - n141 * n221 * n331 + n121 * n241 * n331 + n131 * n221 * n341 - n121 * n231 * n341) + n421 * (+n111 * n231 * n341 - n111 * n241 * n331 + n141 * n211 * n331 - n131 * n211 * n341 + n131 * n241 * n311 - n141 * n231 * n311) + n431 * (+n111 * n241 * n321 - n111 * n221 * n341 - n141 * n211 * n321 + n121 * n211 * n341 + n141 * n221 * n311 - n121 * n241 * n311) + n441 * (-n131 * n221 * n311 - n111 * n231 * n321 + n111 * n221 * n331 + n131 * n211 * n321 - n121 * n211 * n331 + n121 * n231 * n311);
          }
          transpose() {
              const te1 = this.elements;
              let tmp1;
              tmp1 = te1[1];
              te1[1] = te1[4];
              te1[4] = tmp1;
              tmp1 = te1[2];
              te1[2] = te1[8];
              te1[8] = tmp1;
              tmp1 = te1[6];
              te1[6] = te1[9];
              te1[9] = tmp1;
              tmp1 = te1[3];
              te1[3] = te1[12];
              te1[12] = tmp1;
              tmp1 = te1[7];
              te1[7] = te1[13];
              te1[13] = tmp1;
              tmp1 = te1[11];
              te1[11] = te1[14];
              te1[14] = tmp1;
              return this;
          }
          setPosition(x4, y3, z3) {
              const te1 = this.elements;
              if (x4.isVector3) {
                  te1[12] = x4.x;
                  te1[13] = x4.y;
                  te1[14] = x4.z;
              } else {
                  te1[12] = x4;
                  te1[13] = y3;
                  te1[14] = z3;
              }
              return this;
          }
          invert() {
              // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
              const te1 = this.elements, n111 = te1[0], n211 = te1[1], n311 = te1[2], n411 = te1[3], n121 = te1[4], n221 = te1[5], n321 = te1[6], n421 = te1[7], n131 = te1[8], n231 = te1[9], n331 = te1[10], n431 = te1[11], n141 = te1[12], n241 = te1[13], n341 = te1[14], n441 = te1[15], t111 = n231 * n341 * n421 - n241 * n331 * n421 + n241 * n321 * n431 - n221 * n341 * n431 - n231 * n321 * n441 + n221 * n331 * n441, t121 = n141 * n331 * n421 - n131 * n341 * n421 - n141 * n321 * n431 + n121 * n341 * n431 + n131 * n321 * n441 - n121 * n331 * n441, t131 = n131 * n241 * n421 - n141 * n231 * n421 + n141 * n221 * n431 - n121 * n241 * n431 - n131 * n221 * n441 + n121 * n231 * n441, t141 = n141 * n231 * n321 - n131 * n241 * n321 - n141 * n221 * n331 + n121 * n241 * n331 + n131 * n221 * n341 - n121 * n231 * n341;
              const det1 = n111 * t111 + n211 * t121 + n311 * t131 + n411 * t141;
              if (det1 === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
              const detInv1 = 1 / det1;
              te1[0] = t111 * detInv1;
              te1[1] = (n241 * n331 * n411 - n231 * n341 * n411 - n241 * n311 * n431 + n211 * n341 * n431 + n231 * n311 * n441 - n211 * n331 * n441) * detInv1;
              te1[2] = (n221 * n341 * n411 - n241 * n321 * n411 + n241 * n311 * n421 - n211 * n341 * n421 - n221 * n311 * n441 + n211 * n321 * n441) * detInv1;
              te1[3] = (n231 * n321 * n411 - n221 * n331 * n411 - n231 * n311 * n421 + n211 * n331 * n421 + n221 * n311 * n431 - n211 * n321 * n431) * detInv1;
              te1[4] = t121 * detInv1;
              te1[5] = (n131 * n341 * n411 - n141 * n331 * n411 + n141 * n311 * n431 - n111 * n341 * n431 - n131 * n311 * n441 + n111 * n331 * n441) * detInv1;
              te1[6] = (n141 * n321 * n411 - n121 * n341 * n411 - n141 * n311 * n421 + n111 * n341 * n421 + n121 * n311 * n441 - n111 * n321 * n441) * detInv1;
              te1[7] = (n121 * n331 * n411 - n131 * n321 * n411 + n131 * n311 * n421 - n111 * n331 * n421 - n121 * n311 * n431 + n111 * n321 * n431) * detInv1;
              te1[8] = t131 * detInv1;
              te1[9] = (n141 * n231 * n411 - n131 * n241 * n411 - n141 * n211 * n431 + n111 * n241 * n431 + n131 * n211 * n441 - n111 * n231 * n441) * detInv1;
              te1[10] = (n121 * n241 * n411 - n141 * n221 * n411 + n141 * n211 * n421 - n111 * n241 * n421 - n121 * n211 * n441 + n111 * n221 * n441) * detInv1;
              te1[11] = (n131 * n221 * n411 - n121 * n231 * n411 - n131 * n211 * n421 + n111 * n231 * n421 + n121 * n211 * n431 - n111 * n221 * n431) * detInv1;
              te1[12] = t141 * detInv1;
              te1[13] = (n131 * n241 * n311 - n141 * n231 * n311 + n141 * n211 * n331 - n111 * n241 * n331 - n131 * n211 * n341 + n111 * n231 * n341) * detInv1;
              te1[14] = (n141 * n221 * n311 - n121 * n241 * n311 - n141 * n211 * n321 + n111 * n241 * n321 + n121 * n211 * n341 - n111 * n221 * n341) * detInv1;
              te1[15] = (n121 * n231 * n311 - n131 * n221 * n311 + n131 * n211 * n321 - n111 * n231 * n321 - n121 * n211 * n331 + n111 * n221 * n331) * detInv1;
              return this;
          }
          scale(v4) {
              const te1 = this.elements;
              const x4 = v4.x, y3 = v4.y, z3 = v4.z;
              te1[0] *= x4;
              te1[4] *= y3;
              te1[8] *= z3;
              te1[1] *= x4;
              te1[5] *= y3;
              te1[9] *= z3;
              te1[2] *= x4;
              te1[6] *= y3;
              te1[10] *= z3;
              te1[3] *= x4;
              te1[7] *= y3;
              te1[11] *= z3;
              return this;
          }
          getMaxScaleOnAxis() {
              const te1 = this.elements;
              const scaleXSq1 = te1[0] * te1[0] + te1[1] * te1[1] + te1[2] * te1[2];
              const scaleYSq1 = te1[4] * te1[4] + te1[5] * te1[5] + te1[6] * te1[6];
              const scaleZSq1 = te1[8] * te1[8] + te1[9] * te1[9] + te1[10] * te1[10];
              return Math.sqrt(Math.max(scaleXSq1, scaleYSq1, scaleZSq1));
          }
          makeTranslation(x4, y3, z3) {
              this.set(1, 0, 0, x4, 0, 1, 0, y3, 0, 0, 1, z3, 0, 0, 0, 1);
              return this;
          }
          makeRotationX(theta1) {
              const c4 = Math.cos(theta1), s10 = Math.sin(theta1);
              this.set(1, 0, 0, 0, 0, c4, -s10, 0, 0, s10, c4, 0, 0, 0, 0, 1);
              return this;
          }
          makeRotationY(theta1) {
              const c4 = Math.cos(theta1), s10 = Math.sin(theta1);
              this.set(c4, 0, s10, 0, 0, 1, 0, 0, -s10, 0, c4, 0, 0, 0, 0, 1);
              return this;
          }
          makeRotationZ(theta1) {
              const c4 = Math.cos(theta1), s10 = Math.sin(theta1);
              this.set(c4, -s10, 0, 0, s10, c4, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
              return this;
          }
          makeRotationAxis(axis1, angle1) {
              // Based on http://www.gamedev.net/reference/articles/article1199.asp
              const c4 = Math.cos(angle1);
              const s10 = Math.sin(angle1);
              const t4 = 1 - c4;
              const x4 = axis1.x, y3 = axis1.y, z3 = axis1.z;
              const tx1 = t4 * x4, ty1 = t4 * y3;
              this.set(tx1 * x4 + c4, tx1 * y3 - s10 * z3, tx1 * z3 + s10 * y3, 0, tx1 * y3 + s10 * z3, ty1 * y3 + c4, ty1 * z3 - s10 * x4, 0, tx1 * z3 - s10 * y3, ty1 * z3 + s10 * x4, t4 * z3 * z3 + c4, 0, 0, 0, 0, 1);
              return this;
          }
          makeScale(x4, y3, z3) {
              this.set(x4, 0, 0, 0, 0, y3, 0, 0, 0, 0, z3, 0, 0, 0, 0, 1);
              return this;
          }
          makeShear(xy1, xz1, yx1, yz1, zx1, zy1) {
              this.set(1, yx1, zx1, 0, xy1, 1, zy1, 0, xz1, yz1, 1, 0, 0, 0, 0, 1);
              return this;
          }
          compose(position1, quaternion1, scale1) {
              const te1 = this.elements;
              const x4 = quaternion1._x, y3 = quaternion1._y, z3 = quaternion1._z, w2 = quaternion1._w;
              const x21 = x4 + x4, y21 = y3 + y3, z21 = z3 + z3;
              const xx1 = x4 * x21, xy1 = x4 * y21, xz1 = x4 * z21;
              const yy1 = y3 * y21, yz1 = y3 * z21, zz1 = z3 * z21;
              const wx1 = w2 * x21, wy1 = w2 * y21, wz1 = w2 * z21;
              const sx1 = scale1.x, sy1 = scale1.y, sz1 = scale1.z;
              te1[0] = (1 - (yy1 + zz1)) * sx1;
              te1[1] = (xy1 + wz1) * sx1;
              te1[2] = (xz1 - wy1) * sx1;
              te1[3] = 0;
              te1[4] = (xy1 - wz1) * sy1;
              te1[5] = (1 - (xx1 + zz1)) * sy1;
              te1[6] = (yz1 + wx1) * sy1;
              te1[7] = 0;
              te1[8] = (xz1 + wy1) * sz1;
              te1[9] = (yz1 - wx1) * sz1;
              te1[10] = (1 - (xx1 + yy1)) * sz1;
              te1[11] = 0;
              te1[12] = position1.x;
              te1[13] = position1.y;
              te1[14] = position1.z;
              te1[15] = 1;
              return this;
          }
          decompose(position1, quaternion1, scale1) {
              const te1 = this.elements;
              let sx1 = _v1$5.set(te1[0], te1[1], te1[2]).length();
              const sy1 = _v1$5.set(te1[4], te1[5], te1[6]).length();
              const sz1 = _v1$5.set(te1[8], te1[9], te1[10]).length();
              // if determine is negative, we need to invert one scale
              const det1 = this.determinant();
              if (det1 < 0) sx1 = -sx1;
              position1.x = te1[12];
              position1.y = te1[13];
              position1.z = te1[14];
              // scale the rotation part
              _m1$2.copy(this);
              const invSX1 = 1 / sx1;
              const invSY1 = 1 / sy1;
              const invSZ1 = 1 / sz1;
              _m1$2.elements[0] *= invSX1;
              _m1$2.elements[1] *= invSX1;
              _m1$2.elements[2] *= invSX1;
              _m1$2.elements[4] *= invSY1;
              _m1$2.elements[5] *= invSY1;
              _m1$2.elements[6] *= invSY1;
              _m1$2.elements[8] *= invSZ1;
              _m1$2.elements[9] *= invSZ1;
              _m1$2.elements[10] *= invSZ1;
              quaternion1.setFromRotationMatrix(_m1$2);
              scale1.x = sx1;
              scale1.y = sy1;
              scale1.z = sz1;
              return this;
          }
          makePerspective(left1, right1, top1, bottom1, near1, far1) {
              if (far1 === undefined) console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
              const te1 = this.elements;
              const x4 = 2 * near1 / (right1 - left1);
              const y3 = 2 * near1 / (top1 - bottom1);
              const a3 = (right1 + left1) / (right1 - left1);
              const b3 = (top1 + bottom1) / (top1 - bottom1);
              const c4 = -(far1 + near1) / (far1 - near1);
              const d7 = -2 * far1 * near1 / (far1 - near1);
              te1[0] = x4;
              te1[4] = 0;
              te1[8] = a3;
              te1[12] = 0;
              te1[1] = 0;
              te1[5] = y3;
              te1[9] = b3;
              te1[13] = 0;
              te1[2] = 0;
              te1[6] = 0;
              te1[10] = c4;
              te1[14] = d7;
              te1[3] = 0;
              te1[7] = 0;
              te1[11] = -1;
              te1[15] = 0;
              return this;
          }
          makeOrthographic(left1, right1, top1, bottom1, near1, far1) {
              const te1 = this.elements;
              const w2 = 1.0 / (right1 - left1);
              const h1 = 1.0 / (top1 - bottom1);
              const p6 = 1.0 / (far1 - near1);
              const x4 = (right1 + left1) * w2;
              const y3 = (top1 + bottom1) * h1;
              const z3 = (far1 + near1) * p6;
              te1[0] = 2 * w2;
              te1[4] = 0;
              te1[8] = 0;
              te1[12] = -x4;
              te1[1] = 0;
              te1[5] = 2 * h1;
              te1[9] = 0;
              te1[13] = -y3;
              te1[2] = 0;
              te1[6] = 0;
              te1[10] = -2 * p6;
              te1[14] = -z3;
              te1[3] = 0;
              te1[7] = 0;
              te1[11] = 0;
              te1[15] = 1;
              return this;
          }
          equals(matrix1) {
              const te1 = this.elements;
              const me16 = matrix1.elements;
              for(let i3 = 0; i3 < 16; i3++){
                  if (te1[i3] !== me16[i3]) return false;
              }
              return true;
          }
          fromArray(array1, offset2 = 0) {
              for(let i3 = 0; i3 < 16; i3++)this.elements[i3] = array1[i3 + offset2];
              return this;
          }
          toArray(array1 = [], offset2 = 0) {
              const te1 = this.elements;
              array1[offset2] = te1[0];
              array1[offset2 + 1] = te1[1];
              array1[offset2 + 2] = te1[2];
              array1[offset2 + 3] = te1[3];
              array1[offset2 + 4] = te1[4];
              array1[offset2 + 5] = te1[5];
              array1[offset2 + 6] = te1[6];
              array1[offset2 + 7] = te1[7];
              array1[offset2 + 8] = te1[8];
              array1[offset2 + 9] = te1[9];
              array1[offset2 + 10] = te1[10];
              array1[offset2 + 11] = te1[11];
              array1[offset2 + 12] = te1[12];
              array1[offset2 + 13] = te1[13];
              array1[offset2 + 14] = te1[14];
              array1[offset2 + 15] = te1[15];
              return array1;
          }
      }
      Matrix4.prototype.isMatrix4 = true;
      const _v1$5 = /*@__PURE__*/ new Vector3();
      const _m1$2 = /*@__PURE__*/ new Matrix4();
      const _zero = /*@__PURE__*/ new Vector3(0, 0, 0);
      const _one = /*@__PURE__*/ new Vector3(1, 1, 1);
      const _x = /*@__PURE__*/ new Vector3();
      const _y = /*@__PURE__*/ new Vector3();
      const _z = /*@__PURE__*/ new Vector3();
      const _matrix$1 = /*@__PURE__*/ new Matrix4();
      const _quaternion$3 = /*@__PURE__*/ new Quaternion();
      class Euler {
          constructor(x4 = 0, y3 = 0, z3 = 0, order1 = Euler.DefaultOrder){
              this._x = x4;
              this._y = y3;
              this._z = z3;
              this._order = order1;
          }
          get x() {
              return this._x;
          }
          set x(value1) {
              this._x = value1;
              this._onChangeCallback();
          }
          get y() {
              return this._y;
          }
          set y(value1) {
              this._y = value1;
              this._onChangeCallback();
          }
          get z() {
              return this._z;
          }
          set z(value1) {
              this._z = value1;
              this._onChangeCallback();
          }
          get order() {
              return this._order;
          }
          set order(value1) {
              this._order = value1;
              this._onChangeCallback();
          }
          set(x4, y3, z3, order1 = this._order) {
              this._x = x4;
              this._y = y3;
              this._z = z3;
              this._order = order1;
              this._onChangeCallback();
              return this;
          }
          clone() {
              return new this.constructor(this._x, this._y, this._z, this._order);
          }
          copy(euler1) {
              this._x = euler1._x;
              this._y = euler1._y;
              this._z = euler1._z;
              this._order = euler1._order;
              this._onChangeCallback();
              return this;
          }
          setFromRotationMatrix(m1, order1 = this._order, update1 = true) {
              // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
              const te1 = m1.elements;
              const m111 = te1[0], m121 = te1[4], m131 = te1[8];
              const m211 = te1[1], m221 = te1[5], m231 = te1[9];
              const m311 = te1[2], m321 = te1[6], m331 = te1[10];
              switch(order1){
                  case "XYZ":
                      this._y = Math.asin(clamp$1(m131, -1, 1));
                      if (Math.abs(m131) < 0.9999999) {
                          this._x = Math.atan2(-m231, m331);
                          this._z = Math.atan2(-m121, m111);
                      } else {
                          this._x = Math.atan2(m321, m221);
                          this._z = 0;
                      }
                      break;
                  case "YXZ":
                      this._x = Math.asin(-clamp$1(m231, -1, 1));
                      if (Math.abs(m231) < 0.9999999) {
                          this._y = Math.atan2(m131, m331);
                          this._z = Math.atan2(m211, m221);
                      } else {
                          this._y = Math.atan2(-m311, m111);
                          this._z = 0;
                      }
                      break;
                  case "ZXY":
                      this._x = Math.asin(clamp$1(m321, -1, 1));
                      if (Math.abs(m321) < 0.9999999) {
                          this._y = Math.atan2(-m311, m331);
                          this._z = Math.atan2(-m121, m221);
                      } else {
                          this._y = 0;
                          this._z = Math.atan2(m211, m111);
                      }
                      break;
                  case "ZYX":
                      this._y = Math.asin(-clamp$1(m311, -1, 1));
                      if (Math.abs(m311) < 0.9999999) {
                          this._x = Math.atan2(m321, m331);
                          this._z = Math.atan2(m211, m111);
                      } else {
                          this._x = 0;
                          this._z = Math.atan2(-m121, m221);
                      }
                      break;
                  case "YZX":
                      this._z = Math.asin(clamp$1(m211, -1, 1));
                      if (Math.abs(m211) < 0.9999999) {
                          this._x = Math.atan2(-m231, m221);
                          this._y = Math.atan2(-m311, m111);
                      } else {
                          this._x = 0;
                          this._y = Math.atan2(m131, m331);
                      }
                      break;
                  case "XZY":
                      this._z = Math.asin(-clamp$1(m121, -1, 1));
                      if (Math.abs(m121) < 0.9999999) {
                          this._x = Math.atan2(m321, m221);
                          this._y = Math.atan2(m131, m111);
                      } else {
                          this._x = Math.atan2(-m231, m331);
                          this._y = 0;
                      }
                      break;
                  default:
                      console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + order1);
              }
              this._order = order1;
              if (update1 === true) this._onChangeCallback();
              return this;
          }
          setFromQuaternion(q3, order1, update1) {
              _matrix$1.makeRotationFromQuaternion(q3);
              return this.setFromRotationMatrix(_matrix$1, order1, update1);
          }
          setFromVector3(v4, order1 = this._order) {
              return this.set(v4.x, v4.y, v4.z, order1);
          }
          reorder(newOrder1) {
              // WARNING: this discards revolution information -bhouston
              _quaternion$3.setFromEuler(this);
              return this.setFromQuaternion(_quaternion$3, newOrder1);
          }
          equals(euler1) {
              return euler1._x === this._x && euler1._y === this._y && euler1._z === this._z && euler1._order === this._order;
          }
          fromArray(array1) {
              this._x = array1[0];
              this._y = array1[1];
              this._z = array1[2];
              if (array1[3] !== undefined) this._order = array1[3];
              this._onChangeCallback();
              return this;
          }
          toArray(array1 = [], offset2 = 0) {
              array1[offset2] = this._x;
              array1[offset2 + 1] = this._y;
              array1[offset2 + 2] = this._z;
              array1[offset2 + 3] = this._order;
              return array1;
          }
          _onChange(callback1) {
              this._onChangeCallback = callback1;
              return this;
          }
          _onChangeCallback() {}
      }
      Euler.prototype.isEuler = true;
      Euler.DefaultOrder = "XYZ";
      Euler.RotationOrders = [
          "XYZ",
          "YZX",
          "ZXY",
          "XZY",
          "YXZ",
          "ZYX"
      ];
      class Layers {
          constructor(){
              this.mask = 1;
          }
          set(channel1) {
              this.mask = (1 << channel1 | 0) >>> 0;
          }
          enable(channel1) {
              this.mask |= 1 << channel1 | 0;
          }
          enableAll() {
              this.mask = -1;
          }
          toggle(channel1) {
              this.mask ^= 1 << channel1 | 0;
          }
          disable(channel1) {
              this.mask &= ~(1 << channel1 | 0);
          }
          disableAll() {
              this.mask = 0;
          }
          test(layers1) {
              return (this.mask & layers1.mask) !== 0;
          }
          isEnabled(channel1) {
              return (this.mask & (1 << channel1 | 0)) !== 0;
          }
      }
      let _object3DId = 0;
      const _v1$4 = /*@__PURE__*/ new Vector3();
      const _q1 = /*@__PURE__*/ new Quaternion();
      const _m1$1 = /*@__PURE__*/ new Matrix4();
      const _target = /*@__PURE__*/ new Vector3();
      const _position$3 = /*@__PURE__*/ new Vector3();
      const _scale$2 = /*@__PURE__*/ new Vector3();
      const _quaternion$2 = /*@__PURE__*/ new Quaternion();
      const _xAxis = /*@__PURE__*/ new Vector3(1, 0, 0);
      const _yAxis = /*@__PURE__*/ new Vector3(0, 1, 0);
      const _zAxis = /*@__PURE__*/ new Vector3(0, 0, 1);
      const _addedEvent = {
          type: "added"
      };
      const _removedEvent = {
          type: "removed"
      };
      class Object3D extends EventDispatcher {
          constructor(){
              super();
              Object.defineProperty(this, "id", {
                  value: _object3DId++
              });
              this.uuid = generateUUID();
              this.name = "";
              this.type = "Object3D";
              this.parent = null;
              this.children = [];
              this.up = Object3D.DefaultUp.clone();
              const position1 = new Vector3();
              const rotation1 = new Euler();
              const quaternion1 = new Quaternion();
              const scale1 = new Vector3(1, 1, 1);
              function onRotationChange1() {
                  quaternion1.setFromEuler(rotation1, false);
              }
              function onQuaternionChange1() {
                  rotation1.setFromQuaternion(quaternion1, undefined, false);
              }
              rotation1._onChange(onRotationChange1);
              quaternion1._onChange(onQuaternionChange1);
              Object.defineProperties(this, {
                  position: {
                      configurable: true,
                      enumerable: true,
                      value: position1
                  },
                  rotation: {
                      configurable: true,
                      enumerable: true,
                      value: rotation1
                  },
                  quaternion: {
                      configurable: true,
                      enumerable: true,
                      value: quaternion1
                  },
                  scale: {
                      configurable: true,
                      enumerable: true,
                      value: scale1
                  },
                  modelViewMatrix: {
                      value: new Matrix4()
                  },
                  normalMatrix: {
                      value: new Matrix3()
                  }
              });
              this.matrix = new Matrix4();
              this.matrixWorld = new Matrix4();
              this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
              this.matrixWorldNeedsUpdate = false;
              this.layers = new Layers();
              this.visible = true;
              this.castShadow = false;
              this.receiveShadow = false;
              this.frustumCulled = true;
              this.renderOrder = 0;
              this.animations = [];
              this.userData = {};
          }
          onBeforeRender() {}
          onAfterRender() {}
          applyMatrix4(matrix1) {
              if (this.matrixAutoUpdate) this.updateMatrix();
              this.matrix.premultiply(matrix1);
              this.matrix.decompose(this.position, this.quaternion, this.scale);
          }
          applyQuaternion(q3) {
              this.quaternion.premultiply(q3);
              return this;
          }
          setRotationFromAxisAngle(axis1, angle1) {
              // assumes axis is normalized
              this.quaternion.setFromAxisAngle(axis1, angle1);
          }
          setRotationFromEuler(euler1) {
              this.quaternion.setFromEuler(euler1, true);
          }
          setRotationFromMatrix(m1) {
              // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
              this.quaternion.setFromRotationMatrix(m1);
          }
          setRotationFromQuaternion(q3) {
              // assumes q is normalized
              this.quaternion.copy(q3);
          }
          rotateOnAxis(axis1, angle1) {
              // rotate object on axis in object space
              // axis is assumed to be normalized
              _q1.setFromAxisAngle(axis1, angle1);
              this.quaternion.multiply(_q1);
              return this;
          }
          rotateOnWorldAxis(axis1, angle1) {
              // rotate object on axis in world space
              // axis is assumed to be normalized
              // method assumes no rotated parent
              _q1.setFromAxisAngle(axis1, angle1);
              this.quaternion.premultiply(_q1);
              return this;
          }
          rotateX(angle1) {
              return this.rotateOnAxis(_xAxis, angle1);
          }
          rotateY(angle1) {
              return this.rotateOnAxis(_yAxis, angle1);
          }
          rotateZ(angle1) {
              return this.rotateOnAxis(_zAxis, angle1);
          }
          translateOnAxis(axis1, distance1) {
              // translate object by distance along axis in object space
              // axis is assumed to be normalized
              _v1$4.copy(axis1).applyQuaternion(this.quaternion);
              this.position.add(_v1$4.multiplyScalar(distance1));
              return this;
          }
          translateX(distance1) {
              return this.translateOnAxis(_xAxis, distance1);
          }
          translateY(distance1) {
              return this.translateOnAxis(_yAxis, distance1);
          }
          translateZ(distance1) {
              return this.translateOnAxis(_zAxis, distance1);
          }
          localToWorld(vector1) {
              return vector1.applyMatrix4(this.matrixWorld);
          }
          worldToLocal(vector1) {
              return vector1.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());
          }
          lookAt(x4, y3, z3) {
              // This method does not support objects having non-uniformly-scaled parent(s)
              if (x4.isVector3) _target.copy(x4);
              else _target.set(x4, y3, z3);
              const parent1 = this.parent;
              this.updateWorldMatrix(true, false);
              _position$3.setFromMatrixPosition(this.matrixWorld);
              if (this.isCamera || this.isLight) _m1$1.lookAt(_position$3, _target, this.up);
              else _m1$1.lookAt(_target, _position$3, this.up);
              this.quaternion.setFromRotationMatrix(_m1$1);
              if (parent1) {
                  _m1$1.extractRotation(parent1.matrixWorld);
                  _q1.setFromRotationMatrix(_m1$1);
                  this.quaternion.premultiply(_q1.invert());
              }
          }
          add(object1) {
              if (arguments.length > 1) {
                  for(let i3 = 0; i3 < arguments.length; i3++)this.add(arguments[i3]);
                  return this;
              }
              if (object1 === this) {
                  console.error("THREE.Object3D.add: object can't be added as a child of itself.", object1);
                  return this;
              }
              if (object1 && object1.isObject3D) {
                  if (object1.parent !== null) object1.parent.remove(object1);
                  object1.parent = this;
                  this.children.push(object1);
                  object1.dispatchEvent(_addedEvent);
              } else console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object1);
              return this;
          }
          remove(object1) {
              if (arguments.length > 1) {
                  for(let i3 = 0; i3 < arguments.length; i3++)this.remove(arguments[i3]);
                  return this;
              }
              const index3 = this.children.indexOf(object1);
              if (index3 !== -1) {
                  object1.parent = null;
                  this.children.splice(index3, 1);
                  object1.dispatchEvent(_removedEvent);
              }
              return this;
          }
          removeFromParent() {
              const parent1 = this.parent;
              if (parent1 !== null) parent1.remove(this);
              return this;
          }
          clear() {
              for(let i3 = 0; i3 < this.children.length; i3++){
                  const object1 = this.children[i3];
                  object1.parent = null;
                  object1.dispatchEvent(_removedEvent);
              }
              this.children.length = 0;
              return this;
          }
          attach(object1) {
              // adds object as a child of this, while maintaining the object's world transform
              // Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)
              this.updateWorldMatrix(true, false);
              _m1$1.copy(this.matrixWorld).invert();
              if (object1.parent !== null) {
                  object1.parent.updateWorldMatrix(true, false);
                  _m1$1.multiply(object1.parent.matrixWorld);
              }
              object1.applyMatrix4(_m1$1);
              this.add(object1);
              object1.updateWorldMatrix(false, true);
              return this;
          }
          getObjectById(id1) {
              return this.getObjectByProperty("id", id1);
          }
          getObjectByName(name1) {
              return this.getObjectByProperty("name", name1);
          }
          getObjectByProperty(name1, value1) {
              if (this[name1] === value1) return this;
              for(let i3 = 0, l1 = this.children.length; i3 < l1; i3++){
                  const child1 = this.children[i3];
                  const object1 = child1.getObjectByProperty(name1, value1);
                  if (object1 !== undefined) return object1;
              }
              return undefined;
          }
          getWorldPosition(target1) {
              this.updateWorldMatrix(true, false);
              return target1.setFromMatrixPosition(this.matrixWorld);
          }
          getWorldQuaternion(target1) {
              this.updateWorldMatrix(true, false);
              this.matrixWorld.decompose(_position$3, target1, _scale$2);
              return target1;
          }
          getWorldScale(target1) {
              this.updateWorldMatrix(true, false);
              this.matrixWorld.decompose(_position$3, _quaternion$2, target1);
              return target1;
          }
          getWorldDirection(target1) {
              this.updateWorldMatrix(true, false);
              const e1 = this.matrixWorld.elements;
              return target1.set(e1[8], e1[9], e1[10]).normalize();
          }
          raycast() {}
          traverse(callback1) {
              callback1(this);
              const children1 = this.children;
              for(let i3 = 0, l1 = children1.length; i3 < l1; i3++)children1[i3].traverse(callback1);
          }
          traverseVisible(callback1) {
              if (this.visible === false) return;
              callback1(this);
              const children1 = this.children;
              for(let i3 = 0, l1 = children1.length; i3 < l1; i3++)children1[i3].traverseVisible(callback1);
          }
          traverseAncestors(callback1) {
              const parent1 = this.parent;
              if (parent1 !== null) {
                  callback1(parent1);
                  parent1.traverseAncestors(callback1);
              }
          }
          updateMatrix() {
              this.matrix.compose(this.position, this.quaternion, this.scale);
              this.matrixWorldNeedsUpdate = true;
          }
          updateMatrixWorld(force1) {
              if (this.matrixAutoUpdate) this.updateMatrix();
              if (this.matrixWorldNeedsUpdate || force1) {
                  if (this.parent === null) this.matrixWorld.copy(this.matrix);
                  else this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
                  this.matrixWorldNeedsUpdate = false;
                  force1 = true;
              }
              // update children
              const children1 = this.children;
              for(let i3 = 0, l1 = children1.length; i3 < l1; i3++)children1[i3].updateMatrixWorld(force1);
          }
          updateWorldMatrix(updateParents1, updateChildren1) {
              const parent1 = this.parent;
              if (updateParents1 === true && parent1 !== null) parent1.updateWorldMatrix(true, false);
              if (this.matrixAutoUpdate) this.updateMatrix();
              if (this.parent === null) this.matrixWorld.copy(this.matrix);
              else this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
              // update children
              if (updateChildren1 === true) {
                  const children1 = this.children;
                  for(let i3 = 0, l1 = children1.length; i3 < l1; i3++)children1[i3].updateWorldMatrix(false, true);
              }
          }
          toJSON(meta1) {
              // meta is a string when called from JSON.stringify
              const isRootObject1 = meta1 === undefined || typeof meta1 === "string";
              const output1 = {};
              // meta is a hash used to collect geometries, materials.
              // not providing it implies that this is the root object
              // being serialized.
              if (isRootObject1) {
                  // initialize meta obj
                  meta1 = {
                      geometries: {},
                      materials: {},
                      textures: {},
                      images: {},
                      shapes: {},
                      skeletons: {},
                      animations: {},
                      nodes: {}
                  };
                  output1.metadata = {
                      version: 4.5,
                      type: "Object",
                      generator: "Object3D.toJSON"
                  };
              }
              // standard Object3D serialization
              const object1 = {};
              object1.uuid = this.uuid;
              object1.type = this.type;
              if (this.name !== "") object1.name = this.name;
              if (this.castShadow === true) object1.castShadow = true;
              if (this.receiveShadow === true) object1.receiveShadow = true;
              if (this.visible === false) object1.visible = false;
              if (this.frustumCulled === false) object1.frustumCulled = false;
              if (this.renderOrder !== 0) object1.renderOrder = this.renderOrder;
              if (JSON.stringify(this.userData) !== "{}") object1.userData = this.userData;
              object1.layers = this.layers.mask;
              object1.matrix = this.matrix.toArray();
              if (this.matrixAutoUpdate === false) object1.matrixAutoUpdate = false;
              // object specific properties
              if (this.isInstancedMesh) {
                  object1.type = "InstancedMesh";
                  object1.count = this.count;
                  object1.instanceMatrix = this.instanceMatrix.toJSON();
                  if (this.instanceColor !== null) object1.instanceColor = this.instanceColor.toJSON();
              }
              //
              function serialize1(library1, element1) {
                  if (library1[element1.uuid] === undefined) library1[element1.uuid] = element1.toJSON(meta1);
                  return element1.uuid;
              }
              if (this.isScene) {
                  if (this.background) {
                      if (this.background.isColor) object1.background = this.background.toJSON();
                      else if (this.background.isTexture) object1.background = this.background.toJSON(meta1).uuid;
                  }
                  if (this.environment && this.environment.isTexture) object1.environment = this.environment.toJSON(meta1).uuid;
              } else if (this.isMesh || this.isLine || this.isPoints) {
                  object1.geometry = serialize1(meta1.geometries, this.geometry);
                  const parameters1 = this.geometry.parameters;
                  if (parameters1 !== undefined && parameters1.shapes !== undefined) {
                      const shapes1 = parameters1.shapes;
                      if (Array.isArray(shapes1)) for(let i3 = 0, l1 = shapes1.length; i3 < l1; i3++){
                          const shape1 = shapes1[i3];
                          serialize1(meta1.shapes, shape1);
                      }
                      else serialize1(meta1.shapes, shapes1);
                  }
              }
              if (this.isSkinnedMesh) {
                  object1.bindMode = this.bindMode;
                  object1.bindMatrix = this.bindMatrix.toArray();
                  if (this.skeleton !== undefined) {
                      serialize1(meta1.skeletons, this.skeleton);
                      object1.skeleton = this.skeleton.uuid;
                  }
              }
              if (this.material !== undefined) {
                  if (Array.isArray(this.material)) {
                      const uuids1 = [];
                      for(let i3 = 0, l1 = this.material.length; i3 < l1; i3++)uuids1.push(serialize1(meta1.materials, this.material[i3]));
                      object1.material = uuids1;
                  } else object1.material = serialize1(meta1.materials, this.material);
              }
              //
              if (this.children.length > 0) {
                  object1.children = [];
                  for(let i3 = 0; i3 < this.children.length; i3++)object1.children.push(this.children[i3].toJSON(meta1).object);
              }
              //
              if (this.animations.length > 0) {
                  object1.animations = [];
                  for(let i3 = 0; i3 < this.animations.length; i3++){
                      const animation1 = this.animations[i3];
                      object1.animations.push(serialize1(meta1.animations, animation1));
                  }
              }
              if (isRootObject1) {
                  const geometries1 = extractFromCache1(meta1.geometries);
                  const materials1 = extractFromCache1(meta1.materials);
                  const textures1 = extractFromCache1(meta1.textures);
                  const images1 = extractFromCache1(meta1.images);
                  const shapes1 = extractFromCache1(meta1.shapes);
                  const skeletons1 = extractFromCache1(meta1.skeletons);
                  const animations1 = extractFromCache1(meta1.animations);
                  const nodes1 = extractFromCache1(meta1.nodes);
                  if (geometries1.length > 0) output1.geometries = geometries1;
                  if (materials1.length > 0) output1.materials = materials1;
                  if (textures1.length > 0) output1.textures = textures1;
                  if (images1.length > 0) output1.images = images1;
                  if (shapes1.length > 0) output1.shapes = shapes1;
                  if (skeletons1.length > 0) output1.skeletons = skeletons1;
                  if (animations1.length > 0) output1.animations = animations1;
                  if (nodes1.length > 0) output1.nodes = nodes1;
              }
              output1.object = object1;
              return output1;
              // extract data from the cache hash
              // remove metadata on each item
              // and return as array
              function extractFromCache1(cache1) {
                  const values1 = [];
                  for(const key1 in cache1){
                      const data1 = cache1[key1];
                      delete data1.metadata;
                      values1.push(data1);
                  }
                  return values1;
              }
          }
          clone(recursive1) {
              return new this.constructor().copy(this, recursive1);
          }
          copy(source1, recursive1 = true) {
              this.name = source1.name;
              this.up.copy(source1.up);
              this.position.copy(source1.position);
              this.rotation.order = source1.rotation.order;
              this.quaternion.copy(source1.quaternion);
              this.scale.copy(source1.scale);
              this.matrix.copy(source1.matrix);
              this.matrixWorld.copy(source1.matrixWorld);
              this.matrixAutoUpdate = source1.matrixAutoUpdate;
              this.matrixWorldNeedsUpdate = source1.matrixWorldNeedsUpdate;
              this.layers.mask = source1.layers.mask;
              this.visible = source1.visible;
              this.castShadow = source1.castShadow;
              this.receiveShadow = source1.receiveShadow;
              this.frustumCulled = source1.frustumCulled;
              this.renderOrder = source1.renderOrder;
              this.userData = JSON.parse(JSON.stringify(source1.userData));
              if (recursive1 === true) for(let i3 = 0; i3 < source1.children.length; i3++){
                  const child1 = source1.children[i3];
                  this.add(child1.clone());
              }
              return this;
          }
      }
      Object3D.DefaultUp = new Vector3(0, 1, 0);
      Object3D.DefaultMatrixAutoUpdate = true;
      Object3D.prototype.isObject3D = true;
      const _v0$1 = /*@__PURE__*/ new Vector3();
      const _v1$3 = /*@__PURE__*/ new Vector3();
      const _v2$2 = /*@__PURE__*/ new Vector3();
      const _v3$1 = /*@__PURE__*/ new Vector3();
      const _vab = /*@__PURE__*/ new Vector3();
      const _vac = /*@__PURE__*/ new Vector3();
      const _vbc = /*@__PURE__*/ new Vector3();
      const _vap = /*@__PURE__*/ new Vector3();
      const _vbp = /*@__PURE__*/ new Vector3();
      const _vcp = /*@__PURE__*/ new Vector3();
      class Triangle {
          constructor(a3 = new Vector3(), b3 = new Vector3(), c4 = new Vector3()){
              this.a = a3;
              this.b = b3;
              this.c = c4;
          }
          static getNormal(a3, b3, c4, target1) {
              target1.subVectors(c4, b3);
              _v0$1.subVectors(a3, b3);
              target1.cross(_v0$1);
              const targetLengthSq1 = target1.lengthSq();
              if (targetLengthSq1 > 0) return target1.multiplyScalar(1 / Math.sqrt(targetLengthSq1));
              return target1.set(0, 0, 0);
          }
          // static/instance method to calculate barycentric coordinates
          // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
          static getBarycoord(point1, a3, b3, c4, target1) {
              _v0$1.subVectors(c4, a3);
              _v1$3.subVectors(b3, a3);
              _v2$2.subVectors(point1, a3);
              const dot001 = _v0$1.dot(_v0$1);
              const dot011 = _v0$1.dot(_v1$3);
              const dot021 = _v0$1.dot(_v2$2);
              const dot111 = _v1$3.dot(_v1$3);
              const dot121 = _v1$3.dot(_v2$2);
              const denom1 = dot001 * dot111 - dot011 * dot011;
              // collinear or singular triangle
              if (denom1 === 0) // arbitrary location outside of triangle?
              // not sure if this is the best idea, maybe should be returning undefined
              return target1.set(-2, -1, -1);
              const invDenom1 = 1 / denom1;
              const u4 = (dot111 * dot021 - dot011 * dot121) * invDenom1;
              const v4 = (dot001 * dot121 - dot011 * dot021) * invDenom1;
              // barycentric coordinates must always sum to 1
              return target1.set(1 - u4 - v4, v4, u4);
          }
          static containsPoint(point1, a3, b3, c4) {
              this.getBarycoord(point1, a3, b3, c4, _v3$1);
              return _v3$1.x >= 0 && _v3$1.y >= 0 && _v3$1.x + _v3$1.y <= 1;
          }
          static getUV(point1, p11, p21, p31, uv11, uv21, uv31, target1) {
              this.getBarycoord(point1, p11, p21, p31, _v3$1);
              target1.set(0, 0);
              target1.addScaledVector(uv11, _v3$1.x);
              target1.addScaledVector(uv21, _v3$1.y);
              target1.addScaledVector(uv31, _v3$1.z);
              return target1;
          }
          static isFrontFacing(a3, b3, c4, direction1) {
              _v0$1.subVectors(c4, b3);
              _v1$3.subVectors(a3, b3);
              // strictly front facing
              return _v0$1.cross(_v1$3).dot(direction1) < 0 ? true : false;
          }
          set(a3, b3, c4) {
              this.a.copy(a3);
              this.b.copy(b3);
              this.c.copy(c4);
              return this;
          }
          setFromPointsAndIndices(points1, i01, i11, i21) {
              this.a.copy(points1[i01]);
              this.b.copy(points1[i11]);
              this.c.copy(points1[i21]);
              return this;
          }
          setFromAttributeAndIndices(attribute3, i01, i11, i21) {
              this.a.fromBufferAttribute(attribute3, i01);
              this.b.fromBufferAttribute(attribute3, i11);
              this.c.fromBufferAttribute(attribute3, i21);
              return this;
          }
          clone() {
              return new this.constructor().copy(this);
          }
          copy(triangle1) {
              this.a.copy(triangle1.a);
              this.b.copy(triangle1.b);
              this.c.copy(triangle1.c);
              return this;
          }
          getArea() {
              _v0$1.subVectors(this.c, this.b);
              _v1$3.subVectors(this.a, this.b);
              return _v0$1.cross(_v1$3).length() * 0.5;
          }
          getMidpoint(target1) {
              return target1.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
          }
          getNormal(target1) {
              return Triangle.getNormal(this.a, this.b, this.c, target1);
          }
          getPlane(target1) {
              return target1.setFromCoplanarPoints(this.a, this.b, this.c);
          }
          getBarycoord(point1, target1) {
              return Triangle.getBarycoord(point1, this.a, this.b, this.c, target1);
          }
          getUV(point1, uv11, uv21, uv31, target1) {
              return Triangle.getUV(point1, this.a, this.b, this.c, uv11, uv21, uv31, target1);
          }
          containsPoint(point1) {
              return Triangle.containsPoint(point1, this.a, this.b, this.c);
          }
          isFrontFacing(direction1) {
              return Triangle.isFrontFacing(this.a, this.b, this.c, direction1);
          }
          intersectsBox(box1) {
              return box1.intersectsTriangle(this);
          }
          closestPointToPoint(p6, target1) {
              const a3 = this.a, b3 = this.b, c4 = this.c;
              let v4, w2;
              // algorithm thanks to Real-Time Collision Detection by Christer Ericson,
              // published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
              // under the accompanying license; see chapter 5.1.5 for detailed explanation.
              // basically, we're distinguishing which of the voronoi regions of the triangle
              // the point lies in with the minimum amount of redundant computation.
              _vab.subVectors(b3, a3);
              _vac.subVectors(c4, a3);
              _vap.subVectors(p6, a3);
              const d11 = _vab.dot(_vap);
              const d21 = _vac.dot(_vap);
              if (d11 <= 0 && d21 <= 0) // vertex region of A; barycentric coords (1, 0, 0)
              return target1.copy(a3);
              _vbp.subVectors(p6, b3);
              const d31 = _vab.dot(_vbp);
              const d41 = _vac.dot(_vbp);
              if (d31 >= 0 && d41 <= d31) // vertex region of B; barycentric coords (0, 1, 0)
              return target1.copy(b3);
              const vc1 = d11 * d41 - d31 * d21;
              if (vc1 <= 0 && d11 >= 0 && d31 <= 0) {
                  v4 = d11 / (d11 - d31);
                  // edge region of AB; barycentric coords (1-v, v, 0)
                  return target1.copy(a3).addScaledVector(_vab, v4);
              }
              _vcp.subVectors(p6, c4);
              const d51 = _vab.dot(_vcp);
              const d61 = _vac.dot(_vcp);
              if (d61 >= 0 && d51 <= d61) // vertex region of C; barycentric coords (0, 0, 1)
              return target1.copy(c4);
              const vb1 = d51 * d21 - d11 * d61;
              if (vb1 <= 0 && d21 >= 0 && d61 <= 0) {
                  w2 = d21 / (d21 - d61);
                  // edge region of AC; barycentric coords (1-w, 0, w)
                  return target1.copy(a3).addScaledVector(_vac, w2);
              }
              const va1 = d31 * d61 - d51 * d41;
              if (va1 <= 0 && d41 - d31 >= 0 && d51 - d61 >= 0) {
                  _vbc.subVectors(c4, b3);
                  w2 = (d41 - d31) / (d41 - d31 + (d51 - d61));
                  // edge region of BC; barycentric coords (0, 1-w, w)
                  return target1.copy(b3).addScaledVector(_vbc, w2); // edge region of BC
              }
              // face region
              const denom1 = 1 / (va1 + vb1 + vc1);
              // u = va * denom
              v4 = vb1 * denom1;
              w2 = vc1 * denom1;
              return target1.copy(a3).addScaledVector(_vab, v4).addScaledVector(_vac, w2);
          }
          equals(triangle1) {
              return triangle1.a.equals(this.a) && triangle1.b.equals(this.b) && triangle1.c.equals(this.c);
          }
      }
      let materialId = 0;
      class Material extends EventDispatcher {
          constructor(){
              super();
              Object.defineProperty(this, "id", {
                  value: materialId++
              });
              this.uuid = generateUUID();
              this.name = "";
              this.type = "Material";
              this.fog = true;
              this.blending = NormalBlending;
              this.side = FrontSide;
              this.vertexColors = false;
              this.opacity = 1;
              this.transparent = false;
              this.blendSrc = SrcAlphaFactor;
              this.blendDst = OneMinusSrcAlphaFactor;
              this.blendEquation = AddEquation;
              this.blendSrcAlpha = null;
              this.blendDstAlpha = null;
              this.blendEquationAlpha = null;
              this.depthFunc = LessEqualDepth;
              this.depthTest = true;
              this.depthWrite = true;
              this.stencilWriteMask = 0xff;
              this.stencilFunc = AlwaysStencilFunc;
              this.stencilRef = 0;
              this.stencilFuncMask = 0xff;
              this.stencilFail = KeepStencilOp;
              this.stencilZFail = KeepStencilOp;
              this.stencilZPass = KeepStencilOp;
              this.stencilWrite = false;
              this.clippingPlanes = null;
              this.clipIntersection = false;
              this.clipShadows = false;
              this.shadowSide = null;
              this.colorWrite = true;
              this.precision = null; // override the renderer's default precision for this material
              this.polygonOffset = false;
              this.polygonOffsetFactor = 0;
              this.polygonOffsetUnits = 0;
              this.dithering = false;
              this.alphaToCoverage = false;
              this.premultipliedAlpha = false;
              this.visible = true;
              this.toneMapped = true;
              this.userData = {};
              this.version = 0;
              this._alphaTest = 0;
          }
          get alphaTest() {
              return this._alphaTest;
          }
          set alphaTest(value1) {
              if (this._alphaTest > 0 !== value1 > 0) this.version++;
              this._alphaTest = value1;
          }
          onBuild() {}
          onBeforeRender() {}
          onBeforeCompile() {}
          customProgramCacheKey() {
              return this.onBeforeCompile.toString();
          }
          setValues(values1) {
              if (values1 === undefined) return;
              for(const key1 in values1){
                  const newValue1 = values1[key1];
                  if (newValue1 === undefined) {
                      console.warn("THREE.Material: '" + key1 + "' parameter is undefined.");
                      continue;
                  }
                  // for backward compatability if shading is set in the constructor
                  if (key1 === "shading") {
                      console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
                      this.flatShading = newValue1 === FlatShading ? true : false;
                      continue;
                  }
                  const currentValue1 = this[key1];
                  if (currentValue1 === undefined) {
                      console.warn("THREE." + this.type + ": '" + key1 + "' is not a property of this material.");
                      continue;
                  }
                  if (currentValue1 && currentValue1.isColor) currentValue1.set(newValue1);
                  else if (currentValue1 && currentValue1.isVector3 && newValue1 && newValue1.isVector3) currentValue1.copy(newValue1);
                  else this[key1] = newValue1;
              }
          }
          toJSON(meta1) {
              const isRootObject1 = meta1 === undefined || typeof meta1 === "string";
              if (isRootObject1) meta1 = {
                  textures: {},
                  images: {}
              };
              const data1 = {
                  metadata: {
                      version: 4.5,
                      type: "Material",
                      generator: "Material.toJSON"
                  }
              };
              // standard Material serialization
              data1.uuid = this.uuid;
              data1.type = this.type;
              if (this.name !== "") data1.name = this.name;
              if (this.color && this.color.isColor) data1.color = this.color.getHex();
              if (this.roughness !== undefined) data1.roughness = this.roughness;
              if (this.metalness !== undefined) data1.metalness = this.metalness;
              if (this.sheen !== undefined) data1.sheen = this.sheen;
              if (this.sheenColor && this.sheenColor.isColor) data1.sheenColor = this.sheenColor.getHex();
              if (this.sheenRoughness !== undefined) data1.sheenRoughness = this.sheenRoughness;
              if (this.emissive && this.emissive.isColor) data1.emissive = this.emissive.getHex();
              if (this.emissiveIntensity && this.emissiveIntensity !== 1) data1.emissiveIntensity = this.emissiveIntensity;
              if (this.specular && this.specular.isColor) data1.specular = this.specular.getHex();
              if (this.specularIntensity !== undefined) data1.specularIntensity = this.specularIntensity;
              if (this.specularColor && this.specularColor.isColor) data1.specularColor = this.specularColor.getHex();
              if (this.shininess !== undefined) data1.shininess = this.shininess;
              if (this.clearcoat !== undefined) data1.clearcoat = this.clearcoat;
              if (this.clearcoatRoughness !== undefined) data1.clearcoatRoughness = this.clearcoatRoughness;
              if (this.clearcoatMap && this.clearcoatMap.isTexture) data1.clearcoatMap = this.clearcoatMap.toJSON(meta1).uuid;
              if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) data1.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta1).uuid;
              if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
                  data1.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta1).uuid;
                  data1.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
              }
              if (this.map && this.map.isTexture) data1.map = this.map.toJSON(meta1).uuid;
              if (this.matcap && this.matcap.isTexture) data1.matcap = this.matcap.toJSON(meta1).uuid;
              if (this.alphaMap && this.alphaMap.isTexture) data1.alphaMap = this.alphaMap.toJSON(meta1).uuid;
              if (this.lightMap && this.lightMap.isTexture) {
                  data1.lightMap = this.lightMap.toJSON(meta1).uuid;
                  data1.lightMapIntensity = this.lightMapIntensity;
              }
              if (this.aoMap && this.aoMap.isTexture) {
                  data1.aoMap = this.aoMap.toJSON(meta1).uuid;
                  data1.aoMapIntensity = this.aoMapIntensity;
              }
              if (this.bumpMap && this.bumpMap.isTexture) {
                  data1.bumpMap = this.bumpMap.toJSON(meta1).uuid;
                  data1.bumpScale = this.bumpScale;
              }
              if (this.normalMap && this.normalMap.isTexture) {
                  data1.normalMap = this.normalMap.toJSON(meta1).uuid;
                  data1.normalMapType = this.normalMapType;
                  data1.normalScale = this.normalScale.toArray();
              }
              if (this.displacementMap && this.displacementMap.isTexture) {
                  data1.displacementMap = this.displacementMap.toJSON(meta1).uuid;
                  data1.displacementScale = this.displacementScale;
                  data1.displacementBias = this.displacementBias;
              }
              if (this.roughnessMap && this.roughnessMap.isTexture) data1.roughnessMap = this.roughnessMap.toJSON(meta1).uuid;
              if (this.metalnessMap && this.metalnessMap.isTexture) data1.metalnessMap = this.metalnessMap.toJSON(meta1).uuid;
              if (this.emissiveMap && this.emissiveMap.isTexture) data1.emissiveMap = this.emissiveMap.toJSON(meta1).uuid;
              if (this.specularMap && this.specularMap.isTexture) data1.specularMap = this.specularMap.toJSON(meta1).uuid;
              if (this.specularIntensityMap && this.specularIntensityMap.isTexture) data1.specularIntensityMap = this.specularIntensityMap.toJSON(meta1).uuid;
              if (this.specularColorMap && this.specularColorMap.isTexture) data1.specularColorMap = this.specularColorMap.toJSON(meta1).uuid;
              if (this.envMap && this.envMap.isTexture) {
                  data1.envMap = this.envMap.toJSON(meta1).uuid;
                  if (this.combine !== undefined) data1.combine = this.combine;
              }
              if (this.envMapIntensity !== undefined) data1.envMapIntensity = this.envMapIntensity;
              if (this.reflectivity !== undefined) data1.reflectivity = this.reflectivity;
              if (this.refractionRatio !== undefined) data1.refractionRatio = this.refractionRatio;
              if (this.gradientMap && this.gradientMap.isTexture) data1.gradientMap = this.gradientMap.toJSON(meta1).uuid;
              if (this.transmission !== undefined) data1.transmission = this.transmission;
              if (this.transmissionMap && this.transmissionMap.isTexture) data1.transmissionMap = this.transmissionMap.toJSON(meta1).uuid;
              if (this.thickness !== undefined) data1.thickness = this.thickness;
              if (this.thicknessMap && this.thicknessMap.isTexture) data1.thicknessMap = this.thicknessMap.toJSON(meta1).uuid;
              if (this.attenuationDistance !== undefined) data1.attenuationDistance = this.attenuationDistance;
              if (this.attenuationColor !== undefined) data1.attenuationColor = this.attenuationColor.getHex();
              if (this.size !== undefined) data1.size = this.size;
              if (this.shadowSide !== null) data1.shadowSide = this.shadowSide;
              if (this.sizeAttenuation !== undefined) data1.sizeAttenuation = this.sizeAttenuation;
              if (this.blending !== NormalBlending) data1.blending = this.blending;
              if (this.side !== FrontSide) data1.side = this.side;
              if (this.vertexColors) data1.vertexColors = true;
              if (this.opacity < 1) data1.opacity = this.opacity;
              if (this.transparent === true) data1.transparent = this.transparent;
              data1.depthFunc = this.depthFunc;
              data1.depthTest = this.depthTest;
              data1.depthWrite = this.depthWrite;
              data1.colorWrite = this.colorWrite;
              data1.stencilWrite = this.stencilWrite;
              data1.stencilWriteMask = this.stencilWriteMask;
              data1.stencilFunc = this.stencilFunc;
              data1.stencilRef = this.stencilRef;
              data1.stencilFuncMask = this.stencilFuncMask;
              data1.stencilFail = this.stencilFail;
              data1.stencilZFail = this.stencilZFail;
              data1.stencilZPass = this.stencilZPass;
              // rotation (SpriteMaterial)
              if (this.rotation !== undefined && this.rotation !== 0) data1.rotation = this.rotation;
              if (this.polygonOffset === true) data1.polygonOffset = true;
              if (this.polygonOffsetFactor !== 0) data1.polygonOffsetFactor = this.polygonOffsetFactor;
              if (this.polygonOffsetUnits !== 0) data1.polygonOffsetUnits = this.polygonOffsetUnits;
              if (this.linewidth !== undefined && this.linewidth !== 1) data1.linewidth = this.linewidth;
              if (this.dashSize !== undefined) data1.dashSize = this.dashSize;
              if (this.gapSize !== undefined) data1.gapSize = this.gapSize;
              if (this.scale !== undefined) data1.scale = this.scale;
              if (this.dithering === true) data1.dithering = true;
              if (this.alphaTest > 0) data1.alphaTest = this.alphaTest;
              if (this.alphaToCoverage === true) data1.alphaToCoverage = this.alphaToCoverage;
              if (this.premultipliedAlpha === true) data1.premultipliedAlpha = this.premultipliedAlpha;
              if (this.wireframe === true) data1.wireframe = this.wireframe;
              if (this.wireframeLinewidth > 1) data1.wireframeLinewidth = this.wireframeLinewidth;
              if (this.wireframeLinecap !== "round") data1.wireframeLinecap = this.wireframeLinecap;
              if (this.wireframeLinejoin !== "round") data1.wireframeLinejoin = this.wireframeLinejoin;
              if (this.flatShading === true) data1.flatShading = this.flatShading;
              if (this.visible === false) data1.visible = false;
              if (this.toneMapped === false) data1.toneMapped = false;
              if (JSON.stringify(this.userData) !== "{}") data1.userData = this.userData;
              // TODO: Copied from Object3D.toJSON
              function extractFromCache1(cache1) {
                  const values1 = [];
                  for(const key1 in cache1){
                      const data1 = cache1[key1];
                      delete data1.metadata;
                      values1.push(data1);
                  }
                  return values1;
              }
              if (isRootObject1) {
                  const textures1 = extractFromCache1(meta1.textures);
                  const images1 = extractFromCache1(meta1.images);
                  if (textures1.length > 0) data1.textures = textures1;
                  if (images1.length > 0) data1.images = images1;
              }
              return data1;
          }
          clone() {
              return new this.constructor().copy(this);
          }
          copy(source1) {
              this.name = source1.name;
              this.fog = source1.fog;
              this.blending = source1.blending;
              this.side = source1.side;
              this.vertexColors = source1.vertexColors;
              this.opacity = source1.opacity;
              this.transparent = source1.transparent;
              this.blendSrc = source1.blendSrc;
              this.blendDst = source1.blendDst;
              this.blendEquation = source1.blendEquation;
              this.blendSrcAlpha = source1.blendSrcAlpha;
              this.blendDstAlpha = source1.blendDstAlpha;
              this.blendEquationAlpha = source1.blendEquationAlpha;
              this.depthFunc = source1.depthFunc;
              this.depthTest = source1.depthTest;
              this.depthWrite = source1.depthWrite;
              this.stencilWriteMask = source1.stencilWriteMask;
              this.stencilFunc = source1.stencilFunc;
              this.stencilRef = source1.stencilRef;
              this.stencilFuncMask = source1.stencilFuncMask;
              this.stencilFail = source1.stencilFail;
              this.stencilZFail = source1.stencilZFail;
              this.stencilZPass = source1.stencilZPass;
              this.stencilWrite = source1.stencilWrite;
              const srcPlanes1 = source1.clippingPlanes;
              let dstPlanes1 = null;
              if (srcPlanes1 !== null) {
                  const n3 = srcPlanes1.length;
                  dstPlanes1 = new Array(n3);
                  for(let i3 = 0; i3 !== n3; ++i3)dstPlanes1[i3] = srcPlanes1[i3].clone();
              }
              this.clippingPlanes = dstPlanes1;
              this.clipIntersection = source1.clipIntersection;
              this.clipShadows = source1.clipShadows;
              this.shadowSide = source1.shadowSide;
              this.colorWrite = source1.colorWrite;
              this.precision = source1.precision;
              this.polygonOffset = source1.polygonOffset;
              this.polygonOffsetFactor = source1.polygonOffsetFactor;
              this.polygonOffsetUnits = source1.polygonOffsetUnits;
              this.dithering = source1.dithering;
              this.alphaTest = source1.alphaTest;
              this.alphaToCoverage = source1.alphaToCoverage;
              this.premultipliedAlpha = source1.premultipliedAlpha;
              this.visible = source1.visible;
              this.toneMapped = source1.toneMapped;
              this.userData = JSON.parse(JSON.stringify(source1.userData));
              return this;
          }
          dispose() {
              this.dispatchEvent({
                  type: "dispose"
              });
          }
          set needsUpdate(value1) {
              if (value1 === true) this.version++;
          }
      }
      Material.prototype.isMaterial = true;
      Material.fromType = function() {
          // TODO: Behavior added in Materials.js
          return null;
      };
      /**
     * parameters = {
     *  color: <hex>,
     *  opacity: <float>,
     *  map: new THREE.Texture( <Image> ),
     *
     *  lightMap: new THREE.Texture( <Image> ),
     *  lightMapIntensity: <float>
     *
     *  aoMap: new THREE.Texture( <Image> ),
     *  aoMapIntensity: <float>
     *
     *  specularMap: new THREE.Texture( <Image> ),
     *
     *  alphaMap: new THREE.Texture( <Image> ),
     *
     *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
     *  combine: THREE.Multiply,
     *  reflectivity: <float>,
     *  refractionRatio: <float>,
     *
     *  depthTest: <bool>,
     *  depthWrite: <bool>,
     *
     *  wireframe: <boolean>,
     *  wireframeLinewidth: <float>,
     * }
     */ class MeshBasicMaterial extends Material {
          constructor(parameters1){
              super();
              this.type = "MeshBasicMaterial";
              this.color = new Color(0xffffff); // emissive
              this.map = null;
              this.lightMap = null;
              this.lightMapIntensity = 1.0;
              this.aoMap = null;
              this.aoMapIntensity = 1.0;
              this.specularMap = null;
              this.alphaMap = null;
              this.envMap = null;
              this.combine = MultiplyOperation;
              this.reflectivity = 1;
              this.refractionRatio = 0.98;
              this.wireframe = false;
              this.wireframeLinewidth = 1;
              this.wireframeLinecap = "round";
              this.wireframeLinejoin = "round";
              this.setValues(parameters1);
          }
          copy(source1) {
              super.copy(source1);
              this.color.copy(source1.color);
              this.map = source1.map;
              this.lightMap = source1.lightMap;
              this.lightMapIntensity = source1.lightMapIntensity;
              this.aoMap = source1.aoMap;
              this.aoMapIntensity = source1.aoMapIntensity;
              this.specularMap = source1.specularMap;
              this.alphaMap = source1.alphaMap;
              this.envMap = source1.envMap;
              this.combine = source1.combine;
              this.reflectivity = source1.reflectivity;
              this.refractionRatio = source1.refractionRatio;
              this.wireframe = source1.wireframe;
              this.wireframeLinewidth = source1.wireframeLinewidth;
              this.wireframeLinecap = source1.wireframeLinecap;
              this.wireframeLinejoin = source1.wireframeLinejoin;
              return this;
          }
      }
      MeshBasicMaterial.prototype.isMeshBasicMaterial = true;
      const _vector$9 = /*@__PURE__*/ new Vector3();
      const _vector2$1 = /*@__PURE__*/ new Vector2();
      class BufferAttribute {
          constructor(array1, itemSize1, normalized1){
              if (Array.isArray(array1)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
              this.name = "";
              this.array = array1;
              this.itemSize = itemSize1;
              this.count = array1 !== undefined ? array1.length / itemSize1 : 0;
              this.normalized = normalized1 === true;
              this.usage = StaticDrawUsage;
              this.updateRange = {
                  offset: 0,
                  count: -1
              };
              this.version = 0;
          }
          onUploadCallback() {}
          set needsUpdate(value1) {
              if (value1 === true) this.version++;
          }
          setUsage(value1) {
              this.usage = value1;
              return this;
          }
          copy(source1) {
              this.name = source1.name;
              this.array = new source1.array.constructor(source1.array);
              this.itemSize = source1.itemSize;
              this.count = source1.count;
              this.normalized = source1.normalized;
              this.usage = source1.usage;
              return this;
          }
          copyAt(index11, attribute3, index21) {
              index11 *= this.itemSize;
              index21 *= attribute3.itemSize;
              for(let i3 = 0, l1 = this.itemSize; i3 < l1; i3++)this.array[index11 + i3] = attribute3.array[index21 + i3];
              return this;
          }
          copyArray(array1) {
              this.array.set(array1);
              return this;
          }
          copyColorsArray(colors1) {
              const array1 = this.array;
              let offset2 = 0;
              for(let i3 = 0, l1 = colors1.length; i3 < l1; i3++){
                  let color3 = colors1[i3];
                  if (color3 === undefined) {
                      console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", i3);
                      color3 = new Color();
                  }
                  array1[offset2++] = color3.r;
                  array1[offset2++] = color3.g;
                  array1[offset2++] = color3.b;
              }
              return this;
          }
          copyVector2sArray(vectors1) {
              const array1 = this.array;
              let offset2 = 0;
              for(let i3 = 0, l1 = vectors1.length; i3 < l1; i3++){
                  let vector1 = vectors1[i3];
                  if (vector1 === undefined) {
                      console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", i3);
                      vector1 = new Vector2();
                  }
                  array1[offset2++] = vector1.x;
                  array1[offset2++] = vector1.y;
              }
              return this;
          }
          copyVector3sArray(vectors1) {
              const array1 = this.array;
              let offset2 = 0;
              for(let i3 = 0, l1 = vectors1.length; i3 < l1; i3++){
                  let vector1 = vectors1[i3];
                  if (vector1 === undefined) {
                      console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", i3);
                      vector1 = new Vector3();
                  }
                  array1[offset2++] = vector1.x;
                  array1[offset2++] = vector1.y;
                  array1[offset2++] = vector1.z;
              }
              return this;
          }
          copyVector4sArray(vectors1) {
              const array1 = this.array;
              let offset2 = 0;
              for(let i3 = 0, l1 = vectors1.length; i3 < l1; i3++){
                  let vector1 = vectors1[i3];
                  if (vector1 === undefined) {
                      console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", i3);
                      vector1 = new Vector4$1();
                  }
                  array1[offset2++] = vector1.x;
                  array1[offset2++] = vector1.y;
                  array1[offset2++] = vector1.z;
                  array1[offset2++] = vector1.w;
              }
              return this;
          }
          applyMatrix3(m1) {
              if (this.itemSize === 2) for(let i3 = 0, l1 = this.count; i3 < l1; i3++){
                  _vector2$1.fromBufferAttribute(this, i3);
                  _vector2$1.applyMatrix3(m1);
                  this.setXY(i3, _vector2$1.x, _vector2$1.y);
              }
              else if (this.itemSize === 3) for(let i3 = 0, l1 = this.count; i3 < l1; i3++){
                  _vector$9.fromBufferAttribute(this, i3);
                  _vector$9.applyMatrix3(m1);
                  this.setXYZ(i3, _vector$9.x, _vector$9.y, _vector$9.z);
              }
              return this;
          }
          applyMatrix4(m1) {
              for(let i3 = 0, l1 = this.count; i3 < l1; i3++){
                  _vector$9.x = this.getX(i3);
                  _vector$9.y = this.getY(i3);
                  _vector$9.z = this.getZ(i3);
                  _vector$9.applyMatrix4(m1);
                  this.setXYZ(i3, _vector$9.x, _vector$9.y, _vector$9.z);
              }
              return this;
          }
          applyNormalMatrix(m1) {
              for(let i3 = 0, l1 = this.count; i3 < l1; i3++){
                  _vector$9.x = this.getX(i3);
                  _vector$9.y = this.getY(i3);
                  _vector$9.z = this.getZ(i3);
                  _vector$9.applyNormalMatrix(m1);
                  this.setXYZ(i3, _vector$9.x, _vector$9.y, _vector$9.z);
              }
              return this;
          }
          transformDirection(m1) {
              for(let i3 = 0, l1 = this.count; i3 < l1; i3++){
                  _vector$9.x = this.getX(i3);
                  _vector$9.y = this.getY(i3);
                  _vector$9.z = this.getZ(i3);
                  _vector$9.transformDirection(m1);
                  this.setXYZ(i3, _vector$9.x, _vector$9.y, _vector$9.z);
              }
              return this;
          }
          set(value1, offset2 = 0) {
              this.array.set(value1, offset2);
              return this;
          }
          getX(index3) {
              return this.array[index3 * this.itemSize];
          }
          setX(index3, x4) {
              this.array[index3 * this.itemSize] = x4;
              return this;
          }
          getY(index3) {
              return this.array[index3 * this.itemSize + 1];
          }
          setY(index3, y3) {
              this.array[index3 * this.itemSize + 1] = y3;
              return this;
          }
          getZ(index3) {
              return this.array[index3 * this.itemSize + 2];
          }
          setZ(index3, z3) {
              this.array[index3 * this.itemSize + 2] = z3;
              return this;
          }
          getW(index3) {
              return this.array[index3 * this.itemSize + 3];
          }
          setW(index3, w2) {
              this.array[index3 * this.itemSize + 3] = w2;
              return this;
          }
          setXY(index3, x4, y3) {
              index3 *= this.itemSize;
              this.array[index3 + 0] = x4;
              this.array[index3 + 1] = y3;
              return this;
          }
          setXYZ(index3, x4, y3, z3) {
              index3 *= this.itemSize;
              this.array[index3 + 0] = x4;
              this.array[index3 + 1] = y3;
              this.array[index3 + 2] = z3;
              return this;
          }
          setXYZW(index3, x4, y3, z3, w2) {
              index3 *= this.itemSize;
              this.array[index3 + 0] = x4;
              this.array[index3 + 1] = y3;
              this.array[index3 + 2] = z3;
              this.array[index3 + 3] = w2;
              return this;
          }
          onUpload(callback1) {
              this.onUploadCallback = callback1;
              return this;
          }
          clone() {
              return new this.constructor(this.array, this.itemSize).copy(this);
          }
          toJSON() {
              const data1 = {
                  itemSize: this.itemSize,
                  type: this.array.constructor.name,
                  array: Array.prototype.slice.call(this.array),
                  normalized: this.normalized
              };
              if (this.name !== "") data1.name = this.name;
              if (this.usage !== StaticDrawUsage) data1.usage = this.usage;
              if (this.updateRange.offset !== 0 || this.updateRange.count !== -1) data1.updateRange = this.updateRange;
              return data1;
          }
      }
      BufferAttribute.prototype.isBufferAttribute = true;
      //
      class Int8BufferAttribute extends BufferAttribute {
          constructor(array1, itemSize1, normalized1){
              super(new Int8Array(array1), itemSize1, normalized1);
          }
      }
      class Uint8BufferAttribute extends BufferAttribute {
          constructor(array1, itemSize1, normalized1){
              super(new Uint8Array(array1), itemSize1, normalized1);
          }
      }
      class Uint8ClampedBufferAttribute extends BufferAttribute {
          constructor(array1, itemSize1, normalized1){
              super(new Uint8ClampedArray(array1), itemSize1, normalized1);
          }
      }
      class Int16BufferAttribute extends BufferAttribute {
          constructor(array1, itemSize1, normalized1){
              super(new Int16Array(array1), itemSize1, normalized1);
          }
      }
      class Uint16BufferAttribute extends BufferAttribute {
          constructor(array1, itemSize1, normalized1){
              super(new Uint16Array(array1), itemSize1, normalized1);
          }
      }
      class Int32BufferAttribute extends BufferAttribute {
          constructor(array1, itemSize1, normalized1){
              super(new Int32Array(array1), itemSize1, normalized1);
          }
      }
      class Uint32BufferAttribute extends BufferAttribute {
          constructor(array1, itemSize1, normalized1){
              super(new Uint32Array(array1), itemSize1, normalized1);
          }
      }
      class Float16BufferAttribute extends BufferAttribute {
          constructor(array1, itemSize1, normalized1){
              super(new Uint16Array(array1), itemSize1, normalized1);
          }
      }
      Float16BufferAttribute.prototype.isFloat16BufferAttribute = true;
      class Float32BufferAttribute extends BufferAttribute {
          constructor(array1, itemSize1, normalized1){
              super(new Float32Array(array1), itemSize1, normalized1);
          }
      }
      class Float64BufferAttribute extends BufferAttribute {
          constructor(array1, itemSize1, normalized1){
              super(new Float64Array(array1), itemSize1, normalized1);
          }
      }
      let _id$1 = 0;
      const _m1 = /*@__PURE__*/ new Matrix4();
      const _obj = /*@__PURE__*/ new Object3D();
      const _offset = /*@__PURE__*/ new Vector3();
      const _box$1 = /*@__PURE__*/ new Box3();
      const _boxMorphTargets = /*@__PURE__*/ new Box3();
      const _vector$8 = /*@__PURE__*/ new Vector3();
      class BufferGeometry extends EventDispatcher {
          constructor(){
              super();
              Object.defineProperty(this, "id", {
                  value: _id$1++
              });
              this.uuid = generateUUID();
              this.name = "";
              this.type = "BufferGeometry";
              this.index = null;
              this.attributes = {};
              this.morphAttributes = {};
              this.morphTargetsRelative = false;
              this.groups = [];
              this.boundingBox = null;
              this.boundingSphere = null;
              this.drawRange = {
                  start: 0,
                  count: Infinity
              };
              this.userData = {};
          }
          getIndex() {
              return this.index;
          }
          setIndex(index3) {
              if (Array.isArray(index3)) this.index = new (arrayNeedsUint32(index3) ? Uint32BufferAttribute : Uint16BufferAttribute)(index3, 1);
              else this.index = index3;
              return this;
          }
          getAttribute(name1) {
              return this.attributes[name1];
          }
          setAttribute(name1, attribute3) {
              this.attributes[name1] = attribute3;
              return this;
          }
          deleteAttribute(name1) {
              delete this.attributes[name1];
              return this;
          }
          hasAttribute(name1) {
              return this.attributes[name1] !== undefined;
          }
          addGroup(start1, count1, materialIndex1 = 0) {
              this.groups.push({
                  start: start1,
                  count: count1,
                  materialIndex: materialIndex1
              });
          }
          clearGroups() {
              this.groups = [];
          }
          setDrawRange(start1, count1) {
              this.drawRange.start = start1;
              this.drawRange.count = count1;
          }
          applyMatrix4(matrix1) {
              const position1 = this.attributes.position;
              if (position1 !== undefined) {
                  position1.applyMatrix4(matrix1);
                  position1.needsUpdate = true;
              }
              const normal1 = this.attributes.normal;
              if (normal1 !== undefined) {
                  const normalMatrix1 = new Matrix3().getNormalMatrix(matrix1);
                  normal1.applyNormalMatrix(normalMatrix1);
                  normal1.needsUpdate = true;
              }
              const tangent1 = this.attributes.tangent;
              if (tangent1 !== undefined) {
                  tangent1.transformDirection(matrix1);
                  tangent1.needsUpdate = true;
              }
              if (this.boundingBox !== null) this.computeBoundingBox();
              if (this.boundingSphere !== null) this.computeBoundingSphere();
              return this;
          }
          applyQuaternion(q3) {
              _m1.makeRotationFromQuaternion(q3);
              this.applyMatrix4(_m1);
              return this;
          }
          rotateX(angle1) {
              // rotate geometry around world x-axis
              _m1.makeRotationX(angle1);
              this.applyMatrix4(_m1);
              return this;
          }
          rotateY(angle1) {
              // rotate geometry around world y-axis
              _m1.makeRotationY(angle1);
              this.applyMatrix4(_m1);
              return this;
          }
          rotateZ(angle1) {
              // rotate geometry around world z-axis
              _m1.makeRotationZ(angle1);
              this.applyMatrix4(_m1);
              return this;
          }
          translate(x4, y3, z3) {
              // translate geometry
              _m1.makeTranslation(x4, y3, z3);
              this.applyMatrix4(_m1);
              return this;
          }
          scale(x4, y3, z3) {
              // scale geometry
              _m1.makeScale(x4, y3, z3);
              this.applyMatrix4(_m1);
              return this;
          }
          lookAt(vector1) {
              _obj.lookAt(vector1);
              _obj.updateMatrix();
              this.applyMatrix4(_obj.matrix);
              return this;
          }
          center() {
              this.computeBoundingBox();
              this.boundingBox.getCenter(_offset).negate();
              this.translate(_offset.x, _offset.y, _offset.z);
              return this;
          }
          setFromPoints(points1) {
              const position1 = [];
              for(let i3 = 0, l1 = points1.length; i3 < l1; i3++){
                  const point1 = points1[i3];
                  position1.push(point1.x, point1.y, point1.z || 0);
              }
              this.setAttribute("position", new Float32BufferAttribute(position1, 3));
              return this;
          }
          computeBoundingBox() {
              if (this.boundingBox === null) this.boundingBox = new Box3();
              const position1 = this.attributes.position;
              const morphAttributesPosition1 = this.morphAttributes.position;
              if (position1 && position1.isGLBufferAttribute) {
                  console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this);
                  this.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(Infinity, Infinity, Infinity));
                  return;
              }
              if (position1 !== undefined) {
                  this.boundingBox.setFromBufferAttribute(position1);
                  // process morph attributes if present
                  if (morphAttributesPosition1) for(let i3 = 0, il1 = morphAttributesPosition1.length; i3 < il1; i3++){
                      const morphAttribute1 = morphAttributesPosition1[i3];
                      _box$1.setFromBufferAttribute(morphAttribute1);
                      if (this.morphTargetsRelative) {
                          _vector$8.addVectors(this.boundingBox.min, _box$1.min);
                          this.boundingBox.expandByPoint(_vector$8);
                          _vector$8.addVectors(this.boundingBox.max, _box$1.max);
                          this.boundingBox.expandByPoint(_vector$8);
                      } else {
                          this.boundingBox.expandByPoint(_box$1.min);
                          this.boundingBox.expandByPoint(_box$1.max);
                      }
                  }
              } else this.boundingBox.makeEmpty();
              if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
          }
          computeBoundingSphere() {
              if (this.boundingSphere === null) this.boundingSphere = new Sphere();
              const position1 = this.attributes.position;
              const morphAttributesPosition1 = this.morphAttributes.position;
              if (position1 && position1.isGLBufferAttribute) {
                  console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this);
                  this.boundingSphere.set(new Vector3(), Infinity);
                  return;
              }
              if (position1) {
                  // first, find the center of the bounding sphere
                  const center1 = this.boundingSphere.center;
                  _box$1.setFromBufferAttribute(position1);
                  // process morph attributes if present
                  if (morphAttributesPosition1) for(let i3 = 0, il1 = morphAttributesPosition1.length; i3 < il1; i3++){
                      const morphAttribute1 = morphAttributesPosition1[i3];
                      _boxMorphTargets.setFromBufferAttribute(morphAttribute1);
                      if (this.morphTargetsRelative) {
                          _vector$8.addVectors(_box$1.min, _boxMorphTargets.min);
                          _box$1.expandByPoint(_vector$8);
                          _vector$8.addVectors(_box$1.max, _boxMorphTargets.max);
                          _box$1.expandByPoint(_vector$8);
                      } else {
                          _box$1.expandByPoint(_boxMorphTargets.min);
                          _box$1.expandByPoint(_boxMorphTargets.max);
                      }
                  }
                  _box$1.getCenter(center1);
                  // second, try to find a boundingSphere with a radius smaller than the
                  // boundingSphere of the boundingBox: sqrt(3) smaller in the best case
                  let maxRadiusSq1 = 0;
                  for(let i3 = 0, il1 = position1.count; i3 < il1; i3++){
                      _vector$8.fromBufferAttribute(position1, i3);
                      maxRadiusSq1 = Math.max(maxRadiusSq1, center1.distanceToSquared(_vector$8));
                  }
                  // process morph attributes if present
                  if (morphAttributesPosition1) for(let i3 = 0, il1 = morphAttributesPosition1.length; i3 < il1; i3++){
                      const morphAttribute1 = morphAttributesPosition1[i3];
                      const morphTargetsRelative1 = this.morphTargetsRelative;
                      for(let j1 = 0, jl1 = morphAttribute1.count; j1 < jl1; j1++){
                          _vector$8.fromBufferAttribute(morphAttribute1, j1);
                          if (morphTargetsRelative1) {
                              _offset.fromBufferAttribute(position1, j1);
                              _vector$8.add(_offset);
                          }
                          maxRadiusSq1 = Math.max(maxRadiusSq1, center1.distanceToSquared(_vector$8));
                      }
                  }
                  this.boundingSphere.radius = Math.sqrt(maxRadiusSq1);
                  if (isNaN(this.boundingSphere.radius)) console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
              }
          }
          computeTangents() {
              const index3 = this.index;
              const attributes1 = this.attributes;
              // based on http://www.terathon.com/code/tangent.html
              // (per vertex tangents)
              if (index3 === null || attributes1.position === undefined || attributes1.normal === undefined || attributes1.uv === undefined) {
                  console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
                  return;
              }
              const indices1 = index3.array;
              const positions1 = attributes1.position.array;
              const normals1 = attributes1.normal.array;
              const uvs1 = attributes1.uv.array;
              const nVertices1 = positions1.length / 3;
              if (this.hasAttribute("tangent") === false) this.setAttribute("tangent", new BufferAttribute(new Float32Array(4 * nVertices1), 4));
              const tangents1 = this.getAttribute("tangent").array;
              const tan11 = [], tan21 = [];
              for(let i3 = 0; i3 < nVertices1; i3++){
                  tan11[i3] = new Vector3();
                  tan21[i3] = new Vector3();
              }
              const vA1 = new Vector3(), vB1 = new Vector3(), vC1 = new Vector3(), uvA1 = new Vector2(), uvB1 = new Vector2(), uvC1 = new Vector2(), sdir1 = new Vector3(), tdir1 = new Vector3();
              function handleTriangle1(a3, b3, c4) {
                  vA1.fromArray(positions1, a3 * 3);
                  vB1.fromArray(positions1, b3 * 3);
                  vC1.fromArray(positions1, c4 * 3);
                  uvA1.fromArray(uvs1, a3 * 2);
                  uvB1.fromArray(uvs1, b3 * 2);
                  uvC1.fromArray(uvs1, c4 * 2);
                  vB1.sub(vA1);
                  vC1.sub(vA1);
                  uvB1.sub(uvA1);
                  uvC1.sub(uvA1);
                  const r1 = 1.0 / (uvB1.x * uvC1.y - uvC1.x * uvB1.y);
                  // silently ignore degenerate uv triangles having coincident or colinear vertices
                  if (!isFinite(r1)) return;
                  sdir1.copy(vB1).multiplyScalar(uvC1.y).addScaledVector(vC1, -uvB1.y).multiplyScalar(r1);
                  tdir1.copy(vC1).multiplyScalar(uvB1.x).addScaledVector(vB1, -uvC1.x).multiplyScalar(r1);
                  tan11[a3].add(sdir1);
                  tan11[b3].add(sdir1);
                  tan11[c4].add(sdir1);
                  tan21[a3].add(tdir1);
                  tan21[b3].add(tdir1);
                  tan21[c4].add(tdir1);
              }
              let groups1 = this.groups;
              if (groups1.length === 0) groups1 = [
                  {
                      start: 0,
                      count: indices1.length
                  }
              ];
              for(let i3 = 0, il1 = groups1.length; i3 < il1; ++i3){
                  const group1 = groups1[i3];
                  const start1 = group1.start;
                  const count1 = group1.count;
                  for(let j1 = start1, jl1 = start1 + count1; j1 < jl1; j1 += 3)handleTriangle1(indices1[j1 + 0], indices1[j1 + 1], indices1[j1 + 2]);
              }
              const tmp1 = new Vector3(), tmp21 = new Vector3();
              const n3 = new Vector3(), n25 = new Vector3();
              function handleVertex1(v4) {
                  n3.fromArray(normals1, v4 * 3);
                  n25.copy(n3);
                  const t4 = tan11[v4];
                  // Gram-Schmidt orthogonalize
                  tmp1.copy(t4);
                  tmp1.sub(n3.multiplyScalar(n3.dot(t4))).normalize();
                  // Calculate handedness
                  tmp21.crossVectors(n25, t4);
                  const test1 = tmp21.dot(tan21[v4]);
                  const w2 = test1 < 0.0 ? -1 : 1.0;
                  tangents1[v4 * 4] = tmp1.x;
                  tangents1[v4 * 4 + 1] = tmp1.y;
                  tangents1[v4 * 4 + 2] = tmp1.z;
                  tangents1[v4 * 4 + 3] = w2;
              }
              for(let i3 = 0, il1 = groups1.length; i3 < il1; ++i3){
                  const group1 = groups1[i3];
                  const start1 = group1.start;
                  const count1 = group1.count;
                  for(let j1 = start1, jl1 = start1 + count1; j1 < jl1; j1 += 3){
                      handleVertex1(indices1[j1 + 0]);
                      handleVertex1(indices1[j1 + 1]);
                      handleVertex1(indices1[j1 + 2]);
                  }
              }
          }
          computeVertexNormals() {
              const index3 = this.index;
              const positionAttribute1 = this.getAttribute("position");
              if (positionAttribute1 !== undefined) {
                  let normalAttribute1 = this.getAttribute("normal");
                  if (normalAttribute1 === undefined) {
                      normalAttribute1 = new BufferAttribute(new Float32Array(positionAttribute1.count * 3), 3);
                      this.setAttribute("normal", normalAttribute1);
                  } else // reset existing normals to zero
                  for(let i3 = 0, il1 = normalAttribute1.count; i3 < il1; i3++)normalAttribute1.setXYZ(i3, 0, 0, 0);
                  const pA1 = new Vector3(), pB1 = new Vector3(), pC1 = new Vector3();
                  const nA1 = new Vector3(), nB1 = new Vector3(), nC1 = new Vector3();
                  const cb1 = new Vector3(), ab1 = new Vector3();
                  // indexed elements
                  if (index3) for(let i3 = 0, il1 = index3.count; i3 < il1; i3 += 3){
                      const vA1 = index3.getX(i3 + 0);
                      const vB1 = index3.getX(i3 + 1);
                      const vC1 = index3.getX(i3 + 2);
                      pA1.fromBufferAttribute(positionAttribute1, vA1);
                      pB1.fromBufferAttribute(positionAttribute1, vB1);
                      pC1.fromBufferAttribute(positionAttribute1, vC1);
                      cb1.subVectors(pC1, pB1);
                      ab1.subVectors(pA1, pB1);
                      cb1.cross(ab1);
                      nA1.fromBufferAttribute(normalAttribute1, vA1);
                      nB1.fromBufferAttribute(normalAttribute1, vB1);
                      nC1.fromBufferAttribute(normalAttribute1, vC1);
                      nA1.add(cb1);
                      nB1.add(cb1);
                      nC1.add(cb1);
                      normalAttribute1.setXYZ(vA1, nA1.x, nA1.y, nA1.z);
                      normalAttribute1.setXYZ(vB1, nB1.x, nB1.y, nB1.z);
                      normalAttribute1.setXYZ(vC1, nC1.x, nC1.y, nC1.z);
                  }
                  else // non-indexed elements (unconnected triangle soup)
                  for(let i3 = 0, il1 = positionAttribute1.count; i3 < il1; i3 += 3){
                      pA1.fromBufferAttribute(positionAttribute1, i3 + 0);
                      pB1.fromBufferAttribute(positionAttribute1, i3 + 1);
                      pC1.fromBufferAttribute(positionAttribute1, i3 + 2);
                      cb1.subVectors(pC1, pB1);
                      ab1.subVectors(pA1, pB1);
                      cb1.cross(ab1);
                      normalAttribute1.setXYZ(i3 + 0, cb1.x, cb1.y, cb1.z);
                      normalAttribute1.setXYZ(i3 + 1, cb1.x, cb1.y, cb1.z);
                      normalAttribute1.setXYZ(i3 + 2, cb1.x, cb1.y, cb1.z);
                  }
                  this.normalizeNormals();
                  normalAttribute1.needsUpdate = true;
              }
          }
          merge(geometry1, offset2) {
              if (!(geometry1 && geometry1.isBufferGeometry)) {
                  console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", geometry1);
                  return;
              }
              if (offset2 === undefined) {
                  offset2 = 0;
                  console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.");
              }
              const attributes1 = this.attributes;
              for(const key1 in attributes1){
                  if (geometry1.attributes[key1] === undefined) continue;
                  const attribute11 = attributes1[key1];
                  const attributeArray11 = attribute11.array;
                  const attribute21 = geometry1.attributes[key1];
                  const attributeArray21 = attribute21.array;
                  const attributeOffset1 = attribute21.itemSize * offset2;
                  const length1 = Math.min(attributeArray21.length, attributeArray11.length - attributeOffset1);
                  for(let i3 = 0, j1 = attributeOffset1; i3 < length1; i3++, j1++)attributeArray11[j1] = attributeArray21[i3];
              }
              return this;
          }
          normalizeNormals() {
              const normals1 = this.attributes.normal;
              for(let i3 = 0, il1 = normals1.count; i3 < il1; i3++){
                  _vector$8.fromBufferAttribute(normals1, i3);
                  _vector$8.normalize();
                  normals1.setXYZ(i3, _vector$8.x, _vector$8.y, _vector$8.z);
              }
          }
          toNonIndexed() {
              function convertBufferAttribute1(attribute3, indices1) {
                  const array1 = attribute3.array;
                  const itemSize1 = attribute3.itemSize;
                  const normalized1 = attribute3.normalized;
                  const array21 = new array1.constructor(indices1.length * itemSize1);
                  let index3 = 0, index21 = 0;
                  for(let i3 = 0, l1 = indices1.length; i3 < l1; i3++){
                      if (attribute3.isInterleavedBufferAttribute) index3 = indices1[i3] * attribute3.data.stride + attribute3.offset;
                      else index3 = indices1[i3] * itemSize1;
                      for(let j1 = 0; j1 < itemSize1; j1++)array21[index21++] = array1[index3++];
                  }
                  return new BufferAttribute(array21, itemSize1, normalized1);
              }
              //
              if (this.index === null) {
                  console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.");
                  return this;
              }
              const geometry21 = new BufferGeometry();
              const indices1 = this.index.array;
              const attributes1 = this.attributes;
              // attributes
              for(const name1 in attributes1){
                  const attribute3 = attributes1[name1];
                  const newAttribute1 = convertBufferAttribute1(attribute3, indices1);
                  geometry21.setAttribute(name1, newAttribute1);
              }
              // morph attributes
              const morphAttributes1 = this.morphAttributes;
              for(const name1 in morphAttributes1){
                  const morphArray1 = [];
                  const morphAttribute1 = morphAttributes1[name1]; // morphAttribute: array of Float32BufferAttributes
                  for(let i3 = 0, il1 = morphAttribute1.length; i3 < il1; i3++){
                      const attribute3 = morphAttribute1[i3];
                      const newAttribute1 = convertBufferAttribute1(attribute3, indices1);
                      morphArray1.push(newAttribute1);
                  }
                  geometry21.morphAttributes[name1] = morphArray1;
              }
              geometry21.morphTargetsRelative = this.morphTargetsRelative;
              // groups
              const groups1 = this.groups;
              for(let i3 = 0, l1 = groups1.length; i3 < l1; i3++){
                  const group1 = groups1[i3];
                  geometry21.addGroup(group1.start, group1.count, group1.materialIndex);
              }
              return geometry21;
          }
          toJSON() {
              const data1 = {
                  metadata: {
                      version: 4.5,
                      type: "BufferGeometry",
                      generator: "BufferGeometry.toJSON"
                  }
              };
              // standard BufferGeometry serialization
              data1.uuid = this.uuid;
              data1.type = this.type;
              if (this.name !== "") data1.name = this.name;
              if (Object.keys(this.userData).length > 0) data1.userData = this.userData;
              if (this.parameters !== undefined) {
                  const parameters1 = this.parameters;
                  for(const key1 in parameters1)if (parameters1[key1] !== undefined) data1[key1] = parameters1[key1];
                  return data1;
              }
              // for simplicity the code assumes attributes are not shared across geometries, see #15811
              data1.data = {
                  attributes: {}
              };
              const index3 = this.index;
              if (index3 !== null) data1.data.index = {
                  type: index3.array.constructor.name,
                  array: Array.prototype.slice.call(index3.array)
              };
              const attributes1 = this.attributes;
              for(const key1 in attributes1){
                  const attribute3 = attributes1[key1];
                  data1.data.attributes[key1] = attribute3.toJSON(data1.data);
              }
              const morphAttributes1 = {};
              let hasMorphAttributes1 = false;
              for(const key1 in this.morphAttributes){
                  const attributeArray3 = this.morphAttributes[key1];
                  const array1 = [];
                  for(let i3 = 0, il1 = attributeArray3.length; i3 < il1; i3++){
                      const attribute3 = attributeArray3[i3];
                      array1.push(attribute3.toJSON(data1.data));
                  }
                  if (array1.length > 0) {
                      morphAttributes1[key1] = array1;
                      hasMorphAttributes1 = true;
                  }
              }
              if (hasMorphAttributes1) {
                  data1.data.morphAttributes = morphAttributes1;
                  data1.data.morphTargetsRelative = this.morphTargetsRelative;
              }
              const groups1 = this.groups;
              if (groups1.length > 0) data1.data.groups = JSON.parse(JSON.stringify(groups1));
              const boundingSphere1 = this.boundingSphere;
              if (boundingSphere1 !== null) data1.data.boundingSphere = {
                  center: boundingSphere1.center.toArray(),
                  radius: boundingSphere1.radius
              };
              return data1;
          }
          clone() {
              return new this.constructor().copy(this);
          }
          copy(source1) {
              // reset
              this.index = null;
              this.attributes = {};
              this.morphAttributes = {};
              this.groups = [];
              this.boundingBox = null;
              this.boundingSphere = null;
              // used for storing cloned, shared data
              const data1 = {};
              // name
              this.name = source1.name;
              // index
              const index3 = source1.index;
              if (index3 !== null) this.setIndex(index3.clone(data1));
              // attributes
              const attributes1 = source1.attributes;
              for(const name1 in attributes1){
                  const attribute3 = attributes1[name1];
                  this.setAttribute(name1, attribute3.clone(data1));
              }
              // morph attributes
              const morphAttributes1 = source1.morphAttributes;
              for(const name1 in morphAttributes1){
                  const array1 = [];
                  const morphAttribute1 = morphAttributes1[name1]; // morphAttribute: array of Float32BufferAttributes
                  for(let i3 = 0, l1 = morphAttribute1.length; i3 < l1; i3++)array1.push(morphAttribute1[i3].clone(data1));
                  this.morphAttributes[name1] = array1;
              }
              this.morphTargetsRelative = source1.morphTargetsRelative;
              // groups
              const groups1 = source1.groups;
              for(let i3 = 0, l1 = groups1.length; i3 < l1; i3++){
                  const group1 = groups1[i3];
                  this.addGroup(group1.start, group1.count, group1.materialIndex);
              }
              // bounding box
              const boundingBox1 = source1.boundingBox;
              if (boundingBox1 !== null) this.boundingBox = boundingBox1.clone();
              // bounding sphere
              const boundingSphere1 = source1.boundingSphere;
              if (boundingSphere1 !== null) this.boundingSphere = boundingSphere1.clone();
              // draw range
              this.drawRange.start = source1.drawRange.start;
              this.drawRange.count = source1.drawRange.count;
              // user data
              this.userData = source1.userData;
              // geometry generator parameters
              if (source1.parameters !== undefined) this.parameters = Object.assign({}, source1.parameters);
              return this;
          }
          dispose() {
              this.dispatchEvent({
                  type: "dispose"
              });
          }
      }
      BufferGeometry.prototype.isBufferGeometry = true;
      const _inverseMatrix$2 = /*@__PURE__*/ new Matrix4();
      const _ray$2 = /*@__PURE__*/ new Ray();
      const _sphere$3 = /*@__PURE__*/ new Sphere();
      const _vA$1 = /*@__PURE__*/ new Vector3();
      const _vB$1 = /*@__PURE__*/ new Vector3();
      const _vC$1 = /*@__PURE__*/ new Vector3();
      const _tempA = /*@__PURE__*/ new Vector3();
      const _tempB = /*@__PURE__*/ new Vector3();
      const _tempC = /*@__PURE__*/ new Vector3();
      const _morphA = /*@__PURE__*/ new Vector3();
      const _morphB = /*@__PURE__*/ new Vector3();
      const _morphC = /*@__PURE__*/ new Vector3();
      const _uvA$1 = /*@__PURE__*/ new Vector2();
      const _uvB$1 = /*@__PURE__*/ new Vector2();
      const _uvC$1 = /*@__PURE__*/ new Vector2();
      const _intersectionPoint = /*@__PURE__*/ new Vector3();
      const _intersectionPointWorld = /*@__PURE__*/ new Vector3();
      class Mesh extends Object3D {
          constructor(geometry1 = new BufferGeometry(), material1 = new MeshBasicMaterial()){
              super();
              this.type = "Mesh";
              this.geometry = geometry1;
              this.material = material1;
              this.updateMorphTargets();
          }
          copy(source1) {
              super.copy(source1);
              if (source1.morphTargetInfluences !== undefined) this.morphTargetInfluences = source1.morphTargetInfluences.slice();
              if (source1.morphTargetDictionary !== undefined) this.morphTargetDictionary = Object.assign({}, source1.morphTargetDictionary);
              this.material = source1.material;
              this.geometry = source1.geometry;
              return this;
          }
          updateMorphTargets() {
              const geometry1 = this.geometry;
              if (geometry1.isBufferGeometry) {
                  const morphAttributes1 = geometry1.morphAttributes;
                  const keys1 = Object.keys(morphAttributes1);
                  if (keys1.length > 0) {
                      const morphAttribute1 = morphAttributes1[keys1[0]];
                      if (morphAttribute1 !== undefined) {
                          this.morphTargetInfluences = [];
                          this.morphTargetDictionary = {};
                          for(let m1 = 0, ml1 = morphAttribute1.length; m1 < ml1; m1++){
                              const name1 = morphAttribute1[m1].name || String(m1);
                              this.morphTargetInfluences.push(0);
                              this.morphTargetDictionary[name1] = m1;
                          }
                      }
                  }
              } else {
                  const morphTargets1 = geometry1.morphTargets;
                  if (morphTargets1 !== undefined && morphTargets1.length > 0) console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
              }
          }
          raycast(raycaster1, intersects1) {
              const geometry1 = this.geometry;
              const material1 = this.material;
              const matrixWorld1 = this.matrixWorld;
              if (material1 === undefined) return;
              // Checking boundingSphere distance to ray
              if (geometry1.boundingSphere === null) geometry1.computeBoundingSphere();
              _sphere$3.copy(geometry1.boundingSphere);
              _sphere$3.applyMatrix4(matrixWorld1);
              if (raycaster1.ray.intersectsSphere(_sphere$3) === false) return;
              //
              _inverseMatrix$2.copy(matrixWorld1).invert();
              _ray$2.copy(raycaster1.ray).applyMatrix4(_inverseMatrix$2);
              // Check boundingBox before continuing
              if (geometry1.boundingBox !== null) {
                  if (_ray$2.intersectsBox(geometry1.boundingBox) === false) return;
              }
              let intersection1;
              if (geometry1.isBufferGeometry) {
                  const index3 = geometry1.index;
                  const position1 = geometry1.attributes.position;
                  const morphPosition1 = geometry1.morphAttributes.position;
                  const morphTargetsRelative1 = geometry1.morphTargetsRelative;
                  const uv4 = geometry1.attributes.uv;
                  const uv21 = geometry1.attributes.uv2;
                  const groups1 = geometry1.groups;
                  const drawRange1 = geometry1.drawRange;
                  if (index3 !== null) {
                      // indexed buffer geometry
                      if (Array.isArray(material1)) for(let i3 = 0, il1 = groups1.length; i3 < il1; i3++){
                          const group1 = groups1[i3];
                          const groupMaterial1 = material1[group1.materialIndex];
                          const start1 = Math.max(group1.start, drawRange1.start);
                          const end1 = Math.min(index3.count, Math.min(group1.start + group1.count, drawRange1.start + drawRange1.count));
                          for(let j1 = start1, jl1 = end1; j1 < jl1; j1 += 3){
                              const a3 = index3.getX(j1);
                              const b3 = index3.getX(j1 + 1);
                              const c4 = index3.getX(j1 + 2);
                              intersection1 = checkBufferGeometryIntersection(this, groupMaterial1, raycaster1, _ray$2, position1, morphPosition1, morphTargetsRelative1, uv4, uv21, a3, b3, c4);
                              if (intersection1) {
                                  intersection1.faceIndex = Math.floor(j1 / 3); // triangle number in indexed buffer semantics
                                  intersection1.face.materialIndex = group1.materialIndex;
                                  intersects1.push(intersection1);
                              }
                          }
                      }
                      else {
                          const start1 = Math.max(0, drawRange1.start);
                          const end1 = Math.min(index3.count, drawRange1.start + drawRange1.count);
                          for(let i3 = start1, il1 = end1; i3 < il1; i3 += 3){
                              const a3 = index3.getX(i3);
                              const b3 = index3.getX(i3 + 1);
                              const c4 = index3.getX(i3 + 2);
                              intersection1 = checkBufferGeometryIntersection(this, material1, raycaster1, _ray$2, position1, morphPosition1, morphTargetsRelative1, uv4, uv21, a3, b3, c4);
                              if (intersection1) {
                                  intersection1.faceIndex = Math.floor(i3 / 3); // triangle number in indexed buffer semantics
                                  intersects1.push(intersection1);
                              }
                          }
                      }
                  } else if (position1 !== undefined) {
                      // non-indexed buffer geometry
                      if (Array.isArray(material1)) for(let i3 = 0, il1 = groups1.length; i3 < il1; i3++){
                          const group1 = groups1[i3];
                          const groupMaterial1 = material1[group1.materialIndex];
                          const start1 = Math.max(group1.start, drawRange1.start);
                          const end1 = Math.min(position1.count, Math.min(group1.start + group1.count, drawRange1.start + drawRange1.count));
                          for(let j1 = start1, jl1 = end1; j1 < jl1; j1 += 3){
                              const a3 = j1;
                              const b3 = j1 + 1;
                              const c4 = j1 + 2;
                              intersection1 = checkBufferGeometryIntersection(this, groupMaterial1, raycaster1, _ray$2, position1, morphPosition1, morphTargetsRelative1, uv4, uv21, a3, b3, c4);
                              if (intersection1) {
                                  intersection1.faceIndex = Math.floor(j1 / 3); // triangle number in non-indexed buffer semantics
                                  intersection1.face.materialIndex = group1.materialIndex;
                                  intersects1.push(intersection1);
                              }
                          }
                      }
                      else {
                          const start1 = Math.max(0, drawRange1.start);
                          const end1 = Math.min(position1.count, drawRange1.start + drawRange1.count);
                          for(let i3 = start1, il1 = end1; i3 < il1; i3 += 3){
                              const a3 = i3;
                              const b3 = i3 + 1;
                              const c4 = i3 + 2;
                              intersection1 = checkBufferGeometryIntersection(this, material1, raycaster1, _ray$2, position1, morphPosition1, morphTargetsRelative1, uv4, uv21, a3, b3, c4);
                              if (intersection1) {
                                  intersection1.faceIndex = Math.floor(i3 / 3); // triangle number in non-indexed buffer semantics
                                  intersects1.push(intersection1);
                              }
                          }
                      }
                  }
              } else if (geometry1.isGeometry) console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
          }
      }
      Mesh.prototype.isMesh = true;
      function checkIntersection(object1, material1, raycaster1, ray1, pA1, pB1, pC1, point1) {
          let intersect1;
          if (material1.side === BackSide) intersect1 = ray1.intersectTriangle(pC1, pB1, pA1, true, point1);
          else intersect1 = ray1.intersectTriangle(pA1, pB1, pC1, material1.side !== DoubleSide, point1);
          if (intersect1 === null) return null;
          _intersectionPointWorld.copy(point1);
          _intersectionPointWorld.applyMatrix4(object1.matrixWorld);
          const distance1 = raycaster1.ray.origin.distanceTo(_intersectionPointWorld);
          if (distance1 < raycaster1.near || distance1 > raycaster1.far) return null;
          return {
              distance: distance1,
              point: _intersectionPointWorld.clone(),
              object: object1
          };
      }
      function checkBufferGeometryIntersection(object1, material1, raycaster1, ray1, position1, morphPosition1, morphTargetsRelative1, uv4, uv21, a3, b3, c4) {
          _vA$1.fromBufferAttribute(position1, a3);
          _vB$1.fromBufferAttribute(position1, b3);
          _vC$1.fromBufferAttribute(position1, c4);
          const morphInfluences1 = object1.morphTargetInfluences;
          if (morphPosition1 && morphInfluences1) {
              _morphA.set(0, 0, 0);
              _morphB.set(0, 0, 0);
              _morphC.set(0, 0, 0);
              for(let i3 = 0, il1 = morphPosition1.length; i3 < il1; i3++){
                  const influence1 = morphInfluences1[i3];
                  const morphAttribute1 = morphPosition1[i3];
                  if (influence1 === 0) continue;
                  _tempA.fromBufferAttribute(morphAttribute1, a3);
                  _tempB.fromBufferAttribute(morphAttribute1, b3);
                  _tempC.fromBufferAttribute(morphAttribute1, c4);
                  if (morphTargetsRelative1) {
                      _morphA.addScaledVector(_tempA, influence1);
                      _morphB.addScaledVector(_tempB, influence1);
                      _morphC.addScaledVector(_tempC, influence1);
                  } else {
                      _morphA.addScaledVector(_tempA.sub(_vA$1), influence1);
                      _morphB.addScaledVector(_tempB.sub(_vB$1), influence1);
                      _morphC.addScaledVector(_tempC.sub(_vC$1), influence1);
                  }
              }
              _vA$1.add(_morphA);
              _vB$1.add(_morphB);
              _vC$1.add(_morphC);
          }
          if (object1.isSkinnedMesh) {
              object1.boneTransform(a3, _vA$1);
              object1.boneTransform(b3, _vB$1);
              object1.boneTransform(c4, _vC$1);
          }
          const intersection1 = checkIntersection(object1, material1, raycaster1, ray1, _vA$1, _vB$1, _vC$1, _intersectionPoint);
          if (intersection1) {
              if (uv4) {
                  _uvA$1.fromBufferAttribute(uv4, a3);
                  _uvB$1.fromBufferAttribute(uv4, b3);
                  _uvC$1.fromBufferAttribute(uv4, c4);
                  intersection1.uv = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());
              }
              if (uv21) {
                  _uvA$1.fromBufferAttribute(uv21, a3);
                  _uvB$1.fromBufferAttribute(uv21, b3);
                  _uvC$1.fromBufferAttribute(uv21, c4);
                  intersection1.uv2 = Triangle.getUV(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());
              }
              const face1 = {
                  a: a3,
                  b: b3,
                  c: c4,
                  normal: new Vector3(),
                  materialIndex: 0
              };
              Triangle.getNormal(_vA$1, _vB$1, _vC$1, face1.normal);
              intersection1.face = face1;
          }
          return intersection1;
      }
      class BoxGeometry extends BufferGeometry {
          constructor(width1 = 1, height1 = 1, depth1 = 1, widthSegments1 = 1, heightSegments1 = 1, depthSegments1 = 1){
              super();
              this.type = "BoxGeometry";
              this.parameters = {
                  width: width1,
                  height: height1,
                  depth: depth1,
                  widthSegments: widthSegments1,
                  heightSegments: heightSegments1,
                  depthSegments: depthSegments1
              };
              const scope1 = this;
              // segments
              widthSegments1 = Math.floor(widthSegments1);
              heightSegments1 = Math.floor(heightSegments1);
              depthSegments1 = Math.floor(depthSegments1);
              // buffers
              const indices1 = [];
              const vertices1 = [];
              const normals1 = [];
              const uvs1 = [];
              // helper variables
              let numberOfVertices1 = 0;
              let groupStart1 = 0;
              // build each side of the box geometry
              buildPlane1("z", "y", "x", -1, -1, depth1, height1, width1, depthSegments1, heightSegments1, 0); // px
              buildPlane1("z", "y", "x", 1, -1, depth1, height1, -width1, depthSegments1, heightSegments1, 1); // nx
              buildPlane1("x", "z", "y", 1, 1, width1, depth1, height1, widthSegments1, depthSegments1, 2); // py
              buildPlane1("x", "z", "y", 1, -1, width1, depth1, -height1, widthSegments1, depthSegments1, 3); // ny
              buildPlane1("x", "y", "z", 1, -1, width1, height1, depth1, widthSegments1, heightSegments1, 4); // pz
              buildPlane1("x", "y", "z", -1, -1, width1, height1, -depth1, widthSegments1, heightSegments1, 5); // nz
              // build geometry
              this.setIndex(indices1);
              this.setAttribute("position", new Float32BufferAttribute(vertices1, 3));
              this.setAttribute("normal", new Float32BufferAttribute(normals1, 3));
              this.setAttribute("uv", new Float32BufferAttribute(uvs1, 2));
              function buildPlane1(u4, v4, w2, udir1, vdir1, width1, height1, depth1, gridX2, gridY2, materialIndex1) {
                  const segmentWidth1 = width1 / gridX2;
                  const segmentHeight1 = height1 / gridY2;
                  const widthHalf1 = width1 / 2;
                  const heightHalf1 = height1 / 2;
                  const depthHalf1 = depth1 / 2;
                  const gridX11 = gridX2 + 1;
                  const gridY11 = gridY2 + 1;
                  let vertexCounter1 = 0;
                  let groupCount1 = 0;
                  const vector1 = new Vector3();
                  // generate vertices, normals and uvs
                  for(let iy1 = 0; iy1 < gridY11; iy1++){
                      const y3 = iy1 * segmentHeight1 - heightHalf1;
                      for(let ix1 = 0; ix1 < gridX11; ix1++){
                          const x4 = ix1 * segmentWidth1 - widthHalf1;
                          // set values to correct vector component
                          vector1[u4] = x4 * udir1;
                          vector1[v4] = y3 * vdir1;
                          vector1[w2] = depthHalf1;
                          // now apply vector to vertex buffer
                          vertices1.push(vector1.x, vector1.y, vector1.z);
                          // set values to correct vector component
                          vector1[u4] = 0;
                          vector1[v4] = 0;
                          vector1[w2] = depth1 > 0 ? 1 : -1;
                          // now apply vector to normal buffer
                          normals1.push(vector1.x, vector1.y, vector1.z);
                          // uvs
                          uvs1.push(ix1 / gridX2);
                          uvs1.push(1 - iy1 / gridY2);
                          // counters
                          vertexCounter1 += 1;
                      }
                  }
                  // indices
                  // 1. you need three indices to draw a single face
                  // 2. a single segment consists of two faces
                  // 3. so we need to generate six (2*3) indices per segment
                  for(let iy1 = 0; iy1 < gridY2; iy1++)for(let ix1 = 0; ix1 < gridX2; ix1++){
                      const a3 = numberOfVertices1 + ix1 + gridX11 * iy1;
                      const b3 = numberOfVertices1 + ix1 + gridX11 * (iy1 + 1);
                      const c4 = numberOfVertices1 + (ix1 + 1) + gridX11 * (iy1 + 1);
                      const d7 = numberOfVertices1 + (ix1 + 1) + gridX11 * iy1;
                      // faces
                      indices1.push(a3, b3, d7);
                      indices1.push(b3, c4, d7);
                      // increase counter
                      groupCount1 += 6;
                  }
                  // add a group to the geometry. this will ensure multi material support
                  scope1.addGroup(groupStart1, groupCount1, materialIndex1);
                  // calculate new start value for groups
                  groupStart1 += groupCount1;
                  // update total number of vertices
                  numberOfVertices1 += vertexCounter1;
              }
          }
          static fromJSON(data1) {
              return new BoxGeometry(data1.width, data1.height, data1.depth, data1.widthSegments, data1.heightSegments, data1.depthSegments);
          }
      }
      /**
     * Uniform Utilities
     */ function cloneUniforms(src2) {
          const dst1 = {};
          for(const u4 in src2){
              dst1[u4] = {};
              for(const p6 in src2[u4]){
                  const property1 = src2[u4][p6];
                  if (property1 && (property1.isColor || property1.isMatrix3 || property1.isMatrix4 || property1.isVector2 || property1.isVector3 || property1.isVector4 || property1.isTexture || property1.isQuaternion)) dst1[u4][p6] = property1.clone();
                  else if (Array.isArray(property1)) dst1[u4][p6] = property1.slice();
                  else dst1[u4][p6] = property1;
              }
          }
          return dst1;
      }
      function mergeUniforms(uniforms1) {
          const merged1 = {};
          for(let u4 = 0; u4 < uniforms1.length; u4++){
              const tmp1 = cloneUniforms(uniforms1[u4]);
              for(const p6 in tmp1)merged1[p6] = tmp1[p6];
          }
          return merged1;
      }
      // Legacy
      const UniformsUtils = {
          clone: cloneUniforms,
          merge: mergeUniforms
      };
      var default_vertex = "void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
      var default_fragment = "void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
      /**
     * parameters = {
     *  defines: { "label" : "value" },
     *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
     *
     *  fragmentShader: <string>,
     *  vertexShader: <string>,
     *
     *  wireframe: <boolean>,
     *  wireframeLinewidth: <float>,
     *
     *  lights: <bool>
     * }
     */ class ShaderMaterial extends Material {
          constructor(parameters1){
              super();
              this.type = "ShaderMaterial";
              this.defines = {};
              this.uniforms = {};
              this.vertexShader = default_vertex;
              this.fragmentShader = default_fragment;
              this.linewidth = 1;
              this.wireframe = false;
              this.wireframeLinewidth = 1;
              this.fog = false; // set to use scene fog
              this.lights = false; // set to use scene lights
              this.clipping = false; // set to use user-defined clipping planes
              this.extensions = {
                  derivatives: false,
                  fragDepth: false,
                  drawBuffers: false,
                  shaderTextureLOD: false // set to use shader texture LOD
              };
              // When rendered geometry doesn't include these attributes but the material does,
              // use these default values in WebGL. This avoids errors when buffer data is missing.
              this.defaultAttributeValues = {
                  "color": [
                      1,
                      1,
                      1
                  ],
                  "uv": [
                      0,
                      0
                  ],
                  "uv2": [
                      0,
                      0
                  ]
              };
              this.index0AttributeName = undefined;
              this.uniformsNeedUpdate = false;
              this.glslVersion = null;
              if (parameters1 !== undefined) {
                  if (parameters1.attributes !== undefined) console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.");
                  this.setValues(parameters1);
              }
          }
          copy(source1) {
              super.copy(source1);
              this.fragmentShader = source1.fragmentShader;
              this.vertexShader = source1.vertexShader;
              this.uniforms = cloneUniforms(source1.uniforms);
              this.defines = Object.assign({}, source1.defines);
              this.wireframe = source1.wireframe;
              this.wireframeLinewidth = source1.wireframeLinewidth;
              this.lights = source1.lights;
              this.clipping = source1.clipping;
              this.extensions = Object.assign({}, source1.extensions);
              this.glslVersion = source1.glslVersion;
              return this;
          }
          toJSON(meta1) {
              const data1 = super.toJSON(meta1);
              data1.glslVersion = this.glslVersion;
              data1.uniforms = {};
              for(const name1 in this.uniforms){
                  const uniform1 = this.uniforms[name1];
                  const value1 = uniform1.value;
                  if (value1 && value1.isTexture) data1.uniforms[name1] = {
                      type: "t",
                      value: value1.toJSON(meta1).uuid
                  };
                  else if (value1 && value1.isColor) data1.uniforms[name1] = {
                      type: "c",
                      value: value1.getHex()
                  };
                  else if (value1 && value1.isVector2) data1.uniforms[name1] = {
                      type: "v2",
                      value: value1.toArray()
                  };
                  else if (value1 && value1.isVector3) data1.uniforms[name1] = {
                      type: "v3",
                      value: value1.toArray()
                  };
                  else if (value1 && value1.isVector4) data1.uniforms[name1] = {
                      type: "v4",
                      value: value1.toArray()
                  };
                  else if (value1 && value1.isMatrix3) data1.uniforms[name1] = {
                      type: "m3",
                      value: value1.toArray()
                  };
                  else if (value1 && value1.isMatrix4) data1.uniforms[name1] = {
                      type: "m4",
                      value: value1.toArray()
                  };
                  else data1.uniforms[name1] = {
                      value: value1
                  };
              }
              if (Object.keys(this.defines).length > 0) data1.defines = this.defines;
              data1.vertexShader = this.vertexShader;
              data1.fragmentShader = this.fragmentShader;
              const extensions1 = {};
              for(const key1 in this.extensions)if (this.extensions[key1] === true) extensions1[key1] = true;
              if (Object.keys(extensions1).length > 0) data1.extensions = extensions1;
              return data1;
          }
      }
      ShaderMaterial.prototype.isShaderMaterial = true;
      class Camera extends Object3D {
          constructor(){
              super();
              this.type = "Camera";
              this.matrixWorldInverse = new Matrix4();
              this.projectionMatrix = new Matrix4();
              this.projectionMatrixInverse = new Matrix4();
          }
          copy(source1, recursive1) {
              super.copy(source1, recursive1);
              this.matrixWorldInverse.copy(source1.matrixWorldInverse);
              this.projectionMatrix.copy(source1.projectionMatrix);
              this.projectionMatrixInverse.copy(source1.projectionMatrixInverse);
              return this;
          }
          getWorldDirection(target1) {
              this.updateWorldMatrix(true, false);
              const e1 = this.matrixWorld.elements;
              return target1.set(-e1[8], -e1[9], -e1[10]).normalize();
          }
          updateMatrixWorld(force1) {
              super.updateMatrixWorld(force1);
              this.matrixWorldInverse.copy(this.matrixWorld).invert();
          }
          updateWorldMatrix(updateParents1, updateChildren1) {
              super.updateWorldMatrix(updateParents1, updateChildren1);
              this.matrixWorldInverse.copy(this.matrixWorld).invert();
          }
          clone() {
              return new this.constructor().copy(this);
          }
      }
      Camera.prototype.isCamera = true;
      class PerspectiveCamera extends Camera {
          constructor(fov1 = 50, aspect1 = 1, near1 = 0.1, far1 = 2000){
              super();
              this.type = "PerspectiveCamera";
              this.fov = fov1;
              this.zoom = 1;
              this.near = near1;
              this.far = far1;
              this.focus = 10;
              this.aspect = aspect1;
              this.view = null;
              this.filmGauge = 35; // width of the film (default in millimeters)
              this.filmOffset = 0; // horizontal film offset (same unit as gauge)
              this.updateProjectionMatrix();
          }
          copy(source1, recursive1) {
              super.copy(source1, recursive1);
              this.fov = source1.fov;
              this.zoom = source1.zoom;
              this.near = source1.near;
              this.far = source1.far;
              this.focus = source1.focus;
              this.aspect = source1.aspect;
              this.view = source1.view === null ? null : Object.assign({}, source1.view);
              this.filmGauge = source1.filmGauge;
              this.filmOffset = source1.filmOffset;
              return this;
          }
          /**
         * Sets the FOV by focal length in respect to the current .filmGauge.
         *
         * The default film gauge is 35, so that the focal length can be specified for
         * a 35mm (full frame) camera.
         *
         * Values for focal length and film gauge must have the same unit.
         */ setFocalLength(focalLength1) {
              /** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */ const vExtentSlope1 = 0.5 * this.getFilmHeight() / focalLength1;
              this.fov = RAD2DEG * 2 * Math.atan(vExtentSlope1);
              this.updateProjectionMatrix();
          }
          /**
         * Calculates the focal length from the current .fov and .filmGauge.
         */ getFocalLength() {
              const vExtentSlope1 = Math.tan(DEG2RAD * 0.5 * this.fov);
              return 0.5 * this.getFilmHeight() / vExtentSlope1;
          }
          getEffectiveFOV() {
              return RAD2DEG * 2 * Math.atan(Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom);
          }
          getFilmWidth() {
              // film not completely covered in portrait format (aspect < 1)
              return this.filmGauge * Math.min(this.aspect, 1);
          }
          getFilmHeight() {
              // film not completely covered in landscape format (aspect > 1)
              return this.filmGauge / Math.max(this.aspect, 1);
          }
          /**
         * Sets an offset in a larger frustum. This is useful for multi-window or
         * multi-monitor/multi-machine setups.
         *
         * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
         * the monitors are in grid like this
         *
         *   +---+---+---+
         *   | A | B | C |
         *   +---+---+---+
         *   | D | E | F |
         *   +---+---+---+
         *
         * then for each monitor you would call it like this
         *
         *   const w = 1920;
         *   const h = 1080;
         *   const fullWidth = w * 3;
         *   const fullHeight = h * 2;
         *
         *   --A--
         *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
         *   --B--
         *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
         *   --C--
         *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
         *   --D--
         *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
         *   --E--
         *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
         *   --F--
         *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
         *
         *   Note there is no reason monitors have to be the same size or in a grid.
         */ setViewOffset(fullWidth1, fullHeight1, x4, y3, width1, height1) {
              this.aspect = fullWidth1 / fullHeight1;
              if (this.view === null) this.view = {
                  enabled: true,
                  fullWidth: 1,
                  fullHeight: 1,
                  offsetX: 0,
                  offsetY: 0,
                  width: 1,
                  height: 1
              };
              this.view.enabled = true;
              this.view.fullWidth = fullWidth1;
              this.view.fullHeight = fullHeight1;
              this.view.offsetX = x4;
              this.view.offsetY = y3;
              this.view.width = width1;
              this.view.height = height1;
              this.updateProjectionMatrix();
          }
          clearViewOffset() {
              if (this.view !== null) this.view.enabled = false;
              this.updateProjectionMatrix();
          }
          updateProjectionMatrix() {
              const near1 = this.near;
              let top1 = near1 * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;
              let height1 = 2 * top1;
              let width1 = this.aspect * height1;
              let left1 = -0.5 * width1;
              const view1 = this.view;
              if (this.view !== null && this.view.enabled) {
                  const fullWidth1 = view1.fullWidth, fullHeight1 = view1.fullHeight;
                  left1 += view1.offsetX * width1 / fullWidth1;
                  top1 -= view1.offsetY * height1 / fullHeight1;
                  width1 *= view1.width / fullWidth1;
                  height1 *= view1.height / fullHeight1;
              }
              const skew1 = this.filmOffset;
              if (skew1 !== 0) left1 += near1 * skew1 / this.getFilmWidth();
              this.projectionMatrix.makePerspective(left1, left1 + width1, top1, top1 - height1, near1, this.far);
              this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
          }
          toJSON(meta1) {
              const data1 = super.toJSON(meta1);
              data1.object.fov = this.fov;
              data1.object.zoom = this.zoom;
              data1.object.near = this.near;
              data1.object.far = this.far;
              data1.object.focus = this.focus;
              data1.object.aspect = this.aspect;
              if (this.view !== null) data1.object.view = Object.assign({}, this.view);
              data1.object.filmGauge = this.filmGauge;
              data1.object.filmOffset = this.filmOffset;
              return data1;
          }
      }
      PerspectiveCamera.prototype.isPerspectiveCamera = true;
      const fov = 90, aspect = 1;
      class CubeCamera extends Object3D {
          constructor(near1, far1, renderTarget1){
              super();
              this.type = "CubeCamera";
              if (renderTarget1.isWebGLCubeRenderTarget !== true) {
                  console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");
                  return;
              }
              this.renderTarget = renderTarget1;
              const cameraPX1 = new PerspectiveCamera(fov, aspect, near1, far1);
              cameraPX1.layers = this.layers;
              cameraPX1.up.set(0, -1, 0);
              cameraPX1.lookAt(new Vector3(1, 0, 0));
              this.add(cameraPX1);
              const cameraNX1 = new PerspectiveCamera(fov, aspect, near1, far1);
              cameraNX1.layers = this.layers;
              cameraNX1.up.set(0, -1, 0);
              cameraNX1.lookAt(new Vector3(-1, 0, 0));
              this.add(cameraNX1);
              const cameraPY1 = new PerspectiveCamera(fov, aspect, near1, far1);
              cameraPY1.layers = this.layers;
              cameraPY1.up.set(0, 0, 1);
              cameraPY1.lookAt(new Vector3(0, 1, 0));
              this.add(cameraPY1);
              const cameraNY1 = new PerspectiveCamera(fov, aspect, near1, far1);
              cameraNY1.layers = this.layers;
              cameraNY1.up.set(0, 0, -1);
              cameraNY1.lookAt(new Vector3(0, -1, 0));
              this.add(cameraNY1);
              const cameraPZ1 = new PerspectiveCamera(fov, aspect, near1, far1);
              cameraPZ1.layers = this.layers;
              cameraPZ1.up.set(0, -1, 0);
              cameraPZ1.lookAt(new Vector3(0, 0, 1));
              this.add(cameraPZ1);
              const cameraNZ1 = new PerspectiveCamera(fov, aspect, near1, far1);
              cameraNZ1.layers = this.layers;
              cameraNZ1.up.set(0, -1, 0);
              cameraNZ1.lookAt(new Vector3(0, 0, -1));
              this.add(cameraNZ1);
          }
          update(renderer1, scene1) {
              if (this.parent === null) this.updateMatrixWorld();
              const renderTarget1 = this.renderTarget;
              const [cameraPX1, cameraNX1, cameraPY1, cameraNY1, cameraPZ1, cameraNZ1] = this.children;
              const currentXrEnabled1 = renderer1.xr.enabled;
              const currentRenderTarget1 = renderer1.getRenderTarget();
              renderer1.xr.enabled = false;
              const generateMipmaps1 = renderTarget1.texture.generateMipmaps;
              renderTarget1.texture.generateMipmaps = false;
              renderer1.setRenderTarget(renderTarget1, 0);
              renderer1.render(scene1, cameraPX1);
              renderer1.setRenderTarget(renderTarget1, 1);
              renderer1.render(scene1, cameraNX1);
              renderer1.setRenderTarget(renderTarget1, 2);
              renderer1.render(scene1, cameraPY1);
              renderer1.setRenderTarget(renderTarget1, 3);
              renderer1.render(scene1, cameraNY1);
              renderer1.setRenderTarget(renderTarget1, 4);
              renderer1.render(scene1, cameraPZ1);
              renderTarget1.texture.generateMipmaps = generateMipmaps1;
              renderer1.setRenderTarget(renderTarget1, 5);
              renderer1.render(scene1, cameraNZ1);
              renderer1.setRenderTarget(currentRenderTarget1);
              renderer1.xr.enabled = currentXrEnabled1;
              renderTarget1.texture.needsPMREMUpdate = true;
          }
      }
      class CubeTexture extends Texture {
          constructor(images1, mapping1, wrapS1, wrapT1, magFilter1, minFilter1, format1, type1, anisotropy1, encoding1){
              images1 = images1 !== undefined ? images1 : [];
              mapping1 = mapping1 !== undefined ? mapping1 : CubeReflectionMapping;
              super(images1, mapping1, wrapS1, wrapT1, magFilter1, minFilter1, format1, type1, anisotropy1, encoding1);
              this.flipY = false;
          }
          get images() {
              return this.image;
          }
          set images(value1) {
              this.image = value1;
          }
      }
      CubeTexture.prototype.isCubeTexture = true;
      class WebGLCubeRenderTarget extends WebGLRenderTarget {
          constructor(size1, options1 = {}){
              super(size1, size1, options1);
              const image1 = {
                  width: size1,
                  height: size1,
                  depth: 1
              };
              const images1 = [
                  image1,
                  image1,
                  image1,
                  image1,
                  image1,
                  image1
              ];
              this.texture = new CubeTexture(images1, options1.mapping, options1.wrapS, options1.wrapT, options1.magFilter, options1.minFilter, options1.format, options1.type, options1.anisotropy, options1.encoding);
              // By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)
              // in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,
              // in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.
              // three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped
              // and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture
              // as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).
              this.texture.isRenderTargetTexture = true;
              this.texture.generateMipmaps = options1.generateMipmaps !== undefined ? options1.generateMipmaps : false;
              this.texture.minFilter = options1.minFilter !== undefined ? options1.minFilter : LinearFilter;
          }
          fromEquirectangularTexture(renderer1, texture1) {
              this.texture.type = texture1.type;
              this.texture.format = RGBAFormat; // see #18859
              this.texture.encoding = texture1.encoding;
              this.texture.generateMipmaps = texture1.generateMipmaps;
              this.texture.minFilter = texture1.minFilter;
              this.texture.magFilter = texture1.magFilter;
              const shader1 = {
                  uniforms: {
                      tEquirect: {
                          value: null
                      }
                  },
                  vertexShader: /* glsl */ `
  
                  varying vec3 vWorldDirection;
  
                  vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
  
                      return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
  
                  }
  
                  void main() {
  
                      vWorldDirection = transformDirection( position, modelMatrix );
  
                      #include <begin_vertex>
                      #include <project_vertex>
  
                  }
              `,
                  fragmentShader: /* glsl */ `
  
                  uniform sampler2D tEquirect;
  
                  varying vec3 vWorldDirection;
  
                  #include <common>
  
                  void main() {
  
                      vec3 direction = normalize( vWorldDirection );
  
                      vec2 sampleUV = equirectUv( direction );
  
                      gl_FragColor = texture2D( tEquirect, sampleUV );
  
                  }
              `
              };
              const geometry1 = new BoxGeometry(5, 5, 5);
              const material1 = new ShaderMaterial({
                  name: "CubemapFromEquirect",
                  uniforms: cloneUniforms(shader1.uniforms),
                  vertexShader: shader1.vertexShader,
                  fragmentShader: shader1.fragmentShader,
                  side: BackSide,
                  blending: NoBlending
              });
              material1.uniforms.tEquirect.value = texture1;
              const mesh1 = new Mesh(geometry1, material1);
              const currentMinFilter1 = texture1.minFilter;
              // Avoid blurred poles
              if (texture1.minFilter === LinearMipmapLinearFilter) texture1.minFilter = LinearFilter;
              const camera1 = new CubeCamera(1, 10, this);
              camera1.update(renderer1, mesh1);
              texture1.minFilter = currentMinFilter1;
              mesh1.geometry.dispose();
              mesh1.material.dispose();
              return this;
          }
          clear(renderer1, color3, depth1, stencil1) {
              const currentRenderTarget1 = renderer1.getRenderTarget();
              for(let i3 = 0; i3 < 6; i3++){
                  renderer1.setRenderTarget(this, i3);
                  renderer1.clear(color3, depth1, stencil1);
              }
              renderer1.setRenderTarget(currentRenderTarget1);
          }
      }
      WebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;
      const _vector1 = /*@__PURE__*/ new Vector3();
      const _vector2 = /*@__PURE__*/ new Vector3();
      const _normalMatrix = /*@__PURE__*/ new Matrix3();
      class Plane {
          constructor(normal1 = new Vector3(1, 0, 0), constant1 = 0){
              // normal is assumed to be normalized
              this.normal = normal1;
              this.constant = constant1;
          }
          set(normal1, constant1) {
              this.normal.copy(normal1);
              this.constant = constant1;
              return this;
          }
          setComponents(x4, y3, z3, w2) {
              this.normal.set(x4, y3, z3);
              this.constant = w2;
              return this;
          }
          setFromNormalAndCoplanarPoint(normal1, point1) {
              this.normal.copy(normal1);
              this.constant = -point1.dot(this.normal);
              return this;
          }
          setFromCoplanarPoints(a3, b3, c4) {
              const normal1 = _vector1.subVectors(c4, b3).cross(_vector2.subVectors(a3, b3)).normalize();
              // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?
              this.setFromNormalAndCoplanarPoint(normal1, a3);
              return this;
          }
          copy(plane1) {
              this.normal.copy(plane1.normal);
              this.constant = plane1.constant;
              return this;
          }
          normalize() {
              // Note: will lead to a divide by zero if the plane is invalid.
              const inverseNormalLength1 = 1.0 / this.normal.length();
              this.normal.multiplyScalar(inverseNormalLength1);
              this.constant *= inverseNormalLength1;
              return this;
          }
          negate() {
              this.constant *= -1;
              this.normal.negate();
              return this;
          }
          distanceToPoint(point1) {
              return this.normal.dot(point1) + this.constant;
          }
          distanceToSphere(sphere1) {
              return this.distanceToPoint(sphere1.center) - sphere1.radius;
          }
          projectPoint(point1, target1) {
              return target1.copy(this.normal).multiplyScalar(-this.distanceToPoint(point1)).add(point1);
          }
          intersectLine(line1, target1) {
              const direction1 = line1.delta(_vector1);
              const denominator1 = this.normal.dot(direction1);
              if (denominator1 === 0) {
                  // line is coplanar, return origin
                  if (this.distanceToPoint(line1.start) === 0) return target1.copy(line1.start);
                  // Unsure if this is the correct method to handle this case.
                  return null;
              }
              const t4 = -(line1.start.dot(this.normal) + this.constant) / denominator1;
              if (t4 < 0 || t4 > 1) return null;
              return target1.copy(direction1).multiplyScalar(t4).add(line1.start);
          }
          intersectsLine(line1) {
              // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.
              const startSign1 = this.distanceToPoint(line1.start);
              const endSign1 = this.distanceToPoint(line1.end);
              return startSign1 < 0 && endSign1 > 0 || endSign1 < 0 && startSign1 > 0;
          }
          intersectsBox(box1) {
              return box1.intersectsPlane(this);
          }
          intersectsSphere(sphere1) {
              return sphere1.intersectsPlane(this);
          }
          coplanarPoint(target1) {
              return target1.copy(this.normal).multiplyScalar(-this.constant);
          }
          applyMatrix4(matrix1, optionalNormalMatrix1) {
              const normalMatrix1 = optionalNormalMatrix1 || _normalMatrix.getNormalMatrix(matrix1);
              const referencePoint1 = this.coplanarPoint(_vector1).applyMatrix4(matrix1);
              const normal1 = this.normal.applyMatrix3(normalMatrix1).normalize();
              this.constant = -referencePoint1.dot(normal1);
              return this;
          }
          translate(offset2) {
              this.constant -= offset2.dot(this.normal);
              return this;
          }
          equals(plane1) {
              return plane1.normal.equals(this.normal) && plane1.constant === this.constant;
          }
          clone() {
              return new this.constructor().copy(this);
          }
      }
      Plane.prototype.isPlane = true;
      const _sphere$2 = /*@__PURE__*/ new Sphere();
      const _vector$7 = /*@__PURE__*/ new Vector3();
      class Frustum {
          constructor(p01 = new Plane(), p11 = new Plane(), p21 = new Plane(), p31 = new Plane(), p41 = new Plane(), p51 = new Plane()){
              this.planes = [
                  p01,
                  p11,
                  p21,
                  p31,
                  p41,
                  p51
              ];
          }
          set(p01, p11, p21, p31, p41, p51) {
              const planes1 = this.planes;
              planes1[0].copy(p01);
              planes1[1].copy(p11);
              planes1[2].copy(p21);
              planes1[3].copy(p31);
              planes1[4].copy(p41);
              planes1[5].copy(p51);
              return this;
          }
          copy(frustum1) {
              const planes1 = this.planes;
              for(let i3 = 0; i3 < 6; i3++)planes1[i3].copy(frustum1.planes[i3]);
              return this;
          }
          setFromProjectionMatrix(m1) {
              const planes1 = this.planes;
              const me16 = m1.elements;
              const me01 = me16[0], me17 = me16[1], me21 = me16[2], me31 = me16[3];
              const me41 = me16[4], me51 = me16[5], me61 = me16[6], me71 = me16[7];
              const me81 = me16[8], me91 = me16[9], me101 = me16[10], me111 = me16[11];
              const me121 = me16[12], me131 = me16[13], me141 = me16[14], me151 = me16[15];
              planes1[0].setComponents(me31 - me01, me71 - me41, me111 - me81, me151 - me121).normalize();
              planes1[1].setComponents(me31 + me01, me71 + me41, me111 + me81, me151 + me121).normalize();
              planes1[2].setComponents(me31 + me17, me71 + me51, me111 + me91, me151 + me131).normalize();
              planes1[3].setComponents(me31 - me17, me71 - me51, me111 - me91, me151 - me131).normalize();
              planes1[4].setComponents(me31 - me21, me71 - me61, me111 - me101, me151 - me141).normalize();
              planes1[5].setComponents(me31 + me21, me71 + me61, me111 + me101, me151 + me141).normalize();
              return this;
          }
          intersectsObject(object1) {
              const geometry1 = object1.geometry;
              if (geometry1.boundingSphere === null) geometry1.computeBoundingSphere();
              _sphere$2.copy(geometry1.boundingSphere).applyMatrix4(object1.matrixWorld);
              return this.intersectsSphere(_sphere$2);
          }
          intersectsSprite(sprite1) {
              _sphere$2.center.set(0, 0, 0);
              _sphere$2.radius = 0.7071067811865476;
              _sphere$2.applyMatrix4(sprite1.matrixWorld);
              return this.intersectsSphere(_sphere$2);
          }
          intersectsSphere(sphere1) {
              const planes1 = this.planes;
              const center1 = sphere1.center;
              const negRadius1 = -sphere1.radius;
              for(let i3 = 0; i3 < 6; i3++){
                  const distance1 = planes1[i3].distanceToPoint(center1);
                  if (distance1 < negRadius1) return false;
              }
              return true;
          }
          intersectsBox(box1) {
              const planes1 = this.planes;
              for(let i3 = 0; i3 < 6; i3++){
                  const plane1 = planes1[i3];
                  // corner at max distance
                  _vector$7.x = plane1.normal.x > 0 ? box1.max.x : box1.min.x;
                  _vector$7.y = plane1.normal.y > 0 ? box1.max.y : box1.min.y;
                  _vector$7.z = plane1.normal.z > 0 ? box1.max.z : box1.min.z;
                  if (plane1.distanceToPoint(_vector$7) < 0) return false;
              }
              return true;
          }
          containsPoint(point1) {
              const planes1 = this.planes;
              for(let i3 = 0; i3 < 6; i3++){
                  if (planes1[i3].distanceToPoint(point1) < 0) return false;
              }
              return true;
          }
          clone() {
              return new this.constructor().copy(this);
          }
      }
      function WebGLAnimation() {
          let context1 = null;
          let isAnimating1 = false;
          let animationLoop1 = null;
          let requestId1 = null;
          function onAnimationFrame1(time1, frame1) {
              animationLoop1(time1, frame1);
              requestId1 = context1.requestAnimationFrame(onAnimationFrame1);
          }
          return {
              start: function() {
                  if (isAnimating1 === true) return;
                  if (animationLoop1 === null) return;
                  requestId1 = context1.requestAnimationFrame(onAnimationFrame1);
                  isAnimating1 = true;
              },
              stop: function() {
                  context1.cancelAnimationFrame(requestId1);
                  isAnimating1 = false;
              },
              setAnimationLoop: function(callback1) {
                  animationLoop1 = callback1;
              },
              setContext: function(value1) {
                  context1 = value1;
              }
          };
      }
      function WebGLAttributes(gl1, capabilities1) {
          const isWebGL21 = capabilities1.isWebGL2;
          const buffers1 = new WeakMap();
          function createBuffer1(attribute3, bufferType1) {
              const array1 = attribute3.array;
              const usage1 = attribute3.usage;
              const buffer1 = gl1.createBuffer();
              gl1.bindBuffer(bufferType1, buffer1);
              gl1.bufferData(bufferType1, array1, usage1);
              attribute3.onUploadCallback();
              let type1;
              if (array1 instanceof Float32Array) type1 = 5126;
              else if (array1 instanceof Uint16Array) {
                  if (attribute3.isFloat16BufferAttribute) {
                      if (isWebGL21) type1 = 5131;
                      else throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");
                  } else type1 = 5123;
              } else if (array1 instanceof Int16Array) type1 = 5122;
              else if (array1 instanceof Uint32Array) type1 = 5125;
              else if (array1 instanceof Int32Array) type1 = 5124;
              else if (array1 instanceof Int8Array) type1 = 5120;
              else if (array1 instanceof Uint8Array) type1 = 5121;
              else if (array1 instanceof Uint8ClampedArray) type1 = 5121;
              else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + array1);
              return {
                  buffer: buffer1,
                  type: type1,
                  bytesPerElement: array1.BYTES_PER_ELEMENT,
                  version: attribute3.version
              };
          }
          function updateBuffer1(buffer1, attribute3, bufferType1) {
              const array1 = attribute3.array;
              const updateRange1 = attribute3.updateRange;
              gl1.bindBuffer(bufferType1, buffer1);
              if (updateRange1.count === -1) // Not using update ranges
              gl1.bufferSubData(bufferType1, 0, array1);
              else {
                  if (isWebGL21) gl1.bufferSubData(bufferType1, updateRange1.offset * array1.BYTES_PER_ELEMENT, array1, updateRange1.offset, updateRange1.count);
                  else gl1.bufferSubData(bufferType1, updateRange1.offset * array1.BYTES_PER_ELEMENT, array1.subarray(updateRange1.offset, updateRange1.offset + updateRange1.count));
                  updateRange1.count = -1; // reset range
              }
          }
          //
          function get1(attribute3) {
              if (attribute3.isInterleavedBufferAttribute) attribute3 = attribute3.data;
              return buffers1.get(attribute3);
          }
          function remove1(attribute3) {
              if (attribute3.isInterleavedBufferAttribute) attribute3 = attribute3.data;
              const data1 = buffers1.get(attribute3);
              if (data1) {
                  gl1.deleteBuffer(data1.buffer);
                  buffers1.delete(attribute3);
              }
          }
          function update1(attribute3, bufferType1) {
              if (attribute3.isGLBufferAttribute) {
                  const cached1 = buffers1.get(attribute3);
                  if (!cached1 || cached1.version < attribute3.version) buffers1.set(attribute3, {
                      buffer: attribute3.buffer,
                      type: attribute3.type,
                      bytesPerElement: attribute3.elementSize,
                      version: attribute3.version
                  });
                  return;
              }
              if (attribute3.isInterleavedBufferAttribute) attribute3 = attribute3.data;
              const data1 = buffers1.get(attribute3);
              if (data1 === undefined) buffers1.set(attribute3, createBuffer1(attribute3, bufferType1));
              else if (data1.version < attribute3.version) {
                  updateBuffer1(data1.buffer, attribute3, bufferType1);
                  data1.version = attribute3.version;
              }
          }
          return {
              get: get1,
              remove: remove1,
              update: update1
          };
      }
      class PlaneGeometry extends BufferGeometry {
          constructor(width1 = 1, height1 = 1, widthSegments1 = 1, heightSegments1 = 1){
              super();
              this.type = "PlaneGeometry";
              this.parameters = {
                  width: width1,
                  height: height1,
                  widthSegments: widthSegments1,
                  heightSegments: heightSegments1
              };
              const width_half1 = width1 / 2;
              const height_half1 = height1 / 2;
              const gridX2 = Math.floor(widthSegments1);
              const gridY2 = Math.floor(heightSegments1);
              const gridX11 = gridX2 + 1;
              const gridY11 = gridY2 + 1;
              const segment_width1 = width1 / gridX2;
              const segment_height1 = height1 / gridY2;
              //
              const indices1 = [];
              const vertices1 = [];
              const normals1 = [];
              const uvs1 = [];
              for(let iy1 = 0; iy1 < gridY11; iy1++){
                  const y3 = iy1 * segment_height1 - height_half1;
                  for(let ix1 = 0; ix1 < gridX11; ix1++){
                      const x4 = ix1 * segment_width1 - width_half1;
                      vertices1.push(x4, -y3, 0);
                      normals1.push(0, 0, 1);
                      uvs1.push(ix1 / gridX2);
                      uvs1.push(1 - iy1 / gridY2);
                  }
              }
              for(let iy1 = 0; iy1 < gridY2; iy1++)for(let ix1 = 0; ix1 < gridX2; ix1++){
                  const a3 = ix1 + gridX11 * iy1;
                  const b3 = ix1 + gridX11 * (iy1 + 1);
                  const c4 = ix1 + 1 + gridX11 * (iy1 + 1);
                  const d7 = ix1 + 1 + gridX11 * iy1;
                  indices1.push(a3, b3, d7);
                  indices1.push(b3, c4, d7);
              }
              this.setIndex(indices1);
              this.setAttribute("position", new Float32BufferAttribute(vertices1, 3));
              this.setAttribute("normal", new Float32BufferAttribute(normals1, 3));
              this.setAttribute("uv", new Float32BufferAttribute(uvs1, 2));
          }
          static fromJSON(data1) {
              return new PlaneGeometry(data1.width, data1.height, data1.widthSegments, data1.heightSegments);
          }
      }
      var alphamap_fragment = "#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";
      var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
      var alphatest_fragment = "#ifdef USE_ALPHATEST\n	if ( diffuseColor.a < alphaTest ) discard;\n#endif";
      var alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n	uniform float alphaTest;\n#endif";
      var aomap_fragment = "#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n	#endif\n#endif";
      var aomap_pars_fragment = "#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif";
      var begin_vertex = "vec3 transformed = vec3( position );";
      var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif";
      var bsdfs = "vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( f0, f90, dotVH );\n	float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n	float D = D_GGX( alpha, dotNH );\n	return F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( specularColor, 1.0, dotVH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n	float alpha = pow2( roughness );\n	float invAlpha = 1.0 / alpha;\n	float cos2h = dotNH * dotNH;\n	float sin2h = max( 1.0 - cos2h, 0.0078125 );\n	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float D = D_Charlie( sheenRoughness, dotNH );\n	float V = V_Neubelt( dotNV, dotNL );\n	return sheenColor * ( D * V );\n}\n#endif";
      var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vUv );\n		vec2 dSTdy = dFdy( vUv );\n		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n		vec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n		vec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 ) * faceDirection;\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif";
      var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n		plane = clippingPlanes[ i ];\n		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n	}\n	#pragma unroll_loop_end\n	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n		bool clipped = true;\n		#pragma unroll_loop_start\n		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n		}\n		#pragma unroll_loop_end\n		if ( clipped ) discard;\n	#endif\n#endif";
      var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
      var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n#endif";
      var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n	vClipPosition = - mvPosition.xyz;\n#endif";
      var color_fragment = "#if defined( USE_COLOR_ALPHA )\n	diffuseColor *= vColor;\n#elif defined( USE_COLOR )\n	diffuseColor.rgb *= vColor;\n#endif";
      var color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR )\n	varying vec3 vColor;\n#endif";
      var color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	varying vec3 vColor;\n#endif";
      var color_vertex = "#if defined( USE_COLOR_ALPHA )\n	vColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	vColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n	vColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n	vColor.xyz *= instanceColor.xyz;\n#endif";
      var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\nstruct GeometricContext {\n	vec3 position;\n	vec3 normal;\n	vec3 viewDir;\n#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n	vec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n	return dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n	return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	return vec2( u, v );\n}";
      var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n	#define cubeUV_minMipLevel 4.0\n	#define cubeUV_minTileSize 16.0\n	float getFace( vec3 direction ) {\n		vec3 absDirection = abs( direction );\n		float face = - 1.0;\n		if ( absDirection.x > absDirection.z ) {\n			if ( absDirection.x > absDirection.y )\n				face = direction.x > 0.0 ? 0.0 : 3.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		} else {\n			if ( absDirection.z > absDirection.y )\n				face = direction.z > 0.0 ? 2.0 : 5.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		}\n		return face;\n	}\n	vec2 getUV( vec3 direction, float face ) {\n		vec2 uv;\n		if ( face == 0.0 ) {\n			uv = vec2( direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 1.0 ) {\n			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n		} else if ( face == 2.0 ) {\n			uv = vec2( - direction.x, direction.y ) / abs( direction.z );\n		} else if ( face == 3.0 ) {\n			uv = vec2( - direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 4.0 ) {\n			uv = vec2( - direction.x, direction.z ) / abs( direction.y );\n		} else {\n			uv = vec2( direction.x, direction.y ) / abs( direction.z );\n		}\n		return 0.5 * ( uv + 1.0 );\n	}\n	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n		float face = getFace( direction );\n		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n		mipInt = max( mipInt, cubeUV_minMipLevel );\n		float faceSize = exp2( mipInt );\n		vec2 uv = getUV( direction, face ) * ( faceSize - 1.0 ) + 0.5;\n		if ( face > 2.0 ) {\n			uv.y += faceSize;\n			face -= 3.0;\n		}\n		uv.x += face * faceSize;\n		uv.x += filterInt * 3.0 * cubeUV_minTileSize;\n		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n		uv.x *= CUBEUV_TEXEL_WIDTH;\n		uv.y *= CUBEUV_TEXEL_HEIGHT;\n		#ifdef texture2DGradEXT\n			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n		#else\n			return texture2D( envMap, uv ).rgb;\n		#endif\n	}\n	#define r0 1.0\n	#define v0 0.339\n	#define m0 - 2.0\n	#define r1 0.8\n	#define v1 0.276\n	#define m1 - 1.0\n	#define r4 0.4\n	#define v4 0.046\n	#define m4 2.0\n	#define r5 0.305\n	#define v5 0.016\n	#define m5 3.0\n	#define r6 0.21\n	#define v6 0.0038\n	#define m6 4.0\n	float roughnessToMip( float roughness ) {\n		float mip = 0.0;\n		if ( roughness >= r1 ) {\n			mip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n		} else if ( roughness >= r4 ) {\n			mip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n		} else if ( roughness >= r5 ) {\n			mip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n		} else if ( roughness >= r6 ) {\n			mip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n		} else {\n			mip = - 2.0 * log2( 1.16 * roughness );		}\n		return mip;\n	}\n	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n		float mip = clamp( roughnessToMip( roughness ), m0, CUBEUV_MAX_MIP );\n		float mipF = fract( mip );\n		float mipInt = floor( mip );\n		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n		if ( mipF == 0.0 ) {\n			return vec4( color0, 1.0 );\n		} else {\n			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n			return vec4( mix( color0, color1, mipF ), 1.0 );\n		}\n	}\n#endif";
      var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n	mat3 m = mat3( instanceMatrix );\n	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n	transformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif";
      var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif";
      var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";
      var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vUv );\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
      var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif";
      var encodings_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
      var encodings_pars_fragment = "vec4 LinearToLinear( in vec4 value ) {\n	return value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";
      var envmap_fragment = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif";
      var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif";
      var envmap_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif";
      var envmap_pars_vertex = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif";
      var envmap_vertex = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) {\n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif";
      var fog_vertex = "#ifdef USE_FOG\n	vFogDepth = - mvPosition.z;\n#endif";
      var fog_pars_vertex = "#ifdef USE_FOG\n	varying float vFogDepth;\n#endif";
      var fog_fragment = "#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
      var fog_pars_fragment = "#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float vFogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif";
      var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return vec3( texture2D( gradientMap, coord ).r );\n	#else\n		return ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n	#endif\n}";
      var lightmap_fragment = "#ifdef USE_LIGHTMAP\n	vec4 lightMapTexel = texture2D( lightMap, vUv2 );\n	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		lightMapIrradiance *= PI;\n	#endif\n	reflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif";
      var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif";
      var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n	vLightBack = vec3( 0.0 );\n	vIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\n#ifdef DOUBLE_SIDED\n	vIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n	vIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\n#endif\n#if NUM_POINT_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		getPointLightInfo( pointLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		getSpotLightInfo( spotLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		getDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n		vIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n		#ifdef DOUBLE_SIDED\n			vIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif";
      var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	return irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n		if ( cutoffDistance > 0.0 ) {\n			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n		}\n		return distanceFalloff;\n	#else\n		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n		}\n		return 1.0;\n	#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n	return smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n		light.color = directionalLight.color;\n		light.direction = directionalLight.direction;\n		light.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n		vec3 lVector = pointLight.position - geometry.position;\n		light.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		light.color = pointLight.color;\n		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n		light.visible = ( light.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n		vec3 lVector = spotLight.position - geometry.position;\n		light.direction = normalize( lVector );\n		float angleCos = dot( light.direction, spotLight.direction );\n		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n		if ( spotAttenuation > 0.0 ) {\n			float lightDistance = length( lVector );\n			light.color = spotLight.color * spotAttenuation;\n			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n			light.visible = ( light.color != vec3( 0.0 ) );\n		} else {\n			light.color = vec3( 0.0 );\n			light.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n		float dotNL = dot( normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		return irradiance;\n	}\n#endif";
      var envmap_physical_pars_fragment = "#if defined( USE_ENVMAP )\n	#ifdef ENVMAP_MODE_REFRACTION\n		uniform float refractionRatio;\n	#endif\n	vec3 getIBLIrradiance( const in vec3 normal ) {\n		#if defined( ENVMAP_TYPE_CUBE_UV )\n			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n			return PI * envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n		#if defined( ENVMAP_TYPE_CUBE_UV )\n			vec3 reflectVec;\n			#ifdef ENVMAP_MODE_REFLECTION\n				reflectVec = reflect( - viewDir, normal );\n				reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n			#else\n				reflectVec = refract( - viewDir, normal, refractionRatio );\n			#endif\n			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n			return envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n#endif";
      var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";
      var lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n	vec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )	(0)";
      var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
      var lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n	vec3 diffuseColor;\n	vec3 specularColor;\n	float specularShininess;\n	float specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )	(0)";
      var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n	#ifdef SPECULAR\n		float specularIntensityFactor = specularIntensity;\n		vec3 specularColorFactor = specularColor;\n		#ifdef USE_SPECULARINTENSITYMAP\n			specularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n		#endif\n		#ifdef USE_SPECULARCOLORMAP\n			specularColorFactor *= texture2D( specularColorMap, vUv ).rgb;\n		#endif\n		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n	#else\n		float specularIntensityFactor = 1.0;\n		vec3 specularColorFactor = vec3( 1.0 );\n		material.specularF90 = 1.0;\n	#endif\n	material.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n	material.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n	material.clearcoat = clearcoat;\n	material.clearcoatRoughness = clearcoatRoughness;\n	material.clearcoatF0 = vec3( 0.04 );\n	material.clearcoatF90 = 1.0;\n	#ifdef USE_CLEARCOATMAP\n		material.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n	#endif\n	#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n	#endif\n	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheenColor;\n	#ifdef USE_SHEENCOLORMAP\n		material.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;\n	#endif\n	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n	#ifdef USE_SHEENROUGHNESSMAP\n		material.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n	#endif\n#endif";
      var lights_physical_pars_fragment = "struct PhysicalMaterial {\n	vec3 diffuseColor;\n	float roughness;\n	vec3 specularColor;\n	float specularF90;\n	#ifdef USE_CLEARCOAT\n		float clearcoat;\n		float clearcoatRoughness;\n		vec3 clearcoatF0;\n		float clearcoatF90;\n	#endif\n	#ifdef USE_SHEEN\n		vec3 sheenColor;\n		float sheenRoughness;\n	#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float r2 = roughness * roughness;\n	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n	return saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n	return fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	return specularColor * fab.x + specularF90 * fab.y;\n}\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	vec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\n	float Ess = fab.x + fab.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometry.normal;\n		vec3 viewDir = geometry.viewDir;\n		vec3 position = geometry.position;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.roughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifdef USE_CLEARCOAT\n		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = dotNLcc * directLight.color;\n		clearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n	#endif\n	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef USE_CLEARCOAT\n		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n	#endif\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n	vec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n	reflectedLight.indirectSpecular += radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
      var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n	geometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointLightInfo( pointLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		pointLightShadow = pointLightShadows[ i ];\n		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotLightInfo( spotLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		spotLightShadow = spotLightShadows[ i ];\n		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalLightInfo( directionalLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directionalLightShadow = directionalLightShadows[ i ];\n		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif";
      var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vUv2 );\n		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			lightMapIrradiance *= PI;\n		#endif\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getIBLIrradiance( geometry.normal );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n	#ifdef USE_CLEARCOAT\n		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n	#endif\n#endif";
      var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";
      var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
      var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";
      var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n		varying float vIsPerspective;\n	#else\n		uniform float logDepthBufFC;\n	#endif\n#endif";
      var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n	#else\n		if ( isPerspectiveMatrix( projectionMatrix ) ) {\n			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n			gl_Position.z *= gl_Position.w;\n		}\n	#endif\n#endif";
      var map_fragment = "#ifdef USE_MAP\n	vec4 sampledDiffuseColor = texture2D( map, vUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n	#endif\n	diffuseColor *= sampledDiffuseColor;\n#endif";
      var map_pars_fragment = "#ifdef USE_MAP\n	uniform sampler2D map;\n#endif";
      var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n	diffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";
      var map_particle_pars_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	uniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
      var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vUv );\n	metalnessFactor *= texelMetalness.b;\n#endif";
      var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif";
      var morphcolor_vertex = "#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n	vColor *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		#if defined( USE_COLOR_ALPHA )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n		#elif defined( USE_COLOR )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ]\n		#endif\n	}\n#endif";
      var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n		}\n	#else\n		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n	#endif\n#endif";
      var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n	uniform float morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n		uniform sampler2DArray morphTargetsTexture;\n		uniform vec2 morphTargetsTextureSize;\n		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n			float texelIndex = float( vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset );\n			float y = floor( texelIndex / morphTargetsTextureSize.x );\n			float x = texelIndex - y * morphTargetsTextureSize.x;\n			vec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );\n			return texture( morphTargetsTexture, morphUV );\n		}\n	#else\n		#ifndef USE_MORPHNORMALS\n			uniform float morphTargetInfluences[ 8 ];\n		#else\n			uniform float morphTargetInfluences[ 4 ];\n		#endif\n	#endif\n#endif";
      var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n		}\n	#else\n		transformed += morphTarget0 * morphTargetInfluences[ 0 ];\n		transformed += morphTarget1 * morphTargetInfluences[ 1 ];\n		transformed += morphTarget2 * morphTargetInfluences[ 2 ];\n		transformed += morphTarget3 * morphTargetInfluences[ 3 ];\n		#ifndef USE_MORPHNORMALS\n			transformed += morphTarget4 * morphTargetInfluences[ 4 ];\n			transformed += morphTarget5 * morphTargetInfluences[ 5 ];\n			transformed += morphTarget6 * morphTargetInfluences[ 6 ];\n			transformed += morphTarget7 * morphTargetInfluences[ 7 ];\n		#endif\n	#endif\n#endif";
      var normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal = normal * faceDirection;\n	#endif\n	#ifdef USE_TANGENT\n		vec3 tangent = normalize( vTangent );\n		vec3 bitangent = normalize( vBitangent );\n		#ifdef DOUBLE_SIDED\n			tangent = tangent * faceDirection;\n			bitangent = bitangent * faceDirection;\n		#endif\n		#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n			mat3 vTBN = mat3( tangent, bitangent, normal );\n		#endif\n	#endif\n#endif\nvec3 geometryNormal = normal;";
      var normal_fragment_maps = "#ifdef OBJECTSPACE_NORMALMAP\n	normal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * faceDirection;\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n	vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	#ifdef USE_TANGENT\n		normal = normalize( vTBN * mapN );\n	#else\n		normal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n	#endif\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";
      var normal_pars_fragment = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
      var normal_pars_vertex = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
      var normal_vertex = "#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif";
      var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n		vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n		vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n		vec2 st0 = dFdx( vUv.st );\n		vec2 st1 = dFdy( vUv.st );\n		vec3 N = surf_norm;\n		vec3 q1perp = cross( q1, N );\n		vec3 q0perp = cross( N, q0 );\n		vec3 T = q1perp * st0.x + q0perp * st1.x;\n		vec3 B = q1perp * st0.y + q0perp * st1.y;\n		float det = max( dot( T, T ), dot( B, B ) );\n		float scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n		return normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n	}\n#endif";
      var clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal = geometryNormal;\n#endif";
      var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	#ifdef USE_TANGENT\n		clearcoatNormal = normalize( vTBN * clearcoatMapN );\n	#else\n		clearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n	#endif\n#endif";
      var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n	uniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif";
      var output_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";
      var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n	vec4 r = vec4( fract( v * PackFactors ), v );\n	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n	return linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";
      var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif";
      var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";
      var dithering_fragment = "#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
      var dithering_pars_fragment = "#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif";
      var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vUv );\n	roughnessFactor *= texelRoughness.g;\n#endif";
      var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif";
      var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n		bool inFrustum = all( inFrustumVec );\n		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n		bool frustumTest = all( frustumTestVec );\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return shadow;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n		vec3 lightToPosition = shadowCoord.xyz;\n		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;\n		vec3 bd3D = normalize( lightToPosition );\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif";
      var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif";
      var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n		vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		vec4 shadowWorldPosition;\n	#endif\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n	#endif\n#endif";
      var shadowmask_pars_fragment = "float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLightShadows[ i ];\n		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#endif\n	return shadow;\n}";
      var skinbase_vertex = "#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
      var skinning_pars_vertex = "#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	#ifdef BONE_TEXTURE\n		uniform highp sampler2D boneTexture;\n		uniform int boneTextureSize;\n		mat4 getBoneMatrix( const in float i ) {\n			float j = i * 4.0;\n			float x = mod( j, float( boneTextureSize ) );\n			float y = floor( j / float( boneTextureSize ) );\n			float dx = 1.0 / float( boneTextureSize );\n			float dy = 1.0 / float( boneTextureSize );\n			y = dy * ( y + 0.5 );\n			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n			mat4 bone = mat4( v1, v2, v3, v4 );\n			return bone;\n		}\n	#else\n		uniform mat4 boneMatrices[ MAX_BONES ];\n		mat4 getBoneMatrix( const in float i ) {\n			mat4 bone = boneMatrices[ int(i) ];\n			return bone;\n		}\n	#endif\n#endif";
      var skinning_vertex = "#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
      var skinnormal_vertex = "#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif";
      var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif";
      var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif";
      var tonemapping_fragment = "#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
      var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n	return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n	return a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	const mat3 ACESInputMat = mat3(\n		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),\n		vec3( 0.04823, 0.01566, 0.83777 )\n	);\n	const mat3 ACESOutputMat = mat3(\n		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),\n		vec3( -0.07367, -0.00605,  1.07602 )\n	);\n	color *= toneMappingExposure / 0.6;\n	color = ACESInputMat * color;\n	color = RRTAndODTFit( color );\n	color = ACESOutputMat * color;\n	return saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";
      var transmission_fragment = "#ifdef USE_TRANSMISSION\n	float transmissionAlpha = 1.0;\n	float transmissionFactor = transmission;\n	float thicknessFactor = thickness;\n	#ifdef USE_TRANSMISSIONMAP\n		transmissionFactor *= texture2D( transmissionMap, vUv ).r;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		thicknessFactor *= texture2D( thicknessMap, vUv ).g;\n	#endif\n	vec3 pos = vWorldPosition;\n	vec3 v = normalize( cameraPosition - pos );\n	vec3 n = inverseTransformDirection( normal, viewMatrix );\n	vec4 transmission = getIBLVolumeRefraction(\n		n, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\n		pos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n		attenuationColor, attenuationDistance );\n	totalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\n	transmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\n#endif";
      var transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n	uniform float transmission;\n	uniform float thickness;\n	uniform float attenuationDistance;\n	uniform vec3 attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		uniform sampler2D transmissionMap;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		uniform sampler2D thicknessMap;\n	#endif\n	uniform vec2 transmissionSamplerSize;\n	uniform sampler2D transmissionSamplerMap;\n	uniform mat4 modelMatrix;\n	uniform mat4 projectionMatrix;\n	varying vec3 vWorldPosition;\n	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n		vec3 modelScale;\n		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n		return normalize( refractionVector ) * thickness * modelScale;\n	}\n	float applyIorToRoughness( const in float roughness, const in float ior ) {\n		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n	}\n	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n		float framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n		#ifdef texture2DLodEXT\n			return texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n		#else\n			return texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n		#endif\n	}\n	vec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n		if ( attenuationDistance == 0.0 ) {\n			return radiance;\n		} else {\n			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance * radiance;\n		}\n	}\n	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n		const in vec3 attenuationColor, const in float attenuationDistance ) {\n		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n		vec3 refractedRayExit = position + transmissionRay;\n		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n		vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n		refractionCoords += 1.0;\n		refractionCoords /= 2.0;\n		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n		vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n		return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n	}\n#endif";
      var uv_pars_fragment = "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n	varying vec2 vUv;\n#endif";
      var uv_pars_vertex = "#ifdef USE_UV\n	#ifdef UVS_VERTEX_ONLY\n		vec2 vUv;\n	#else\n		varying vec2 vUv;\n	#endif\n	uniform mat3 uvTransform;\n#endif";
      var uv_vertex = "#ifdef USE_UV\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";
      var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	varying vec2 vUv2;\n#endif";
      var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	attribute vec2 uv2;\n	varying vec2 vUv2;\n	uniform mat3 uv2Transform;\n#endif";
      var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif";
      var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif";
      const vertex$g = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
      const fragment$g = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n	gl_FragColor = texture2D( t2D, vUv );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
      const vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
      const fragment$f = "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	vec3 vReflect = vWorldDirection;\n	#include <envmap_fragment>\n	gl_FragColor = envColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
      const vertex$e = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vHighPrecisionZW = gl_Position.zw;\n}";
      const fragment$e = "#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <logdepthbuf_fragment>\n	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( fragCoordZ );\n	#endif\n}";
      const vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}";
      const fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}";
      const vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}";
      const fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV = equirectUv( direction );\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
      const vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vLineDistance = scale * lineDistance;\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
      const fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
      const vertex$a = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinbase_vertex>\n		#include <skinnormal_vertex>\n		#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}";
      const fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel= texture2D( lightMap, vUv2 );\n		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
      const vertex$9 = "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n	varying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <lights_lambert_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
      const fragment$9 = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n	varying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <emissivemap_fragment>\n	#ifdef DOUBLE_SIDED\n		reflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n	#else\n		reflectedLight.indirectDiffuse += vIndirectFront;\n	#endif\n	#include <lightmap_fragment>\n	reflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\n	#ifdef DOUBLE_SIDED\n		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n	#else\n		reflectedLight.directDiffuse = vLightFront;\n	#endif\n	reflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
      const vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}";
      const fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n	#else\n		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
      const vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n	varying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}";
      const fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n	varying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n	#ifdef OPAQUE\n		gl_FragColor.a = 1.0;\n	#endif\n}";
      const vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
      const fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
      const vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n	varying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n	vWorldPosition = worldPosition.xyz;\n#endif\n}";
      const fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n	#define IOR\n	#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n	uniform float ior;\n#endif\n#ifdef SPECULAR\n	uniform float specularIntensity;\n	uniform vec3 specularColor;\n	#ifdef USE_SPECULARINTENSITYMAP\n		uniform sampler2D specularIntensityMap;\n	#endif\n	#ifdef USE_SPECULARCOLORMAP\n		uniform sampler2D specularColorMap;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheenColor;\n	uniform float sheenRoughness;\n	#ifdef USE_SHEENCOLORMAP\n		uniform sampler2D sheenColorMap;\n	#endif\n	#ifdef USE_SHEENROUGHNESSMAP\n		uniform sampler2D sheenRoughnessMap;\n	#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n	#include <transmission_fragment>\n	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n	#ifdef USE_SHEEN\n		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n	#endif\n	#ifdef USE_CLEARCOAT\n		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n	#endif\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
      const vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
      const fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
      const vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}";
      const fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
      const vertex$2 = "#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
      const fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}";
      const vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n	vec2 scale;\n	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
      const fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}";
      const ShaderChunk = {
          alphamap_fragment: alphamap_fragment,
          alphamap_pars_fragment: alphamap_pars_fragment,
          alphatest_fragment: alphatest_fragment,
          alphatest_pars_fragment: alphatest_pars_fragment,
          aomap_fragment: aomap_fragment,
          aomap_pars_fragment: aomap_pars_fragment,
          begin_vertex: begin_vertex,
          beginnormal_vertex: beginnormal_vertex,
          bsdfs: bsdfs,
          bumpmap_pars_fragment: bumpmap_pars_fragment,
          clipping_planes_fragment: clipping_planes_fragment,
          clipping_planes_pars_fragment: clipping_planes_pars_fragment,
          clipping_planes_pars_vertex: clipping_planes_pars_vertex,
          clipping_planes_vertex: clipping_planes_vertex,
          color_fragment: color_fragment,
          color_pars_fragment: color_pars_fragment,
          color_pars_vertex: color_pars_vertex,
          color_vertex: color_vertex,
          common: common,
          cube_uv_reflection_fragment: cube_uv_reflection_fragment,
          defaultnormal_vertex: defaultnormal_vertex,
          displacementmap_pars_vertex: displacementmap_pars_vertex,
          displacementmap_vertex: displacementmap_vertex,
          emissivemap_fragment: emissivemap_fragment,
          emissivemap_pars_fragment: emissivemap_pars_fragment,
          encodings_fragment: encodings_fragment,
          encodings_pars_fragment: encodings_pars_fragment,
          envmap_fragment: envmap_fragment,
          envmap_common_pars_fragment: envmap_common_pars_fragment,
          envmap_pars_fragment: envmap_pars_fragment,
          envmap_pars_vertex: envmap_pars_vertex,
          envmap_physical_pars_fragment: envmap_physical_pars_fragment,
          envmap_vertex: envmap_vertex,
          fog_vertex: fog_vertex,
          fog_pars_vertex: fog_pars_vertex,
          fog_fragment: fog_fragment,
          fog_pars_fragment: fog_pars_fragment,
          gradientmap_pars_fragment: gradientmap_pars_fragment,
          lightmap_fragment: lightmap_fragment,
          lightmap_pars_fragment: lightmap_pars_fragment,
          lights_lambert_vertex: lights_lambert_vertex,
          lights_pars_begin: lights_pars_begin,
          lights_toon_fragment: lights_toon_fragment,
          lights_toon_pars_fragment: lights_toon_pars_fragment,
          lights_phong_fragment: lights_phong_fragment,
          lights_phong_pars_fragment: lights_phong_pars_fragment,
          lights_physical_fragment: lights_physical_fragment,
          lights_physical_pars_fragment: lights_physical_pars_fragment,
          lights_fragment_begin: lights_fragment_begin,
          lights_fragment_maps: lights_fragment_maps,
          lights_fragment_end: lights_fragment_end,
          logdepthbuf_fragment: logdepthbuf_fragment,
          logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
          logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
          logdepthbuf_vertex: logdepthbuf_vertex,
          map_fragment: map_fragment,
          map_pars_fragment: map_pars_fragment,
          map_particle_fragment: map_particle_fragment,
          map_particle_pars_fragment: map_particle_pars_fragment,
          metalnessmap_fragment: metalnessmap_fragment,
          metalnessmap_pars_fragment: metalnessmap_pars_fragment,
          morphcolor_vertex: morphcolor_vertex,
          morphnormal_vertex: morphnormal_vertex,
          morphtarget_pars_vertex: morphtarget_pars_vertex,
          morphtarget_vertex: morphtarget_vertex,
          normal_fragment_begin: normal_fragment_begin,
          normal_fragment_maps: normal_fragment_maps,
          normal_pars_fragment: normal_pars_fragment,
          normal_pars_vertex: normal_pars_vertex,
          normal_vertex: normal_vertex,
          normalmap_pars_fragment: normalmap_pars_fragment,
          clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,
          clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,
          clearcoat_pars_fragment: clearcoat_pars_fragment,
          output_fragment: output_fragment,
          packing: packing,
          premultiplied_alpha_fragment: premultiplied_alpha_fragment,
          project_vertex: project_vertex,
          dithering_fragment: dithering_fragment,
          dithering_pars_fragment: dithering_pars_fragment,
          roughnessmap_fragment: roughnessmap_fragment,
          roughnessmap_pars_fragment: roughnessmap_pars_fragment,
          shadowmap_pars_fragment: shadowmap_pars_fragment,
          shadowmap_pars_vertex: shadowmap_pars_vertex,
          shadowmap_vertex: shadowmap_vertex,
          shadowmask_pars_fragment: shadowmask_pars_fragment,
          skinbase_vertex: skinbase_vertex,
          skinning_pars_vertex: skinning_pars_vertex,
          skinning_vertex: skinning_vertex,
          skinnormal_vertex: skinnormal_vertex,
          specularmap_fragment: specularmap_fragment,
          specularmap_pars_fragment: specularmap_pars_fragment,
          tonemapping_fragment: tonemapping_fragment,
          tonemapping_pars_fragment: tonemapping_pars_fragment,
          transmission_fragment: transmission_fragment,
          transmission_pars_fragment: transmission_pars_fragment,
          uv_pars_fragment: uv_pars_fragment,
          uv_pars_vertex: uv_pars_vertex,
          uv_vertex: uv_vertex,
          uv2_pars_fragment: uv2_pars_fragment,
          uv2_pars_vertex: uv2_pars_vertex,
          uv2_vertex: uv2_vertex,
          worldpos_vertex: worldpos_vertex,
          background_vert: vertex$g,
          background_frag: fragment$g,
          cube_vert: vertex$f,
          cube_frag: fragment$f,
          depth_vert: vertex$e,
          depth_frag: fragment$e,
          distanceRGBA_vert: vertex$d,
          distanceRGBA_frag: fragment$d,
          equirect_vert: vertex$c,
          equirect_frag: fragment$c,
          linedashed_vert: vertex$b,
          linedashed_frag: fragment$b,
          meshbasic_vert: vertex$a,
          meshbasic_frag: fragment$a,
          meshlambert_vert: vertex$9,
          meshlambert_frag: fragment$9,
          meshmatcap_vert: vertex$8,
          meshmatcap_frag: fragment$8,
          meshnormal_vert: vertex$7,
          meshnormal_frag: fragment$7,
          meshphong_vert: vertex$6,
          meshphong_frag: fragment$6,
          meshphysical_vert: vertex$5,
          meshphysical_frag: fragment$5,
          meshtoon_vert: vertex$4,
          meshtoon_frag: fragment$4,
          points_vert: vertex$3,
          points_frag: fragment$3,
          shadow_vert: vertex$2,
          shadow_frag: fragment$2,
          sprite_vert: vertex$1,
          sprite_frag: fragment$1
      };
      /**
     * Uniforms library for shared webgl shaders
     */ const UniformsLib = {
          common: {
              diffuse: {
                  value: new Color(0xffffff)
              },
              opacity: {
                  value: 1.0
              },
              map: {
                  value: null
              },
              uvTransform: {
                  value: new Matrix3()
              },
              uv2Transform: {
                  value: new Matrix3()
              },
              alphaMap: {
                  value: null
              },
              alphaTest: {
                  value: 0
              }
          },
          specularmap: {
              specularMap: {
                  value: null
              }
          },
          envmap: {
              envMap: {
                  value: null
              },
              flipEnvMap: {
                  value: -1
              },
              reflectivity: {
                  value: 1.0
              },
              ior: {
                  value: 1.5
              },
              refractionRatio: {
                  value: 0.98
              }
          },
          aomap: {
              aoMap: {
                  value: null
              },
              aoMapIntensity: {
                  value: 1
              }
          },
          lightmap: {
              lightMap: {
                  value: null
              },
              lightMapIntensity: {
                  value: 1
              }
          },
          emissivemap: {
              emissiveMap: {
                  value: null
              }
          },
          bumpmap: {
              bumpMap: {
                  value: null
              },
              bumpScale: {
                  value: 1
              }
          },
          normalmap: {
              normalMap: {
                  value: null
              },
              normalScale: {
                  value: new Vector2(1, 1)
              }
          },
          displacementmap: {
              displacementMap: {
                  value: null
              },
              displacementScale: {
                  value: 1
              },
              displacementBias: {
                  value: 0
              }
          },
          roughnessmap: {
              roughnessMap: {
                  value: null
              }
          },
          metalnessmap: {
              metalnessMap: {
                  value: null
              }
          },
          gradientmap: {
              gradientMap: {
                  value: null
              }
          },
          fog: {
              fogDensity: {
                  value: 0.00025
              },
              fogNear: {
                  value: 1
              },
              fogFar: {
                  value: 2000
              },
              fogColor: {
                  value: new Color(0xffffff)
              }
          },
          lights: {
              ambientLightColor: {
                  value: []
              },
              lightProbe: {
                  value: []
              },
              directionalLights: {
                  value: [],
                  properties: {
                      direction: {},
                      color: {}
                  }
              },
              directionalLightShadows: {
                  value: [],
                  properties: {
                      shadowBias: {},
                      shadowNormalBias: {},
                      shadowRadius: {},
                      shadowMapSize: {}
                  }
              },
              directionalShadowMap: {
                  value: []
              },
              directionalShadowMatrix: {
                  value: []
              },
              spotLights: {
                  value: [],
                  properties: {
                      color: {},
                      position: {},
                      direction: {},
                      distance: {},
                      coneCos: {},
                      penumbraCos: {},
                      decay: {}
                  }
              },
              spotLightShadows: {
                  value: [],
                  properties: {
                      shadowBias: {},
                      shadowNormalBias: {},
                      shadowRadius: {},
                      shadowMapSize: {}
                  }
              },
              spotShadowMap: {
                  value: []
              },
              spotShadowMatrix: {
                  value: []
              },
              pointLights: {
                  value: [],
                  properties: {
                      color: {},
                      position: {},
                      decay: {},
                      distance: {}
                  }
              },
              pointLightShadows: {
                  value: [],
                  properties: {
                      shadowBias: {},
                      shadowNormalBias: {},
                      shadowRadius: {},
                      shadowMapSize: {},
                      shadowCameraNear: {},
                      shadowCameraFar: {}
                  }
              },
              pointShadowMap: {
                  value: []
              },
              pointShadowMatrix: {
                  value: []
              },
              hemisphereLights: {
                  value: [],
                  properties: {
                      direction: {},
                      skyColor: {},
                      groundColor: {}
                  }
              },
              // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
              rectAreaLights: {
                  value: [],
                  properties: {
                      color: {},
                      position: {},
                      width: {},
                      height: {}
                  }
              },
              ltc_1: {
                  value: null
              },
              ltc_2: {
                  value: null
              }
          },
          points: {
              diffuse: {
                  value: new Color(0xffffff)
              },
              opacity: {
                  value: 1.0
              },
              size: {
                  value: 1.0
              },
              scale: {
                  value: 1.0
              },
              map: {
                  value: null
              },
              alphaMap: {
                  value: null
              },
              alphaTest: {
                  value: 0
              },
              uvTransform: {
                  value: new Matrix3()
              }
          },
          sprite: {
              diffuse: {
                  value: new Color(0xffffff)
              },
              opacity: {
                  value: 1.0
              },
              center: {
                  value: new Vector2(0.5, 0.5)
              },
              rotation: {
                  value: 0.0
              },
              map: {
                  value: null
              },
              alphaMap: {
                  value: null
              },
              alphaTest: {
                  value: 0
              },
              uvTransform: {
                  value: new Matrix3()
              }
          }
      };
      const ShaderLib = {
          basic: {
              uniforms: mergeUniforms([
                  UniformsLib.common,
                  UniformsLib.specularmap,
                  UniformsLib.envmap,
                  UniformsLib.aomap,
                  UniformsLib.lightmap,
                  UniformsLib.fog
              ]),
              vertexShader: ShaderChunk.meshbasic_vert,
              fragmentShader: ShaderChunk.meshbasic_frag
          },
          lambert: {
              uniforms: mergeUniforms([
                  UniformsLib.common,
                  UniformsLib.specularmap,
                  UniformsLib.envmap,
                  UniformsLib.aomap,
                  UniformsLib.lightmap,
                  UniformsLib.emissivemap,
                  UniformsLib.fog,
                  UniformsLib.lights,
                  {
                      emissive: {
                          value: new Color(0x000000)
                      }
                  }
              ]),
              vertexShader: ShaderChunk.meshlambert_vert,
              fragmentShader: ShaderChunk.meshlambert_frag
          },
          phong: {
              uniforms: mergeUniforms([
                  UniformsLib.common,
                  UniformsLib.specularmap,
                  UniformsLib.envmap,
                  UniformsLib.aomap,
                  UniformsLib.lightmap,
                  UniformsLib.emissivemap,
                  UniformsLib.bumpmap,
                  UniformsLib.normalmap,
                  UniformsLib.displacementmap,
                  UniformsLib.fog,
                  UniformsLib.lights,
                  {
                      emissive: {
                          value: new Color(0x000000)
                      },
                      specular: {
                          value: new Color(0x111111)
                      },
                      shininess: {
                          value: 30
                      }
                  }
              ]),
              vertexShader: ShaderChunk.meshphong_vert,
              fragmentShader: ShaderChunk.meshphong_frag
          },
          standard: {
              uniforms: mergeUniforms([
                  UniformsLib.common,
                  UniformsLib.envmap,
                  UniformsLib.aomap,
                  UniformsLib.lightmap,
                  UniformsLib.emissivemap,
                  UniformsLib.bumpmap,
                  UniformsLib.normalmap,
                  UniformsLib.displacementmap,
                  UniformsLib.roughnessmap,
                  UniformsLib.metalnessmap,
                  UniformsLib.fog,
                  UniformsLib.lights,
                  {
                      emissive: {
                          value: new Color(0x000000)
                      },
                      roughness: {
                          value: 1.0
                      },
                      metalness: {
                          value: 0.0
                      },
                      envMapIntensity: {
                          value: 1
                      } // temporary
                  }
              ]),
              vertexShader: ShaderChunk.meshphysical_vert,
              fragmentShader: ShaderChunk.meshphysical_frag
          },
          toon: {
              uniforms: mergeUniforms([
                  UniformsLib.common,
                  UniformsLib.aomap,
                  UniformsLib.lightmap,
                  UniformsLib.emissivemap,
                  UniformsLib.bumpmap,
                  UniformsLib.normalmap,
                  UniformsLib.displacementmap,
                  UniformsLib.gradientmap,
                  UniformsLib.fog,
                  UniformsLib.lights,
                  {
                      emissive: {
                          value: new Color(0x000000)
                      }
                  }
              ]),
              vertexShader: ShaderChunk.meshtoon_vert,
              fragmentShader: ShaderChunk.meshtoon_frag
          },
          matcap: {
              uniforms: mergeUniforms([
                  UniformsLib.common,
                  UniformsLib.bumpmap,
                  UniformsLib.normalmap,
                  UniformsLib.displacementmap,
                  UniformsLib.fog,
                  {
                      matcap: {
                          value: null
                      }
                  }
              ]),
              vertexShader: ShaderChunk.meshmatcap_vert,
              fragmentShader: ShaderChunk.meshmatcap_frag
          },
          points: {
              uniforms: mergeUniforms([
                  UniformsLib.points,
                  UniformsLib.fog
              ]),
              vertexShader: ShaderChunk.points_vert,
              fragmentShader: ShaderChunk.points_frag
          },
          dashed: {
              uniforms: mergeUniforms([
                  UniformsLib.common,
                  UniformsLib.fog,
                  {
                      scale: {
                          value: 1
                      },
                      dashSize: {
                          value: 1
                      },
                      totalSize: {
                          value: 2
                      }
                  }
              ]),
              vertexShader: ShaderChunk.linedashed_vert,
              fragmentShader: ShaderChunk.linedashed_frag
          },
          depth: {
              uniforms: mergeUniforms([
                  UniformsLib.common,
                  UniformsLib.displacementmap
              ]),
              vertexShader: ShaderChunk.depth_vert,
              fragmentShader: ShaderChunk.depth_frag
          },
          normal: {
              uniforms: mergeUniforms([
                  UniformsLib.common,
                  UniformsLib.bumpmap,
                  UniformsLib.normalmap,
                  UniformsLib.displacementmap,
                  {
                      opacity: {
                          value: 1.0
                      }
                  }
              ]),
              vertexShader: ShaderChunk.meshnormal_vert,
              fragmentShader: ShaderChunk.meshnormal_frag
          },
          sprite: {
              uniforms: mergeUniforms([
                  UniformsLib.sprite,
                  UniformsLib.fog
              ]),
              vertexShader: ShaderChunk.sprite_vert,
              fragmentShader: ShaderChunk.sprite_frag
          },
          background: {
              uniforms: {
                  uvTransform: {
                      value: new Matrix3()
                  },
                  t2D: {
                      value: null
                  }
              },
              vertexShader: ShaderChunk.background_vert,
              fragmentShader: ShaderChunk.background_frag
          },
          /* -------------------------------------------------------------------------
        //	Cube map shader
         ------------------------------------------------------------------------- */ cube: {
              uniforms: mergeUniforms([
                  UniformsLib.envmap,
                  {
                      opacity: {
                          value: 1.0
                      }
                  }
              ]),
              vertexShader: ShaderChunk.cube_vert,
              fragmentShader: ShaderChunk.cube_frag
          },
          equirect: {
              uniforms: {
                  tEquirect: {
                      value: null
                  }
              },
              vertexShader: ShaderChunk.equirect_vert,
              fragmentShader: ShaderChunk.equirect_frag
          },
          distanceRGBA: {
              uniforms: mergeUniforms([
                  UniformsLib.common,
                  UniformsLib.displacementmap,
                  {
                      referencePosition: {
                          value: new Vector3()
                      },
                      nearDistance: {
                          value: 1
                      },
                      farDistance: {
                          value: 1000
                      }
                  }
              ]),
              vertexShader: ShaderChunk.distanceRGBA_vert,
              fragmentShader: ShaderChunk.distanceRGBA_frag
          },
          shadow: {
              uniforms: mergeUniforms([
                  UniformsLib.lights,
                  UniformsLib.fog,
                  {
                      color: {
                          value: new Color(0x00000)
                      },
                      opacity: {
                          value: 1.0
                      }
                  }
              ]),
              vertexShader: ShaderChunk.shadow_vert,
              fragmentShader: ShaderChunk.shadow_frag
          }
      };
      ShaderLib.physical = {
          uniforms: mergeUniforms([
              ShaderLib.standard.uniforms,
              {
                  clearcoat: {
                      value: 0
                  },
                  clearcoatMap: {
                      value: null
                  },
                  clearcoatRoughness: {
                      value: 0
                  },
                  clearcoatRoughnessMap: {
                      value: null
                  },
                  clearcoatNormalScale: {
                      value: new Vector2(1, 1)
                  },
                  clearcoatNormalMap: {
                      value: null
                  },
                  sheen: {
                      value: 0
                  },
                  sheenColor: {
                      value: new Color(0x000000)
                  },
                  sheenColorMap: {
                      value: null
                  },
                  sheenRoughness: {
                      value: 1
                  },
                  sheenRoughnessMap: {
                      value: null
                  },
                  transmission: {
                      value: 0
                  },
                  transmissionMap: {
                      value: null
                  },
                  transmissionSamplerSize: {
                      value: new Vector2()
                  },
                  transmissionSamplerMap: {
                      value: null
                  },
                  thickness: {
                      value: 0
                  },
                  thicknessMap: {
                      value: null
                  },
                  attenuationDistance: {
                      value: 0
                  },
                  attenuationColor: {
                      value: new Color(0x000000)
                  },
                  specularIntensity: {
                      value: 1
                  },
                  specularIntensityMap: {
                      value: null
                  },
                  specularColor: {
                      value: new Color(1, 1, 1)
                  },
                  specularColorMap: {
                      value: null
                  }
              }
          ]),
          vertexShader: ShaderChunk.meshphysical_vert,
          fragmentShader: ShaderChunk.meshphysical_frag
      };
      function WebGLBackground(renderer1, cubemaps1, state1, objects1, alpha1, premultipliedAlpha1) {
          const clearColor1 = new Color(0x000000);
          let clearAlpha1 = alpha1 === true ? 0 : 1;
          let planeMesh1;
          let boxMesh1;
          let currentBackground1 = null;
          let currentBackgroundVersion1 = 0;
          let currentTonemapping1 = null;
          function render1(renderList1, scene1) {
              let forceClear1 = false;
              let background1 = scene1.isScene === true ? scene1.background : null;
              if (background1 && background1.isTexture) background1 = cubemaps1.get(background1);
              // Ignore background in AR
              // TODO: Reconsider this.
              const xr1 = renderer1.xr;
              const session1 = xr1.getSession && xr1.getSession();
              if (session1 && session1.environmentBlendMode === "additive") background1 = null;
              if (background1 === null) setClear1(clearColor1, clearAlpha1);
              else if (background1 && background1.isColor) {
                  setClear1(background1, 1);
                  forceClear1 = true;
              }
              if (renderer1.autoClear || forceClear1) renderer1.clear(renderer1.autoClearColor, renderer1.autoClearDepth, renderer1.autoClearStencil);
              if (background1 && (background1.isCubeTexture || background1.mapping === CubeUVReflectionMapping)) {
                  if (boxMesh1 === undefined) {
                      boxMesh1 = new Mesh(new BoxGeometry(1, 1, 1), new ShaderMaterial({
                          name: "BackgroundCubeMaterial",
                          uniforms: cloneUniforms(ShaderLib.cube.uniforms),
                          vertexShader: ShaderLib.cube.vertexShader,
                          fragmentShader: ShaderLib.cube.fragmentShader,
                          side: BackSide,
                          depthTest: false,
                          depthWrite: false,
                          fog: false
                      }));
                      boxMesh1.geometry.deleteAttribute("normal");
                      boxMesh1.geometry.deleteAttribute("uv");
                      boxMesh1.onBeforeRender = function(renderer1, scene1, camera1) {
                          this.matrixWorld.copyPosition(camera1.matrixWorld);
                      };
                      // enable code injection for non-built-in material
                      Object.defineProperty(boxMesh1.material, "envMap", {
                          get: function() {
                              return this.uniforms.envMap.value;
                          }
                      });
                      objects1.update(boxMesh1);
                  }
                  boxMesh1.material.uniforms.envMap.value = background1;
                  boxMesh1.material.uniforms.flipEnvMap.value = background1.isCubeTexture && background1.isRenderTargetTexture === false ? -1 : 1;
                  if (currentBackground1 !== background1 || currentBackgroundVersion1 !== background1.version || currentTonemapping1 !== renderer1.toneMapping) {
                      boxMesh1.material.needsUpdate = true;
                      currentBackground1 = background1;
                      currentBackgroundVersion1 = background1.version;
                      currentTonemapping1 = renderer1.toneMapping;
                  }
                  // push to the pre-sorted opaque render list
                  renderList1.unshift(boxMesh1, boxMesh1.geometry, boxMesh1.material, 0, 0, null);
              } else if (background1 && background1.isTexture) {
                  if (planeMesh1 === undefined) {
                      planeMesh1 = new Mesh(new PlaneGeometry(2, 2), new ShaderMaterial({
                          name: "BackgroundMaterial",
                          uniforms: cloneUniforms(ShaderLib.background.uniforms),
                          vertexShader: ShaderLib.background.vertexShader,
                          fragmentShader: ShaderLib.background.fragmentShader,
                          side: FrontSide,
                          depthTest: false,
                          depthWrite: false,
                          fog: false
                      }));
                      planeMesh1.geometry.deleteAttribute("normal");
                      // enable code injection for non-built-in material
                      Object.defineProperty(planeMesh1.material, "map", {
                          get: function() {
                              return this.uniforms.t2D.value;
                          }
                      });
                      objects1.update(planeMesh1);
                  }
                  planeMesh1.material.uniforms.t2D.value = background1;
                  if (background1.matrixAutoUpdate === true) background1.updateMatrix();
                  planeMesh1.material.uniforms.uvTransform.value.copy(background1.matrix);
                  if (currentBackground1 !== background1 || currentBackgroundVersion1 !== background1.version || currentTonemapping1 !== renderer1.toneMapping) {
                      planeMesh1.material.needsUpdate = true;
                      currentBackground1 = background1;
                      currentBackgroundVersion1 = background1.version;
                      currentTonemapping1 = renderer1.toneMapping;
                  }
                  // push to the pre-sorted opaque render list
                  renderList1.unshift(planeMesh1, planeMesh1.geometry, planeMesh1.material, 0, 0, null);
              }
          }
          function setClear1(color3, alpha1) {
              state1.buffers.color.setClear(color3.r, color3.g, color3.b, alpha1, premultipliedAlpha1);
          }
          return {
              getClearColor: function() {
                  return clearColor1;
              },
              setClearColor: function(color3, alpha1 = 1) {
                  clearColor1.set(color3);
                  clearAlpha1 = alpha1;
                  setClear1(clearColor1, clearAlpha1);
              },
              getClearAlpha: function() {
                  return clearAlpha1;
              },
              setClearAlpha: function(alpha1) {
                  clearAlpha1 = alpha1;
                  setClear1(clearColor1, clearAlpha1);
              },
              render: render1
          };
      }
      function WebGLBindingStates(gl1, extensions1, attributes1, capabilities1) {
          const maxVertexAttributes1 = gl1.getParameter(34921);
          const extension1 = capabilities1.isWebGL2 ? null : extensions1.get("OES_vertex_array_object");
          const vaoAvailable1 = capabilities1.isWebGL2 || extension1 !== null;
          const bindingStates1 = {};
          const defaultState1 = createBindingState1(null);
          let currentState1 = defaultState1;
          function setup1(object1, material1, program1, geometry1, index3) {
              let updateBuffers1 = false;
              if (vaoAvailable1) {
                  const state1 = getBindingState1(geometry1, program1, material1);
                  if (currentState1 !== state1) {
                      currentState1 = state1;
                      bindVertexArrayObject1(currentState1.object);
                  }
                  updateBuffers1 = needsUpdate1(geometry1, index3);
                  if (updateBuffers1) saveCache1(geometry1, index3);
              } else {
                  const wireframe1 = material1.wireframe === true;
                  if (currentState1.geometry !== geometry1.id || currentState1.program !== program1.id || currentState1.wireframe !== wireframe1) {
                      currentState1.geometry = geometry1.id;
                      currentState1.program = program1.id;
                      currentState1.wireframe = wireframe1;
                      updateBuffers1 = true;
                  }
              }
              if (object1.isInstancedMesh === true) updateBuffers1 = true;
              if (index3 !== null) attributes1.update(index3, 34963);
              if (updateBuffers1) {
                  setupVertexAttributes1(object1, material1, program1, geometry1);
                  if (index3 !== null) gl1.bindBuffer(34963, attributes1.get(index3).buffer);
              }
          }
          function createVertexArrayObject1() {
              if (capabilities1.isWebGL2) return gl1.createVertexArray();
              return extension1.createVertexArrayOES();
          }
          function bindVertexArrayObject1(vao1) {
              if (capabilities1.isWebGL2) return gl1.bindVertexArray(vao1);
              return extension1.bindVertexArrayOES(vao1);
          }
          function deleteVertexArrayObject1(vao1) {
              if (capabilities1.isWebGL2) return gl1.deleteVertexArray(vao1);
              return extension1.deleteVertexArrayOES(vao1);
          }
          function getBindingState1(geometry1, program1, material1) {
              const wireframe1 = material1.wireframe === true;
              let programMap1 = bindingStates1[geometry1.id];
              if (programMap1 === undefined) {
                  programMap1 = {};
                  bindingStates1[geometry1.id] = programMap1;
              }
              let stateMap1 = programMap1[program1.id];
              if (stateMap1 === undefined) {
                  stateMap1 = {};
                  programMap1[program1.id] = stateMap1;
              }
              let state1 = stateMap1[wireframe1];
              if (state1 === undefined) {
                  state1 = createBindingState1(createVertexArrayObject1());
                  stateMap1[wireframe1] = state1;
              }
              return state1;
          }
          function createBindingState1(vao1) {
              const newAttributes1 = [];
              const enabledAttributes1 = [];
              const attributeDivisors1 = [];
              for(let i3 = 0; i3 < maxVertexAttributes1; i3++){
                  newAttributes1[i3] = 0;
                  enabledAttributes1[i3] = 0;
                  attributeDivisors1[i3] = 0;
              }
              return {
                  // for backward compatibility on non-VAO support browser
                  geometry: null,
                  program: null,
                  wireframe: false,
                  newAttributes: newAttributes1,
                  enabledAttributes: enabledAttributes1,
                  attributeDivisors: attributeDivisors1,
                  object: vao1,
                  attributes: {},
                  index: null
              };
          }
          function needsUpdate1(geometry1, index3) {
              const cachedAttributes1 = currentState1.attributes;
              const geometryAttributes1 = geometry1.attributes;
              let attributesNum1 = 0;
              for(const key1 in geometryAttributes1){
                  const cachedAttribute1 = cachedAttributes1[key1];
                  const geometryAttribute1 = geometryAttributes1[key1];
                  if (cachedAttribute1 === undefined) return true;
                  if (cachedAttribute1.attribute !== geometryAttribute1) return true;
                  if (cachedAttribute1.data !== geometryAttribute1.data) return true;
                  attributesNum1++;
              }
              if (currentState1.attributesNum !== attributesNum1) return true;
              if (currentState1.index !== index3) return true;
              return false;
          }
          function saveCache1(geometry1, index3) {
              const cache1 = {};
              const attributes1 = geometry1.attributes;
              let attributesNum1 = 0;
              for(const key1 in attributes1){
                  const attribute3 = attributes1[key1];
                  const data1 = {};
                  data1.attribute = attribute3;
                  if (attribute3.data) data1.data = attribute3.data;
                  cache1[key1] = data1;
                  attributesNum1++;
              }
              currentState1.attributes = cache1;
              currentState1.attributesNum = attributesNum1;
              currentState1.index = index3;
          }
          function initAttributes1() {
              const newAttributes1 = currentState1.newAttributes;
              for(let i3 = 0, il1 = newAttributes1.length; i3 < il1; i3++)newAttributes1[i3] = 0;
          }
          function enableAttribute1(attribute3) {
              enableAttributeAndDivisor1(attribute3, 0);
          }
          function enableAttributeAndDivisor1(attribute3, meshPerAttribute1) {
              const newAttributes1 = currentState1.newAttributes;
              const enabledAttributes1 = currentState1.enabledAttributes;
              const attributeDivisors1 = currentState1.attributeDivisors;
              newAttributes1[attribute3] = 1;
              if (enabledAttributes1[attribute3] === 0) {
                  gl1.enableVertexAttribArray(attribute3);
                  enabledAttributes1[attribute3] = 1;
              }
              if (attributeDivisors1[attribute3] !== meshPerAttribute1) {
                  const extension1 = capabilities1.isWebGL2 ? gl1 : extensions1.get("ANGLE_instanced_arrays");
                  extension1[capabilities1.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](attribute3, meshPerAttribute1);
                  attributeDivisors1[attribute3] = meshPerAttribute1;
              }
          }
          function disableUnusedAttributes1() {
              const newAttributes1 = currentState1.newAttributes;
              const enabledAttributes1 = currentState1.enabledAttributes;
              for(let i3 = 0, il1 = enabledAttributes1.length; i3 < il1; i3++)if (enabledAttributes1[i3] !== newAttributes1[i3]) {
                  gl1.disableVertexAttribArray(i3);
                  enabledAttributes1[i3] = 0;
              }
          }
          function vertexAttribPointer1(index3, size1, type1, normalized1, stride1, offset2) {
              if (capabilities1.isWebGL2 === true && (type1 === 5124 || type1 === 5125)) gl1.vertexAttribIPointer(index3, size1, type1, stride1, offset2);
              else gl1.vertexAttribPointer(index3, size1, type1, normalized1, stride1, offset2);
          }
          function setupVertexAttributes1(object1, material1, program1, geometry1) {
              if (capabilities1.isWebGL2 === false && (object1.isInstancedMesh || geometry1.isInstancedBufferGeometry)) {
                  if (extensions1.get("ANGLE_instanced_arrays") === null) return;
              }
              initAttributes1();
              const geometryAttributes1 = geometry1.attributes;
              const programAttributes1 = program1.getAttributes();
              const materialDefaultAttributeValues1 = material1.defaultAttributeValues;
              for(const name1 in programAttributes1){
                  const programAttribute1 = programAttributes1[name1];
                  if (programAttribute1.location >= 0) {
                      let geometryAttribute1 = geometryAttributes1[name1];
                      if (geometryAttribute1 === undefined) {
                          if (name1 === "instanceMatrix" && object1.instanceMatrix) geometryAttribute1 = object1.instanceMatrix;
                          if (name1 === "instanceColor" && object1.instanceColor) geometryAttribute1 = object1.instanceColor;
                      }
                      if (geometryAttribute1 !== undefined) {
                          const normalized1 = geometryAttribute1.normalized;
                          const size1 = geometryAttribute1.itemSize;
                          const attribute3 = attributes1.get(geometryAttribute1);
                          // TODO Attribute may not be available on context restore
                          if (attribute3 === undefined) continue;
                          const buffer1 = attribute3.buffer;
                          const type1 = attribute3.type;
                          const bytesPerElement1 = attribute3.bytesPerElement;
                          if (geometryAttribute1.isInterleavedBufferAttribute) {
                              const data1 = geometryAttribute1.data;
                              const stride1 = data1.stride;
                              const offset2 = geometryAttribute1.offset;
                              if (data1.isInstancedInterleavedBuffer) {
                                  for(let i3 = 0; i3 < programAttribute1.locationSize; i3++)enableAttributeAndDivisor1(programAttribute1.location + i3, data1.meshPerAttribute);
                                  if (object1.isInstancedMesh !== true && geometry1._maxInstanceCount === undefined) geometry1._maxInstanceCount = data1.meshPerAttribute * data1.count;
                              } else for(let i3 = 0; i3 < programAttribute1.locationSize; i3++)enableAttribute1(programAttribute1.location + i3);
                              gl1.bindBuffer(34962, buffer1);
                              for(let i3 = 0; i3 < programAttribute1.locationSize; i3++)vertexAttribPointer1(programAttribute1.location + i3, size1 / programAttribute1.locationSize, type1, normalized1, stride1 * bytesPerElement1, (offset2 + size1 / programAttribute1.locationSize * i3) * bytesPerElement1);
                          } else {
                              if (geometryAttribute1.isInstancedBufferAttribute) {
                                  for(let i3 = 0; i3 < programAttribute1.locationSize; i3++)enableAttributeAndDivisor1(programAttribute1.location + i3, geometryAttribute1.meshPerAttribute);
                                  if (object1.isInstancedMesh !== true && geometry1._maxInstanceCount === undefined) geometry1._maxInstanceCount = geometryAttribute1.meshPerAttribute * geometryAttribute1.count;
                              } else for(let i3 = 0; i3 < programAttribute1.locationSize; i3++)enableAttribute1(programAttribute1.location + i3);
                              gl1.bindBuffer(34962, buffer1);
                              for(let i3 = 0; i3 < programAttribute1.locationSize; i3++)vertexAttribPointer1(programAttribute1.location + i3, size1 / programAttribute1.locationSize, type1, normalized1, size1 * bytesPerElement1, size1 / programAttribute1.locationSize * i3 * bytesPerElement1);
                          }
                      } else if (materialDefaultAttributeValues1 !== undefined) {
                          const value1 = materialDefaultAttributeValues1[name1];
                          if (value1 !== undefined) switch(value1.length){
                              case 2:
                                  gl1.vertexAttrib2fv(programAttribute1.location, value1);
                                  break;
                              case 3:
                                  gl1.vertexAttrib3fv(programAttribute1.location, value1);
                                  break;
                              case 4:
                                  gl1.vertexAttrib4fv(programAttribute1.location, value1);
                                  break;
                              default:
                                  gl1.vertexAttrib1fv(programAttribute1.location, value1);
                          }
                      }
                  }
              }
              disableUnusedAttributes1();
          }
          function dispose1() {
              reset1();
              for(const geometryId1 in bindingStates1){
                  const programMap1 = bindingStates1[geometryId1];
                  for(const programId1 in programMap1){
                      const stateMap1 = programMap1[programId1];
                      for(const wireframe1 in stateMap1){
                          deleteVertexArrayObject1(stateMap1[wireframe1].object);
                          delete stateMap1[wireframe1];
                      }
                      delete programMap1[programId1];
                  }
                  delete bindingStates1[geometryId1];
              }
          }
          function releaseStatesOfGeometry1(geometry1) {
              if (bindingStates1[geometry1.id] === undefined) return;
              const programMap1 = bindingStates1[geometry1.id];
              for(const programId1 in programMap1){
                  const stateMap1 = programMap1[programId1];
                  for(const wireframe1 in stateMap1){
                      deleteVertexArrayObject1(stateMap1[wireframe1].object);
                      delete stateMap1[wireframe1];
                  }
                  delete programMap1[programId1];
              }
              delete bindingStates1[geometry1.id];
          }
          function releaseStatesOfProgram1(program1) {
              for(const geometryId1 in bindingStates1){
                  const programMap1 = bindingStates1[geometryId1];
                  if (programMap1[program1.id] === undefined) continue;
                  const stateMap1 = programMap1[program1.id];
                  for(const wireframe1 in stateMap1){
                      deleteVertexArrayObject1(stateMap1[wireframe1].object);
                      delete stateMap1[wireframe1];
                  }
                  delete programMap1[program1.id];
              }
          }
          function reset1() {
              resetDefaultState1();
              if (currentState1 === defaultState1) return;
              currentState1 = defaultState1;
              bindVertexArrayObject1(currentState1.object);
          }
          // for backward-compatilibity
          function resetDefaultState1() {
              defaultState1.geometry = null;
              defaultState1.program = null;
              defaultState1.wireframe = false;
          }
          return {
              setup: setup1,
              reset: reset1,
              resetDefaultState: resetDefaultState1,
              dispose: dispose1,
              releaseStatesOfGeometry: releaseStatesOfGeometry1,
              releaseStatesOfProgram: releaseStatesOfProgram1,
              initAttributes: initAttributes1,
              enableAttribute: enableAttribute1,
              disableUnusedAttributes: disableUnusedAttributes1
          };
      }
      function WebGLBufferRenderer(gl1, extensions1, info1, capabilities1) {
          const isWebGL21 = capabilities1.isWebGL2;
          let mode1;
          function setMode1(value1) {
              mode1 = value1;
          }
          function render1(start1, count1) {
              gl1.drawArrays(mode1, start1, count1);
              info1.update(count1, mode1, 1);
          }
          function renderInstances1(start1, count1, primcount1) {
              if (primcount1 === 0) return;
              let extension1, methodName1;
              if (isWebGL21) {
                  extension1 = gl1;
                  methodName1 = "drawArraysInstanced";
              } else {
                  extension1 = extensions1.get("ANGLE_instanced_arrays");
                  methodName1 = "drawArraysInstancedANGLE";
                  if (extension1 === null) {
                      console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                      return;
                  }
              }
              extension1[methodName1](mode1, start1, count1, primcount1);
              info1.update(count1, mode1, primcount1);
          }
          //
          this.setMode = setMode1;
          this.render = render1;
          this.renderInstances = renderInstances1;
      }
      function WebGLCapabilities(gl1, extensions1, parameters1) {
          let maxAnisotropy1;
          function getMaxAnisotropy1() {
              if (maxAnisotropy1 !== undefined) return maxAnisotropy1;
              if (extensions1.has("EXT_texture_filter_anisotropic") === true) {
                  const extension1 = extensions1.get("EXT_texture_filter_anisotropic");
                  maxAnisotropy1 = gl1.getParameter(extension1.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
              } else maxAnisotropy1 = 0;
              return maxAnisotropy1;
          }
          function getMaxPrecision1(precision1) {
              if (precision1 === "highp") {
                  if (gl1.getShaderPrecisionFormat(35633, 36338).precision > 0 && gl1.getShaderPrecisionFormat(35632, 36338).precision > 0) return "highp";
                  precision1 = "mediump";
              }
              if (precision1 === "mediump") {
                  if (gl1.getShaderPrecisionFormat(35633, 36337).precision > 0 && gl1.getShaderPrecisionFormat(35632, 36337).precision > 0) return "mediump";
              }
              return "lowp";
          }
          const isWebGL21 = typeof WebGL2RenderingContext !== "undefined" && gl1 instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== "undefined" && gl1 instanceof WebGL2ComputeRenderingContext;
          let precision1 = parameters1.precision !== undefined ? parameters1.precision : "highp";
          const maxPrecision1 = getMaxPrecision1(precision1);
          if (maxPrecision1 !== precision1) {
              console.warn("THREE.WebGLRenderer:", precision1, "not supported, using", maxPrecision1, "instead.");
              precision1 = maxPrecision1;
          }
          const drawBuffers1 = isWebGL21 || extensions1.has("WEBGL_draw_buffers");
          const logarithmicDepthBuffer1 = parameters1.logarithmicDepthBuffer === true;
          const maxTextures1 = gl1.getParameter(34930);
          const maxVertexTextures1 = gl1.getParameter(35660);
          const maxTextureSize1 = gl1.getParameter(3379);
          const maxCubemapSize1 = gl1.getParameter(34076);
          const maxAttributes1 = gl1.getParameter(34921);
          const maxVertexUniforms1 = gl1.getParameter(36347);
          const maxVaryings1 = gl1.getParameter(36348);
          const maxFragmentUniforms1 = gl1.getParameter(36349);
          const vertexTextures1 = maxVertexTextures1 > 0;
          const floatFragmentTextures1 = isWebGL21 || extensions1.has("OES_texture_float");
          const floatVertexTextures1 = vertexTextures1 && floatFragmentTextures1;
          const maxSamples1 = isWebGL21 ? gl1.getParameter(36183) : 0;
          return {
              isWebGL2: isWebGL21,
              drawBuffers: drawBuffers1,
              getMaxAnisotropy: getMaxAnisotropy1,
              getMaxPrecision: getMaxPrecision1,
              precision: precision1,
              logarithmicDepthBuffer: logarithmicDepthBuffer1,
              maxTextures: maxTextures1,
              maxVertexTextures: maxVertexTextures1,
              maxTextureSize: maxTextureSize1,
              maxCubemapSize: maxCubemapSize1,
              maxAttributes: maxAttributes1,
              maxVertexUniforms: maxVertexUniforms1,
              maxVaryings: maxVaryings1,
              maxFragmentUniforms: maxFragmentUniforms1,
              vertexTextures: vertexTextures1,
              floatFragmentTextures: floatFragmentTextures1,
              floatVertexTextures: floatVertexTextures1,
              maxSamples: maxSamples1
          };
      }
      function WebGLClipping(properties1) {
          const scope1 = this;
          let globalState1 = null, numGlobalPlanes1 = 0, localClippingEnabled1 = false, renderingShadows1 = false;
          const plane1 = new Plane(), viewNormalMatrix1 = new Matrix3(), uniform1 = {
              value: null,
              needsUpdate: false
          };
          this.uniform = uniform1;
          this.numPlanes = 0;
          this.numIntersection = 0;
          this.init = function(planes1, enableLocalClipping1, camera1) {
              const enabled1 = planes1.length !== 0 || enableLocalClipping1 || // enable state of previous frame - the clipping code has to
              // run another frame in order to reset the state:
              numGlobalPlanes1 !== 0 || localClippingEnabled1;
              localClippingEnabled1 = enableLocalClipping1;
              globalState1 = projectPlanes1(planes1, camera1, 0);
              numGlobalPlanes1 = planes1.length;
              return enabled1;
          };
          this.beginShadows = function() {
              renderingShadows1 = true;
              projectPlanes1(null);
          };
          this.endShadows = function() {
              renderingShadows1 = false;
              resetGlobalState1();
          };
          this.setState = function(material1, camera1, useCache1) {
              const planes1 = material1.clippingPlanes, clipIntersection1 = material1.clipIntersection, clipShadows1 = material1.clipShadows;
              const materialProperties1 = properties1.get(material1);
              if (!localClippingEnabled1 || planes1 === null || planes1.length === 0 || renderingShadows1 && !clipShadows1) {
                  // there's no local clipping
                  if (renderingShadows1) // there's no global clipping
                  projectPlanes1(null);
                  else resetGlobalState1();
              } else {
                  const nGlobal1 = renderingShadows1 ? 0 : numGlobalPlanes1, lGlobal1 = nGlobal1 * 4;
                  let dstArray1 = materialProperties1.clippingState || null;
                  uniform1.value = dstArray1; // ensure unique state
                  dstArray1 = projectPlanes1(planes1, camera1, lGlobal1, useCache1);
                  for(let i3 = 0; i3 !== lGlobal1; ++i3)dstArray1[i3] = globalState1[i3];
                  materialProperties1.clippingState = dstArray1;
                  this.numIntersection = clipIntersection1 ? this.numPlanes : 0;
                  this.numPlanes += nGlobal1;
              }
          };
          function resetGlobalState1() {
              if (uniform1.value !== globalState1) {
                  uniform1.value = globalState1;
                  uniform1.needsUpdate = numGlobalPlanes1 > 0;
              }
              scope1.numPlanes = numGlobalPlanes1;
              scope1.numIntersection = 0;
          }
          function projectPlanes1(planes1, camera1, dstOffset1, skipTransform1) {
              const nPlanes1 = planes1 !== null ? planes1.length : 0;
              let dstArray1 = null;
              if (nPlanes1 !== 0) {
                  dstArray1 = uniform1.value;
                  if (skipTransform1 !== true || dstArray1 === null) {
                      const flatSize1 = dstOffset1 + nPlanes1 * 4, viewMatrix1 = camera1.matrixWorldInverse;
                      viewNormalMatrix1.getNormalMatrix(viewMatrix1);
                      if (dstArray1 === null || dstArray1.length < flatSize1) dstArray1 = new Float32Array(flatSize1);
                      for(let i3 = 0, i41 = dstOffset1; i3 !== nPlanes1; ++i3, i41 += 4){
                          plane1.copy(planes1[i3]).applyMatrix4(viewMatrix1, viewNormalMatrix1);
                          plane1.normal.toArray(dstArray1, i41);
                          dstArray1[i41 + 3] = plane1.constant;
                      }
                  }
                  uniform1.value = dstArray1;
                  uniform1.needsUpdate = true;
              }
              scope1.numPlanes = nPlanes1;
              scope1.numIntersection = 0;
              return dstArray1;
          }
      }
      function WebGLCubeMaps(renderer1) {
          let cubemaps1 = new WeakMap();
          function mapTextureMapping1(texture1, mapping1) {
              if (mapping1 === EquirectangularReflectionMapping) texture1.mapping = CubeReflectionMapping;
              else if (mapping1 === EquirectangularRefractionMapping) texture1.mapping = CubeRefractionMapping;
              return texture1;
          }
          function get1(texture1) {
              if (texture1 && texture1.isTexture && texture1.isRenderTargetTexture === false) {
                  const mapping1 = texture1.mapping;
                  if (mapping1 === EquirectangularReflectionMapping || mapping1 === EquirectangularRefractionMapping) {
                      if (cubemaps1.has(texture1)) {
                          const cubemap1 = cubemaps1.get(texture1).texture;
                          return mapTextureMapping1(cubemap1, texture1.mapping);
                      } else {
                          const image1 = texture1.image;
                          if (image1 && image1.height > 0) {
                              const renderTarget1 = new WebGLCubeRenderTarget(image1.height / 2);
                              renderTarget1.fromEquirectangularTexture(renderer1, texture1);
                              cubemaps1.set(texture1, renderTarget1);
                              texture1.addEventListener("dispose", onTextureDispose1);
                              return mapTextureMapping1(renderTarget1.texture, texture1.mapping);
                          } else // image not yet ready. try the conversion next frame
                          return null;
                      }
                  }
              }
              return texture1;
          }
          function onTextureDispose1(event1) {
              const texture1 = event1.target;
              texture1.removeEventListener("dispose", onTextureDispose1);
              const cubemap1 = cubemaps1.get(texture1);
              if (cubemap1 !== undefined) {
                  cubemaps1.delete(texture1);
                  cubemap1.dispose();
              }
          }
          function dispose1() {
              cubemaps1 = new WeakMap();
          }
          return {
              get: get1,
              dispose: dispose1
          };
      }
      class OrthographicCamera extends Camera {
          constructor(left1 = -1, right1 = 1, top1 = 1, bottom1 = -1, near1 = 0.1, far1 = 2000){
              super();
              this.type = "OrthographicCamera";
              this.zoom = 1;
              this.view = null;
              this.left = left1;
              this.right = right1;
              this.top = top1;
              this.bottom = bottom1;
              this.near = near1;
              this.far = far1;
              this.updateProjectionMatrix();
          }
          copy(source1, recursive1) {
              super.copy(source1, recursive1);
              this.left = source1.left;
              this.right = source1.right;
              this.top = source1.top;
              this.bottom = source1.bottom;
              this.near = source1.near;
              this.far = source1.far;
              this.zoom = source1.zoom;
              this.view = source1.view === null ? null : Object.assign({}, source1.view);
              return this;
          }
          setViewOffset(fullWidth1, fullHeight1, x4, y3, width1, height1) {
              if (this.view === null) this.view = {
                  enabled: true,
                  fullWidth: 1,
                  fullHeight: 1,
                  offsetX: 0,
                  offsetY: 0,
                  width: 1,
                  height: 1
              };
              this.view.enabled = true;
              this.view.fullWidth = fullWidth1;
              this.view.fullHeight = fullHeight1;
              this.view.offsetX = x4;
              this.view.offsetY = y3;
              this.view.width = width1;
              this.view.height = height1;
              this.updateProjectionMatrix();
          }
          clearViewOffset() {
              if (this.view !== null) this.view.enabled = false;
              this.updateProjectionMatrix();
          }
          updateProjectionMatrix() {
              const dx1 = (this.right - this.left) / (2 * this.zoom);
              const dy1 = (this.top - this.bottom) / (2 * this.zoom);
              const cx1 = (this.right + this.left) / 2;
              const cy1 = (this.top + this.bottom) / 2;
              let left1 = cx1 - dx1;
              let right1 = cx1 + dx1;
              let top1 = cy1 + dy1;
              let bottom1 = cy1 - dy1;
              if (this.view !== null && this.view.enabled) {
                  const scaleW1 = (this.right - this.left) / this.view.fullWidth / this.zoom;
                  const scaleH1 = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
                  left1 += scaleW1 * this.view.offsetX;
                  right1 = left1 + scaleW1 * this.view.width;
                  top1 -= scaleH1 * this.view.offsetY;
                  bottom1 = top1 - scaleH1 * this.view.height;
              }
              this.projectionMatrix.makeOrthographic(left1, right1, top1, bottom1, this.near, this.far);
              this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
          }
          toJSON(meta1) {
              const data1 = super.toJSON(meta1);
              data1.object.zoom = this.zoom;
              data1.object.left = this.left;
              data1.object.right = this.right;
              data1.object.top = this.top;
              data1.object.bottom = this.bottom;
              data1.object.near = this.near;
              data1.object.far = this.far;
              if (this.view !== null) data1.object.view = Object.assign({}, this.view);
              return data1;
          }
      }
      OrthographicCamera.prototype.isOrthographicCamera = true;
      const LOD_MIN = 4;
      // The standard deviations (radians) associated with the extra mips. These are
      // chosen to approximate a Trowbridge-Reitz distribution function times the
      // geometric shadowing function. These sigma values squared must match the
      // variance #defines in cube_uv_reflection_fragment.glsl.js.
      const EXTRA_LOD_SIGMA = [
          0.125,
          0.215,
          0.35,
          0.446,
          0.526,
          0.582
      ];
      // The maximum length of the blur for loop. Smaller sigmas will use fewer
      // samples and exit early, but not recompile the shader.
      const MAX_SAMPLES = 20;
      const _flatCamera = /*@__PURE__*/ new OrthographicCamera();
      const _clearColor = /*@__PURE__*/ new Color();
      let _oldTarget = null;
      // Golden Ratio
      const PHI = (1 + Math.sqrt(5)) / 2;
      const INV_PHI = 1 / PHI;
      // Vertices of a dodecahedron (except the opposites, which represent the
      // same axis), used as axis directions evenly spread on a sphere.
      const _axisDirections = [
          /*@__PURE__*/ new Vector3(1, 1, 1),
          /*@__PURE__*/ new Vector3(-1, 1, 1),
          /*@__PURE__*/ new Vector3(1, 1, -1),
          /*@__PURE__*/ new Vector3(-1, 1, -1),
          /*@__PURE__*/ new Vector3(0, PHI, INV_PHI),
          /*@__PURE__*/ new Vector3(0, PHI, -INV_PHI),
          /*@__PURE__*/ new Vector3(INV_PHI, 0, PHI),
          /*@__PURE__*/ new Vector3(-INV_PHI, 0, PHI),
          /*@__PURE__*/ new Vector3(PHI, INV_PHI, 0),
          /*@__PURE__*/ new Vector3(-PHI, INV_PHI, 0)
      ];
      /**
     * This class generates a Prefiltered, Mipmapped Radiance Environment Map
     * (PMREM) from a cubeMap environment texture. This allows different levels of
     * blur to be quickly accessed based on material roughness. It is packed into a
     * special CubeUV format that allows us to perform custom interpolation so that
     * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
     * chain, it only goes down to the LOD_MIN level (above), and then creates extra
     * even more filtered 'mips' at the same LOD_MIN resolution, associated with
     * higher roughness levels. In this way we maintain resolution to smoothly
     * interpolate diffuse lighting while limiting sampling computation.
     *
     * Paper: Fast, Accurate Image-Based Lighting
     * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view
    */ class PMREMGenerator {
          constructor(renderer1){
              this._renderer = renderer1;
              this._pingPongRenderTarget = null;
              this._lodMax = 0;
              this._cubeSize = 0;
              this._lodPlanes = [];
              this._sizeLods = [];
              this._sigmas = [];
              this._blurMaterial = null;
              this._cubemapMaterial = null;
              this._equirectMaterial = null;
              this._compileMaterial(this._blurMaterial);
          }
          /**
         * Generates a PMREM from a supplied Scene, which can be faster than using an
         * image if networking bandwidth is low. Optional sigma specifies a blur radius
         * in radians to be applied to the scene before PMREM generation. Optional near
         * and far planes ensure the scene is rendered in its entirety (the cubeCamera
         * is placed at the origin).
         */ fromScene(scene1, sigma1 = 0, near1 = 0.1, far1 = 100) {
              _oldTarget = this._renderer.getRenderTarget();
              this._setSize(256);
              const cubeUVRenderTarget1 = this._allocateTargets();
              cubeUVRenderTarget1.depthBuffer = true;
              this._sceneToCubeUV(scene1, near1, far1, cubeUVRenderTarget1);
              if (sigma1 > 0) this._blur(cubeUVRenderTarget1, 0, 0, sigma1);
              this._applyPMREM(cubeUVRenderTarget1);
              this._cleanup(cubeUVRenderTarget1);
              return cubeUVRenderTarget1;
          }
          /**
         * Generates a PMREM from an equirectangular texture, which can be either LDR
         * or HDR. The ideal input image size is 1k (1024 x 512),
         * as this matches best with the 256 x 256 cubemap output.
         */ fromEquirectangular(equirectangular1, renderTarget1 = null) {
              return this._fromTexture(equirectangular1, renderTarget1);
          }
          /**
         * Generates a PMREM from an cubemap texture, which can be either LDR
         * or HDR. The ideal input cube size is 256 x 256,
         * as this matches best with the 256 x 256 cubemap output.
         */ fromCubemap(cubemap1, renderTarget1 = null) {
              return this._fromTexture(cubemap1, renderTarget1);
          }
          /**
         * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
         * your texture's network fetch for increased concurrency.
         */ compileCubemapShader() {
              if (this._cubemapMaterial === null) {
                  this._cubemapMaterial = _getCubemapMaterial();
                  this._compileMaterial(this._cubemapMaterial);
              }
          }
          /**
         * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
         * your texture's network fetch for increased concurrency.
         */ compileEquirectangularShader() {
              if (this._equirectMaterial === null) {
                  this._equirectMaterial = _getEquirectMaterial();
                  this._compileMaterial(this._equirectMaterial);
              }
          }
          /**
         * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
         * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
         * one of them will cause any others to also become unusable.
         */ dispose() {
              this._dispose();
              if (this._cubemapMaterial !== null) this._cubemapMaterial.dispose();
              if (this._equirectMaterial !== null) this._equirectMaterial.dispose();
          }
          // private interface
          _setSize(cubeSize1) {
              this._lodMax = Math.floor(Math.log2(cubeSize1));
              this._cubeSize = Math.pow(2, this._lodMax);
          }
          _dispose() {
              this._blurMaterial.dispose();
              if (this._pingPongRenderTarget !== null) this._pingPongRenderTarget.dispose();
              for(let i3 = 0; i3 < this._lodPlanes.length; i3++)this._lodPlanes[i3].dispose();
          }
          _cleanup(outputTarget1) {
              this._renderer.setRenderTarget(_oldTarget);
              outputTarget1.scissorTest = false;
              _setViewport(outputTarget1, 0, 0, outputTarget1.width, outputTarget1.height);
          }
          _fromTexture(texture1, renderTarget1) {
              if (texture1.mapping === CubeReflectionMapping || texture1.mapping === CubeRefractionMapping) this._setSize(texture1.image.length === 0 ? 16 : texture1.image[0].width || texture1.image[0].image.width);
              else this._setSize(texture1.image.width / 4);
              _oldTarget = this._renderer.getRenderTarget();
              const cubeUVRenderTarget1 = renderTarget1 || this._allocateTargets();
              this._textureToCubeUV(texture1, cubeUVRenderTarget1);
              this._applyPMREM(cubeUVRenderTarget1);
              this._cleanup(cubeUVRenderTarget1);
              return cubeUVRenderTarget1;
          }
          _allocateTargets() {
              const width1 = 3 * Math.max(this._cubeSize, 112);
              const height1 = 4 * this._cubeSize - 32;
              const params1 = {
                  magFilter: LinearFilter,
                  minFilter: LinearFilter,
                  generateMipmaps: false,
                  type: HalfFloatType,
                  format: RGBAFormat,
                  encoding: LinearEncoding,
                  depthBuffer: false
              };
              const cubeUVRenderTarget1 = _createRenderTarget(width1, height1, params1);
              if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width1) {
                  if (this._pingPongRenderTarget !== null) this._dispose();
                  this._pingPongRenderTarget = _createRenderTarget(width1, height1, params1);
                  const { _lodMax: _lodMax1 } = this;
                  ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _createPlanes(_lodMax1));
                  this._blurMaterial = _getBlurShader(_lodMax1, width1, height1);
              }
              return cubeUVRenderTarget1;
          }
          _compileMaterial(material1) {
              const tmpMesh1 = new Mesh(this._lodPlanes[0], material1);
              this._renderer.compile(tmpMesh1, _flatCamera);
          }
          _sceneToCubeUV(scene1, near1, far1, cubeUVRenderTarget1) {
              const fov1 = 90;
              const aspect1 = 1;
              const cubeCamera1 = new PerspectiveCamera(fov1, aspect1, near1, far1);
              const upSign1 = [
                  1,
                  -1,
                  1,
                  1,
                  1,
                  1
              ];
              const forwardSign1 = [
                  1,
                  1,
                  1,
                  -1,
                  -1,
                  -1
              ];
              const renderer1 = this._renderer;
              const originalAutoClear1 = renderer1.autoClear;
              const toneMapping1 = renderer1.toneMapping;
              renderer1.getClearColor(_clearColor);
              renderer1.toneMapping = NoToneMapping;
              renderer1.autoClear = false;
              const backgroundMaterial1 = new MeshBasicMaterial({
                  name: "PMREM.Background",
                  side: BackSide,
                  depthWrite: false,
                  depthTest: false
              });
              const backgroundBox1 = new Mesh(new BoxGeometry(), backgroundMaterial1);
              let useSolidColor1 = false;
              const background1 = scene1.background;
              if (background1) {
                  if (background1.isColor) {
                      backgroundMaterial1.color.copy(background1);
                      scene1.background = null;
                      useSolidColor1 = true;
                  }
              } else {
                  backgroundMaterial1.color.copy(_clearColor);
                  useSolidColor1 = true;
              }
              for(let i3 = 0; i3 < 6; i3++){
                  const col1 = i3 % 3;
                  if (col1 === 0) {
                      cubeCamera1.up.set(0, upSign1[i3], 0);
                      cubeCamera1.lookAt(forwardSign1[i3], 0, 0);
                  } else if (col1 === 1) {
                      cubeCamera1.up.set(0, 0, upSign1[i3]);
                      cubeCamera1.lookAt(0, forwardSign1[i3], 0);
                  } else {
                      cubeCamera1.up.set(0, upSign1[i3], 0);
                      cubeCamera1.lookAt(0, 0, forwardSign1[i3]);
                  }
                  const size1 = this._cubeSize;
                  _setViewport(cubeUVRenderTarget1, col1 * size1, i3 > 2 ? size1 : 0, size1, size1);
                  renderer1.setRenderTarget(cubeUVRenderTarget1);
                  if (useSolidColor1) renderer1.render(backgroundBox1, cubeCamera1);
                  renderer1.render(scene1, cubeCamera1);
              }
              backgroundBox1.geometry.dispose();
              backgroundBox1.material.dispose();
              renderer1.toneMapping = toneMapping1;
              renderer1.autoClear = originalAutoClear1;
              scene1.background = background1;
          }
          _textureToCubeUV(texture1, cubeUVRenderTarget1) {
              const renderer1 = this._renderer;
              const isCubeTexture1 = texture1.mapping === CubeReflectionMapping || texture1.mapping === CubeRefractionMapping;
              if (isCubeTexture1) {
                  if (this._cubemapMaterial === null) this._cubemapMaterial = _getCubemapMaterial();
                  this._cubemapMaterial.uniforms.flipEnvMap.value = texture1.isRenderTargetTexture === false ? -1 : 1;
              } else if (this._equirectMaterial === null) this._equirectMaterial = _getEquirectMaterial();
              const material1 = isCubeTexture1 ? this._cubemapMaterial : this._equirectMaterial;
              const mesh1 = new Mesh(this._lodPlanes[0], material1);
              const uniforms1 = material1.uniforms;
              uniforms1["envMap"].value = texture1;
              const size1 = this._cubeSize;
              _setViewport(cubeUVRenderTarget1, 0, 0, 3 * size1, 2 * size1);
              renderer1.setRenderTarget(cubeUVRenderTarget1);
              renderer1.render(mesh1, _flatCamera);
          }
          _applyPMREM(cubeUVRenderTarget1) {
              const renderer1 = this._renderer;
              const autoClear1 = renderer1.autoClear;
              renderer1.autoClear = false;
              for(let i3 = 1; i3 < this._lodPlanes.length; i3++){
                  const sigma1 = Math.sqrt(this._sigmas[i3] * this._sigmas[i3] - this._sigmas[i3 - 1] * this._sigmas[i3 - 1]);
                  const poleAxis1 = _axisDirections[(i3 - 1) % _axisDirections.length];
                  this._blur(cubeUVRenderTarget1, i3 - 1, i3, sigma1, poleAxis1);
              }
              renderer1.autoClear = autoClear1;
          }
          /**
         * This is a two-pass Gaussian blur for a cubemap. Normally this is done
         * vertically and horizontally, but this breaks down on a cube. Here we apply
         * the blur latitudinally (around the poles), and then longitudinally (towards
         * the poles) to approximate the orthogonally-separable blur. It is least
         * accurate at the poles, but still does a decent job.
         */ _blur(cubeUVRenderTarget1, lodIn1, lodOut1, sigma1, poleAxis1) {
              const pingPongRenderTarget1 = this._pingPongRenderTarget;
              this._halfBlur(cubeUVRenderTarget1, pingPongRenderTarget1, lodIn1, lodOut1, sigma1, "latitudinal", poleAxis1);
              this._halfBlur(pingPongRenderTarget1, cubeUVRenderTarget1, lodOut1, lodOut1, sigma1, "longitudinal", poleAxis1);
          }
          _halfBlur(targetIn1, targetOut1, lodIn1, lodOut1, sigmaRadians1, direction1, poleAxis1) {
              const renderer1 = this._renderer;
              const blurMaterial1 = this._blurMaterial;
              if (direction1 !== "latitudinal" && direction1 !== "longitudinal") console.error("blur direction must be either latitudinal or longitudinal!");
              // Number of standard deviations at which to cut off the discrete approximation.
              const STANDARD_DEVIATIONS1 = 3;
              const blurMesh1 = new Mesh(this._lodPlanes[lodOut1], blurMaterial1);
              const blurUniforms1 = blurMaterial1.uniforms;
              const pixels1 = this._sizeLods[lodIn1] - 1;
              const radiansPerPixel1 = isFinite(sigmaRadians1) ? Math.PI / (2 * pixels1) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);
              const sigmaPixels1 = sigmaRadians1 / radiansPerPixel1;
              const samples1 = isFinite(sigmaRadians1) ? 1 + Math.floor(STANDARD_DEVIATIONS1 * sigmaPixels1) : MAX_SAMPLES;
              if (samples1 > MAX_SAMPLES) console.warn(`sigmaRadians, ${sigmaRadians1}, is too large and will clip, as it requested ${samples1} samples when the maximum is set to ${MAX_SAMPLES}`);
              const weights1 = [];
              let sum1 = 0;
              for(let i3 = 0; i3 < MAX_SAMPLES; ++i3){
                  const x4 = i3 / sigmaPixels1;
                  const weight2 = Math.exp(-x4 * x4 / 2);
                  weights1.push(weight2);
                  if (i3 === 0) sum1 += weight2;
                  else if (i3 < samples1) sum1 += 2 * weight2;
              }
              for(let i3 = 0; i3 < weights1.length; i3++)weights1[i3] = weights1[i3] / sum1;
              blurUniforms1["envMap"].value = targetIn1.texture;
              blurUniforms1["samples"].value = samples1;
              blurUniforms1["weights"].value = weights1;
              blurUniforms1["latitudinal"].value = direction1 === "latitudinal";
              if (poleAxis1) blurUniforms1["poleAxis"].value = poleAxis1;
              const { _lodMax: _lodMax1 } = this;
              blurUniforms1["dTheta"].value = radiansPerPixel1;
              blurUniforms1["mipInt"].value = _lodMax1 - lodIn1;
              const outputSize1 = this._sizeLods[lodOut1];
              const x4 = 3 * outputSize1 * (lodOut1 > _lodMax1 - LOD_MIN ? lodOut1 - _lodMax1 + LOD_MIN : 0);
              const y3 = 4 * (this._cubeSize - outputSize1);
              _setViewport(targetOut1, x4, y3, 3 * outputSize1, 2 * outputSize1);
              renderer1.setRenderTarget(targetOut1);
              renderer1.render(blurMesh1, _flatCamera);
          }
      }
      function _createPlanes(lodMax1) {
          const lodPlanes1 = [];
          const sizeLods1 = [];
          const sigmas1 = [];
          let lod1 = lodMax1;
          const totalLods1 = lodMax1 - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;
          for(let i3 = 0; i3 < totalLods1; i3++){
              const sizeLod1 = Math.pow(2, lod1);
              sizeLods1.push(sizeLod1);
              let sigma1 = 1.0 / sizeLod1;
              if (i3 > lodMax1 - LOD_MIN) sigma1 = EXTRA_LOD_SIGMA[i3 - lodMax1 + LOD_MIN - 1];
              else if (i3 === 0) sigma1 = 0;
              sigmas1.push(sigma1);
              const texelSize1 = 1.0 / (sizeLod1 - 1);
              const min1 = -texelSize1 / 2;
              const max1 = 1 + texelSize1 / 2;
              const uv11 = [
                  min1,
                  min1,
                  max1,
                  min1,
                  max1,
                  max1,
                  min1,
                  min1,
                  max1,
                  max1,
                  min1,
                  max1
              ];
              const cubeFaces1 = 6;
              const vertices1 = 6;
              const positionSize1 = 3;
              const uvSize1 = 2;
              const faceIndexSize1 = 1;
              const position1 = new Float32Array(positionSize1 * vertices1 * cubeFaces1);
              const uv4 = new Float32Array(uvSize1 * vertices1 * cubeFaces1);
              const faceIndex1 = new Float32Array(faceIndexSize1 * vertices1 * cubeFaces1);
              for(let face1 = 0; face1 < cubeFaces1; face1++){
                  const x4 = face1 % 3 * 2 / 3 - 1;
                  const y3 = face1 > 2 ? 0 : -1;
                  const coordinates1 = [
                      x4,
                      y3,
                      0,
                      x4 + 2 / 3,
                      y3,
                      0,
                      x4 + 2 / 3,
                      y3 + 1,
                      0,
                      x4,
                      y3,
                      0,
                      x4 + 2 / 3,
                      y3 + 1,
                      0,
                      x4,
                      y3 + 1,
                      0
                  ];
                  position1.set(coordinates1, positionSize1 * vertices1 * face1);
                  uv4.set(uv11, uvSize1 * vertices1 * face1);
                  const fill1 = [
                      face1,
                      face1,
                      face1,
                      face1,
                      face1,
                      face1
                  ];
                  faceIndex1.set(fill1, faceIndexSize1 * vertices1 * face1);
              }
              const planes1 = new BufferGeometry();
              planes1.setAttribute("position", new BufferAttribute(position1, positionSize1));
              planes1.setAttribute("uv", new BufferAttribute(uv4, uvSize1));
              planes1.setAttribute("faceIndex", new BufferAttribute(faceIndex1, faceIndexSize1));
              lodPlanes1.push(planes1);
              if (lod1 > LOD_MIN) lod1--;
          }
          return {
              lodPlanes: lodPlanes1,
              sizeLods: sizeLods1,
              sigmas: sigmas1
          };
      }
      function _createRenderTarget(width1, height1, params1) {
          const cubeUVRenderTarget1 = new WebGLRenderTarget(width1, height1, params1);
          cubeUVRenderTarget1.texture.mapping = CubeUVReflectionMapping;
          cubeUVRenderTarget1.texture.name = "PMREM.cubeUv";
          cubeUVRenderTarget1.scissorTest = true;
          return cubeUVRenderTarget1;
      }
      function _setViewport(target1, x4, y3, width1, height1) {
          target1.viewport.set(x4, y3, width1, height1);
          target1.scissor.set(x4, y3, width1, height1);
      }
      function _getBlurShader(lodMax1, width1, height1) {
          const weights1 = new Float32Array(MAX_SAMPLES);
          const poleAxis1 = new Vector3(0, 1, 0);
          const shaderMaterial1 = new ShaderMaterial({
              name: "SphericalGaussianBlur",
              defines: {
                  "n": MAX_SAMPLES,
                  "CUBEUV_TEXEL_WIDTH": 1.0 / width1,
                  "CUBEUV_TEXEL_HEIGHT": 1.0 / height1,
                  "CUBEUV_MAX_MIP": `${lodMax1}.0`
              },
              uniforms: {
                  "envMap": {
                      value: null
                  },
                  "samples": {
                      value: 1
                  },
                  "weights": {
                      value: weights1
                  },
                  "latitudinal": {
                      value: false
                  },
                  "dTheta": {
                      value: 0
                  },
                  "mipInt": {
                      value: 0
                  },
                  "poleAxis": {
                      value: poleAxis1
                  }
              },
              vertexShader: _getCommonVertexShader(),
              fragmentShader: /* glsl */ `
  
              precision mediump float;
              precision mediump int;
  
              varying vec3 vOutputDirection;
  
              uniform sampler2D envMap;
              uniform int samples;
              uniform float weights[ n ];
              uniform bool latitudinal;
              uniform float dTheta;
              uniform float mipInt;
              uniform vec3 poleAxis;
  
              #define ENVMAP_TYPE_CUBE_UV
              #include <cube_uv_reflection_fragment>
  
              vec3 getSample( float theta, vec3 axis ) {
  
                  float cosTheta = cos( theta );
                  // Rodrigues' axis-angle rotation
                  vec3 sampleDirection = vOutputDirection * cosTheta
                      + cross( axis, vOutputDirection ) * sin( theta )
                      + axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );
  
                  return bilinearCubeUV( envMap, sampleDirection, mipInt );
  
              }
  
              void main() {
  
                  vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );
  
                  if ( all( equal( axis, vec3( 0.0 ) ) ) ) {
  
                      axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );
  
                  }
  
                  axis = normalize( axis );
  
                  gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
                  gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );
  
                  for ( int i = 1; i < n; i++ ) {
  
                      if ( i >= samples ) {
  
                          break;
  
                      }
  
                      float theta = dTheta * float( i );
                      gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
                      gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );
  
                  }
  
              }
          `,
              blending: NoBlending,
              depthTest: false,
              depthWrite: false
          });
          return shaderMaterial1;
      }
      function _getEquirectMaterial() {
          return new ShaderMaterial({
              name: "EquirectangularToCubeUV",
              uniforms: {
                  "envMap": {
                      value: null
                  }
              },
              vertexShader: _getCommonVertexShader(),
              fragmentShader: /* glsl */ `
  
              precision mediump float;
              precision mediump int;
  
              varying vec3 vOutputDirection;
  
              uniform sampler2D envMap;
  
              #include <common>
  
              void main() {
  
                  vec3 outputDirection = normalize( vOutputDirection );
                  vec2 uv = equirectUv( outputDirection );
  
                  gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );
  
              }
          `,
              blending: NoBlending,
              depthTest: false,
              depthWrite: false
          });
      }
      function _getCubemapMaterial() {
          return new ShaderMaterial({
              name: "CubemapToCubeUV",
              uniforms: {
                  "envMap": {
                      value: null
                  },
                  "flipEnvMap": {
                      value: -1
                  }
              },
              vertexShader: _getCommonVertexShader(),
              fragmentShader: /* glsl */ `
  
              precision mediump float;
              precision mediump int;
  
              uniform float flipEnvMap;
  
              varying vec3 vOutputDirection;
  
              uniform samplerCube envMap;
  
              void main() {
  
                  gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );
  
              }
          `,
              blending: NoBlending,
              depthTest: false,
              depthWrite: false
          });
      }
      function _getCommonVertexShader() {
          return /* glsl */ `
  
          precision mediump float;
          precision mediump int;
  
          attribute float faceIndex;
  
          varying vec3 vOutputDirection;
  
          // RH coordinate system; PMREM face-indexing convention
          vec3 getDirection( vec2 uv, float face ) {
  
              uv = 2.0 * uv - 1.0;
  
              vec3 direction = vec3( uv, 1.0 );
  
              if ( face == 0.0 ) {
  
                  direction = direction.zyx; // ( 1, v, u ) pos x
  
              } else if ( face == 1.0 ) {
  
                  direction = direction.xzy;
                  direction.xz *= -1.0; // ( -u, 1, -v ) pos y
  
              } else if ( face == 2.0 ) {
  
                  direction.x *= -1.0; // ( -u, v, 1 ) pos z
  
              } else if ( face == 3.0 ) {
  
                  direction = direction.zyx;
                  direction.xz *= -1.0; // ( -1, v, -u ) neg x
  
              } else if ( face == 4.0 ) {
  
                  direction = direction.xzy;
                  direction.xy *= -1.0; // ( -u, -1, v ) neg y
  
              } else if ( face == 5.0 ) {
  
                  direction.z *= -1.0; // ( u, v, -1 ) neg z
  
              }
  
              return direction;
  
          }
  
          void main() {
  
              vOutputDirection = getDirection( uv, faceIndex );
              gl_Position = vec4( position, 1.0 );
  
          }
      `;
      }
      function WebGLCubeUVMaps(renderer1) {
          let cubeUVmaps1 = new WeakMap();
          let pmremGenerator1 = null;
          function get1(texture1) {
              if (texture1 && texture1.isTexture) {
                  const mapping1 = texture1.mapping;
                  const isEquirectMap1 = mapping1 === EquirectangularReflectionMapping || mapping1 === EquirectangularRefractionMapping;
                  const isCubeMap1 = mapping1 === CubeReflectionMapping || mapping1 === CubeRefractionMapping;
                  // equirect/cube map to cubeUV conversion
                  if (isEquirectMap1 || isCubeMap1) {
                      if (texture1.isRenderTargetTexture && texture1.needsPMREMUpdate === true) {
                          texture1.needsPMREMUpdate = false;
                          let renderTarget1 = cubeUVmaps1.get(texture1);
                          if (pmremGenerator1 === null) pmremGenerator1 = new PMREMGenerator(renderer1);
                          renderTarget1 = isEquirectMap1 ? pmremGenerator1.fromEquirectangular(texture1, renderTarget1) : pmremGenerator1.fromCubemap(texture1, renderTarget1);
                          cubeUVmaps1.set(texture1, renderTarget1);
                          return renderTarget1.texture;
                      } else {
                          if (cubeUVmaps1.has(texture1)) return cubeUVmaps1.get(texture1).texture;
                          else {
                              const image1 = texture1.image;
                              if (isEquirectMap1 && image1 && image1.height > 0 || isCubeMap1 && image1 && isCubeTextureComplete1(image1)) {
                                  if (pmremGenerator1 === null) pmremGenerator1 = new PMREMGenerator(renderer1);
                                  const renderTarget1 = isEquirectMap1 ? pmremGenerator1.fromEquirectangular(texture1) : pmremGenerator1.fromCubemap(texture1);
                                  cubeUVmaps1.set(texture1, renderTarget1);
                                  texture1.addEventListener("dispose", onTextureDispose1);
                                  return renderTarget1.texture;
                              } else // image not yet ready. try the conversion next frame
                              return null;
                          }
                      }
                  }
              }
              return texture1;
          }
          function isCubeTextureComplete1(image1) {
              let count1 = 0;
              const length1 = 6;
              for(let i3 = 0; i3 < length1; i3++)if (image1[i3] !== undefined) count1++;
              return count1 === length1;
          }
          function onTextureDispose1(event1) {
              const texture1 = event1.target;
              texture1.removeEventListener("dispose", onTextureDispose1);
              const cubemapUV1 = cubeUVmaps1.get(texture1);
              if (cubemapUV1 !== undefined) {
                  cubeUVmaps1.delete(texture1);
                  cubemapUV1.dispose();
              }
          }
          function dispose1() {
              cubeUVmaps1 = new WeakMap();
              if (pmremGenerator1 !== null) {
                  pmremGenerator1.dispose();
                  pmremGenerator1 = null;
              }
          }
          return {
              get: get1,
              dispose: dispose1
          };
      }
      function WebGLExtensions(gl1) {
          const extensions1 = {};
          function getExtension1(name1) {
              if (extensions1[name1] !== undefined) return extensions1[name1];
              let extension1;
              switch(name1){
                  case "WEBGL_depth_texture":
                      extension1 = gl1.getExtension("WEBGL_depth_texture") || gl1.getExtension("MOZ_WEBGL_depth_texture") || gl1.getExtension("WEBKIT_WEBGL_depth_texture");
                      break;
                  case "EXT_texture_filter_anisotropic":
                      extension1 = gl1.getExtension("EXT_texture_filter_anisotropic") || gl1.getExtension("MOZ_EXT_texture_filter_anisotropic") || gl1.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
                      break;
                  case "WEBGL_compressed_texture_s3tc":
                      extension1 = gl1.getExtension("WEBGL_compressed_texture_s3tc") || gl1.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || gl1.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
                      break;
                  case "WEBGL_compressed_texture_pvrtc":
                      extension1 = gl1.getExtension("WEBGL_compressed_texture_pvrtc") || gl1.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
                      break;
                  default:
                      extension1 = gl1.getExtension(name1);
              }
              extensions1[name1] = extension1;
              return extension1;
          }
          return {
              has: function(name1) {
                  return getExtension1(name1) !== null;
              },
              init: function(capabilities1) {
                  if (capabilities1.isWebGL2) getExtension1("EXT_color_buffer_float");
                  else {
                      getExtension1("WEBGL_depth_texture");
                      getExtension1("OES_texture_float");
                      getExtension1("OES_texture_half_float");
                      getExtension1("OES_texture_half_float_linear");
                      getExtension1("OES_standard_derivatives");
                      getExtension1("OES_element_index_uint");
                      getExtension1("OES_vertex_array_object");
                      getExtension1("ANGLE_instanced_arrays");
                  }
                  getExtension1("OES_texture_float_linear");
                  getExtension1("EXT_color_buffer_half_float");
                  getExtension1("WEBGL_multisampled_render_to_texture");
              },
              get: function(name1) {
                  const extension1 = getExtension1(name1);
                  if (extension1 === null) console.warn("THREE.WebGLRenderer: " + name1 + " extension not supported.");
                  return extension1;
              }
          };
      }
      function WebGLGeometries(gl1, attributes1, info1, bindingStates1) {
          const geometries1 = {};
          const wireframeAttributes1 = new WeakMap();
          function onGeometryDispose1(event1) {
              const geometry1 = event1.target;
              if (geometry1.index !== null) attributes1.remove(geometry1.index);
              for(const name1 in geometry1.attributes)attributes1.remove(geometry1.attributes[name1]);
              geometry1.removeEventListener("dispose", onGeometryDispose1);
              delete geometries1[geometry1.id];
              const attribute3 = wireframeAttributes1.get(geometry1);
              if (attribute3) {
                  attributes1.remove(attribute3);
                  wireframeAttributes1.delete(geometry1);
              }
              bindingStates1.releaseStatesOfGeometry(geometry1);
              if (geometry1.isInstancedBufferGeometry === true) delete geometry1._maxInstanceCount;
              //
              info1.memory.geometries--;
          }
          function get1(object1, geometry1) {
              if (geometries1[geometry1.id] === true) return geometry1;
              geometry1.addEventListener("dispose", onGeometryDispose1);
              geometries1[geometry1.id] = true;
              info1.memory.geometries++;
              return geometry1;
          }
          function update1(geometry1) {
              const geometryAttributes1 = geometry1.attributes;
              // Updating index buffer in VAO now. See WebGLBindingStates.
              for(const name1 in geometryAttributes1)attributes1.update(geometryAttributes1[name1], 34962);
              // morph targets
              const morphAttributes1 = geometry1.morphAttributes;
              for(const name1 in morphAttributes1){
                  const array1 = morphAttributes1[name1];
                  for(let i3 = 0, l1 = array1.length; i3 < l1; i3++)attributes1.update(array1[i3], 34962);
              }
          }
          function updateWireframeAttribute1(geometry1) {
              const indices1 = [];
              const geometryIndex1 = geometry1.index;
              const geometryPosition1 = geometry1.attributes.position;
              let version1 = 0;
              if (geometryIndex1 !== null) {
                  const array1 = geometryIndex1.array;
                  version1 = geometryIndex1.version;
                  for(let i3 = 0, l1 = array1.length; i3 < l1; i3 += 3){
                      const a3 = array1[i3 + 0];
                      const b3 = array1[i3 + 1];
                      const c4 = array1[i3 + 2];
                      indices1.push(a3, b3, b3, c4, c4, a3);
                  }
              } else {
                  const array1 = geometryPosition1.array;
                  version1 = geometryPosition1.version;
                  for(let i3 = 0, l1 = array1.length / 3 - 1; i3 < l1; i3 += 3){
                      const a3 = i3 + 0;
                      const b3 = i3 + 1;
                      const c4 = i3 + 2;
                      indices1.push(a3, b3, b3, c4, c4, a3);
                  }
              }
              const attribute3 = new (arrayNeedsUint32(indices1) ? Uint32BufferAttribute : Uint16BufferAttribute)(indices1, 1);
              attribute3.version = version1;
              // Updating index buffer in VAO now. See WebGLBindingStates
              //
              const previousAttribute1 = wireframeAttributes1.get(geometry1);
              if (previousAttribute1) attributes1.remove(previousAttribute1);
              //
              wireframeAttributes1.set(geometry1, attribute3);
          }
          function getWireframeAttribute1(geometry1) {
              const currentAttribute1 = wireframeAttributes1.get(geometry1);
              if (currentAttribute1) {
                  const geometryIndex1 = geometry1.index;
                  if (geometryIndex1 !== null) // if the attribute is obsolete, create a new one
                  {
                      if (currentAttribute1.version < geometryIndex1.version) updateWireframeAttribute1(geometry1);
                  }
              } else updateWireframeAttribute1(geometry1);
              return wireframeAttributes1.get(geometry1);
          }
          return {
              get: get1,
              update: update1,
              getWireframeAttribute: getWireframeAttribute1
          };
      }
      function WebGLIndexedBufferRenderer(gl1, extensions1, info1, capabilities1) {
          const isWebGL21 = capabilities1.isWebGL2;
          let mode1;
          function setMode1(value1) {
              mode1 = value1;
          }
          let type1, bytesPerElement1;
          function setIndex1(value1) {
              type1 = value1.type;
              bytesPerElement1 = value1.bytesPerElement;
          }
          function render1(start1, count1) {
              gl1.drawElements(mode1, count1, type1, start1 * bytesPerElement1);
              info1.update(count1, mode1, 1);
          }
          function renderInstances1(start1, count1, primcount1) {
              if (primcount1 === 0) return;
              let extension1, methodName1;
              if (isWebGL21) {
                  extension1 = gl1;
                  methodName1 = "drawElementsInstanced";
              } else {
                  extension1 = extensions1.get("ANGLE_instanced_arrays");
                  methodName1 = "drawElementsInstancedANGLE";
                  if (extension1 === null) {
                      console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                      return;
                  }
              }
              extension1[methodName1](mode1, count1, type1, start1 * bytesPerElement1, primcount1);
              info1.update(count1, mode1, primcount1);
          }
          //
          this.setMode = setMode1;
          this.setIndex = setIndex1;
          this.render = render1;
          this.renderInstances = renderInstances1;
      }
      function WebGLInfo(gl1) {
          const memory1 = {
              geometries: 0,
              textures: 0
          };
          const render1 = {
              frame: 0,
              calls: 0,
              triangles: 0,
              points: 0,
              lines: 0
          };
          function update1(count1, mode1, instanceCount1) {
              render1.calls++;
              switch(mode1){
                  case 4:
                      render1.triangles += instanceCount1 * (count1 / 3);
                      break;
                  case 1:
                      render1.lines += instanceCount1 * (count1 / 2);
                      break;
                  case 3:
                      render1.lines += instanceCount1 * (count1 - 1);
                      break;
                  case 2:
                      render1.lines += instanceCount1 * count1;
                      break;
                  case 0:
                      render1.points += instanceCount1 * count1;
                      break;
                  default:
                      console.error("THREE.WebGLInfo: Unknown draw mode:", mode1);
                      break;
              }
          }
          function reset1() {
              render1.frame++;
              render1.calls = 0;
              render1.triangles = 0;
              render1.points = 0;
              render1.lines = 0;
          }
          return {
              memory: memory1,
              render: render1,
              programs: null,
              autoReset: true,
              reset: reset1,
              update: update1
          };
      }
      function numericalSort(a3, b3) {
          return a3[0] - b3[0];
      }
      function absNumericalSort(a3, b3) {
          return Math.abs(b3[1]) - Math.abs(a3[1]);
      }
      function denormalize(morph1, attribute3) {
          let denominator1 = 1;
          const array1 = attribute3.isInterleavedBufferAttribute ? attribute3.data.array : attribute3.array;
          if (array1 instanceof Int8Array) denominator1 = 127;
          else if (array1 instanceof Int16Array) denominator1 = 32767;
          else if (array1 instanceof Int32Array) denominator1 = 2147483647;
          else console.error("THREE.WebGLMorphtargets: Unsupported morph attribute data type: ", array1);
          morph1.divideScalar(denominator1);
      }
      function WebGLMorphtargets(gl1, capabilities1, textures1) {
          const influencesList1 = {};
          const morphInfluences1 = new Float32Array(8);
          const morphTextures1 = new WeakMap();
          const morph1 = new Vector4$1();
          const workInfluences1 = [];
          for(let i3 = 0; i3 < 8; i3++)workInfluences1[i3] = [
              i3,
              0
          ];
          function update1(object1, geometry1, material1, program1) {
              const objectInfluences1 = object1.morphTargetInfluences;
              if (capabilities1.isWebGL2 === true) {
                  // instead of using attributes, the WebGL 2 code path encodes morph targets
                  // into an array of data textures. Each layer represents a single morph target.
                  const morphAttribute1 = geometry1.morphAttributes.position || geometry1.morphAttributes.normal || geometry1.morphAttributes.color;
                  const morphTargetsCount1 = morphAttribute1 !== undefined ? morphAttribute1.length : 0;
                  let entry1 = morphTextures1.get(geometry1);
                  if (entry1 === undefined || entry1.count !== morphTargetsCount1) {
                      if (entry1 !== undefined) entry1.texture.dispose();
                      const hasMorphPosition1 = geometry1.morphAttributes.position !== undefined;
                      const hasMorphNormals1 = geometry1.morphAttributes.normal !== undefined;
                      const hasMorphColors1 = geometry1.morphAttributes.color !== undefined;
                      const morphTargets1 = geometry1.morphAttributes.position || [];
                      const morphNormals1 = geometry1.morphAttributes.normal || [];
                      const morphColors1 = geometry1.morphAttributes.color || [];
                      let vertexDataCount1 = 0;
                      if (hasMorphPosition1 === true) vertexDataCount1 = 1;
                      if (hasMorphNormals1 === true) vertexDataCount1 = 2;
                      if (hasMorphColors1 === true) vertexDataCount1 = 3;
                      let width1 = geometry1.attributes.position.count * vertexDataCount1;
                      let height1 = 1;
                      if (width1 > capabilities1.maxTextureSize) {
                          height1 = Math.ceil(width1 / capabilities1.maxTextureSize);
                          width1 = capabilities1.maxTextureSize;
                      }
                      const buffer1 = new Float32Array(width1 * height1 * 4 * morphTargetsCount1);
                      const texture1 = new DataArrayTexture(buffer1, width1, height1, morphTargetsCount1);
                      texture1.format = RGBAFormat; // using RGBA since RGB might be emulated (and is thus slower)
                      texture1.type = FloatType;
                      texture1.needsUpdate = true;
                      // fill buffer
                      const vertexDataStride1 = vertexDataCount1 * 4;
                      for(let i3 = 0; i3 < morphTargetsCount1; i3++){
                          const morphTarget1 = morphTargets1[i3];
                          const morphNormal1 = morphNormals1[i3];
                          const morphColor1 = morphColors1[i3];
                          const offset2 = width1 * height1 * 4 * i3;
                          for(let j1 = 0; j1 < morphTarget1.count; j1++){
                              const stride1 = j1 * vertexDataStride1;
                              if (hasMorphPosition1 === true) {
                                  morph1.fromBufferAttribute(morphTarget1, j1);
                                  if (morphTarget1.normalized === true) denormalize(morph1, morphTarget1);
                                  buffer1[offset2 + stride1 + 0] = morph1.x;
                                  buffer1[offset2 + stride1 + 1] = morph1.y;
                                  buffer1[offset2 + stride1 + 2] = morph1.z;
                                  buffer1[offset2 + stride1 + 3] = 0;
                              }
                              if (hasMorphNormals1 === true) {
                                  morph1.fromBufferAttribute(morphNormal1, j1);
                                  if (morphNormal1.normalized === true) denormalize(morph1, morphNormal1);
                                  buffer1[offset2 + stride1 + 4] = morph1.x;
                                  buffer1[offset2 + stride1 + 5] = morph1.y;
                                  buffer1[offset2 + stride1 + 6] = morph1.z;
                                  buffer1[offset2 + stride1 + 7] = 0;
                              }
                              if (hasMorphColors1 === true) {
                                  morph1.fromBufferAttribute(morphColor1, j1);
                                  if (morphColor1.normalized === true) denormalize(morph1, morphNormal1);
                                  buffer1[offset2 + stride1 + 8] = morph1.x;
                                  buffer1[offset2 + stride1 + 9] = morph1.y;
                                  buffer1[offset2 + stride1 + 10] = morph1.z;
                                  buffer1[offset2 + stride1 + 11] = morphColor1.itemSize === 4 ? morph1.w : 1;
                              }
                          }
                      }
                      entry1 = {
                          count: morphTargetsCount1,
                          texture: texture1,
                          size: new Vector2(width1, height1)
                      };
                      morphTextures1.set(geometry1, entry1);
                      function disposeTexture1() {
                          texture1.dispose();
                          morphTextures1.delete(geometry1);
                          geometry1.removeEventListener("dispose", disposeTexture1);
                      }
                      geometry1.addEventListener("dispose", disposeTexture1);
                  }
                  //
                  let morphInfluencesSum1 = 0;
                  for(let i3 = 0; i3 < objectInfluences1.length; i3++)morphInfluencesSum1 += objectInfluences1[i3];
                  const morphBaseInfluence1 = geometry1.morphTargetsRelative ? 1 : 1 - morphInfluencesSum1;
                  program1.getUniforms().setValue(gl1, "morphTargetBaseInfluence", morphBaseInfluence1);
                  program1.getUniforms().setValue(gl1, "morphTargetInfluences", objectInfluences1);
                  program1.getUniforms().setValue(gl1, "morphTargetsTexture", entry1.texture, textures1);
                  program1.getUniforms().setValue(gl1, "morphTargetsTextureSize", entry1.size);
              } else {
                  // When object doesn't have morph target influences defined, we treat it as a 0-length array
                  // This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences
                  const length1 = objectInfluences1 === undefined ? 0 : objectInfluences1.length;
                  let influences1 = influencesList1[geometry1.id];
                  if (influences1 === undefined || influences1.length !== length1) {
                      // initialise list
                      influences1 = [];
                      for(let i3 = 0; i3 < length1; i3++)influences1[i3] = [
                          i3,
                          0
                      ];
                      influencesList1[geometry1.id] = influences1;
                  }
                  // Collect influences
                  for(let i3 = 0; i3 < length1; i3++){
                      const influence1 = influences1[i3];
                      influence1[0] = i3;
                      influence1[1] = objectInfluences1[i3];
                  }
                  influences1.sort(absNumericalSort);
                  for(let i3 = 0; i3 < 8; i3++)if (i3 < length1 && influences1[i3][1]) {
                      workInfluences1[i3][0] = influences1[i3][0];
                      workInfluences1[i3][1] = influences1[i3][1];
                  } else {
                      workInfluences1[i3][0] = Number.MAX_SAFE_INTEGER;
                      workInfluences1[i3][1] = 0;
                  }
                  workInfluences1.sort(numericalSort);
                  const morphTargets1 = geometry1.morphAttributes.position;
                  const morphNormals1 = geometry1.morphAttributes.normal;
                  let morphInfluencesSum1 = 0;
                  for(let i3 = 0; i3 < 8; i3++){
                      const influence1 = workInfluences1[i3];
                      const index3 = influence1[0];
                      const value1 = influence1[1];
                      if (index3 !== Number.MAX_SAFE_INTEGER && value1) {
                          if (morphTargets1 && geometry1.getAttribute("morphTarget" + i3) !== morphTargets1[index3]) geometry1.setAttribute("morphTarget" + i3, morphTargets1[index3]);
                          if (morphNormals1 && geometry1.getAttribute("morphNormal" + i3) !== morphNormals1[index3]) geometry1.setAttribute("morphNormal" + i3, morphNormals1[index3]);
                          morphInfluences1[i3] = value1;
                          morphInfluencesSum1 += value1;
                      } else {
                          if (morphTargets1 && geometry1.hasAttribute("morphTarget" + i3) === true) geometry1.deleteAttribute("morphTarget" + i3);
                          if (morphNormals1 && geometry1.hasAttribute("morphNormal" + i3) === true) geometry1.deleteAttribute("morphNormal" + i3);
                          morphInfluences1[i3] = 0;
                      }
                  }
                  // GLSL shader uses formula baseinfluence * base + sum(target * influence)
                  // This allows us to switch between absolute morphs and relative morphs without changing shader code
                  // When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)
                  const morphBaseInfluence1 = geometry1.morphTargetsRelative ? 1 : 1 - morphInfluencesSum1;
                  program1.getUniforms().setValue(gl1, "morphTargetBaseInfluence", morphBaseInfluence1);
                  program1.getUniforms().setValue(gl1, "morphTargetInfluences", morphInfluences1);
              }
          }
          return {
              update: update1
          };
      }
      function WebGLObjects(gl1, geometries1, attributes1, info1) {
          let updateMap1 = new WeakMap();
          function update1(object1) {
              const frame1 = info1.render.frame;
              const geometry1 = object1.geometry;
              const buffergeometry1 = geometries1.get(object1, geometry1);
              // Update once per frame
              if (updateMap1.get(buffergeometry1) !== frame1) {
                  geometries1.update(buffergeometry1);
                  updateMap1.set(buffergeometry1, frame1);
              }
              if (object1.isInstancedMesh) {
                  if (object1.hasEventListener("dispose", onInstancedMeshDispose1) === false) object1.addEventListener("dispose", onInstancedMeshDispose1);
                  attributes1.update(object1.instanceMatrix, 34962);
                  if (object1.instanceColor !== null) attributes1.update(object1.instanceColor, 34962);
              }
              return buffergeometry1;
          }
          function dispose1() {
              updateMap1 = new WeakMap();
          }
          function onInstancedMeshDispose1(event1) {
              const instancedMesh1 = event1.target;
              instancedMesh1.removeEventListener("dispose", onInstancedMeshDispose1);
              attributes1.remove(instancedMesh1.instanceMatrix);
              if (instancedMesh1.instanceColor !== null) attributes1.remove(instancedMesh1.instanceColor);
          }
          return {
              update: update1,
              dispose: dispose1
          };
      }
      /**
     * Uniforms of a program.
     * Those form a tree structure with a special top-level container for the root,
     * which you get by calling 'new WebGLUniforms( gl, program )'.
     *
     *
     * Properties of inner nodes including the top-level container:
     *
     * .seq - array of nested uniforms
     * .map - nested uniforms by name
     *
     *
     * Methods of all nodes except the top-level container:
     *
     * .setValue( gl, value, [textures] )
     *
     * 		uploads a uniform value(s)
     *  	the 'textures' parameter is needed for sampler uniforms
     *
     *
     * Static methods of the top-level container (textures factorizations):
     *
     * .upload( gl, seq, values, textures )
     *
     * 		sets uniforms in 'seq' to 'values[id].value'
     *
     * .seqWithValue( seq, values ) : filteredSeq
     *
     * 		filters 'seq' entries with corresponding entry in values
     *
     *
     * Methods of the top-level container (textures factorizations):
     *
     * .setValue( gl, name, value, textures )
     *
     * 		sets uniform with  name 'name' to 'value'
     *
     * .setOptional( gl, obj, prop )
     *
     * 		like .set for an optional property of the object
     *
     */ const emptyTexture = new Texture();
      const emptyArrayTexture = new DataArrayTexture();
      const empty3dTexture = new Data3DTexture();
      const emptyCubeTexture = new CubeTexture();
      // --- Utilities ---
      // Array Caches (provide typed arrays for temporary by size)
      const arrayCacheF32 = [];
      const arrayCacheI32 = [];
      // Float32Array caches used for uploading Matrix uniforms
      const mat4array = new Float32Array(16);
      const mat3array = new Float32Array(9);
      const mat2array = new Float32Array(4);
      // Flattening for arrays of vectors and matrices
      function flatten(array1, nBlocks1, blockSize1) {
          const firstElem1 = array1[0];
          if (firstElem1 <= 0 || firstElem1 > 0) return array1;
          // unoptimized: ! isNaN( firstElem )
          // see http://jacksondunstan.com/articles/983
          const n3 = nBlocks1 * blockSize1;
          let r1 = arrayCacheF32[n3];
          if (r1 === undefined) {
              r1 = new Float32Array(n3);
              arrayCacheF32[n3] = r1;
          }
          if (nBlocks1 !== 0) {
              firstElem1.toArray(r1, 0);
              for(let i3 = 1, offset2 = 0; i3 !== nBlocks1; ++i3){
                  offset2 += blockSize1;
                  array1[i3].toArray(r1, offset2);
              }
          }
          return r1;
      }
      function arraysEqual(a3, b3) {
          if (a3.length !== b3.length) return false;
          for(let i3 = 0, l1 = a3.length; i3 < l1; i3++){
              if (a3[i3] !== b3[i3]) return false;
          }
          return true;
      }
      function copyArray(a3, b3) {
          for(let i3 = 0, l1 = b3.length; i3 < l1; i3++)a3[i3] = b3[i3];
      }
      // Texture unit allocation
      function allocTexUnits(textures1, n3) {
          let r1 = arrayCacheI32[n3];
          if (r1 === undefined) {
              r1 = new Int32Array(n3);
              arrayCacheI32[n3] = r1;
          }
          for(let i3 = 0; i3 !== n3; ++i3)r1[i3] = textures1.allocateTextureUnit();
          return r1;
      }
      // --- Setters ---
      // Note: Defining these methods externally, because they come in a bunch
      // and this way their names minify.
      // Single scalar
      function setValueV1f(gl1, v4) {
          const cache1 = this.cache;
          if (cache1[0] === v4) return;
          gl1.uniform1f(this.addr, v4);
          cache1[0] = v4;
      }
      // Single float vector (from flat array or THREE.VectorN)
      function setValueV2f(gl1, v4) {
          const cache1 = this.cache;
          if (v4.x !== undefined) {
              if (cache1[0] !== v4.x || cache1[1] !== v4.y) {
                  gl1.uniform2f(this.addr, v4.x, v4.y);
                  cache1[0] = v4.x;
                  cache1[1] = v4.y;
              }
          } else {
              if (arraysEqual(cache1, v4)) return;
              gl1.uniform2fv(this.addr, v4);
              copyArray(cache1, v4);
          }
      }
      function setValueV3f(gl1, v4) {
          const cache1 = this.cache;
          if (v4.x !== undefined) {
              if (cache1[0] !== v4.x || cache1[1] !== v4.y || cache1[2] !== v4.z) {
                  gl1.uniform3f(this.addr, v4.x, v4.y, v4.z);
                  cache1[0] = v4.x;
                  cache1[1] = v4.y;
                  cache1[2] = v4.z;
              }
          } else if (v4.r !== undefined) {
              if (cache1[0] !== v4.r || cache1[1] !== v4.g || cache1[2] !== v4.b) {
                  gl1.uniform3f(this.addr, v4.r, v4.g, v4.b);
                  cache1[0] = v4.r;
                  cache1[1] = v4.g;
                  cache1[2] = v4.b;
              }
          } else {
              if (arraysEqual(cache1, v4)) return;
              gl1.uniform3fv(this.addr, v4);
              copyArray(cache1, v4);
          }
      }
      function setValueV4f(gl1, v4) {
          const cache1 = this.cache;
          if (v4.x !== undefined) {
              if (cache1[0] !== v4.x || cache1[1] !== v4.y || cache1[2] !== v4.z || cache1[3] !== v4.w) {
                  gl1.uniform4f(this.addr, v4.x, v4.y, v4.z, v4.w);
                  cache1[0] = v4.x;
                  cache1[1] = v4.y;
                  cache1[2] = v4.z;
                  cache1[3] = v4.w;
              }
          } else {
              if (arraysEqual(cache1, v4)) return;
              gl1.uniform4fv(this.addr, v4);
              copyArray(cache1, v4);
          }
      }
      // Single matrix (from flat array or THREE.MatrixN)
      function setValueM2(gl1, v4) {
          const cache1 = this.cache;
          const elements1 = v4.elements;
          if (elements1 === undefined) {
              if (arraysEqual(cache1, v4)) return;
              gl1.uniformMatrix2fv(this.addr, false, v4);
              copyArray(cache1, v4);
          } else {
              if (arraysEqual(cache1, elements1)) return;
              mat2array.set(elements1);
              gl1.uniformMatrix2fv(this.addr, false, mat2array);
              copyArray(cache1, elements1);
          }
      }
      function setValueM3(gl1, v4) {
          const cache1 = this.cache;
          const elements1 = v4.elements;
          if (elements1 === undefined) {
              if (arraysEqual(cache1, v4)) return;
              gl1.uniformMatrix3fv(this.addr, false, v4);
              copyArray(cache1, v4);
          } else {
              if (arraysEqual(cache1, elements1)) return;
              mat3array.set(elements1);
              gl1.uniformMatrix3fv(this.addr, false, mat3array);
              copyArray(cache1, elements1);
          }
      }
      function setValueM4(gl1, v4) {
          const cache1 = this.cache;
          const elements1 = v4.elements;
          if (elements1 === undefined) {
              if (arraysEqual(cache1, v4)) return;
              gl1.uniformMatrix4fv(this.addr, false, v4);
              copyArray(cache1, v4);
          } else {
              if (arraysEqual(cache1, elements1)) return;
              mat4array.set(elements1);
              gl1.uniformMatrix4fv(this.addr, false, mat4array);
              copyArray(cache1, elements1);
          }
      }
      // Single integer / boolean
      function setValueV1i(gl1, v4) {
          const cache1 = this.cache;
          if (cache1[0] === v4) return;
          gl1.uniform1i(this.addr, v4);
          cache1[0] = v4;
      }
      // Single integer / boolean vector (from flat array)
      function setValueV2i(gl1, v4) {
          const cache1 = this.cache;
          if (arraysEqual(cache1, v4)) return;
          gl1.uniform2iv(this.addr, v4);
          copyArray(cache1, v4);
      }
      function setValueV3i(gl1, v4) {
          const cache1 = this.cache;
          if (arraysEqual(cache1, v4)) return;
          gl1.uniform3iv(this.addr, v4);
          copyArray(cache1, v4);
      }
      function setValueV4i(gl1, v4) {
          const cache1 = this.cache;
          if (arraysEqual(cache1, v4)) return;
          gl1.uniform4iv(this.addr, v4);
          copyArray(cache1, v4);
      }
      // Single unsigned integer
      function setValueV1ui(gl1, v4) {
          const cache1 = this.cache;
          if (cache1[0] === v4) return;
          gl1.uniform1ui(this.addr, v4);
          cache1[0] = v4;
      }
      // Single unsigned integer vector (from flat array)
      function setValueV2ui(gl1, v4) {
          const cache1 = this.cache;
          if (arraysEqual(cache1, v4)) return;
          gl1.uniform2uiv(this.addr, v4);
          copyArray(cache1, v4);
      }
      function setValueV3ui(gl1, v4) {
          const cache1 = this.cache;
          if (arraysEqual(cache1, v4)) return;
          gl1.uniform3uiv(this.addr, v4);
          copyArray(cache1, v4);
      }
      function setValueV4ui(gl1, v4) {
          const cache1 = this.cache;
          if (arraysEqual(cache1, v4)) return;
          gl1.uniform4uiv(this.addr, v4);
          copyArray(cache1, v4);
      }
      // Single texture (2D / Cube)
      function setValueT1(gl1, v4, textures1) {
          const cache1 = this.cache;
          const unit1 = textures1.allocateTextureUnit();
          if (cache1[0] !== unit1) {
              gl1.uniform1i(this.addr, unit1);
              cache1[0] = unit1;
          }
          textures1.setTexture2D(v4 || emptyTexture, unit1);
      }
      function setValueT3D1(gl1, v4, textures1) {
          const cache1 = this.cache;
          const unit1 = textures1.allocateTextureUnit();
          if (cache1[0] !== unit1) {
              gl1.uniform1i(this.addr, unit1);
              cache1[0] = unit1;
          }
          textures1.setTexture3D(v4 || empty3dTexture, unit1);
      }
      function setValueT6(gl1, v4, textures1) {
          const cache1 = this.cache;
          const unit1 = textures1.allocateTextureUnit();
          if (cache1[0] !== unit1) {
              gl1.uniform1i(this.addr, unit1);
              cache1[0] = unit1;
          }
          textures1.setTextureCube(v4 || emptyCubeTexture, unit1);
      }
      function setValueT2DArray1(gl1, v4, textures1) {
          const cache1 = this.cache;
          const unit1 = textures1.allocateTextureUnit();
          if (cache1[0] !== unit1) {
              gl1.uniform1i(this.addr, unit1);
              cache1[0] = unit1;
          }
          textures1.setTexture2DArray(v4 || emptyArrayTexture, unit1);
      }
      // Helper to pick the right setter for the singular case
      function getSingularSetter(type1) {
          switch(type1){
              case 0x1406:
                  return setValueV1f; // FLOAT
              case 0x8b50:
                  return setValueV2f; // _VEC2
              case 0x8b51:
                  return setValueV3f; // _VEC3
              case 0x8b52:
                  return setValueV4f; // _VEC4
              case 0x8b5a:
                  return setValueM2; // _MAT2
              case 0x8b5b:
                  return setValueM3; // _MAT3
              case 0x8b5c:
                  return setValueM4; // _MAT4
              case 0x1404:
              case 0x8b56:
                  return setValueV1i; // INT, BOOL
              case 0x8b53:
              case 0x8b57:
                  return setValueV2i; // _VEC2
              case 0x8b54:
              case 0x8b58:
                  return setValueV3i; // _VEC3
              case 0x8b55:
              case 0x8b59:
                  return setValueV4i; // _VEC4
              case 0x1405:
                  return setValueV1ui; // UINT
              case 0x8dc6:
                  return setValueV2ui; // _VEC2
              case 0x8dc7:
                  return setValueV3ui; // _VEC3
              case 0x8dc8:
                  return setValueV4ui; // _VEC4
              case 0x8b5e:
              case 0x8d66:
              case 0x8dca:
              case 0x8dd2:
              case 0x8b62:
                  return setValueT1;
              case 0x8b5f:
              case 0x8dcb:
              case 0x8dd3:
                  return setValueT3D1;
              case 0x8b60:
              case 0x8dcc:
              case 0x8dd4:
              case 0x8dc5:
                  return setValueT6;
              case 0x8dc1:
              case 0x8dcf:
              case 0x8dd7:
              case 0x8dc4:
                  return setValueT2DArray1;
          }
      }
      // Array of scalars
      function setValueV1fArray(gl1, v4) {
          gl1.uniform1fv(this.addr, v4);
      }
      // Array of vectors (from flat array or array of THREE.VectorN)
      function setValueV2fArray(gl1, v4) {
          const data1 = flatten(v4, this.size, 2);
          gl1.uniform2fv(this.addr, data1);
      }
      function setValueV3fArray(gl1, v4) {
          const data1 = flatten(v4, this.size, 3);
          gl1.uniform3fv(this.addr, data1);
      }
      function setValueV4fArray(gl1, v4) {
          const data1 = flatten(v4, this.size, 4);
          gl1.uniform4fv(this.addr, data1);
      }
      // Array of matrices (from flat array or array of THREE.MatrixN)
      function setValueM2Array(gl1, v4) {
          const data1 = flatten(v4, this.size, 4);
          gl1.uniformMatrix2fv(this.addr, false, data1);
      }
      function setValueM3Array(gl1, v4) {
          const data1 = flatten(v4, this.size, 9);
          gl1.uniformMatrix3fv(this.addr, false, data1);
      }
      function setValueM4Array(gl1, v4) {
          const data1 = flatten(v4, this.size, 16);
          gl1.uniformMatrix4fv(this.addr, false, data1);
      }
      // Array of integer / boolean
      function setValueV1iArray(gl1, v4) {
          gl1.uniform1iv(this.addr, v4);
      }
      // Array of integer / boolean vectors (from flat array)
      function setValueV2iArray(gl1, v4) {
          gl1.uniform2iv(this.addr, v4);
      }
      function setValueV3iArray(gl1, v4) {
          gl1.uniform3iv(this.addr, v4);
      }
      function setValueV4iArray(gl1, v4) {
          gl1.uniform4iv(this.addr, v4);
      }
      // Array of unsigned integer
      function setValueV1uiArray(gl1, v4) {
          gl1.uniform1uiv(this.addr, v4);
      }
      // Array of unsigned integer vectors (from flat array)
      function setValueV2uiArray(gl1, v4) {
          gl1.uniform2uiv(this.addr, v4);
      }
      function setValueV3uiArray(gl1, v4) {
          gl1.uniform3uiv(this.addr, v4);
      }
      function setValueV4uiArray(gl1, v4) {
          gl1.uniform4uiv(this.addr, v4);
      }
      // Array of textures (2D / 3D / Cube / 2DArray)
      function setValueT1Array(gl1, v4, textures1) {
          const n3 = v4.length;
          const units1 = allocTexUnits(textures1, n3);
          gl1.uniform1iv(this.addr, units1);
          for(let i3 = 0; i3 !== n3; ++i3)textures1.setTexture2D(v4[i3] || emptyTexture, units1[i3]);
      }
      function setValueT3DArray(gl1, v4, textures1) {
          const n3 = v4.length;
          const units1 = allocTexUnits(textures1, n3);
          gl1.uniform1iv(this.addr, units1);
          for(let i3 = 0; i3 !== n3; ++i3)textures1.setTexture3D(v4[i3] || empty3dTexture, units1[i3]);
      }
      function setValueT6Array(gl1, v4, textures1) {
          const n3 = v4.length;
          const units1 = allocTexUnits(textures1, n3);
          gl1.uniform1iv(this.addr, units1);
          for(let i3 = 0; i3 !== n3; ++i3)textures1.setTextureCube(v4[i3] || emptyCubeTexture, units1[i3]);
      }
      function setValueT2DArrayArray(gl1, v4, textures1) {
          const n3 = v4.length;
          const units1 = allocTexUnits(textures1, n3);
          gl1.uniform1iv(this.addr, units1);
          for(let i3 = 0; i3 !== n3; ++i3)textures1.setTexture2DArray(v4[i3] || emptyArrayTexture, units1[i3]);
      }
      // Helper to pick the right setter for a pure (bottom-level) array
      function getPureArraySetter(type1) {
          switch(type1){
              case 0x1406:
                  return setValueV1fArray; // FLOAT
              case 0x8b50:
                  return setValueV2fArray; // _VEC2
              case 0x8b51:
                  return setValueV3fArray; // _VEC3
              case 0x8b52:
                  return setValueV4fArray; // _VEC4
              case 0x8b5a:
                  return setValueM2Array; // _MAT2
              case 0x8b5b:
                  return setValueM3Array; // _MAT3
              case 0x8b5c:
                  return setValueM4Array; // _MAT4
              case 0x1404:
              case 0x8b56:
                  return setValueV1iArray; // INT, BOOL
              case 0x8b53:
              case 0x8b57:
                  return setValueV2iArray; // _VEC2
              case 0x8b54:
              case 0x8b58:
                  return setValueV3iArray; // _VEC3
              case 0x8b55:
              case 0x8b59:
                  return setValueV4iArray; // _VEC4
              case 0x1405:
                  return setValueV1uiArray; // UINT
              case 0x8dc6:
                  return setValueV2uiArray; // _VEC2
              case 0x8dc7:
                  return setValueV3uiArray; // _VEC3
              case 0x8dc8:
                  return setValueV4uiArray; // _VEC4
              case 0x8b5e:
              case 0x8d66:
              case 0x8dca:
              case 0x8dd2:
              case 0x8b62:
                  return setValueT1Array;
              case 0x8b5f:
              case 0x8dcb:
              case 0x8dd3:
                  return setValueT3DArray;
              case 0x8b60:
              case 0x8dcc:
              case 0x8dd4:
              case 0x8dc5:
                  return setValueT6Array;
              case 0x8dc1:
              case 0x8dcf:
              case 0x8dd7:
              case 0x8dc4:
                  return setValueT2DArrayArray;
          }
      }
      // --- Uniform Classes ---
      function SingleUniform(id1, activeInfo1, addr1) {
          this.id = id1;
          this.addr = addr1;
          this.cache = [];
          this.setValue = getSingularSetter(activeInfo1.type);
      // this.path = activeInfo.name; // DEBUG
      }
      function PureArrayUniform(id1, activeInfo1, addr1) {
          this.id = id1;
          this.addr = addr1;
          this.cache = [];
          this.size = activeInfo1.size;
          this.setValue = getPureArraySetter(activeInfo1.type);
      // this.path = activeInfo.name; // DEBUG
      }
      PureArrayUniform.prototype.updateCache = function(data1) {
          const cache1 = this.cache;
          if (data1 instanceof Float32Array && cache1.length !== data1.length) this.cache = new Float32Array(data1.length);
          copyArray(cache1, data1);
      };
      function StructuredUniform(id1) {
          this.id = id1;
          this.seq = [];
          this.map = {};
      }
      StructuredUniform.prototype.setValue = function(gl1, value1, textures1) {
          const seq1 = this.seq;
          for(let i3 = 0, n3 = seq1.length; i3 !== n3; ++i3){
              const u4 = seq1[i3];
              u4.setValue(gl1, value1[u4.id], textures1);
          }
      };
      // --- Top-level ---
      // Parser - builds up the property tree from the path strings
      const RePathPart = /(\w+)(\])?(\[|\.)?/g;
      // extracts
      // 	- the identifier (member name or array index)
      //  - followed by an optional right bracket (found when array index)
      //  - followed by an optional left bracket or dot (type of subscript)
      //
      // Note: These portions can be read in a non-overlapping fashion and
      // allow straightforward parsing of the hierarchy that WebGL encodes
      // in the uniform names.
      function addUniform(container1, uniformObject1) {
          container1.seq.push(uniformObject1);
          container1.map[uniformObject1.id] = uniformObject1;
      }
      function parseUniform(activeInfo1, addr1, container1) {
          const path1 = activeInfo1.name, pathLength1 = path1.length;
          // reset RegExp object, because of the early exit of a previous run
          RePathPart.lastIndex = 0;
          while(true){
              const match1 = RePathPart.exec(path1), matchEnd1 = RePathPart.lastIndex;
              let id1 = match1[1];
              const idIsIndex1 = match1[2] === "]", subscript1 = match1[3];
              if (idIsIndex1) id1 = id1 | 0; // convert to integer
              if (subscript1 === undefined || subscript1 === "[" && matchEnd1 + 2 === pathLength1) {
                  // bare name or "pure" bottom-level array "[0]" suffix
                  addUniform(container1, subscript1 === undefined ? new SingleUniform(id1, activeInfo1, addr1) : new PureArrayUniform(id1, activeInfo1, addr1));
                  break;
              } else {
                  // step into inner node / create it in case it doesn't exist
                  const map1 = container1.map;
                  let next1 = map1[id1];
                  if (next1 === undefined) {
                      next1 = new StructuredUniform(id1);
                      addUniform(container1, next1);
                  }
                  container1 = next1;
              }
          }
      }
      // Root Container
      function WebGLUniforms(gl1, program1) {
          this.seq = [];
          this.map = {};
          const n3 = gl1.getProgramParameter(program1, 35718);
          for(let i3 = 0; i3 < n3; ++i3){
              const info1 = gl1.getActiveUniform(program1, i3), addr1 = gl1.getUniformLocation(program1, info1.name);
              parseUniform(info1, addr1, this);
          }
      }
      WebGLUniforms.prototype.setValue = function(gl1, name1, value1, textures1) {
          const u4 = this.map[name1];
          if (u4 !== undefined) u4.setValue(gl1, value1, textures1);
      };
      WebGLUniforms.prototype.setOptional = function(gl1, object1, name1) {
          const v4 = object1[name1];
          if (v4 !== undefined) this.setValue(gl1, name1, v4);
      };
      // Static interface
      WebGLUniforms.upload = function(gl1, seq1, values1, textures1) {
          for(let i3 = 0, n3 = seq1.length; i3 !== n3; ++i3){
              const u4 = seq1[i3], v4 = values1[u4.id];
              if (v4.needsUpdate !== false) // note: always updating when .needsUpdate is undefined
              u4.setValue(gl1, v4.value, textures1);
          }
      };
      WebGLUniforms.seqWithValue = function(seq1, values1) {
          const r1 = [];
          for(let i3 = 0, n3 = seq1.length; i3 !== n3; ++i3){
              const u4 = seq1[i3];
              if (u4.id in values1) r1.push(u4);
          }
          return r1;
      };
      function WebGLShader(gl1, type1, string1) {
          const shader1 = gl1.createShader(type1);
          gl1.shaderSource(shader1, string1);
          gl1.compileShader(shader1);
          return shader1;
      }
      let programIdCount = 0;
      function addLineNumbers(string1) {
          const lines1 = string1.split("\n");
          for(let i3 = 0; i3 < lines1.length; i3++)lines1[i3] = i3 + 1 + ": " + lines1[i3];
          return lines1.join("\n");
      }
      function getEncodingComponents(encoding1) {
          switch(encoding1){
              case LinearEncoding:
                  return [
                      "Linear",
                      "( value )"
                  ];
              case sRGBEncoding:
                  return [
                      "sRGB",
                      "( value )"
                  ];
              default:
                  console.warn("THREE.WebGLProgram: Unsupported encoding:", encoding1);
                  return [
                      "Linear",
                      "( value )"
                  ];
          }
      }
      function getShaderErrors(gl1, shader1, type1) {
          const status1 = gl1.getShaderParameter(shader1, 35713);
          const errors1 = gl1.getShaderInfoLog(shader1).trim();
          if (status1 && errors1 === "") return "";
          // --enable-privileged-webgl-extension
          // console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );
          return type1.toUpperCase() + "\n\n" + errors1 + "\n\n" + addLineNumbers(gl1.getShaderSource(shader1));
      }
      function getTexelEncodingFunction(functionName1, encoding1) {
          const components1 = getEncodingComponents(encoding1);
          return "vec4 " + functionName1 + "( vec4 value ) { return LinearTo" + components1[0] + components1[1] + "; }";
      }
      function getToneMappingFunction(functionName1, toneMapping1) {
          let toneMappingName1;
          switch(toneMapping1){
              case LinearToneMapping:
                  toneMappingName1 = "Linear";
                  break;
              case ReinhardToneMapping:
                  toneMappingName1 = "Reinhard";
                  break;
              case CineonToneMapping:
                  toneMappingName1 = "OptimizedCineon";
                  break;
              case ACESFilmicToneMapping:
                  toneMappingName1 = "ACESFilmic";
                  break;
              case CustomToneMapping:
                  toneMappingName1 = "Custom";
                  break;
              default:
                  console.warn("THREE.WebGLProgram: Unsupported toneMapping:", toneMapping1);
                  toneMappingName1 = "Linear";
          }
          return "vec3 " + functionName1 + "( vec3 color ) { return " + toneMappingName1 + "ToneMapping( color ); }";
      }
      function generateExtensions(parameters1) {
          const chunks1 = [
              parameters1.extensionDerivatives || !!parameters1.envMapCubeUVHeight || parameters1.bumpMap || parameters1.tangentSpaceNormalMap || parameters1.clearcoatNormalMap || parameters1.flatShading || parameters1.shaderID === "physical" ? "#extension GL_OES_standard_derivatives : enable" : "",
              (parameters1.extensionFragDepth || parameters1.logarithmicDepthBuffer) && parameters1.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "",
              parameters1.extensionDrawBuffers && parameters1.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "",
              (parameters1.extensionShaderTextureLOD || parameters1.envMap || parameters1.transmission) && parameters1.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""
          ];
          return chunks1.filter(filterEmptyLine).join("\n");
      }
      function generateDefines(defines1) {
          const chunks1 = [];
          for(const name1 in defines1){
              const value1 = defines1[name1];
              if (value1 === false) continue;
              chunks1.push("#define " + name1 + " " + value1);
          }
          return chunks1.join("\n");
      }
      function fetchAttributeLocations(gl1, program1) {
          const attributes1 = {};
          const n3 = gl1.getProgramParameter(program1, 35721);
          for(let i3 = 0; i3 < n3; i3++){
              const info1 = gl1.getActiveAttrib(program1, i3);
              const name1 = info1.name;
              let locationSize1 = 1;
              if (info1.type === 35674) locationSize1 = 2;
              if (info1.type === 35675) locationSize1 = 3;
              if (info1.type === 35676) locationSize1 = 4;
              // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );
              attributes1[name1] = {
                  type: info1.type,
                  location: gl1.getAttribLocation(program1, name1),
                  locationSize: locationSize1
              };
          }
          return attributes1;
      }
      function filterEmptyLine(string1) {
          return string1 !== "";
      }
      function replaceLightNums(string1, parameters1) {
          return string1.replace(/NUM_DIR_LIGHTS/g, parameters1.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters1.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters1.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters1.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters1.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters1.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters1.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters1.numPointLightShadows);
      }
      function replaceClippingPlaneNums(string1, parameters1) {
          return string1.replace(/NUM_CLIPPING_PLANES/g, parameters1.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters1.numClippingPlanes - parameters1.numClipIntersection);
      }
      // Resolve Includes
      const includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
      function resolveIncludes(string1) {
          return string1.replace(includePattern, includeReplacer);
      }
      function includeReplacer(match1, include1) {
          const string1 = ShaderChunk[include1];
          if (string1 === undefined) throw new Error("Can not resolve #include <" + include1 + ">");
          return resolveIncludes(string1);
      }
      // Unroll Loops
      const deprecatedUnrollLoopPattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
      const unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
      function unrollLoops(string1) {
          return string1.replace(unrollLoopPattern, loopReplacer).replace(deprecatedUnrollLoopPattern, deprecatedLoopReplacer);
      }
      function deprecatedLoopReplacer(match1, start1, end1, snippet1) {
          console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.");
          return loopReplacer(match1, start1, end1, snippet1);
      }
      function loopReplacer(match1, start1, end1, snippet1) {
          let string1 = "";
          for(let i3 = parseInt(start1); i3 < parseInt(end1); i3++)string1 += snippet1.replace(/\[\s*i\s*\]/g, "[ " + i3 + " ]").replace(/UNROLLED_LOOP_INDEX/g, i3);
          return string1;
      }
      //
      function generatePrecision(parameters1) {
          let precisionstring1 = "precision " + parameters1.precision + " float;\nprecision " + parameters1.precision + " int;";
          if (parameters1.precision === "highp") precisionstring1 += "\n#define HIGH_PRECISION";
          else if (parameters1.precision === "mediump") precisionstring1 += "\n#define MEDIUM_PRECISION";
          else if (parameters1.precision === "lowp") precisionstring1 += "\n#define LOW_PRECISION";
          return precisionstring1;
      }
      function generateShadowMapTypeDefine(parameters1) {
          let shadowMapTypeDefine1 = "SHADOWMAP_TYPE_BASIC";
          if (parameters1.shadowMapType === PCFShadowMap) shadowMapTypeDefine1 = "SHADOWMAP_TYPE_PCF";
          else if (parameters1.shadowMapType === PCFSoftShadowMap) shadowMapTypeDefine1 = "SHADOWMAP_TYPE_PCF_SOFT";
          else if (parameters1.shadowMapType === VSMShadowMap) shadowMapTypeDefine1 = "SHADOWMAP_TYPE_VSM";
          return shadowMapTypeDefine1;
      }
      function generateEnvMapTypeDefine(parameters1) {
          let envMapTypeDefine1 = "ENVMAP_TYPE_CUBE";
          if (parameters1.envMap) switch(parameters1.envMapMode){
              case CubeReflectionMapping:
              case CubeRefractionMapping:
                  envMapTypeDefine1 = "ENVMAP_TYPE_CUBE";
                  break;
              case CubeUVReflectionMapping:
              case CubeUVRefractionMapping:
                  envMapTypeDefine1 = "ENVMAP_TYPE_CUBE_UV";
                  break;
          }
          return envMapTypeDefine1;
      }
      function generateEnvMapModeDefine(parameters1) {
          let envMapModeDefine1 = "ENVMAP_MODE_REFLECTION";
          if (parameters1.envMap) switch(parameters1.envMapMode){
              case CubeRefractionMapping:
              case CubeUVRefractionMapping:
                  envMapModeDefine1 = "ENVMAP_MODE_REFRACTION";
                  break;
          }
          return envMapModeDefine1;
      }
      function generateEnvMapBlendingDefine(parameters1) {
          let envMapBlendingDefine1 = "ENVMAP_BLENDING_NONE";
          if (parameters1.envMap) switch(parameters1.combine){
              case MultiplyOperation:
                  envMapBlendingDefine1 = "ENVMAP_BLENDING_MULTIPLY";
                  break;
              case MixOperation:
                  envMapBlendingDefine1 = "ENVMAP_BLENDING_MIX";
                  break;
              case AddOperation:
                  envMapBlendingDefine1 = "ENVMAP_BLENDING_ADD";
                  break;
          }
          return envMapBlendingDefine1;
      }
      function generateCubeUVSize(parameters1) {
          const imageHeight1 = parameters1.envMapCubeUVHeight;
          if (imageHeight1 === null) return null;
          const maxMip1 = Math.log2(imageHeight1 / 32 + 1) + 3;
          const texelHeight1 = 1.0 / imageHeight1;
          const texelWidth1 = 1.0 / (3 * Math.max(Math.pow(2, maxMip1), 112));
          return {
              texelWidth: texelWidth1,
              texelHeight: texelHeight1,
              maxMip: maxMip1
          };
      }
      function WebGLProgram(renderer1, cacheKey1, parameters1, bindingStates1) {
          // TODO Send this event to Three.js DevTools
          // console.log( 'WebGLProgram', cacheKey );
          const gl1 = renderer1.getContext();
          const defines1 = parameters1.defines;
          let vertexShader1 = parameters1.vertexShader;
          let fragmentShader1 = parameters1.fragmentShader;
          const shadowMapTypeDefine1 = generateShadowMapTypeDefine(parameters1);
          const envMapTypeDefine1 = generateEnvMapTypeDefine(parameters1);
          const envMapModeDefine1 = generateEnvMapModeDefine(parameters1);
          const envMapBlendingDefine1 = generateEnvMapBlendingDefine(parameters1);
          const envMapCubeUVSize1 = generateCubeUVSize(parameters1);
          const customExtensions1 = parameters1.isWebGL2 ? "" : generateExtensions(parameters1);
          const customDefines1 = generateDefines(defines1);
          const program1 = gl1.createProgram();
          let prefixVertex1, prefixFragment1;
          let versionString1 = parameters1.glslVersion ? "#version " + parameters1.glslVersion + "\n" : "";
          if (parameters1.isRawShaderMaterial) {
              prefixVertex1 = [
                  customDefines1
              ].filter(filterEmptyLine).join("\n");
              if (prefixVertex1.length > 0) prefixVertex1 += "\n";
              prefixFragment1 = [
                  customExtensions1,
                  customDefines1
              ].filter(filterEmptyLine).join("\n");
              if (prefixFragment1.length > 0) prefixFragment1 += "\n";
          } else {
              prefixVertex1 = [
                  generatePrecision(parameters1),
                  "#define SHADER_NAME " + parameters1.shaderName,
                  customDefines1,
                  parameters1.instancing ? "#define USE_INSTANCING" : "",
                  parameters1.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
                  parameters1.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "",
                  "#define MAX_BONES " + parameters1.maxBones,
                  parameters1.useFog && parameters1.fog ? "#define USE_FOG" : "",
                  parameters1.useFog && parameters1.fogExp2 ? "#define FOG_EXP2" : "",
                  parameters1.map ? "#define USE_MAP" : "",
                  parameters1.envMap ? "#define USE_ENVMAP" : "",
                  parameters1.envMap ? "#define " + envMapModeDefine1 : "",
                  parameters1.lightMap ? "#define USE_LIGHTMAP" : "",
                  parameters1.aoMap ? "#define USE_AOMAP" : "",
                  parameters1.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
                  parameters1.bumpMap ? "#define USE_BUMPMAP" : "",
                  parameters1.normalMap ? "#define USE_NORMALMAP" : "",
                  parameters1.normalMap && parameters1.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "",
                  parameters1.normalMap && parameters1.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "",
                  parameters1.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
                  parameters1.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
                  parameters1.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
                  parameters1.displacementMap && parameters1.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "",
                  parameters1.specularMap ? "#define USE_SPECULARMAP" : "",
                  parameters1.specularIntensityMap ? "#define USE_SPECULARINTENSITYMAP" : "",
                  parameters1.specularColorMap ? "#define USE_SPECULARCOLORMAP" : "",
                  parameters1.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
                  parameters1.metalnessMap ? "#define USE_METALNESSMAP" : "",
                  parameters1.alphaMap ? "#define USE_ALPHAMAP" : "",
                  parameters1.transmission ? "#define USE_TRANSMISSION" : "",
                  parameters1.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
                  parameters1.thicknessMap ? "#define USE_THICKNESSMAP" : "",
                  parameters1.sheenColorMap ? "#define USE_SHEENCOLORMAP" : "",
                  parameters1.sheenRoughnessMap ? "#define USE_SHEENROUGHNESSMAP" : "",
                  parameters1.vertexTangents ? "#define USE_TANGENT" : "",
                  parameters1.vertexColors ? "#define USE_COLOR" : "",
                  parameters1.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
                  parameters1.vertexUvs ? "#define USE_UV" : "",
                  parameters1.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "",
                  parameters1.flatShading ? "#define FLAT_SHADED" : "",
                  parameters1.skinning ? "#define USE_SKINNING" : "",
                  parameters1.useVertexTexture ? "#define BONE_TEXTURE" : "",
                  parameters1.morphTargets ? "#define USE_MORPHTARGETS" : "",
                  parameters1.morphNormals && parameters1.flatShading === false ? "#define USE_MORPHNORMALS" : "",
                  parameters1.morphColors && parameters1.isWebGL2 ? "#define USE_MORPHCOLORS" : "",
                  parameters1.morphTargetsCount > 0 && parameters1.isWebGL2 ? "#define MORPHTARGETS_TEXTURE" : "",
                  parameters1.morphTargetsCount > 0 && parameters1.isWebGL2 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + parameters1.morphTextureStride : "",
                  parameters1.morphTargetsCount > 0 && parameters1.isWebGL2 ? "#define MORPHTARGETS_COUNT " + parameters1.morphTargetsCount : "",
                  parameters1.doubleSided ? "#define DOUBLE_SIDED" : "",
                  parameters1.flipSided ? "#define FLIP_SIDED" : "",
                  parameters1.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
                  parameters1.shadowMapEnabled ? "#define " + shadowMapTypeDefine1 : "",
                  parameters1.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
                  parameters1.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
                  parameters1.logarithmicDepthBuffer && parameters1.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
                  "uniform mat4 modelMatrix;",
                  "uniform mat4 modelViewMatrix;",
                  "uniform mat4 projectionMatrix;",
                  "uniform mat4 viewMatrix;",
                  "uniform mat3 normalMatrix;",
                  "uniform vec3 cameraPosition;",
                  "uniform bool isOrthographic;",
                  "#ifdef USE_INSTANCING",
                  "	attribute mat4 instanceMatrix;",
                  "#endif",
                  "#ifdef USE_INSTANCING_COLOR",
                  "	attribute vec3 instanceColor;",
                  "#endif",
                  "attribute vec3 position;",
                  "attribute vec3 normal;",
                  "attribute vec2 uv;",
                  "#ifdef USE_TANGENT",
                  "	attribute vec4 tangent;",
                  "#endif",
                  "#if defined( USE_COLOR_ALPHA )",
                  "	attribute vec4 color;",
                  "#elif defined( USE_COLOR )",
                  "	attribute vec3 color;",
                  "#endif",
                  "#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )",
                  "	attribute vec3 morphTarget0;",
                  "	attribute vec3 morphTarget1;",
                  "	attribute vec3 morphTarget2;",
                  "	attribute vec3 morphTarget3;",
                  "	#ifdef USE_MORPHNORMALS",
                  "		attribute vec3 morphNormal0;",
                  "		attribute vec3 morphNormal1;",
                  "		attribute vec3 morphNormal2;",
                  "		attribute vec3 morphNormal3;",
                  "	#else",
                  "		attribute vec3 morphTarget4;",
                  "		attribute vec3 morphTarget5;",
                  "		attribute vec3 morphTarget6;",
                  "		attribute vec3 morphTarget7;",
                  "	#endif",
                  "#endif",
                  "#ifdef USE_SKINNING",
                  "	attribute vec4 skinIndex;",
                  "	attribute vec4 skinWeight;",
                  "#endif",
                  "\n"
              ].filter(filterEmptyLine).join("\n");
              prefixFragment1 = [
                  customExtensions1,
                  generatePrecision(parameters1),
                  "#define SHADER_NAME " + parameters1.shaderName,
                  customDefines1,
                  parameters1.useFog && parameters1.fog ? "#define USE_FOG" : "",
                  parameters1.useFog && parameters1.fogExp2 ? "#define FOG_EXP2" : "",
                  parameters1.map ? "#define USE_MAP" : "",
                  parameters1.matcap ? "#define USE_MATCAP" : "",
                  parameters1.envMap ? "#define USE_ENVMAP" : "",
                  parameters1.envMap ? "#define " + envMapTypeDefine1 : "",
                  parameters1.envMap ? "#define " + envMapModeDefine1 : "",
                  parameters1.envMap ? "#define " + envMapBlendingDefine1 : "",
                  envMapCubeUVSize1 ? "#define CUBEUV_TEXEL_WIDTH " + envMapCubeUVSize1.texelWidth : "",
                  envMapCubeUVSize1 ? "#define CUBEUV_TEXEL_HEIGHT " + envMapCubeUVSize1.texelHeight : "",
                  envMapCubeUVSize1 ? "#define CUBEUV_MAX_MIP " + envMapCubeUVSize1.maxMip + ".0" : "",
                  parameters1.lightMap ? "#define USE_LIGHTMAP" : "",
                  parameters1.aoMap ? "#define USE_AOMAP" : "",
                  parameters1.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
                  parameters1.bumpMap ? "#define USE_BUMPMAP" : "",
                  parameters1.normalMap ? "#define USE_NORMALMAP" : "",
                  parameters1.normalMap && parameters1.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "",
                  parameters1.normalMap && parameters1.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "",
                  parameters1.clearcoat ? "#define USE_CLEARCOAT" : "",
                  parameters1.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
                  parameters1.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
                  parameters1.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
                  parameters1.specularMap ? "#define USE_SPECULARMAP" : "",
                  parameters1.specularIntensityMap ? "#define USE_SPECULARINTENSITYMAP" : "",
                  parameters1.specularColorMap ? "#define USE_SPECULARCOLORMAP" : "",
                  parameters1.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
                  parameters1.metalnessMap ? "#define USE_METALNESSMAP" : "",
                  parameters1.alphaMap ? "#define USE_ALPHAMAP" : "",
                  parameters1.alphaTest ? "#define USE_ALPHATEST" : "",
                  parameters1.sheen ? "#define USE_SHEEN" : "",
                  parameters1.sheenColorMap ? "#define USE_SHEENCOLORMAP" : "",
                  parameters1.sheenRoughnessMap ? "#define USE_SHEENROUGHNESSMAP" : "",
                  parameters1.transmission ? "#define USE_TRANSMISSION" : "",
                  parameters1.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
                  parameters1.thicknessMap ? "#define USE_THICKNESSMAP" : "",
                  parameters1.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
                  parameters1.vertexTangents ? "#define USE_TANGENT" : "",
                  parameters1.vertexColors || parameters1.instancingColor ? "#define USE_COLOR" : "",
                  parameters1.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
                  parameters1.vertexUvs ? "#define USE_UV" : "",
                  parameters1.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "",
                  parameters1.gradientMap ? "#define USE_GRADIENTMAP" : "",
                  parameters1.flatShading ? "#define FLAT_SHADED" : "",
                  parameters1.doubleSided ? "#define DOUBLE_SIDED" : "",
                  parameters1.flipSided ? "#define FLIP_SIDED" : "",
                  parameters1.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
                  parameters1.shadowMapEnabled ? "#define " + shadowMapTypeDefine1 : "",
                  parameters1.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
                  parameters1.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "",
                  parameters1.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
                  parameters1.logarithmicDepthBuffer && parameters1.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
                  "uniform mat4 viewMatrix;",
                  "uniform vec3 cameraPosition;",
                  "uniform bool isOrthographic;",
                  parameters1.toneMapping !== NoToneMapping ? "#define TONE_MAPPING" : "",
                  parameters1.toneMapping !== NoToneMapping ? ShaderChunk["tonemapping_pars_fragment"] : "",
                  parameters1.toneMapping !== NoToneMapping ? getToneMappingFunction("toneMapping", parameters1.toneMapping) : "",
                  parameters1.dithering ? "#define DITHERING" : "",
                  parameters1.opaque ? "#define OPAQUE" : "",
                  ShaderChunk["encodings_pars_fragment"],
                  getTexelEncodingFunction("linearToOutputTexel", parameters1.outputEncoding),
                  parameters1.depthPacking ? "#define DEPTH_PACKING " + parameters1.depthPacking : "",
                  "\n"
              ].filter(filterEmptyLine).join("\n");
          }
          vertexShader1 = resolveIncludes(vertexShader1);
          vertexShader1 = replaceLightNums(vertexShader1, parameters1);
          vertexShader1 = replaceClippingPlaneNums(vertexShader1, parameters1);
          fragmentShader1 = resolveIncludes(fragmentShader1);
          fragmentShader1 = replaceLightNums(fragmentShader1, parameters1);
          fragmentShader1 = replaceClippingPlaneNums(fragmentShader1, parameters1);
          vertexShader1 = unrollLoops(vertexShader1);
          fragmentShader1 = unrollLoops(fragmentShader1);
          if (parameters1.isWebGL2 && parameters1.isRawShaderMaterial !== true) {
              // GLSL 3.0 conversion for built-in materials and ShaderMaterial
              versionString1 = "#version 300 es\n";
              prefixVertex1 = [
                  "precision mediump sampler2DArray;",
                  "#define attribute in",
                  "#define varying out",
                  "#define texture2D texture"
              ].join("\n") + "\n" + prefixVertex1;
              prefixFragment1 = [
                  "#define varying in",
                  parameters1.glslVersion === GLSL3 ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
                  parameters1.glslVersion === GLSL3 ? "" : "#define gl_FragColor pc_fragColor",
                  "#define gl_FragDepthEXT gl_FragDepth",
                  "#define texture2D texture",
                  "#define textureCube texture",
                  "#define texture2DProj textureProj",
                  "#define texture2DLodEXT textureLod",
                  "#define texture2DProjLodEXT textureProjLod",
                  "#define textureCubeLodEXT textureLod",
                  "#define texture2DGradEXT textureGrad",
                  "#define texture2DProjGradEXT textureProjGrad",
                  "#define textureCubeGradEXT textureGrad"
              ].join("\n") + "\n" + prefixFragment1;
          }
          const vertexGlsl1 = versionString1 + prefixVertex1 + vertexShader1;
          const fragmentGlsl1 = versionString1 + prefixFragment1 + fragmentShader1;
          // console.log( '*VERTEX*', vertexGlsl );
          // console.log( '*FRAGMENT*', fragmentGlsl );
          const glVertexShader1 = WebGLShader(gl1, 35633, vertexGlsl1);
          const glFragmentShader1 = WebGLShader(gl1, 35632, fragmentGlsl1);
          gl1.attachShader(program1, glVertexShader1);
          gl1.attachShader(program1, glFragmentShader1);
          // Force a particular attribute to index 0.
          if (parameters1.index0AttributeName !== undefined) gl1.bindAttribLocation(program1, 0, parameters1.index0AttributeName);
          else if (parameters1.morphTargets === true) // programs with morphTargets displace position out of attribute 0
          gl1.bindAttribLocation(program1, 0, "position");
          gl1.linkProgram(program1);
          // check for link errors
          if (renderer1.debug.checkShaderErrors) {
              const programLog1 = gl1.getProgramInfoLog(program1).trim();
              const vertexLog1 = gl1.getShaderInfoLog(glVertexShader1).trim();
              const fragmentLog1 = gl1.getShaderInfoLog(glFragmentShader1).trim();
              let runnable1 = true;
              let haveDiagnostics1 = true;
              if (gl1.getProgramParameter(program1, 35714) === false) {
                  runnable1 = false;
                  const vertexErrors1 = getShaderErrors(gl1, glVertexShader1, "vertex");
                  const fragmentErrors1 = getShaderErrors(gl1, glFragmentShader1, "fragment");
                  console.error("THREE.WebGLProgram: Shader Error " + gl1.getError() + " - " + "VALIDATE_STATUS " + gl1.getProgramParameter(program1, 35715) + "\n\n" + "Program Info Log: " + programLog1 + "\n" + vertexErrors1 + "\n" + fragmentErrors1);
              } else if (programLog1 !== "") console.warn("THREE.WebGLProgram: Program Info Log:", programLog1);
              else if (vertexLog1 === "" || fragmentLog1 === "") haveDiagnostics1 = false;
              if (haveDiagnostics1) this.diagnostics = {
                  runnable: runnable1,
                  programLog: programLog1,
                  vertexShader: {
                      log: vertexLog1,
                      prefix: prefixVertex1
                  },
                  fragmentShader: {
                      log: fragmentLog1,
                      prefix: prefixFragment1
                  }
              };
          }
          // Clean up
          // Crashes in iOS9 and iOS10. #18402
          // gl.detachShader( program, glVertexShader );
          // gl.detachShader( program, glFragmentShader );
          gl1.deleteShader(glVertexShader1);
          gl1.deleteShader(glFragmentShader1);
          // set up caching for uniform locations
          let cachedUniforms1;
          this.getUniforms = function() {
              if (cachedUniforms1 === undefined) cachedUniforms1 = new WebGLUniforms(gl1, program1);
              return cachedUniforms1;
          };
          // set up caching for attribute locations
          let cachedAttributes1;
          this.getAttributes = function() {
              if (cachedAttributes1 === undefined) cachedAttributes1 = fetchAttributeLocations(gl1, program1);
              return cachedAttributes1;
          };
          // free resource
          this.destroy = function() {
              bindingStates1.releaseStatesOfProgram(this);
              gl1.deleteProgram(program1);
              this.program = undefined;
          };
          //
          this.name = parameters1.shaderName;
          this.id = programIdCount++;
          this.cacheKey = cacheKey1;
          this.usedTimes = 1;
          this.program = program1;
          this.vertexShader = glVertexShader1;
          this.fragmentShader = glFragmentShader1;
          return this;
      }
      let _id = 0;
      class WebGLShaderCache {
          constructor(){
              this.shaderCache = new Map();
              this.materialCache = new Map();
          }
          update(material1) {
              const vertexShader1 = material1.vertexShader;
              const fragmentShader1 = material1.fragmentShader;
              const vertexShaderStage1 = this._getShaderStage(vertexShader1);
              const fragmentShaderStage1 = this._getShaderStage(fragmentShader1);
              const materialShaders1 = this._getShaderCacheForMaterial(material1);
              if (materialShaders1.has(vertexShaderStage1) === false) {
                  materialShaders1.add(vertexShaderStage1);
                  vertexShaderStage1.usedTimes++;
              }
              if (materialShaders1.has(fragmentShaderStage1) === false) {
                  materialShaders1.add(fragmentShaderStage1);
                  fragmentShaderStage1.usedTimes++;
              }
              return this;
          }
          remove(material1) {
              const materialShaders1 = this.materialCache.get(material1);
              for (const shaderStage1 of materialShaders1){
                  shaderStage1.usedTimes--;
                  if (shaderStage1.usedTimes === 0) this.shaderCache.delete(shaderStage1);
              }
              this.materialCache.delete(material1);
              return this;
          }
          getVertexShaderID(material1) {
              return this._getShaderStage(material1.vertexShader).id;
          }
          getFragmentShaderID(material1) {
              return this._getShaderStage(material1.fragmentShader).id;
          }
          dispose() {
              this.shaderCache.clear();
              this.materialCache.clear();
          }
          _getShaderCacheForMaterial(material1) {
              const cache1 = this.materialCache;
              if (cache1.has(material1) === false) cache1.set(material1, new Set());
              return cache1.get(material1);
          }
          _getShaderStage(code1) {
              const cache1 = this.shaderCache;
              if (cache1.has(code1) === false) {
                  const stage1 = new WebGLShaderStage();
                  cache1.set(code1, stage1);
              }
              return cache1.get(code1);
          }
      }
      class WebGLShaderStage {
          constructor(){
              this.id = _id++;
              this.usedTimes = 0;
          }
      }
      function WebGLPrograms(renderer1, cubemaps1, cubeuvmaps1, extensions1, capabilities1, bindingStates1, clipping1) {
          const _programLayers1 = new Layers();
          const _customShaders1 = new WebGLShaderCache();
          const programs1 = [];
          const isWebGL21 = capabilities1.isWebGL2;
          const logarithmicDepthBuffer1 = capabilities1.logarithmicDepthBuffer;
          const floatVertexTextures1 = capabilities1.floatVertexTextures;
          const maxVertexUniforms1 = capabilities1.maxVertexUniforms;
          const vertexTextures1 = capabilities1.vertexTextures;
          let precision1 = capabilities1.precision;
          const shaderIDs1 = {
              MeshDepthMaterial: "depth",
              MeshDistanceMaterial: "distanceRGBA",
              MeshNormalMaterial: "normal",
              MeshBasicMaterial: "basic",
              MeshLambertMaterial: "lambert",
              MeshPhongMaterial: "phong",
              MeshToonMaterial: "toon",
              MeshStandardMaterial: "physical",
              MeshPhysicalMaterial: "physical",
              MeshMatcapMaterial: "matcap",
              LineBasicMaterial: "basic",
              LineDashedMaterial: "dashed",
              PointsMaterial: "points",
              ShadowMaterial: "shadow",
              SpriteMaterial: "sprite"
          };
          function getMaxBones1(object1) {
              const skeleton1 = object1.skeleton;
              const bones1 = skeleton1.bones;
              if (floatVertexTextures1) return 1024;
              else {
                  // default for when object is not specified
                  // ( for example when prebuilding shader to be used with multiple objects )
                  //
                  //  - leave some extra space for other uniforms
                  //  - limit here is ANGLE's 254 max uniform vectors
                  //    (up to 54 should be safe)
                  const nVertexUniforms1 = maxVertexUniforms1;
                  const nVertexMatrices1 = Math.floor((nVertexUniforms1 - 20) / 4);
                  const maxBones1 = Math.min(nVertexMatrices1, bones1.length);
                  if (maxBones1 < bones1.length) {
                      console.warn("THREE.WebGLRenderer: Skeleton has " + bones1.length + " bones. This GPU supports " + maxBones1 + ".");
                      return 0;
                  }
                  return maxBones1;
              }
          }
          function getParameters1(material1, lights1, shadows1, scene1, object1) {
              const fog1 = scene1.fog;
              const geometry1 = object1.geometry;
              const environment1 = material1.isMeshStandardMaterial ? scene1.environment : null;
              const envMap1 = (material1.isMeshStandardMaterial ? cubeuvmaps1 : cubemaps1).get(material1.envMap || environment1);
              const envMapCubeUVHeight1 = !!envMap1 && (envMap1.mapping === CubeUVReflectionMapping || envMap1.mapping === CubeUVRefractionMapping) ? envMap1.image.height : null;
              const shaderID1 = shaderIDs1[material1.type];
              // heuristics to create shader parameters according to lights in the scene
              // (not to blow over maxLights budget)
              const maxBones1 = object1.isSkinnedMesh ? getMaxBones1(object1) : 0;
              if (material1.precision !== null) {
                  precision1 = capabilities1.getMaxPrecision(material1.precision);
                  if (precision1 !== material1.precision) console.warn("THREE.WebGLProgram.getParameters:", material1.precision, "not supported, using", precision1, "instead.");
              }
              //
              const morphAttribute1 = geometry1.morphAttributes.position || geometry1.morphAttributes.normal || geometry1.morphAttributes.color;
              const morphTargetsCount1 = morphAttribute1 !== undefined ? morphAttribute1.length : 0;
              let morphTextureStride1 = 0;
              if (geometry1.morphAttributes.position !== undefined) morphTextureStride1 = 1;
              if (geometry1.morphAttributes.normal !== undefined) morphTextureStride1 = 2;
              if (geometry1.morphAttributes.color !== undefined) morphTextureStride1 = 3;
              //
              let vertexShader1, fragmentShader1;
              let customVertexShaderID1, customFragmentShaderID1;
              if (shaderID1) {
                  const shader1 = ShaderLib[shaderID1];
                  vertexShader1 = shader1.vertexShader;
                  fragmentShader1 = shader1.fragmentShader;
              } else {
                  vertexShader1 = material1.vertexShader;
                  fragmentShader1 = material1.fragmentShader;
                  _customShaders1.update(material1);
                  customVertexShaderID1 = _customShaders1.getVertexShaderID(material1);
                  customFragmentShaderID1 = _customShaders1.getFragmentShaderID(material1);
              }
              const currentRenderTarget1 = renderer1.getRenderTarget();
              const useAlphaTest1 = material1.alphaTest > 0;
              const useClearcoat1 = material1.clearcoat > 0;
              const parameters1 = {
                  isWebGL2: isWebGL21,
                  shaderID: shaderID1,
                  shaderName: material1.type,
                  vertexShader: vertexShader1,
                  fragmentShader: fragmentShader1,
                  defines: material1.defines,
                  customVertexShaderID: customVertexShaderID1,
                  customFragmentShaderID: customFragmentShaderID1,
                  isRawShaderMaterial: material1.isRawShaderMaterial === true,
                  glslVersion: material1.glslVersion,
                  precision: precision1,
                  instancing: object1.isInstancedMesh === true,
                  instancingColor: object1.isInstancedMesh === true && object1.instanceColor !== null,
                  supportsVertexTextures: vertexTextures1,
                  outputEncoding: currentRenderTarget1 === null ? renderer1.outputEncoding : currentRenderTarget1.isXRRenderTarget === true ? currentRenderTarget1.texture.encoding : LinearEncoding,
                  map: !!material1.map,
                  matcap: !!material1.matcap,
                  envMap: !!envMap1,
                  envMapMode: envMap1 && envMap1.mapping,
                  envMapCubeUVHeight: envMapCubeUVHeight1,
                  lightMap: !!material1.lightMap,
                  aoMap: !!material1.aoMap,
                  emissiveMap: !!material1.emissiveMap,
                  bumpMap: !!material1.bumpMap,
                  normalMap: !!material1.normalMap,
                  objectSpaceNormalMap: material1.normalMapType === ObjectSpaceNormalMap,
                  tangentSpaceNormalMap: material1.normalMapType === TangentSpaceNormalMap,
                  decodeVideoTexture: !!material1.map && material1.map.isVideoTexture === true && material1.map.encoding === sRGBEncoding,
                  clearcoat: useClearcoat1,
                  clearcoatMap: useClearcoat1 && !!material1.clearcoatMap,
                  clearcoatRoughnessMap: useClearcoat1 && !!material1.clearcoatRoughnessMap,
                  clearcoatNormalMap: useClearcoat1 && !!material1.clearcoatNormalMap,
                  displacementMap: !!material1.displacementMap,
                  roughnessMap: !!material1.roughnessMap,
                  metalnessMap: !!material1.metalnessMap,
                  specularMap: !!material1.specularMap,
                  specularIntensityMap: !!material1.specularIntensityMap,
                  specularColorMap: !!material1.specularColorMap,
                  opaque: material1.transparent === false && material1.blending === NormalBlending,
                  alphaMap: !!material1.alphaMap,
                  alphaTest: useAlphaTest1,
                  gradientMap: !!material1.gradientMap,
                  sheen: material1.sheen > 0,
                  sheenColorMap: !!material1.sheenColorMap,
                  sheenRoughnessMap: !!material1.sheenRoughnessMap,
                  transmission: material1.transmission > 0,
                  transmissionMap: !!material1.transmissionMap,
                  thicknessMap: !!material1.thicknessMap,
                  combine: material1.combine,
                  vertexTangents: !!material1.normalMap && !!geometry1.attributes.tangent,
                  vertexColors: material1.vertexColors,
                  vertexAlphas: material1.vertexColors === true && !!geometry1.attributes.color && geometry1.attributes.color.itemSize === 4,
                  vertexUvs: !!material1.map || !!material1.bumpMap || !!material1.normalMap || !!material1.specularMap || !!material1.alphaMap || !!material1.emissiveMap || !!material1.roughnessMap || !!material1.metalnessMap || !!material1.clearcoatMap || !!material1.clearcoatRoughnessMap || !!material1.clearcoatNormalMap || !!material1.displacementMap || !!material1.transmissionMap || !!material1.thicknessMap || !!material1.specularIntensityMap || !!material1.specularColorMap || !!material1.sheenColorMap || !!material1.sheenRoughnessMap,
                  uvsVertexOnly: !(!!material1.map || !!material1.bumpMap || !!material1.normalMap || !!material1.specularMap || !!material1.alphaMap || !!material1.emissiveMap || !!material1.roughnessMap || !!material1.metalnessMap || !!material1.clearcoatNormalMap || material1.transmission > 0 || !!material1.transmissionMap || !!material1.thicknessMap || !!material1.specularIntensityMap || !!material1.specularColorMap || material1.sheen > 0 || !!material1.sheenColorMap || !!material1.sheenRoughnessMap) && !!material1.displacementMap,
                  fog: !!fog1,
                  useFog: material1.fog,
                  fogExp2: fog1 && fog1.isFogExp2,
                  flatShading: !!material1.flatShading,
                  sizeAttenuation: material1.sizeAttenuation,
                  logarithmicDepthBuffer: logarithmicDepthBuffer1,
                  skinning: object1.isSkinnedMesh === true && maxBones1 > 0,
                  maxBones: maxBones1,
                  useVertexTexture: floatVertexTextures1,
                  morphTargets: geometry1.morphAttributes.position !== undefined,
                  morphNormals: geometry1.morphAttributes.normal !== undefined,
                  morphColors: geometry1.morphAttributes.color !== undefined,
                  morphTargetsCount: morphTargetsCount1,
                  morphTextureStride: morphTextureStride1,
                  numDirLights: lights1.directional.length,
                  numPointLights: lights1.point.length,
                  numSpotLights: lights1.spot.length,
                  numRectAreaLights: lights1.rectArea.length,
                  numHemiLights: lights1.hemi.length,
                  numDirLightShadows: lights1.directionalShadowMap.length,
                  numPointLightShadows: lights1.pointShadowMap.length,
                  numSpotLightShadows: lights1.spotShadowMap.length,
                  numClippingPlanes: clipping1.numPlanes,
                  numClipIntersection: clipping1.numIntersection,
                  dithering: material1.dithering,
                  shadowMapEnabled: renderer1.shadowMap.enabled && shadows1.length > 0,
                  shadowMapType: renderer1.shadowMap.type,
                  toneMapping: material1.toneMapped ? renderer1.toneMapping : NoToneMapping,
                  physicallyCorrectLights: renderer1.physicallyCorrectLights,
                  premultipliedAlpha: material1.premultipliedAlpha,
                  doubleSided: material1.side === DoubleSide,
                  flipSided: material1.side === BackSide,
                  depthPacking: material1.depthPacking !== undefined ? material1.depthPacking : false,
                  index0AttributeName: material1.index0AttributeName,
                  extensionDerivatives: material1.extensions && material1.extensions.derivatives,
                  extensionFragDepth: material1.extensions && material1.extensions.fragDepth,
                  extensionDrawBuffers: material1.extensions && material1.extensions.drawBuffers,
                  extensionShaderTextureLOD: material1.extensions && material1.extensions.shaderTextureLOD,
                  rendererExtensionFragDepth: isWebGL21 || extensions1.has("EXT_frag_depth"),
                  rendererExtensionDrawBuffers: isWebGL21 || extensions1.has("WEBGL_draw_buffers"),
                  rendererExtensionShaderTextureLod: isWebGL21 || extensions1.has("EXT_shader_texture_lod"),
                  customProgramCacheKey: material1.customProgramCacheKey()
              };
              return parameters1;
          }
          function getProgramCacheKey1(parameters1) {
              const array1 = [];
              if (parameters1.shaderID) array1.push(parameters1.shaderID);
              else {
                  array1.push(parameters1.customVertexShaderID);
                  array1.push(parameters1.customFragmentShaderID);
              }
              if (parameters1.defines !== undefined) for(const name1 in parameters1.defines){
                  array1.push(name1);
                  array1.push(parameters1.defines[name1]);
              }
              if (parameters1.isRawShaderMaterial === false) {
                  getProgramCacheKeyParameters1(array1, parameters1);
                  getProgramCacheKeyBooleans1(array1, parameters1);
                  array1.push(renderer1.outputEncoding);
              }
              array1.push(parameters1.customProgramCacheKey);
              return array1.join();
          }
          function getProgramCacheKeyParameters1(array1, parameters1) {
              array1.push(parameters1.precision);
              array1.push(parameters1.outputEncoding);
              array1.push(parameters1.envMapMode);
              array1.push(parameters1.envMapCubeUVHeight);
              array1.push(parameters1.combine);
              array1.push(parameters1.vertexUvs);
              array1.push(parameters1.fogExp2);
              array1.push(parameters1.sizeAttenuation);
              array1.push(parameters1.maxBones);
              array1.push(parameters1.morphTargetsCount);
              array1.push(parameters1.morphAttributeCount);
              array1.push(parameters1.numDirLights);
              array1.push(parameters1.numPointLights);
              array1.push(parameters1.numSpotLights);
              array1.push(parameters1.numHemiLights);
              array1.push(parameters1.numRectAreaLights);
              array1.push(parameters1.numDirLightShadows);
              array1.push(parameters1.numPointLightShadows);
              array1.push(parameters1.numSpotLightShadows);
              array1.push(parameters1.shadowMapType);
              array1.push(parameters1.toneMapping);
              array1.push(parameters1.numClippingPlanes);
              array1.push(parameters1.numClipIntersection);
          }
          function getProgramCacheKeyBooleans1(array1, parameters1) {
              _programLayers1.disableAll();
              if (parameters1.isWebGL2) _programLayers1.enable(0);
              if (parameters1.supportsVertexTextures) _programLayers1.enable(1);
              if (parameters1.instancing) _programLayers1.enable(2);
              if (parameters1.instancingColor) _programLayers1.enable(3);
              if (parameters1.map) _programLayers1.enable(4);
              if (parameters1.matcap) _programLayers1.enable(5);
              if (parameters1.envMap) _programLayers1.enable(6);
              if (parameters1.lightMap) _programLayers1.enable(7);
              if (parameters1.aoMap) _programLayers1.enable(8);
              if (parameters1.emissiveMap) _programLayers1.enable(9);
              if (parameters1.bumpMap) _programLayers1.enable(10);
              if (parameters1.normalMap) _programLayers1.enable(11);
              if (parameters1.objectSpaceNormalMap) _programLayers1.enable(12);
              if (parameters1.tangentSpaceNormalMap) _programLayers1.enable(13);
              if (parameters1.clearcoat) _programLayers1.enable(14);
              if (parameters1.clearcoatMap) _programLayers1.enable(15);
              if (parameters1.clearcoatRoughnessMap) _programLayers1.enable(16);
              if (parameters1.clearcoatNormalMap) _programLayers1.enable(17);
              if (parameters1.displacementMap) _programLayers1.enable(18);
              if (parameters1.specularMap) _programLayers1.enable(19);
              if (parameters1.roughnessMap) _programLayers1.enable(20);
              if (parameters1.metalnessMap) _programLayers1.enable(21);
              if (parameters1.gradientMap) _programLayers1.enable(22);
              if (parameters1.alphaMap) _programLayers1.enable(23);
              if (parameters1.alphaTest) _programLayers1.enable(24);
              if (parameters1.vertexColors) _programLayers1.enable(25);
              if (parameters1.vertexAlphas) _programLayers1.enable(26);
              if (parameters1.vertexUvs) _programLayers1.enable(27);
              if (parameters1.vertexTangents) _programLayers1.enable(28);
              if (parameters1.uvsVertexOnly) _programLayers1.enable(29);
              if (parameters1.fog) _programLayers1.enable(30);
              array1.push(_programLayers1.mask);
              _programLayers1.disableAll();
              if (parameters1.useFog) _programLayers1.enable(0);
              if (parameters1.flatShading) _programLayers1.enable(1);
              if (parameters1.logarithmicDepthBuffer) _programLayers1.enable(2);
              if (parameters1.skinning) _programLayers1.enable(3);
              if (parameters1.useVertexTexture) _programLayers1.enable(4);
              if (parameters1.morphTargets) _programLayers1.enable(5);
              if (parameters1.morphNormals) _programLayers1.enable(6);
              if (parameters1.morphColors) _programLayers1.enable(7);
              if (parameters1.premultipliedAlpha) _programLayers1.enable(8);
              if (parameters1.shadowMapEnabled) _programLayers1.enable(9);
              if (parameters1.physicallyCorrectLights) _programLayers1.enable(10);
              if (parameters1.doubleSided) _programLayers1.enable(11);
              if (parameters1.flipSided) _programLayers1.enable(12);
              if (parameters1.depthPacking) _programLayers1.enable(13);
              if (parameters1.dithering) _programLayers1.enable(14);
              if (parameters1.specularIntensityMap) _programLayers1.enable(15);
              if (parameters1.specularColorMap) _programLayers1.enable(16);
              if (parameters1.transmission) _programLayers1.enable(17);
              if (parameters1.transmissionMap) _programLayers1.enable(18);
              if (parameters1.thicknessMap) _programLayers1.enable(19);
              if (parameters1.sheen) _programLayers1.enable(20);
              if (parameters1.sheenColorMap) _programLayers1.enable(21);
              if (parameters1.sheenRoughnessMap) _programLayers1.enable(22);
              if (parameters1.decodeVideoTexture) _programLayers1.enable(23);
              if (parameters1.opaque) _programLayers1.enable(24);
              array1.push(_programLayers1.mask);
          }
          function getUniforms1(material1) {
              const shaderID1 = shaderIDs1[material1.type];
              let uniforms1;
              if (shaderID1) {
                  const shader1 = ShaderLib[shaderID1];
                  uniforms1 = UniformsUtils.clone(shader1.uniforms);
              } else uniforms1 = material1.uniforms;
              return uniforms1;
          }
          function acquireProgram1(parameters1, cacheKey1) {
              let program1;
              // Check if code has been already compiled
              for(let p6 = 0, pl1 = programs1.length; p6 < pl1; p6++){
                  const preexistingProgram1 = programs1[p6];
                  if (preexistingProgram1.cacheKey === cacheKey1) {
                      program1 = preexistingProgram1;
                      ++program1.usedTimes;
                      break;
                  }
              }
              if (program1 === undefined) {
                  program1 = new WebGLProgram(renderer1, cacheKey1, parameters1, bindingStates1);
                  programs1.push(program1);
              }
              return program1;
          }
          function releaseProgram1(program1) {
              if (--program1.usedTimes === 0) {
                  // Remove from unordered set
                  const i3 = programs1.indexOf(program1);
                  programs1[i3] = programs1[programs1.length - 1];
                  programs1.pop();
                  // Free WebGL resources
                  program1.destroy();
              }
          }
          function releaseShaderCache1(material1) {
              _customShaders1.remove(material1);
          }
          function dispose1() {
              _customShaders1.dispose();
          }
          return {
              getParameters: getParameters1,
              getProgramCacheKey: getProgramCacheKey1,
              getUniforms: getUniforms1,
              acquireProgram: acquireProgram1,
              releaseProgram: releaseProgram1,
              releaseShaderCache: releaseShaderCache1,
              // Exposed for resource monitoring & error feedback via renderer.info:
              programs: programs1,
              dispose: dispose1
          };
      }
      function WebGLProperties() {
          let properties1 = new WeakMap();
          function get1(object1) {
              let map1 = properties1.get(object1);
              if (map1 === undefined) {
                  map1 = {};
                  properties1.set(object1, map1);
              }
              return map1;
          }
          function remove1(object1) {
              properties1.delete(object1);
          }
          function update1(object1, key1, value1) {
              properties1.get(object1)[key1] = value1;
          }
          function dispose1() {
              properties1 = new WeakMap();
          }
          return {
              get: get1,
              remove: remove1,
              update: update1,
              dispose: dispose1
          };
      }
      function painterSortStable(a3, b3) {
          if (a3.groupOrder !== b3.groupOrder) return a3.groupOrder - b3.groupOrder;
          else if (a3.renderOrder !== b3.renderOrder) return a3.renderOrder - b3.renderOrder;
          else if (a3.material.id !== b3.material.id) return a3.material.id - b3.material.id;
          else if (a3.z !== b3.z) return a3.z - b3.z;
          else return a3.id - b3.id;
      }
      function reversePainterSortStable(a3, b3) {
          if (a3.groupOrder !== b3.groupOrder) return a3.groupOrder - b3.groupOrder;
          else if (a3.renderOrder !== b3.renderOrder) return a3.renderOrder - b3.renderOrder;
          else if (a3.z !== b3.z) return b3.z - a3.z;
          else return a3.id - b3.id;
      }
      function WebGLRenderList() {
          const renderItems1 = [];
          let renderItemsIndex1 = 0;
          const opaque1 = [];
          const transmissive1 = [];
          const transparent1 = [];
          function init1() {
              renderItemsIndex1 = 0;
              opaque1.length = 0;
              transmissive1.length = 0;
              transparent1.length = 0;
          }
          function getNextRenderItem1(object1, geometry1, material1, groupOrder1, z3, group1) {
              let renderItem1 = renderItems1[renderItemsIndex1];
              if (renderItem1 === undefined) {
                  renderItem1 = {
                      id: object1.id,
                      object: object1,
                      geometry: geometry1,
                      material: material1,
                      groupOrder: groupOrder1,
                      renderOrder: object1.renderOrder,
                      z: z3,
                      group: group1
                  };
                  renderItems1[renderItemsIndex1] = renderItem1;
              } else {
                  renderItem1.id = object1.id;
                  renderItem1.object = object1;
                  renderItem1.geometry = geometry1;
                  renderItem1.material = material1;
                  renderItem1.groupOrder = groupOrder1;
                  renderItem1.renderOrder = object1.renderOrder;
                  renderItem1.z = z3;
                  renderItem1.group = group1;
              }
              renderItemsIndex1++;
              return renderItem1;
          }
          function push1(object1, geometry1, material1, groupOrder1, z3, group1) {
              const renderItem1 = getNextRenderItem1(object1, geometry1, material1, groupOrder1, z3, group1);
              if (material1.transmission > 0.0) transmissive1.push(renderItem1);
              else if (material1.transparent === true) transparent1.push(renderItem1);
              else opaque1.push(renderItem1);
          }
          function unshift1(object1, geometry1, material1, groupOrder1, z3, group1) {
              const renderItem1 = getNextRenderItem1(object1, geometry1, material1, groupOrder1, z3, group1);
              if (material1.transmission > 0.0) transmissive1.unshift(renderItem1);
              else if (material1.transparent === true) transparent1.unshift(renderItem1);
              else opaque1.unshift(renderItem1);
          }
          function sort1(customOpaqueSort1, customTransparentSort1) {
              if (opaque1.length > 1) opaque1.sort(customOpaqueSort1 || painterSortStable);
              if (transmissive1.length > 1) transmissive1.sort(customTransparentSort1 || reversePainterSortStable);
              if (transparent1.length > 1) transparent1.sort(customTransparentSort1 || reversePainterSortStable);
          }
          function finish1() {
              // Clear references from inactive renderItems in the list
              for(let i3 = renderItemsIndex1, il1 = renderItems1.length; i3 < il1; i3++){
                  const renderItem1 = renderItems1[i3];
                  if (renderItem1.id === null) break;
                  renderItem1.id = null;
                  renderItem1.object = null;
                  renderItem1.geometry = null;
                  renderItem1.material = null;
                  renderItem1.group = null;
              }
          }
          return {
              opaque: opaque1,
              transmissive: transmissive1,
              transparent: transparent1,
              init: init1,
              push: push1,
              unshift: unshift1,
              finish: finish1,
              sort: sort1
          };
      }
      function WebGLRenderLists() {
          let lists1 = new WeakMap();
          function get1(scene1, renderCallDepth1) {
              let list1;
              if (lists1.has(scene1) === false) {
                  list1 = new WebGLRenderList();
                  lists1.set(scene1, [
                      list1
                  ]);
              } else if (renderCallDepth1 >= lists1.get(scene1).length) {
                  list1 = new WebGLRenderList();
                  lists1.get(scene1).push(list1);
              } else list1 = lists1.get(scene1)[renderCallDepth1];
              return list1;
          }
          function dispose1() {
              lists1 = new WeakMap();
          }
          return {
              get: get1,
              dispose: dispose1
          };
      }
      function UniformsCache() {
          const lights1 = {};
          return {
              get: function(light1) {
                  if (lights1[light1.id] !== undefined) return lights1[light1.id];
                  let uniforms1;
                  switch(light1.type){
                      case "DirectionalLight":
                          uniforms1 = {
                              direction: new Vector3(),
                              color: new Color()
                          };
                          break;
                      case "SpotLight":
                          uniforms1 = {
                              position: new Vector3(),
                              direction: new Vector3(),
                              color: new Color(),
                              distance: 0,
                              coneCos: 0,
                              penumbraCos: 0,
                              decay: 0
                          };
                          break;
                      case "PointLight":
                          uniforms1 = {
                              position: new Vector3(),
                              color: new Color(),
                              distance: 0,
                              decay: 0
                          };
                          break;
                      case "HemisphereLight":
                          uniforms1 = {
                              direction: new Vector3(),
                              skyColor: new Color(),
                              groundColor: new Color()
                          };
                          break;
                      case "RectAreaLight":
                          uniforms1 = {
                              color: new Color(),
                              position: new Vector3(),
                              halfWidth: new Vector3(),
                              halfHeight: new Vector3()
                          };
                          break;
                  }
                  lights1[light1.id] = uniforms1;
                  return uniforms1;
              }
          };
      }
      function ShadowUniformsCache() {
          const lights1 = {};
          return {
              get: function(light1) {
                  if (lights1[light1.id] !== undefined) return lights1[light1.id];
                  let uniforms1;
                  switch(light1.type){
                      case "DirectionalLight":
                          uniforms1 = {
                              shadowBias: 0,
                              shadowNormalBias: 0,
                              shadowRadius: 1,
                              shadowMapSize: new Vector2()
                          };
                          break;
                      case "SpotLight":
                          uniforms1 = {
                              shadowBias: 0,
                              shadowNormalBias: 0,
                              shadowRadius: 1,
                              shadowMapSize: new Vector2()
                          };
                          break;
                      case "PointLight":
                          uniforms1 = {
                              shadowBias: 0,
                              shadowNormalBias: 0,
                              shadowRadius: 1,
                              shadowMapSize: new Vector2(),
                              shadowCameraNear: 1,
                              shadowCameraFar: 1000
                          };
                          break;
                  }
                  lights1[light1.id] = uniforms1;
                  return uniforms1;
              }
          };
      }
      let nextVersion = 0;
      function shadowCastingLightsFirst(lightA1, lightB1) {
          return (lightB1.castShadow ? 1 : 0) - (lightA1.castShadow ? 1 : 0);
      }
      function WebGLLights(extensions1, capabilities1) {
          const cache1 = new UniformsCache();
          const shadowCache1 = ShadowUniformsCache();
          const state1 = {
              version: 0,
              hash: {
                  directionalLength: -1,
                  pointLength: -1,
                  spotLength: -1,
                  rectAreaLength: -1,
                  hemiLength: -1,
                  numDirectionalShadows: -1,
                  numPointShadows: -1,
                  numSpotShadows: -1
              },
              ambient: [
                  0,
                  0,
                  0
              ],
              probe: [],
              directional: [],
              directionalShadow: [],
              directionalShadowMap: [],
              directionalShadowMatrix: [],
              spot: [],
              spotShadow: [],
              spotShadowMap: [],
              spotShadowMatrix: [],
              rectArea: [],
              rectAreaLTC1: null,
              rectAreaLTC2: null,
              point: [],
              pointShadow: [],
              pointShadowMap: [],
              pointShadowMatrix: [],
              hemi: []
          };
          for(let i3 = 0; i3 < 9; i3++)state1.probe.push(new Vector3());
          const vector31 = new Vector3();
          const matrix41 = new Matrix4();
          const matrix421 = new Matrix4();
          function setup1(lights1, physicallyCorrectLights1) {
              let r1 = 0, g1 = 0, b3 = 0;
              for(let i3 = 0; i3 < 9; i3++)state1.probe[i3].set(0, 0, 0);
              let directionalLength1 = 0;
              let pointLength1 = 0;
              let spotLength1 = 0;
              let rectAreaLength1 = 0;
              let hemiLength1 = 0;
              let numDirectionalShadows1 = 0;
              let numPointShadows1 = 0;
              let numSpotShadows1 = 0;
              lights1.sort(shadowCastingLightsFirst);
              // artist-friendly light intensity scaling factor
              const scaleFactor1 = physicallyCorrectLights1 !== true ? Math.PI : 1;
              for(let i3 = 0, l1 = lights1.length; i3 < l1; i3++){
                  const light1 = lights1[i3];
                  const color3 = light1.color;
                  const intensity1 = light1.intensity;
                  const distance1 = light1.distance;
                  const shadowMap1 = light1.shadow && light1.shadow.map ? light1.shadow.map.texture : null;
                  if (light1.isAmbientLight) {
                      r1 += color3.r * intensity1 * scaleFactor1;
                      g1 += color3.g * intensity1 * scaleFactor1;
                      b3 += color3.b * intensity1 * scaleFactor1;
                  } else if (light1.isLightProbe) for(let j1 = 0; j1 < 9; j1++)state1.probe[j1].addScaledVector(light1.sh.coefficients[j1], intensity1);
                  else if (light1.isDirectionalLight) {
                      const uniforms1 = cache1.get(light1);
                      uniforms1.color.copy(light1.color).multiplyScalar(light1.intensity * scaleFactor1);
                      if (light1.castShadow) {
                          const shadow1 = light1.shadow;
                          const shadowUniforms1 = shadowCache1.get(light1);
                          shadowUniforms1.shadowBias = shadow1.bias;
                          shadowUniforms1.shadowNormalBias = shadow1.normalBias;
                          shadowUniforms1.shadowRadius = shadow1.radius;
                          shadowUniforms1.shadowMapSize = shadow1.mapSize;
                          state1.directionalShadow[directionalLength1] = shadowUniforms1;
                          state1.directionalShadowMap[directionalLength1] = shadowMap1;
                          state1.directionalShadowMatrix[directionalLength1] = light1.shadow.matrix;
                          numDirectionalShadows1++;
                      }
                      state1.directional[directionalLength1] = uniforms1;
                      directionalLength1++;
                  } else if (light1.isSpotLight) {
                      const uniforms1 = cache1.get(light1);
                      uniforms1.position.setFromMatrixPosition(light1.matrixWorld);
                      uniforms1.color.copy(color3).multiplyScalar(intensity1 * scaleFactor1);
                      uniforms1.distance = distance1;
                      uniforms1.coneCos = Math.cos(light1.angle);
                      uniforms1.penumbraCos = Math.cos(light1.angle * (1 - light1.penumbra));
                      uniforms1.decay = light1.decay;
                      if (light1.castShadow) {
                          const shadow1 = light1.shadow;
                          const shadowUniforms1 = shadowCache1.get(light1);
                          shadowUniforms1.shadowBias = shadow1.bias;
                          shadowUniforms1.shadowNormalBias = shadow1.normalBias;
                          shadowUniforms1.shadowRadius = shadow1.radius;
                          shadowUniforms1.shadowMapSize = shadow1.mapSize;
                          state1.spotShadow[spotLength1] = shadowUniforms1;
                          state1.spotShadowMap[spotLength1] = shadowMap1;
                          state1.spotShadowMatrix[spotLength1] = light1.shadow.matrix;
                          numSpotShadows1++;
                      }
                      state1.spot[spotLength1] = uniforms1;
                      spotLength1++;
                  } else if (light1.isRectAreaLight) {
                      const uniforms1 = cache1.get(light1);
                      // (a) intensity is the total visible light emitted
                      //uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );
                      // (b) intensity is the brightness of the light
                      uniforms1.color.copy(color3).multiplyScalar(intensity1);
                      uniforms1.halfWidth.set(light1.width * 0.5, 0.0, 0.0);
                      uniforms1.halfHeight.set(0.0, light1.height * 0.5, 0.0);
                      state1.rectArea[rectAreaLength1] = uniforms1;
                      rectAreaLength1++;
                  } else if (light1.isPointLight) {
                      const uniforms1 = cache1.get(light1);
                      uniforms1.color.copy(light1.color).multiplyScalar(light1.intensity * scaleFactor1);
                      uniforms1.distance = light1.distance;
                      uniforms1.decay = light1.decay;
                      if (light1.castShadow) {
                          const shadow1 = light1.shadow;
                          const shadowUniforms1 = shadowCache1.get(light1);
                          shadowUniforms1.shadowBias = shadow1.bias;
                          shadowUniforms1.shadowNormalBias = shadow1.normalBias;
                          shadowUniforms1.shadowRadius = shadow1.radius;
                          shadowUniforms1.shadowMapSize = shadow1.mapSize;
                          shadowUniforms1.shadowCameraNear = shadow1.camera.near;
                          shadowUniforms1.shadowCameraFar = shadow1.camera.far;
                          state1.pointShadow[pointLength1] = shadowUniforms1;
                          state1.pointShadowMap[pointLength1] = shadowMap1;
                          state1.pointShadowMatrix[pointLength1] = light1.shadow.matrix;
                          numPointShadows1++;
                      }
                      state1.point[pointLength1] = uniforms1;
                      pointLength1++;
                  } else if (light1.isHemisphereLight) {
                      const uniforms1 = cache1.get(light1);
                      uniforms1.skyColor.copy(light1.color).multiplyScalar(intensity1 * scaleFactor1);
                      uniforms1.groundColor.copy(light1.groundColor).multiplyScalar(intensity1 * scaleFactor1);
                      state1.hemi[hemiLength1] = uniforms1;
                      hemiLength1++;
                  }
              }
              if (rectAreaLength1 > 0) {
                  if (capabilities1.isWebGL2) {
                      // WebGL 2
                      state1.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
                      state1.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
                  } else {
                      // WebGL 1
                      if (extensions1.has("OES_texture_float_linear") === true) {
                          state1.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
                          state1.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
                      } else if (extensions1.has("OES_texture_half_float_linear") === true) {
                          state1.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
                          state1.rectAreaLTC2 = UniformsLib.LTC_HALF_2;
                      } else console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.");
                  }
              }
              state1.ambient[0] = r1;
              state1.ambient[1] = g1;
              state1.ambient[2] = b3;
              const hash3 = state1.hash;
              if (hash3.directionalLength !== directionalLength1 || hash3.pointLength !== pointLength1 || hash3.spotLength !== spotLength1 || hash3.rectAreaLength !== rectAreaLength1 || hash3.hemiLength !== hemiLength1 || hash3.numDirectionalShadows !== numDirectionalShadows1 || hash3.numPointShadows !== numPointShadows1 || hash3.numSpotShadows !== numSpotShadows1) {
                  state1.directional.length = directionalLength1;
                  state1.spot.length = spotLength1;
                  state1.rectArea.length = rectAreaLength1;
                  state1.point.length = pointLength1;
                  state1.hemi.length = hemiLength1;
                  state1.directionalShadow.length = numDirectionalShadows1;
                  state1.directionalShadowMap.length = numDirectionalShadows1;
                  state1.pointShadow.length = numPointShadows1;
                  state1.pointShadowMap.length = numPointShadows1;
                  state1.spotShadow.length = numSpotShadows1;
                  state1.spotShadowMap.length = numSpotShadows1;
                  state1.directionalShadowMatrix.length = numDirectionalShadows1;
                  state1.pointShadowMatrix.length = numPointShadows1;
                  state1.spotShadowMatrix.length = numSpotShadows1;
                  hash3.directionalLength = directionalLength1;
                  hash3.pointLength = pointLength1;
                  hash3.spotLength = spotLength1;
                  hash3.rectAreaLength = rectAreaLength1;
                  hash3.hemiLength = hemiLength1;
                  hash3.numDirectionalShadows = numDirectionalShadows1;
                  hash3.numPointShadows = numPointShadows1;
                  hash3.numSpotShadows = numSpotShadows1;
                  state1.version = nextVersion++;
              }
          }
          function setupView1(lights1, camera1) {
              let directionalLength1 = 0;
              let pointLength1 = 0;
              let spotLength1 = 0;
              let rectAreaLength1 = 0;
              let hemiLength1 = 0;
              const viewMatrix1 = camera1.matrixWorldInverse;
              for(let i3 = 0, l1 = lights1.length; i3 < l1; i3++){
                  const light1 = lights1[i3];
                  if (light1.isDirectionalLight) {
                      const uniforms1 = state1.directional[directionalLength1];
                      uniforms1.direction.setFromMatrixPosition(light1.matrixWorld);
                      vector31.setFromMatrixPosition(light1.target.matrixWorld);
                      uniforms1.direction.sub(vector31);
                      uniforms1.direction.transformDirection(viewMatrix1);
                      directionalLength1++;
                  } else if (light1.isSpotLight) {
                      const uniforms1 = state1.spot[spotLength1];
                      uniforms1.position.setFromMatrixPosition(light1.matrixWorld);
                      uniforms1.position.applyMatrix4(viewMatrix1);
                      uniforms1.direction.setFromMatrixPosition(light1.matrixWorld);
                      vector31.setFromMatrixPosition(light1.target.matrixWorld);
                      uniforms1.direction.sub(vector31);
                      uniforms1.direction.transformDirection(viewMatrix1);
                      spotLength1++;
                  } else if (light1.isRectAreaLight) {
                      const uniforms1 = state1.rectArea[rectAreaLength1];
                      uniforms1.position.setFromMatrixPosition(light1.matrixWorld);
                      uniforms1.position.applyMatrix4(viewMatrix1);
                      // extract local rotation of light to derive width/height half vectors
                      matrix421.identity();
                      matrix41.copy(light1.matrixWorld);
                      matrix41.premultiply(viewMatrix1);
                      matrix421.extractRotation(matrix41);
                      uniforms1.halfWidth.set(light1.width * 0.5, 0.0, 0.0);
                      uniforms1.halfHeight.set(0.0, light1.height * 0.5, 0.0);
                      uniforms1.halfWidth.applyMatrix4(matrix421);
                      uniforms1.halfHeight.applyMatrix4(matrix421);
                      rectAreaLength1++;
                  } else if (light1.isPointLight) {
                      const uniforms1 = state1.point[pointLength1];
                      uniforms1.position.setFromMatrixPosition(light1.matrixWorld);
                      uniforms1.position.applyMatrix4(viewMatrix1);
                      pointLength1++;
                  } else if (light1.isHemisphereLight) {
                      const uniforms1 = state1.hemi[hemiLength1];
                      uniforms1.direction.setFromMatrixPosition(light1.matrixWorld);
                      uniforms1.direction.transformDirection(viewMatrix1);
                      uniforms1.direction.normalize();
                      hemiLength1++;
                  }
              }
          }
          return {
              setup: setup1,
              setupView: setupView1,
              state: state1
          };
      }
      function WebGLRenderState(extensions1, capabilities1) {
          const lights1 = new WebGLLights(extensions1, capabilities1);
          const lightsArray1 = [];
          const shadowsArray1 = [];
          function init1() {
              lightsArray1.length = 0;
              shadowsArray1.length = 0;
          }
          function pushLight1(light1) {
              lightsArray1.push(light1);
          }
          function pushShadow1(shadowLight1) {
              shadowsArray1.push(shadowLight1);
          }
          function setupLights1(physicallyCorrectLights1) {
              lights1.setup(lightsArray1, physicallyCorrectLights1);
          }
          function setupLightsView1(camera1) {
              lights1.setupView(lightsArray1, camera1);
          }
          const state1 = {
              lightsArray: lightsArray1,
              shadowsArray: shadowsArray1,
              lights: lights1
          };
          return {
              init: init1,
              state: state1,
              setupLights: setupLights1,
              setupLightsView: setupLightsView1,
              pushLight: pushLight1,
              pushShadow: pushShadow1
          };
      }
      function WebGLRenderStates(extensions1, capabilities1) {
          let renderStates1 = new WeakMap();
          function get1(scene1, renderCallDepth1 = 0) {
              let renderState1;
              if (renderStates1.has(scene1) === false) {
                  renderState1 = new WebGLRenderState(extensions1, capabilities1);
                  renderStates1.set(scene1, [
                      renderState1
                  ]);
              } else if (renderCallDepth1 >= renderStates1.get(scene1).length) {
                  renderState1 = new WebGLRenderState(extensions1, capabilities1);
                  renderStates1.get(scene1).push(renderState1);
              } else renderState1 = renderStates1.get(scene1)[renderCallDepth1];
              return renderState1;
          }
          function dispose1() {
              renderStates1 = new WeakMap();
          }
          return {
              get: get1,
              dispose: dispose1
          };
      }
      /**
     * parameters = {
     *
     *  opacity: <float>,
     *
     *  map: new THREE.Texture( <Image> ),
     *
     *  alphaMap: new THREE.Texture( <Image> ),
     *
     *  displacementMap: new THREE.Texture( <Image> ),
     *  displacementScale: <float>,
     *  displacementBias: <float>,
     *
     *  wireframe: <boolean>,
     *  wireframeLinewidth: <float>
     * }
     */ class MeshDepthMaterial extends Material {
          constructor(parameters1){
              super();
              this.type = "MeshDepthMaterial";
              this.depthPacking = BasicDepthPacking;
              this.map = null;
              this.alphaMap = null;
              this.displacementMap = null;
              this.displacementScale = 1;
              this.displacementBias = 0;
              this.wireframe = false;
              this.wireframeLinewidth = 1;
              this.fog = false;
              this.setValues(parameters1);
          }
          copy(source1) {
              super.copy(source1);
              this.depthPacking = source1.depthPacking;
              this.map = source1.map;
              this.alphaMap = source1.alphaMap;
              this.displacementMap = source1.displacementMap;
              this.displacementScale = source1.displacementScale;
              this.displacementBias = source1.displacementBias;
              this.wireframe = source1.wireframe;
              this.wireframeLinewidth = source1.wireframeLinewidth;
              return this;
          }
      }
      MeshDepthMaterial.prototype.isMeshDepthMaterial = true;
      /**
     * parameters = {
     *
     *  referencePosition: <float>,
     *  nearDistance: <float>,
     *  farDistance: <float>,
     *
     *  map: new THREE.Texture( <Image> ),
     *
     *  alphaMap: new THREE.Texture( <Image> ),
     *
     *  displacementMap: new THREE.Texture( <Image> ),
     *  displacementScale: <float>,
     *  displacementBias: <float>
     *
     * }
     */ class MeshDistanceMaterial extends Material {
          constructor(parameters1){
              super();
              this.type = "MeshDistanceMaterial";
              this.referencePosition = new Vector3();
              this.nearDistance = 1;
              this.farDistance = 1000;
              this.map = null;
              this.alphaMap = null;
              this.displacementMap = null;
              this.displacementScale = 1;
              this.displacementBias = 0;
              this.fog = false;
              this.setValues(parameters1);
          }
          copy(source1) {
              super.copy(source1);
              this.referencePosition.copy(source1.referencePosition);
              this.nearDistance = source1.nearDistance;
              this.farDistance = source1.farDistance;
              this.map = source1.map;
              this.alphaMap = source1.alphaMap;
              this.displacementMap = source1.displacementMap;
              this.displacementScale = source1.displacementScale;
              this.displacementBias = source1.displacementBias;
              return this;
          }
      }
      MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;
      const vertex = "void main() {\n	gl_Position = vec4( position, 1.0 );\n}";
      const fragment = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n	const float samples = float( VSM_SAMPLES );\n	float mean = 0.0;\n	float squared_mean = 0.0;\n	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n	for ( float i = 0.0; i < samples; i ++ ) {\n		float uvOffset = uvStart + i * uvStride;\n		#ifdef HORIZONTAL_PASS\n			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n			mean += distribution.x;\n			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n		#else\n			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n			mean += depth;\n			squared_mean += depth * depth;\n		#endif\n	}\n	mean = mean / samples;\n	squared_mean = squared_mean / samples;\n	float std_dev = sqrt( squared_mean - mean * mean );\n	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";
      function WebGLShadowMap(_renderer1, _objects1, _capabilities1) {
          let _frustum1 = new Frustum();
          const _shadowMapSize1 = new Vector2(), _viewportSize1 = new Vector2(), _viewport1 = new Vector4$1(), _depthMaterial1 = new MeshDepthMaterial({
              depthPacking: RGBADepthPacking
          }), _distanceMaterial1 = new MeshDistanceMaterial(), _materialCache1 = {}, _maxTextureSize1 = _capabilities1.maxTextureSize;
          const shadowSide1 = {
              0: BackSide,
              1: FrontSide,
              2: DoubleSide
          };
          const shadowMaterialVertical1 = new ShaderMaterial({
              defines: {
                  VSM_SAMPLES: 8
              },
              uniforms: {
                  shadow_pass: {
                      value: null
                  },
                  resolution: {
                      value: new Vector2()
                  },
                  radius: {
                      value: 4.0
                  }
              },
              vertexShader: vertex,
              fragmentShader: fragment
          });
          const shadowMaterialHorizontal1 = shadowMaterialVertical1.clone();
          shadowMaterialHorizontal1.defines.HORIZONTAL_PASS = 1;
          const fullScreenTri1 = new BufferGeometry();
          fullScreenTri1.setAttribute("position", new BufferAttribute(new Float32Array([
              -1,
              -1,
              0.5,
              3,
              -1,
              0.5,
              -1,
              3,
              0.5
          ]), 3));
          const fullScreenMesh1 = new Mesh(fullScreenTri1, shadowMaterialVertical1);
          const scope1 = this;
          this.enabled = false;
          this.autoUpdate = true;
          this.needsUpdate = false;
          this.type = PCFShadowMap;
          this.render = function(lights1, scene1, camera1) {
              if (scope1.enabled === false) return;
              if (scope1.autoUpdate === false && scope1.needsUpdate === false) return;
              if (lights1.length === 0) return;
              const currentRenderTarget1 = _renderer1.getRenderTarget();
              const activeCubeFace1 = _renderer1.getActiveCubeFace();
              const activeMipmapLevel1 = _renderer1.getActiveMipmapLevel();
              const _state1 = _renderer1.state;
              // Set GL state for depth map.
              _state1.setBlending(NoBlending);
              _state1.buffers.color.setClear(1, 1, 1, 1);
              _state1.buffers.depth.setTest(true);
              _state1.setScissorTest(false);
              // render depth map
              for(let i3 = 0, il1 = lights1.length; i3 < il1; i3++){
                  const light1 = lights1[i3];
                  const shadow1 = light1.shadow;
                  if (shadow1 === undefined) {
                      console.warn("THREE.WebGLShadowMap:", light1, "has no shadow.");
                      continue;
                  }
                  if (shadow1.autoUpdate === false && shadow1.needsUpdate === false) continue;
                  _shadowMapSize1.copy(shadow1.mapSize);
                  const shadowFrameExtents1 = shadow1.getFrameExtents();
                  _shadowMapSize1.multiply(shadowFrameExtents1);
                  _viewportSize1.copy(shadow1.mapSize);
                  if (_shadowMapSize1.x > _maxTextureSize1 || _shadowMapSize1.y > _maxTextureSize1) {
                      if (_shadowMapSize1.x > _maxTextureSize1) {
                          _viewportSize1.x = Math.floor(_maxTextureSize1 / shadowFrameExtents1.x);
                          _shadowMapSize1.x = _viewportSize1.x * shadowFrameExtents1.x;
                          shadow1.mapSize.x = _viewportSize1.x;
                      }
                      if (_shadowMapSize1.y > _maxTextureSize1) {
                          _viewportSize1.y = Math.floor(_maxTextureSize1 / shadowFrameExtents1.y);
                          _shadowMapSize1.y = _viewportSize1.y * shadowFrameExtents1.y;
                          shadow1.mapSize.y = _viewportSize1.y;
                      }
                  }
                  if (shadow1.map === null && !shadow1.isPointLightShadow && this.type === VSMShadowMap) {
                      const pars1 = {
                          minFilter: LinearFilter,
                          magFilter: LinearFilter,
                          format: RGBAFormat
                      };
                      shadow1.map = new WebGLRenderTarget(_shadowMapSize1.x, _shadowMapSize1.y, pars1);
                      shadow1.map.texture.name = light1.name + ".shadowMap";
                      shadow1.mapPass = new WebGLRenderTarget(_shadowMapSize1.x, _shadowMapSize1.y, pars1);
                      shadow1.camera.updateProjectionMatrix();
                  }
                  if (shadow1.map === null) {
                      const pars1 = {
                          minFilter: NearestFilter,
                          magFilter: NearestFilter,
                          format: RGBAFormat
                      };
                      shadow1.map = new WebGLRenderTarget(_shadowMapSize1.x, _shadowMapSize1.y, pars1);
                      shadow1.map.texture.name = light1.name + ".shadowMap";
                      shadow1.camera.updateProjectionMatrix();
                  }
                  _renderer1.setRenderTarget(shadow1.map);
                  _renderer1.clear();
                  const viewportCount1 = shadow1.getViewportCount();
                  for(let vp1 = 0; vp1 < viewportCount1; vp1++){
                      const viewport1 = shadow1.getViewport(vp1);
                      _viewport1.set(_viewportSize1.x * viewport1.x, _viewportSize1.y * viewport1.y, _viewportSize1.x * viewport1.z, _viewportSize1.y * viewport1.w);
                      _state1.viewport(_viewport1);
                      shadow1.updateMatrices(light1, vp1);
                      _frustum1 = shadow1.getFrustum();
                      renderObject1(scene1, camera1, shadow1.camera, light1, this.type);
                  }
                  // do blur pass for VSM
                  if (!shadow1.isPointLightShadow && this.type === VSMShadowMap) VSMPass1(shadow1, camera1);
                  shadow1.needsUpdate = false;
              }
              scope1.needsUpdate = false;
              _renderer1.setRenderTarget(currentRenderTarget1, activeCubeFace1, activeMipmapLevel1);
          };
          function VSMPass1(shadow1, camera1) {
              const geometry1 = _objects1.update(fullScreenMesh1);
              if (shadowMaterialVertical1.defines.VSM_SAMPLES !== shadow1.blurSamples) {
                  shadowMaterialVertical1.defines.VSM_SAMPLES = shadow1.blurSamples;
                  shadowMaterialHorizontal1.defines.VSM_SAMPLES = shadow1.blurSamples;
                  shadowMaterialVertical1.needsUpdate = true;
                  shadowMaterialHorizontal1.needsUpdate = true;
              }
              // vertical pass
              shadowMaterialVertical1.uniforms.shadow_pass.value = shadow1.map.texture;
              shadowMaterialVertical1.uniforms.resolution.value = shadow1.mapSize;
              shadowMaterialVertical1.uniforms.radius.value = shadow1.radius;
              _renderer1.setRenderTarget(shadow1.mapPass);
              _renderer1.clear();
              _renderer1.renderBufferDirect(camera1, null, geometry1, shadowMaterialVertical1, fullScreenMesh1, null);
              // horizontal pass
              shadowMaterialHorizontal1.uniforms.shadow_pass.value = shadow1.mapPass.texture;
              shadowMaterialHorizontal1.uniforms.resolution.value = shadow1.mapSize;
              shadowMaterialHorizontal1.uniforms.radius.value = shadow1.radius;
              _renderer1.setRenderTarget(shadow1.map);
              _renderer1.clear();
              _renderer1.renderBufferDirect(camera1, null, geometry1, shadowMaterialHorizontal1, fullScreenMesh1, null);
          }
          function getDepthMaterial1(object1, material1, light1, shadowCameraNear1, shadowCameraFar1, type1) {
              let result1 = null;
              const customMaterial1 = light1.isPointLight === true ? object1.customDistanceMaterial : object1.customDepthMaterial;
              if (customMaterial1 !== undefined) result1 = customMaterial1;
              else result1 = light1.isPointLight === true ? _distanceMaterial1 : _depthMaterial1;
              if (_renderer1.localClippingEnabled && material1.clipShadows === true && material1.clippingPlanes.length !== 0 || material1.displacementMap && material1.displacementScale !== 0 || material1.alphaMap && material1.alphaTest > 0) {
                  // in this case we need a unique material instance reflecting the
                  // appropriate state
                  const keyA1 = result1.uuid, keyB1 = material1.uuid;
                  let materialsForVariant1 = _materialCache1[keyA1];
                  if (materialsForVariant1 === undefined) {
                      materialsForVariant1 = {};
                      _materialCache1[keyA1] = materialsForVariant1;
                  }
                  let cachedMaterial1 = materialsForVariant1[keyB1];
                  if (cachedMaterial1 === undefined) {
                      cachedMaterial1 = result1.clone();
                      materialsForVariant1[keyB1] = cachedMaterial1;
                  }
                  result1 = cachedMaterial1;
              }
              result1.visible = material1.visible;
              result1.wireframe = material1.wireframe;
              if (type1 === VSMShadowMap) result1.side = material1.shadowSide !== null ? material1.shadowSide : material1.side;
              else result1.side = material1.shadowSide !== null ? material1.shadowSide : shadowSide1[material1.side];
              result1.alphaMap = material1.alphaMap;
              result1.alphaTest = material1.alphaTest;
              result1.clipShadows = material1.clipShadows;
              result1.clippingPlanes = material1.clippingPlanes;
              result1.clipIntersection = material1.clipIntersection;
              result1.displacementMap = material1.displacementMap;
              result1.displacementScale = material1.displacementScale;
              result1.displacementBias = material1.displacementBias;
              result1.wireframeLinewidth = material1.wireframeLinewidth;
              result1.linewidth = material1.linewidth;
              if (light1.isPointLight === true && result1.isMeshDistanceMaterial === true) {
                  result1.referencePosition.setFromMatrixPosition(light1.matrixWorld);
                  result1.nearDistance = shadowCameraNear1;
                  result1.farDistance = shadowCameraFar1;
              }
              return result1;
          }
          function renderObject1(object1, camera1, shadowCamera1, light1, type1) {
              if (object1.visible === false) return;
              const visible1 = object1.layers.test(camera1.layers);
              if (visible1 && (object1.isMesh || object1.isLine || object1.isPoints)) {
                  if ((object1.castShadow || object1.receiveShadow && type1 === VSMShadowMap) && (!object1.frustumCulled || _frustum1.intersectsObject(object1))) {
                      object1.modelViewMatrix.multiplyMatrices(shadowCamera1.matrixWorldInverse, object1.matrixWorld);
                      const geometry1 = _objects1.update(object1);
                      const material1 = object1.material;
                      if (Array.isArray(material1)) {
                          const groups1 = geometry1.groups;
                          for(let k1 = 0, kl1 = groups1.length; k1 < kl1; k1++){
                              const group1 = groups1[k1];
                              const groupMaterial1 = material1[group1.materialIndex];
                              if (groupMaterial1 && groupMaterial1.visible) {
                                  const depthMaterial1 = getDepthMaterial1(object1, groupMaterial1, light1, shadowCamera1.near, shadowCamera1.far, type1);
                                  _renderer1.renderBufferDirect(shadowCamera1, null, geometry1, depthMaterial1, object1, group1);
                              }
                          }
                      } else if (material1.visible) {
                          const depthMaterial1 = getDepthMaterial1(object1, material1, light1, shadowCamera1.near, shadowCamera1.far, type1);
                          _renderer1.renderBufferDirect(shadowCamera1, null, geometry1, depthMaterial1, object1, null);
                      }
                  }
              }
              const children1 = object1.children;
              for(let i3 = 0, l1 = children1.length; i3 < l1; i3++)renderObject1(children1[i3], camera1, shadowCamera1, light1, type1);
          }
      }
      function WebGLState(gl1, extensions1, capabilities1) {
          const isWebGL21 = capabilities1.isWebGL2;
          function ColorBuffer1() {
              let locked1 = false;
              const color3 = new Vector4$1();
              let currentColorMask1 = null;
              const currentColorClear1 = new Vector4$1(0, 0, 0, 0);
              return {
                  setMask: function(colorMask1) {
                      if (currentColorMask1 !== colorMask1 && !locked1) {
                          gl1.colorMask(colorMask1, colorMask1, colorMask1, colorMask1);
                          currentColorMask1 = colorMask1;
                      }
                  },
                  setLocked: function(lock1) {
                      locked1 = lock1;
                  },
                  setClear: function(r1, g1, b3, a3, premultipliedAlpha1) {
                      if (premultipliedAlpha1 === true) {
                          r1 *= a3;
                          g1 *= a3;
                          b3 *= a3;
                      }
                      color3.set(r1, g1, b3, a3);
                      if (currentColorClear1.equals(color3) === false) {
                          gl1.clearColor(r1, g1, b3, a3);
                          currentColorClear1.copy(color3);
                      }
                  },
                  reset: function() {
                      locked1 = false;
                      currentColorMask1 = null;
                      currentColorClear1.set(-1, 0, 0, 0); // set to invalid state
                  }
              };
          }
          function DepthBuffer1() {
              let locked1 = false;
              let currentDepthMask1 = null;
              let currentDepthFunc1 = null;
              let currentDepthClear1 = null;
              return {
                  setTest: function(depthTest1) {
                      if (depthTest1) enable1(2929);
                      else disable1(2929);
                  },
                  setMask: function(depthMask1) {
                      if (currentDepthMask1 !== depthMask1 && !locked1) {
                          gl1.depthMask(depthMask1);
                          currentDepthMask1 = depthMask1;
                      }
                  },
                  setFunc: function(depthFunc1) {
                      if (currentDepthFunc1 !== depthFunc1) {
                          if (depthFunc1) switch(depthFunc1){
                              case NeverDepth:
                                  gl1.depthFunc(512);
                                  break;
                              case AlwaysDepth:
                                  gl1.depthFunc(519);
                                  break;
                              case LessDepth:
                                  gl1.depthFunc(513);
                                  break;
                              case LessEqualDepth:
                                  gl1.depthFunc(515);
                                  break;
                              case EqualDepth:
                                  gl1.depthFunc(514);
                                  break;
                              case GreaterEqualDepth:
                                  gl1.depthFunc(518);
                                  break;
                              case GreaterDepth:
                                  gl1.depthFunc(516);
                                  break;
                              case NotEqualDepth:
                                  gl1.depthFunc(517);
                                  break;
                              default:
                                  gl1.depthFunc(515);
                          }
                          else gl1.depthFunc(515);
                          currentDepthFunc1 = depthFunc1;
                      }
                  },
                  setLocked: function(lock1) {
                      locked1 = lock1;
                  },
                  setClear: function(depth1) {
                      if (currentDepthClear1 !== depth1) {
                          gl1.clearDepth(depth1);
                          currentDepthClear1 = depth1;
                      }
                  },
                  reset: function() {
                      locked1 = false;
                      currentDepthMask1 = null;
                      currentDepthFunc1 = null;
                      currentDepthClear1 = null;
                  }
              };
          }
          function StencilBuffer1() {
              let locked1 = false;
              let currentStencilMask1 = null;
              let currentStencilFunc1 = null;
              let currentStencilRef1 = null;
              let currentStencilFuncMask1 = null;
              let currentStencilFail1 = null;
              let currentStencilZFail1 = null;
              let currentStencilZPass1 = null;
              let currentStencilClear1 = null;
              return {
                  setTest: function(stencilTest1) {
                      if (!locked1) {
                          if (stencilTest1) enable1(2960);
                          else disable1(2960);
                      }
                  },
                  setMask: function(stencilMask1) {
                      if (currentStencilMask1 !== stencilMask1 && !locked1) {
                          gl1.stencilMask(stencilMask1);
                          currentStencilMask1 = stencilMask1;
                      }
                  },
                  setFunc: function(stencilFunc1, stencilRef1, stencilMask1) {
                      if (currentStencilFunc1 !== stencilFunc1 || currentStencilRef1 !== stencilRef1 || currentStencilFuncMask1 !== stencilMask1) {
                          gl1.stencilFunc(stencilFunc1, stencilRef1, stencilMask1);
                          currentStencilFunc1 = stencilFunc1;
                          currentStencilRef1 = stencilRef1;
                          currentStencilFuncMask1 = stencilMask1;
                      }
                  },
                  setOp: function(stencilFail1, stencilZFail1, stencilZPass1) {
                      if (currentStencilFail1 !== stencilFail1 || currentStencilZFail1 !== stencilZFail1 || currentStencilZPass1 !== stencilZPass1) {
                          gl1.stencilOp(stencilFail1, stencilZFail1, stencilZPass1);
                          currentStencilFail1 = stencilFail1;
                          currentStencilZFail1 = stencilZFail1;
                          currentStencilZPass1 = stencilZPass1;
                      }
                  },
                  setLocked: function(lock1) {
                      locked1 = lock1;
                  },
                  setClear: function(stencil1) {
                      if (currentStencilClear1 !== stencil1) {
                          gl1.clearStencil(stencil1);
                          currentStencilClear1 = stencil1;
                      }
                  },
                  reset: function() {
                      locked1 = false;
                      currentStencilMask1 = null;
                      currentStencilFunc1 = null;
                      currentStencilRef1 = null;
                      currentStencilFuncMask1 = null;
                      currentStencilFail1 = null;
                      currentStencilZFail1 = null;
                      currentStencilZPass1 = null;
                      currentStencilClear1 = null;
                  }
              };
          }
          //
          const colorBuffer1 = new ColorBuffer1();
          const depthBuffer1 = new DepthBuffer1();
          const stencilBuffer1 = new StencilBuffer1();
          let enabledCapabilities1 = {};
          let currentBoundFramebuffers1 = {};
          let currentDrawbuffers1 = new WeakMap();
          let defaultDrawbuffers1 = [];
          let currentProgram1 = null;
          let currentBlendingEnabled1 = false;
          let currentBlending1 = null;
          let currentBlendEquation1 = null;
          let currentBlendSrc1 = null;
          let currentBlendDst1 = null;
          let currentBlendEquationAlpha1 = null;
          let currentBlendSrcAlpha1 = null;
          let currentBlendDstAlpha1 = null;
          let currentPremultipledAlpha1 = false;
          let currentFlipSided1 = null;
          let currentCullFace1 = null;
          let currentLineWidth1 = null;
          let currentPolygonOffsetFactor1 = null;
          let currentPolygonOffsetUnits1 = null;
          const maxTextures1 = gl1.getParameter(35661);
          let lineWidthAvailable1 = false;
          let version1 = 0;
          const glVersion1 = gl1.getParameter(7938);
          if (glVersion1.indexOf("WebGL") !== -1) {
              version1 = parseFloat(/^WebGL (\d)/.exec(glVersion1)[1]);
              lineWidthAvailable1 = version1 >= 1.0;
          } else if (glVersion1.indexOf("OpenGL ES") !== -1) {
              version1 = parseFloat(/^OpenGL ES (\d)/.exec(glVersion1)[1]);
              lineWidthAvailable1 = version1 >= 2.0;
          }
          let currentTextureSlot1 = null;
          let currentBoundTextures1 = {};
          const scissorParam1 = gl1.getParameter(3088);
          const viewportParam1 = gl1.getParameter(2978);
          const currentScissor1 = new Vector4$1().fromArray(scissorParam1);
          const currentViewport1 = new Vector4$1().fromArray(viewportParam1);
          function createTexture1(type1, target1, count1) {
              const data1 = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.
              const texture1 = gl1.createTexture();
              gl1.bindTexture(type1, texture1);
              gl1.texParameteri(type1, 10241, 9728);
              gl1.texParameteri(type1, 10240, 9728);
              for(let i3 = 0; i3 < count1; i3++)gl1.texImage2D(target1 + i3, 0, 6408, 1, 1, 0, 6408, 5121, data1);
              return texture1;
          }
          const emptyTextures1 = {};
          emptyTextures1[3553] = createTexture1(3553, 3553, 1);
          emptyTextures1[34067] = createTexture1(34067, 34069, 6);
          // init
          colorBuffer1.setClear(0, 0, 0, 1);
          depthBuffer1.setClear(1);
          stencilBuffer1.setClear(0);
          enable1(2929);
          depthBuffer1.setFunc(LessEqualDepth);
          setFlipSided1(false);
          setCullFace1(CullFaceBack);
          enable1(2884);
          setBlending1(NoBlending);
          //
          function enable1(id1) {
              if (enabledCapabilities1[id1] !== true) {
                  gl1.enable(id1);
                  enabledCapabilities1[id1] = true;
              }
          }
          function disable1(id1) {
              if (enabledCapabilities1[id1] !== false) {
                  gl1.disable(id1);
                  enabledCapabilities1[id1] = false;
              }
          }
          function bindFramebuffer1(target1, framebuffer1) {
              if (currentBoundFramebuffers1[target1] !== framebuffer1) {
                  gl1.bindFramebuffer(target1, framebuffer1);
                  currentBoundFramebuffers1[target1] = framebuffer1;
                  if (isWebGL21) {
                      // 36009 is equivalent to 36160
                      if (target1 === 36009) currentBoundFramebuffers1[36160] = framebuffer1;
                      if (target1 === 36160) currentBoundFramebuffers1[36009] = framebuffer1;
                  }
                  return true;
              }
              return false;
          }
          function drawBuffers1(renderTarget1, framebuffer1) {
              let drawBuffers1 = defaultDrawbuffers1;
              let needsUpdate1 = false;
              if (renderTarget1) {
                  drawBuffers1 = currentDrawbuffers1.get(framebuffer1);
                  if (drawBuffers1 === undefined) {
                      drawBuffers1 = [];
                      currentDrawbuffers1.set(framebuffer1, drawBuffers1);
                  }
                  if (renderTarget1.isWebGLMultipleRenderTargets) {
                      const textures1 = renderTarget1.texture;
                      if (drawBuffers1.length !== textures1.length || drawBuffers1[0] !== 36064) {
                          for(let i3 = 0, il1 = textures1.length; i3 < il1; i3++)drawBuffers1[i3] = 36064 + i3;
                          drawBuffers1.length = textures1.length;
                          needsUpdate1 = true;
                      }
                  } else if (drawBuffers1[0] !== 36064) {
                      drawBuffers1[0] = 36064;
                      needsUpdate1 = true;
                  }
              } else if (drawBuffers1[0] !== 1029) {
                  drawBuffers1[0] = 1029;
                  needsUpdate1 = true;
              }
              if (needsUpdate1) {
                  if (capabilities1.isWebGL2) gl1.drawBuffers(drawBuffers1);
                  else extensions1.get("WEBGL_draw_buffers").drawBuffersWEBGL(drawBuffers1);
              }
          }
          function useProgram1(program1) {
              if (currentProgram1 !== program1) {
                  gl1.useProgram(program1);
                  currentProgram1 = program1;
                  return true;
              }
              return false;
          }
          const equationToGL1 = {
              [AddEquation]: 32774,
              [SubtractEquation]: 32778,
              [ReverseSubtractEquation]: 32779
          };
          if (isWebGL21) {
              equationToGL1[MinEquation] = 32775;
              equationToGL1[MaxEquation] = 32776;
          } else {
              const extension1 = extensions1.get("EXT_blend_minmax");
              if (extension1 !== null) {
                  equationToGL1[MinEquation] = extension1.MIN_EXT;
                  equationToGL1[MaxEquation] = extension1.MAX_EXT;
              }
          }
          const factorToGL1 = {
              [ZeroFactor]: 0,
              [OneFactor]: 1,
              [SrcColorFactor]: 768,
              [SrcAlphaFactor]: 770,
              [SrcAlphaSaturateFactor]: 776,
              [DstColorFactor]: 774,
              [DstAlphaFactor]: 772,
              [OneMinusSrcColorFactor]: 769,
              [OneMinusSrcAlphaFactor]: 771,
              [OneMinusDstColorFactor]: 775,
              [OneMinusDstAlphaFactor]: 773
          };
          function setBlending1(blending1, blendEquation1, blendSrc1, blendDst1, blendEquationAlpha1, blendSrcAlpha1, blendDstAlpha1, premultipliedAlpha1) {
              if (blending1 === NoBlending) {
                  if (currentBlendingEnabled1 === true) {
                      disable1(3042);
                      currentBlendingEnabled1 = false;
                  }
                  return;
              }
              if (currentBlendingEnabled1 === false) {
                  enable1(3042);
                  currentBlendingEnabled1 = true;
              }
              if (blending1 !== CustomBlending) {
                  if (blending1 !== currentBlending1 || premultipliedAlpha1 !== currentPremultipledAlpha1) {
                      if (currentBlendEquation1 !== AddEquation || currentBlendEquationAlpha1 !== AddEquation) {
                          gl1.blendEquation(32774);
                          currentBlendEquation1 = AddEquation;
                          currentBlendEquationAlpha1 = AddEquation;
                      }
                      if (premultipliedAlpha1) switch(blending1){
                          case NormalBlending:
                              gl1.blendFuncSeparate(1, 771, 1, 771);
                              break;
                          case AdditiveBlending:
                              gl1.blendFunc(1, 1);
                              break;
                          case SubtractiveBlending:
                              gl1.blendFuncSeparate(0, 769, 0, 1);
                              break;
                          case MultiplyBlending:
                              gl1.blendFuncSeparate(0, 768, 0, 770);
                              break;
                          default:
                              console.error("THREE.WebGLState: Invalid blending: ", blending1);
                              break;
                      }
                      else switch(blending1){
                          case NormalBlending:
                              gl1.blendFuncSeparate(770, 771, 1, 771);
                              break;
                          case AdditiveBlending:
                              gl1.blendFunc(770, 1);
                              break;
                          case SubtractiveBlending:
                              gl1.blendFuncSeparate(0, 769, 0, 1);
                              break;
                          case MultiplyBlending:
                              gl1.blendFunc(0, 768);
                              break;
                          default:
                              console.error("THREE.WebGLState: Invalid blending: ", blending1);
                              break;
                      }
                      currentBlendSrc1 = null;
                      currentBlendDst1 = null;
                      currentBlendSrcAlpha1 = null;
                      currentBlendDstAlpha1 = null;
                      currentBlending1 = blending1;
                      currentPremultipledAlpha1 = premultipliedAlpha1;
                  }
                  return;
              }
              // custom blending
              blendEquationAlpha1 = blendEquationAlpha1 || blendEquation1;
              blendSrcAlpha1 = blendSrcAlpha1 || blendSrc1;
              blendDstAlpha1 = blendDstAlpha1 || blendDst1;
              if (blendEquation1 !== currentBlendEquation1 || blendEquationAlpha1 !== currentBlendEquationAlpha1) {
                  gl1.blendEquationSeparate(equationToGL1[blendEquation1], equationToGL1[blendEquationAlpha1]);
                  currentBlendEquation1 = blendEquation1;
                  currentBlendEquationAlpha1 = blendEquationAlpha1;
              }
              if (blendSrc1 !== currentBlendSrc1 || blendDst1 !== currentBlendDst1 || blendSrcAlpha1 !== currentBlendSrcAlpha1 || blendDstAlpha1 !== currentBlendDstAlpha1) {
                  gl1.blendFuncSeparate(factorToGL1[blendSrc1], factorToGL1[blendDst1], factorToGL1[blendSrcAlpha1], factorToGL1[blendDstAlpha1]);
                  currentBlendSrc1 = blendSrc1;
                  currentBlendDst1 = blendDst1;
                  currentBlendSrcAlpha1 = blendSrcAlpha1;
                  currentBlendDstAlpha1 = blendDstAlpha1;
              }
              currentBlending1 = blending1;
              currentPremultipledAlpha1 = null;
          }
          function setMaterial1(material1, frontFaceCW1) {
              material1.side === DoubleSide ? disable1(2884) : enable1(2884);
              let flipSided1 = material1.side === BackSide;
              if (frontFaceCW1) flipSided1 = !flipSided1;
              setFlipSided1(flipSided1);
              material1.blending === NormalBlending && material1.transparent === false ? setBlending1(NoBlending) : setBlending1(material1.blending, material1.blendEquation, material1.blendSrc, material1.blendDst, material1.blendEquationAlpha, material1.blendSrcAlpha, material1.blendDstAlpha, material1.premultipliedAlpha);
              depthBuffer1.setFunc(material1.depthFunc);
              depthBuffer1.setTest(material1.depthTest);
              depthBuffer1.setMask(material1.depthWrite);
              colorBuffer1.setMask(material1.colorWrite);
              const stencilWrite1 = material1.stencilWrite;
              stencilBuffer1.setTest(stencilWrite1);
              if (stencilWrite1) {
                  stencilBuffer1.setMask(material1.stencilWriteMask);
                  stencilBuffer1.setFunc(material1.stencilFunc, material1.stencilRef, material1.stencilFuncMask);
                  stencilBuffer1.setOp(material1.stencilFail, material1.stencilZFail, material1.stencilZPass);
              }
              setPolygonOffset1(material1.polygonOffset, material1.polygonOffsetFactor, material1.polygonOffsetUnits);
              material1.alphaToCoverage === true ? enable1(32926) : disable1(32926);
          }
          //
          function setFlipSided1(flipSided1) {
              if (currentFlipSided1 !== flipSided1) {
                  if (flipSided1) gl1.frontFace(2304);
                  else gl1.frontFace(2305);
                  currentFlipSided1 = flipSided1;
              }
          }
          function setCullFace1(cullFace1) {
              if (cullFace1 !== CullFaceNone) {
                  enable1(2884);
                  if (cullFace1 !== currentCullFace1) {
                      if (cullFace1 === CullFaceBack) gl1.cullFace(1029);
                      else if (cullFace1 === CullFaceFront) gl1.cullFace(1028);
                      else gl1.cullFace(1032);
                  }
              } else disable1(2884);
              currentCullFace1 = cullFace1;
          }
          function setLineWidth1(width1) {
              if (width1 !== currentLineWidth1) {
                  if (lineWidthAvailable1) gl1.lineWidth(width1);
                  currentLineWidth1 = width1;
              }
          }
          function setPolygonOffset1(polygonOffset1, factor1, units1) {
              if (polygonOffset1) {
                  enable1(32823);
                  if (currentPolygonOffsetFactor1 !== factor1 || currentPolygonOffsetUnits1 !== units1) {
                      gl1.polygonOffset(factor1, units1);
                      currentPolygonOffsetFactor1 = factor1;
                      currentPolygonOffsetUnits1 = units1;
                  }
              } else disable1(32823);
          }
          function setScissorTest1(scissorTest1) {
              if (scissorTest1) enable1(3089);
              else disable1(3089);
          }
          // texture
          function activeTexture1(webglSlot1) {
              if (webglSlot1 === undefined) webglSlot1 = 33984 + maxTextures1 - 1;
              if (currentTextureSlot1 !== webglSlot1) {
                  gl1.activeTexture(webglSlot1);
                  currentTextureSlot1 = webglSlot1;
              }
          }
          function bindTexture1(webglType1, webglTexture1) {
              if (currentTextureSlot1 === null) activeTexture1();
              let boundTexture1 = currentBoundTextures1[currentTextureSlot1];
              if (boundTexture1 === undefined) {
                  boundTexture1 = {
                      type: undefined,
                      texture: undefined
                  };
                  currentBoundTextures1[currentTextureSlot1] = boundTexture1;
              }
              if (boundTexture1.type !== webglType1 || boundTexture1.texture !== webglTexture1) {
                  gl1.bindTexture(webglType1, webglTexture1 || emptyTextures1[webglType1]);
                  boundTexture1.type = webglType1;
                  boundTexture1.texture = webglTexture1;
              }
          }
          function unbindTexture1() {
              const boundTexture1 = currentBoundTextures1[currentTextureSlot1];
              if (boundTexture1 !== undefined && boundTexture1.type !== undefined) {
                  gl1.bindTexture(boundTexture1.type, null);
                  boundTexture1.type = undefined;
                  boundTexture1.texture = undefined;
              }
          }
          function compressedTexImage2D1() {
              try {
                  gl1.compressedTexImage2D.apply(gl1, arguments);
              } catch (error1) {
                  console.error("THREE.WebGLState:", error1);
              }
          }
          function texSubImage2D1() {
              try {
                  gl1.texSubImage2D.apply(gl1, arguments);
              } catch (error1) {
                  console.error("THREE.WebGLState:", error1);
              }
          }
          function texSubImage3D1() {
              try {
                  gl1.texSubImage3D.apply(gl1, arguments);
              } catch (error1) {
                  console.error("THREE.WebGLState:", error1);
              }
          }
          function compressedTexSubImage2D1() {
              try {
                  gl1.compressedTexSubImage2D.apply(gl1, arguments);
              } catch (error1) {
                  console.error("THREE.WebGLState:", error1);
              }
          }
          function texStorage2D1() {
              try {
                  gl1.texStorage2D.apply(gl1, arguments);
              } catch (error1) {
                  console.error("THREE.WebGLState:", error1);
              }
          }
          function texStorage3D1() {
              try {
                  gl1.texStorage3D.apply(gl1, arguments);
              } catch (error1) {
                  console.error("THREE.WebGLState:", error1);
              }
          }
          function texImage2D1() {
              try {
                  gl1.texImage2D.apply(gl1, arguments);
              } catch (error1) {
                  console.error("THREE.WebGLState:", error1);
              }
          }
          function texImage3D1() {
              try {
                  gl1.texImage3D.apply(gl1, arguments);
              } catch (error1) {
                  console.error("THREE.WebGLState:", error1);
              }
          }
          //
          function scissor1(scissor1) {
              if (currentScissor1.equals(scissor1) === false) {
                  gl1.scissor(scissor1.x, scissor1.y, scissor1.z, scissor1.w);
                  currentScissor1.copy(scissor1);
              }
          }
          function viewport1(viewport1) {
              if (currentViewport1.equals(viewport1) === false) {
                  gl1.viewport(viewport1.x, viewport1.y, viewport1.z, viewport1.w);
                  currentViewport1.copy(viewport1);
              }
          }
          //
          function reset1() {
              // reset state
              gl1.disable(3042);
              gl1.disable(2884);
              gl1.disable(2929);
              gl1.disable(32823);
              gl1.disable(3089);
              gl1.disable(2960);
              gl1.disable(32926);
              gl1.blendEquation(32774);
              gl1.blendFunc(1, 0);
              gl1.blendFuncSeparate(1, 0, 1, 0);
              gl1.colorMask(true, true, true, true);
              gl1.clearColor(0, 0, 0, 0);
              gl1.depthMask(true);
              gl1.depthFunc(513);
              gl1.clearDepth(1);
              gl1.stencilMask(0xffffffff);
              gl1.stencilFunc(519, 0, 0xffffffff);
              gl1.stencilOp(7680, 7680, 7680);
              gl1.clearStencil(0);
              gl1.cullFace(1029);
              gl1.frontFace(2305);
              gl1.polygonOffset(0, 0);
              gl1.activeTexture(33984);
              gl1.bindFramebuffer(36160, null);
              if (isWebGL21 === true) {
                  gl1.bindFramebuffer(36009, null);
                  gl1.bindFramebuffer(36008, null);
              }
              gl1.useProgram(null);
              gl1.lineWidth(1);
              gl1.scissor(0, 0, gl1.canvas.width, gl1.canvas.height);
              gl1.viewport(0, 0, gl1.canvas.width, gl1.canvas.height);
              // reset internals
              enabledCapabilities1 = {};
              currentTextureSlot1 = null;
              currentBoundTextures1 = {};
              currentBoundFramebuffers1 = {};
              currentDrawbuffers1 = new WeakMap();
              defaultDrawbuffers1 = [];
              currentProgram1 = null;
              currentBlendingEnabled1 = false;
              currentBlending1 = null;
              currentBlendEquation1 = null;
              currentBlendSrc1 = null;
              currentBlendDst1 = null;
              currentBlendEquationAlpha1 = null;
              currentBlendSrcAlpha1 = null;
              currentBlendDstAlpha1 = null;
              currentPremultipledAlpha1 = false;
              currentFlipSided1 = null;
              currentCullFace1 = null;
              currentLineWidth1 = null;
              currentPolygonOffsetFactor1 = null;
              currentPolygonOffsetUnits1 = null;
              currentScissor1.set(0, 0, gl1.canvas.width, gl1.canvas.height);
              currentViewport1.set(0, 0, gl1.canvas.width, gl1.canvas.height);
              colorBuffer1.reset();
              depthBuffer1.reset();
              stencilBuffer1.reset();
          }
          return {
              buffers: {
                  color: colorBuffer1,
                  depth: depthBuffer1,
                  stencil: stencilBuffer1
              },
              enable: enable1,
              disable: disable1,
              bindFramebuffer: bindFramebuffer1,
              drawBuffers: drawBuffers1,
              useProgram: useProgram1,
              setBlending: setBlending1,
              setMaterial: setMaterial1,
              setFlipSided: setFlipSided1,
              setCullFace: setCullFace1,
              setLineWidth: setLineWidth1,
              setPolygonOffset: setPolygonOffset1,
              setScissorTest: setScissorTest1,
              activeTexture: activeTexture1,
              bindTexture: bindTexture1,
              unbindTexture: unbindTexture1,
              compressedTexImage2D: compressedTexImage2D1,
              texImage2D: texImage2D1,
              texImage3D: texImage3D1,
              texStorage2D: texStorage2D1,
              texStorage3D: texStorage3D1,
              texSubImage2D: texSubImage2D1,
              texSubImage3D: texSubImage3D1,
              compressedTexSubImage2D: compressedTexSubImage2D1,
              scissor: scissor1,
              viewport: viewport1,
              reset: reset1
          };
      }
      function WebGLTextures(_gl1, extensions1, state1, properties1, capabilities1, utils1, info1) {
          const isWebGL21 = capabilities1.isWebGL2;
          const maxTextures1 = capabilities1.maxTextures;
          const maxCubemapSize1 = capabilities1.maxCubemapSize;
          const maxTextureSize1 = capabilities1.maxTextureSize;
          const maxSamples1 = capabilities1.maxSamples;
          const multisampledRTTExt1 = extensions1.has("WEBGL_multisampled_render_to_texture") ? extensions1.get("WEBGL_multisampled_render_to_texture") : null;
          const _videoTextures1 = new WeakMap();
          let _canvas1;
          const _sources1 = new WeakMap(); // maps WebglTexture objects to instances of Source
          // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
          // also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
          // Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).
          let useOffscreenCanvas1 = false;
          try {
              useOffscreenCanvas1 = typeof OffscreenCanvas !== "undefined" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
          } catch (err1) {
          // Ignore any errors
          }
          function createCanvas1(width1, height1) {
              // Use OffscreenCanvas when available. Specially needed in web workers
              return useOffscreenCanvas1 ? new OffscreenCanvas(width1, height1) : createElementNS("canvas");
          }
          function resizeImage1(image1, needsPowerOfTwo1, needsNewCanvas1, maxSize1) {
              let scale1 = 1;
              // handle case if texture exceeds max size
              if (image1.width > maxSize1 || image1.height > maxSize1) scale1 = maxSize1 / Math.max(image1.width, image1.height);
              // only perform resize if necessary
              if (scale1 < 1 || needsPowerOfTwo1 === true) {
                  // only perform resize for certain image types
                  if (typeof HTMLImageElement !== "undefined" && image1 instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image1 instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image1 instanceof ImageBitmap) {
                      const floor1 = needsPowerOfTwo1 ? floorPowerOfTwo : Math.floor;
                      const width1 = floor1(scale1 * image1.width);
                      const height1 = floor1(scale1 * image1.height);
                      if (_canvas1 === undefined) _canvas1 = createCanvas1(width1, height1);
                      // cube textures can't reuse the same canvas
                      const canvas1 = needsNewCanvas1 ? createCanvas1(width1, height1) : _canvas1;
                      canvas1.width = width1;
                      canvas1.height = height1;
                      const context1 = canvas1.getContext("2d");
                      context1.drawImage(image1, 0, 0, width1, height1);
                      console.warn("THREE.WebGLRenderer: Texture has been resized from (" + image1.width + "x" + image1.height + ") to (" + width1 + "x" + height1 + ").");
                      return canvas1;
                  } else {
                      if ("data" in image1) console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + image1.width + "x" + image1.height + ").");
                      return image1;
                  }
              }
              return image1;
          }
          function isPowerOfTwo$11(image1) {
              return isPowerOfTwo(image1.width) && isPowerOfTwo(image1.height);
          }
          function textureNeedsPowerOfTwo1(texture1) {
              if (isWebGL21) return false;
              return texture1.wrapS !== ClampToEdgeWrapping || texture1.wrapT !== ClampToEdgeWrapping || texture1.minFilter !== NearestFilter && texture1.minFilter !== LinearFilter;
          }
          function textureNeedsGenerateMipmaps1(texture1, supportsMips1) {
              return texture1.generateMipmaps && supportsMips1 && texture1.minFilter !== NearestFilter && texture1.minFilter !== LinearFilter;
          }
          function generateMipmap1(target1) {
              _gl1.generateMipmap(target1);
          }
          function getInternalFormat1(internalFormatName1, glFormat1, glType1, encoding1, isVideoTexture1 = false) {
              if (isWebGL21 === false) return glFormat1;
              if (internalFormatName1 !== null) {
                  if (_gl1[internalFormatName1] !== undefined) return _gl1[internalFormatName1];
                  console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + internalFormatName1 + "'");
              }
              let internalFormat1 = glFormat1;
              if (glFormat1 === 6403) {
                  if (glType1 === 5126) internalFormat1 = 33326;
                  if (glType1 === 5131) internalFormat1 = 33325;
                  if (glType1 === 5121) internalFormat1 = 33321;
              }
              if (glFormat1 === 33319) {
                  if (glType1 === 5126) internalFormat1 = 33328;
                  if (glType1 === 5131) internalFormat1 = 33327;
                  if (glType1 === 5121) internalFormat1 = 33323;
              }
              if (glFormat1 === 6408) {
                  if (glType1 === 5126) internalFormat1 = 34836;
                  if (glType1 === 5131) internalFormat1 = 34842;
                  if (glType1 === 5121) internalFormat1 = encoding1 === sRGBEncoding && isVideoTexture1 === false ? 35907 : 32856;
                  if (glType1 === 32819) internalFormat1 = 32854;
                  if (glType1 === 32820) internalFormat1 = 32855;
              }
              if (internalFormat1 === 33325 || internalFormat1 === 33326 || internalFormat1 === 33327 || internalFormat1 === 33328 || internalFormat1 === 34842 || internalFormat1 === 34836) extensions1.get("EXT_color_buffer_float");
              return internalFormat1;
          }
          function getMipLevels1(texture1, image1, supportsMips1) {
              if (textureNeedsGenerateMipmaps1(texture1, supportsMips1) === true || texture1.isFramebufferTexture && texture1.minFilter !== NearestFilter && texture1.minFilter !== LinearFilter) return Math.log2(Math.max(image1.width, image1.height)) + 1;
              else if (texture1.mipmaps !== undefined && texture1.mipmaps.length > 0) // user-defined mipmaps
              return texture1.mipmaps.length;
              else if (texture1.isCompressedTexture && Array.isArray(texture1.image)) return image1.mipmaps.length;
              else // texture without mipmaps (only base level)
              return 1;
          }
          // Fallback filters for non-power-of-2 textures
          function filterFallback1(f1) {
              if (f1 === NearestFilter || f1 === NearestMipmapNearestFilter || f1 === NearestMipmapLinearFilter) return 9728;
              return 9729;
          }
          //
          function onTextureDispose1(event1) {
              const texture1 = event1.target;
              texture1.removeEventListener("dispose", onTextureDispose1);
              deallocateTexture1(texture1);
              if (texture1.isVideoTexture) _videoTextures1.delete(texture1);
          }
          function onRenderTargetDispose1(event1) {
              const renderTarget1 = event1.target;
              renderTarget1.removeEventListener("dispose", onRenderTargetDispose1);
              deallocateRenderTarget1(renderTarget1);
          }
          //
          function deallocateTexture1(texture1) {
              const textureProperties1 = properties1.get(texture1);
              if (textureProperties1.__webglInit === undefined) return;
              // check if it's necessary to remove the WebGLTexture object
              const source1 = texture1.source;
              const webglTextures1 = _sources1.get(source1);
              if (webglTextures1) {
                  const webglTexture1 = webglTextures1[textureProperties1.__cacheKey];
                  webglTexture1.usedTimes--;
                  // the WebGLTexture object is not used anymore, remove it
                  if (webglTexture1.usedTimes === 0) deleteTexture1(texture1);
                  // remove the weak map entry if no WebGLTexture uses the source anymore
                  if (Object.keys(webglTextures1).length === 0) _sources1.delete(source1);
              }
              properties1.remove(texture1);
          }
          function deleteTexture1(texture1) {
              const textureProperties1 = properties1.get(texture1);
              _gl1.deleteTexture(textureProperties1.__webglTexture);
              const source1 = texture1.source;
              const webglTextures1 = _sources1.get(source1);
              delete webglTextures1[textureProperties1.__cacheKey];
              info1.memory.textures--;
          }
          function deallocateRenderTarget1(renderTarget1) {
              const texture1 = renderTarget1.texture;
              const renderTargetProperties1 = properties1.get(renderTarget1);
              const textureProperties1 = properties1.get(texture1);
              if (textureProperties1.__webglTexture !== undefined) {
                  _gl1.deleteTexture(textureProperties1.__webglTexture);
                  info1.memory.textures--;
              }
              if (renderTarget1.depthTexture) renderTarget1.depthTexture.dispose();
              if (renderTarget1.isWebGLCubeRenderTarget) for(let i3 = 0; i3 < 6; i3++){
                  _gl1.deleteFramebuffer(renderTargetProperties1.__webglFramebuffer[i3]);
                  if (renderTargetProperties1.__webglDepthbuffer) _gl1.deleteRenderbuffer(renderTargetProperties1.__webglDepthbuffer[i3]);
              }
              else {
                  _gl1.deleteFramebuffer(renderTargetProperties1.__webglFramebuffer);
                  if (renderTargetProperties1.__webglDepthbuffer) _gl1.deleteRenderbuffer(renderTargetProperties1.__webglDepthbuffer);
                  if (renderTargetProperties1.__webglMultisampledFramebuffer) _gl1.deleteFramebuffer(renderTargetProperties1.__webglMultisampledFramebuffer);
                  if (renderTargetProperties1.__webglColorRenderbuffer) _gl1.deleteRenderbuffer(renderTargetProperties1.__webglColorRenderbuffer);
                  if (renderTargetProperties1.__webglDepthRenderbuffer) _gl1.deleteRenderbuffer(renderTargetProperties1.__webglDepthRenderbuffer);
              }
              if (renderTarget1.isWebGLMultipleRenderTargets) for(let i3 = 0, il1 = texture1.length; i3 < il1; i3++){
                  const attachmentProperties1 = properties1.get(texture1[i3]);
                  if (attachmentProperties1.__webglTexture) {
                      _gl1.deleteTexture(attachmentProperties1.__webglTexture);
                      info1.memory.textures--;
                  }
                  properties1.remove(texture1[i3]);
              }
              properties1.remove(texture1);
              properties1.remove(renderTarget1);
          }
          //
          let textureUnits1 = 0;
          function resetTextureUnits1() {
              textureUnits1 = 0;
          }
          function allocateTextureUnit1() {
              const textureUnit1 = textureUnits1;
              if (textureUnit1 >= maxTextures1) console.warn("THREE.WebGLTextures: Trying to use " + textureUnit1 + " texture units while this GPU supports only " + maxTextures1);
              textureUnits1 += 1;
              return textureUnit1;
          }
          function getTextureCacheKey1(texture1) {
              const array1 = [];
              array1.push(texture1.wrapS);
              array1.push(texture1.wrapT);
              array1.push(texture1.magFilter);
              array1.push(texture1.minFilter);
              array1.push(texture1.anisotropy);
              array1.push(texture1.internalFormat);
              array1.push(texture1.format);
              array1.push(texture1.type);
              array1.push(texture1.generateMipmaps);
              array1.push(texture1.premultiplyAlpha);
              array1.push(texture1.flipY);
              array1.push(texture1.unpackAlignment);
              array1.push(texture1.encoding);
              return array1.join();
          }
          //
          function setTexture2D1(texture1, slot1) {
              const textureProperties1 = properties1.get(texture1);
              if (texture1.isVideoTexture) updateVideoTexture1(texture1);
              if (texture1.isRenderTargetTexture === false && texture1.version > 0 && textureProperties1.__version !== texture1.version) {
                  const image1 = texture1.image;
                  if (image1 === null) console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
                  else if (image1.complete === false) console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
                  else {
                      uploadTexture1(textureProperties1, texture1, slot1);
                      return;
                  }
              }
              state1.activeTexture(33984 + slot1);
              state1.bindTexture(3553, textureProperties1.__webglTexture);
          }
          function setTexture2DArray1(texture1, slot1) {
              const textureProperties1 = properties1.get(texture1);
              if (texture1.version > 0 && textureProperties1.__version !== texture1.version) {
                  uploadTexture1(textureProperties1, texture1, slot1);
                  return;
              }
              state1.activeTexture(33984 + slot1);
              state1.bindTexture(35866, textureProperties1.__webglTexture);
          }
          function setTexture3D1(texture1, slot1) {
              const textureProperties1 = properties1.get(texture1);
              if (texture1.version > 0 && textureProperties1.__version !== texture1.version) {
                  uploadTexture1(textureProperties1, texture1, slot1);
                  return;
              }
              state1.activeTexture(33984 + slot1);
              state1.bindTexture(32879, textureProperties1.__webglTexture);
          }
          function setTextureCube1(texture1, slot1) {
              const textureProperties1 = properties1.get(texture1);
              if (texture1.version > 0 && textureProperties1.__version !== texture1.version) {
                  uploadCubeTexture1(textureProperties1, texture1, slot1);
                  return;
              }
              state1.activeTexture(33984 + slot1);
              state1.bindTexture(34067, textureProperties1.__webglTexture);
          }
          const wrappingToGL1 = {
              [RepeatWrapping]: 10497,
              [ClampToEdgeWrapping]: 33071,
              [MirroredRepeatWrapping]: 33648
          };
          const filterToGL1 = {
              [NearestFilter]: 9728,
              [NearestMipmapNearestFilter]: 9984,
              [NearestMipmapLinearFilter]: 9986,
              [LinearFilter]: 9729,
              [LinearMipmapNearestFilter]: 9985,
              [LinearMipmapLinearFilter]: 9987
          };
          function setTextureParameters1(textureType1, texture1, supportsMips1) {
              if (supportsMips1) {
                  _gl1.texParameteri(textureType1, 10242, wrappingToGL1[texture1.wrapS]);
                  _gl1.texParameteri(textureType1, 10243, wrappingToGL1[texture1.wrapT]);
                  if (textureType1 === 32879 || textureType1 === 35866) _gl1.texParameteri(textureType1, 32882, wrappingToGL1[texture1.wrapR]);
                  _gl1.texParameteri(textureType1, 10240, filterToGL1[texture1.magFilter]);
                  _gl1.texParameteri(textureType1, 10241, filterToGL1[texture1.minFilter]);
              } else {
                  _gl1.texParameteri(textureType1, 10242, 33071);
                  _gl1.texParameteri(textureType1, 10243, 33071);
                  if (textureType1 === 32879 || textureType1 === 35866) _gl1.texParameteri(textureType1, 32882, 33071);
                  if (texture1.wrapS !== ClampToEdgeWrapping || texture1.wrapT !== ClampToEdgeWrapping) console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.");
                  _gl1.texParameteri(textureType1, 10240, filterFallback1(texture1.magFilter));
                  _gl1.texParameteri(textureType1, 10241, filterFallback1(texture1.minFilter));
                  if (texture1.minFilter !== NearestFilter && texture1.minFilter !== LinearFilter) console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.");
              }
              if (extensions1.has("EXT_texture_filter_anisotropic") === true) {
                  const extension1 = extensions1.get("EXT_texture_filter_anisotropic");
                  if (texture1.type === FloatType && extensions1.has("OES_texture_float_linear") === false) return; // verify extension for WebGL 1 and WebGL 2
                  if (isWebGL21 === false && texture1.type === HalfFloatType && extensions1.has("OES_texture_half_float_linear") === false) return; // verify extension for WebGL 1 only
                  if (texture1.anisotropy > 1 || properties1.get(texture1).__currentAnisotropy) {
                      _gl1.texParameterf(textureType1, extension1.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture1.anisotropy, capabilities1.getMaxAnisotropy()));
                      properties1.get(texture1).__currentAnisotropy = texture1.anisotropy;
                  }
              }
          }
          function initTexture1(textureProperties1, texture1) {
              let forceUpload1 = false;
              if (textureProperties1.__webglInit === undefined) {
                  textureProperties1.__webglInit = true;
                  texture1.addEventListener("dispose", onTextureDispose1);
              }
              // create Source <-> WebGLTextures mapping if necessary
              const source1 = texture1.source;
              let webglTextures1 = _sources1.get(source1);
              if (webglTextures1 === undefined) {
                  webglTextures1 = {};
                  _sources1.set(source1, webglTextures1);
              }
              // check if there is already a WebGLTexture object for the given texture parameters
              const textureCacheKey1 = getTextureCacheKey1(texture1);
              if (textureCacheKey1 !== textureProperties1.__cacheKey) {
                  // if not, create a new instance of WebGLTexture
                  if (webglTextures1[textureCacheKey1] === undefined) {
                      // create new entry
                      webglTextures1[textureCacheKey1] = {
                          texture: _gl1.createTexture(),
                          usedTimes: 0
                      };
                      info1.memory.textures++;
                      // when a new instance of WebGLTexture was created, a texture upload is required
                      // even if the image contents are identical
                      forceUpload1 = true;
                  }
                  webglTextures1[textureCacheKey1].usedTimes++;
                  // every time the texture cache key changes, it's necessary to check if an instance of
                  // WebGLTexture can be deleted in order to avoid a memory leak.
                  const webglTexture1 = webglTextures1[textureProperties1.__cacheKey];
                  if (webglTexture1 !== undefined) {
                      webglTextures1[textureProperties1.__cacheKey].usedTimes--;
                      if (webglTexture1.usedTimes === 0) deleteTexture1(texture1);
                  }
                  // store references to cache key and WebGLTexture object
                  textureProperties1.__cacheKey = textureCacheKey1;
                  textureProperties1.__webglTexture = webglTextures1[textureCacheKey1].texture;
              }
              return forceUpload1;
          }
          function uploadTexture1(textureProperties1, texture1, slot1) {
              let textureType1 = 3553;
              if (texture1.isDataArrayTexture) textureType1 = 35866;
              if (texture1.isData3DTexture) textureType1 = 32879;
              const forceUpload1 = initTexture1(textureProperties1, texture1);
              const source1 = texture1.source;
              state1.activeTexture(33984 + slot1);
              state1.bindTexture(textureType1, textureProperties1.__webglTexture);
              if (source1.version !== source1.__currentVersion || forceUpload1 === true) {
                  _gl1.pixelStorei(37440, texture1.flipY);
                  _gl1.pixelStorei(37441, texture1.premultiplyAlpha);
                  _gl1.pixelStorei(3317, texture1.unpackAlignment);
                  _gl1.pixelStorei(37443, 0);
                  const needsPowerOfTwo1 = textureNeedsPowerOfTwo1(texture1) && isPowerOfTwo$11(texture1.image) === false;
                  let image1 = resizeImage1(texture1.image, needsPowerOfTwo1, false, maxTextureSize1);
                  image1 = verifyColorSpace1(texture1, image1);
                  const supportsMips1 = isPowerOfTwo$11(image1) || isWebGL21, glFormat1 = utils1.convert(texture1.format, texture1.encoding);
                  let glType1 = utils1.convert(texture1.type), glInternalFormat1 = getInternalFormat1(texture1.internalFormat, glFormat1, glType1, texture1.encoding, texture1.isVideoTexture);
                  setTextureParameters1(textureType1, texture1, supportsMips1);
                  let mipmap1;
                  const mipmaps1 = texture1.mipmaps;
                  const useTexStorage1 = isWebGL21 && texture1.isVideoTexture !== true;
                  const allocateMemory1 = textureProperties1.__version === undefined;
                  const levels1 = getMipLevels1(texture1, image1, supportsMips1);
                  if (texture1.isDepthTexture) {
                      // populate depth texture with dummy data
                      glInternalFormat1 = 6402;
                      if (isWebGL21) {
                          if (texture1.type === FloatType) glInternalFormat1 = 36012;
                          else if (texture1.type === UnsignedIntType) glInternalFormat1 = 33190;
                          else if (texture1.type === UnsignedInt248Type) glInternalFormat1 = 35056;
                          else glInternalFormat1 = 33189; // WebGL2 requires sized internalformat for glTexImage2D
                      } else if (texture1.type === FloatType) console.error("WebGLRenderer: Floating point depth texture requires WebGL2.");
                      // validation checks for WebGL 1
                      if (texture1.format === DepthFormat && glInternalFormat1 === 6402) // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
                      // DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
                      // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
                      {
                          if (texture1.type !== UnsignedShortType && texture1.type !== UnsignedIntType) {
                              console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.");
                              texture1.type = UnsignedShortType;
                              glType1 = utils1.convert(texture1.type);
                          }
                      }
                      if (texture1.format === DepthStencilFormat && glInternalFormat1 === 6402) {
                          // Depth stencil textures need the DEPTH_STENCIL internal format
                          // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
                          glInternalFormat1 = 34041;
                          // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
                          // DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
                          // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
                          if (texture1.type !== UnsignedInt248Type) {
                              console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.");
                              texture1.type = UnsignedInt248Type;
                              glType1 = utils1.convert(texture1.type);
                          }
                      }
                      //
                      if (useTexStorage1 && allocateMemory1) state1.texStorage2D(3553, 1, glInternalFormat1, image1.width, image1.height);
                      else state1.texImage2D(3553, 0, glInternalFormat1, image1.width, image1.height, 0, glFormat1, glType1, null);
                  } else if (texture1.isDataTexture) {
                      // use manually created mipmaps if available
                      // if there are no manual mipmaps
                      // set 0 level mipmap and then use GL to generate other mipmap levels
                      if (mipmaps1.length > 0 && supportsMips1) {
                          if (useTexStorage1 && allocateMemory1) state1.texStorage2D(3553, levels1, glInternalFormat1, mipmaps1[0].width, mipmaps1[0].height);
                          for(let i3 = 0, il1 = mipmaps1.length; i3 < il1; i3++){
                              mipmap1 = mipmaps1[i3];
                              if (useTexStorage1) state1.texSubImage2D(3553, i3, 0, 0, mipmap1.width, mipmap1.height, glFormat1, glType1, mipmap1.data);
                              else state1.texImage2D(3553, i3, glInternalFormat1, mipmap1.width, mipmap1.height, 0, glFormat1, glType1, mipmap1.data);
                          }
                          texture1.generateMipmaps = false;
                      } else if (useTexStorage1) {
                          if (allocateMemory1) state1.texStorage2D(3553, levels1, glInternalFormat1, image1.width, image1.height);
                          state1.texSubImage2D(3553, 0, 0, 0, image1.width, image1.height, glFormat1, glType1, image1.data);
                      } else state1.texImage2D(3553, 0, glInternalFormat1, image1.width, image1.height, 0, glFormat1, glType1, image1.data);
                  } else if (texture1.isCompressedTexture) {
                      if (useTexStorage1 && allocateMemory1) state1.texStorage2D(3553, levels1, glInternalFormat1, mipmaps1[0].width, mipmaps1[0].height);
                      for(let i3 = 0, il1 = mipmaps1.length; i3 < il1; i3++){
                          mipmap1 = mipmaps1[i3];
                          if (texture1.format !== RGBAFormat) {
                              if (glFormat1 !== null) {
                                  if (useTexStorage1) state1.compressedTexSubImage2D(3553, i3, 0, 0, mipmap1.width, mipmap1.height, glFormat1, mipmap1.data);
                                  else state1.compressedTexImage2D(3553, i3, glInternalFormat1, mipmap1.width, mipmap1.height, 0, mipmap1.data);
                              } else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
                          } else if (useTexStorage1) state1.texSubImage2D(3553, i3, 0, 0, mipmap1.width, mipmap1.height, glFormat1, glType1, mipmap1.data);
                          else state1.texImage2D(3553, i3, glInternalFormat1, mipmap1.width, mipmap1.height, 0, glFormat1, glType1, mipmap1.data);
                      }
                  } else if (texture1.isDataArrayTexture) {
                      if (useTexStorage1) {
                          if (allocateMemory1) state1.texStorage3D(35866, levels1, glInternalFormat1, image1.width, image1.height, image1.depth);
                          state1.texSubImage3D(35866, 0, 0, 0, 0, image1.width, image1.height, image1.depth, glFormat1, glType1, image1.data);
                      } else state1.texImage3D(35866, 0, glInternalFormat1, image1.width, image1.height, image1.depth, 0, glFormat1, glType1, image1.data);
                  } else if (texture1.isData3DTexture) {
                      if (useTexStorage1) {
                          if (allocateMemory1) state1.texStorage3D(32879, levels1, glInternalFormat1, image1.width, image1.height, image1.depth);
                          state1.texSubImage3D(32879, 0, 0, 0, 0, image1.width, image1.height, image1.depth, glFormat1, glType1, image1.data);
                      } else state1.texImage3D(32879, 0, glInternalFormat1, image1.width, image1.height, image1.depth, 0, glFormat1, glType1, image1.data);
                  } else if (texture1.isFramebufferTexture) {
                      if (useTexStorage1 && allocateMemory1) state1.texStorage2D(3553, levels1, glInternalFormat1, image1.width, image1.height);
                      else state1.texImage2D(3553, 0, glInternalFormat1, image1.width, image1.height, 0, glFormat1, glType1, null);
                  } else {
                      // regular Texture (image, video, canvas)
                      // use manually created mipmaps if available
                      // if there are no manual mipmaps
                      // set 0 level mipmap and then use GL to generate other mipmap levels
                      if (mipmaps1.length > 0 && supportsMips1) {
                          if (useTexStorage1 && allocateMemory1) state1.texStorage2D(3553, levels1, glInternalFormat1, mipmaps1[0].width, mipmaps1[0].height);
                          for(let i3 = 0, il1 = mipmaps1.length; i3 < il1; i3++){
                              mipmap1 = mipmaps1[i3];
                              if (useTexStorage1) state1.texSubImage2D(3553, i3, 0, 0, glFormat1, glType1, mipmap1);
                              else state1.texImage2D(3553, i3, glInternalFormat1, glFormat1, glType1, mipmap1);
                          }
                          texture1.generateMipmaps = false;
                      } else if (useTexStorage1) {
                          if (allocateMemory1) state1.texStorage2D(3553, levels1, glInternalFormat1, image1.width, image1.height);
                          state1.texSubImage2D(3553, 0, 0, 0, glFormat1, glType1, image1);
                      } else state1.texImage2D(3553, 0, glInternalFormat1, glFormat1, glType1, image1);
                  }
                  if (textureNeedsGenerateMipmaps1(texture1, supportsMips1)) generateMipmap1(textureType1);
                  source1.__currentVersion = source1.version;
                  if (texture1.onUpdate) texture1.onUpdate(texture1);
              }
              textureProperties1.__version = texture1.version;
          }
          function uploadCubeTexture1(textureProperties1, texture1, slot1) {
              if (texture1.image.length !== 6) return;
              const forceUpload1 = initTexture1(textureProperties1, texture1);
              const source1 = texture1.source;
              state1.activeTexture(33984 + slot1);
              state1.bindTexture(34067, textureProperties1.__webglTexture);
              if (source1.version !== source1.__currentVersion || forceUpload1 === true) {
                  _gl1.pixelStorei(37440, texture1.flipY);
                  _gl1.pixelStorei(37441, texture1.premultiplyAlpha);
                  _gl1.pixelStorei(3317, texture1.unpackAlignment);
                  _gl1.pixelStorei(37443, 0);
                  const isCompressed1 = texture1.isCompressedTexture || texture1.image[0].isCompressedTexture;
                  const isDataTexture1 = texture1.image[0] && texture1.image[0].isDataTexture;
                  const cubeImage1 = [];
                  for(let i3 = 0; i3 < 6; i3++){
                      if (!isCompressed1 && !isDataTexture1) cubeImage1[i3] = resizeImage1(texture1.image[i3], false, true, maxCubemapSize1);
                      else cubeImage1[i3] = isDataTexture1 ? texture1.image[i3].image : texture1.image[i3];
                      cubeImage1[i3] = verifyColorSpace1(texture1, cubeImage1[i3]);
                  }
                  const image1 = cubeImage1[0], supportsMips1 = isPowerOfTwo$11(image1) || isWebGL21, glFormat1 = utils1.convert(texture1.format, texture1.encoding), glType1 = utils1.convert(texture1.type), glInternalFormat1 = getInternalFormat1(texture1.internalFormat, glFormat1, glType1, texture1.encoding);
                  const useTexStorage1 = isWebGL21 && texture1.isVideoTexture !== true;
                  const allocateMemory1 = textureProperties1.__version === undefined;
                  let levels1 = getMipLevels1(texture1, image1, supportsMips1);
                  setTextureParameters1(34067, texture1, supportsMips1);
                  let mipmaps1;
                  if (isCompressed1) {
                      if (useTexStorage1 && allocateMemory1) state1.texStorage2D(34067, levels1, glInternalFormat1, image1.width, image1.height);
                      for(let i3 = 0; i3 < 6; i3++){
                          mipmaps1 = cubeImage1[i3].mipmaps;
                          for(let j1 = 0; j1 < mipmaps1.length; j1++){
                              const mipmap1 = mipmaps1[j1];
                              if (texture1.format !== RGBAFormat) {
                                  if (glFormat1 !== null) {
                                      if (useTexStorage1) state1.compressedTexSubImage2D(34069 + i3, j1, 0, 0, mipmap1.width, mipmap1.height, glFormat1, mipmap1.data);
                                      else state1.compressedTexImage2D(34069 + i3, j1, glInternalFormat1, mipmap1.width, mipmap1.height, 0, mipmap1.data);
                                  } else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()");
                              } else if (useTexStorage1) state1.texSubImage2D(34069 + i3, j1, 0, 0, mipmap1.width, mipmap1.height, glFormat1, glType1, mipmap1.data);
                              else state1.texImage2D(34069 + i3, j1, glInternalFormat1, mipmap1.width, mipmap1.height, 0, glFormat1, glType1, mipmap1.data);
                          }
                      }
                  } else {
                      mipmaps1 = texture1.mipmaps;
                      if (useTexStorage1 && allocateMemory1) {
                          // TODO: Uniformly handle mipmap definitions
                          // Normal textures and compressed cube textures define base level + mips with their mipmap array
                          // Uncompressed cube textures use their mipmap array only for mips (no base level)
                          if (mipmaps1.length > 0) levels1++;
                          state1.texStorage2D(34067, levels1, glInternalFormat1, cubeImage1[0].width, cubeImage1[0].height);
                      }
                      for(let i3 = 0; i3 < 6; i3++)if (isDataTexture1) {
                          if (useTexStorage1) state1.texSubImage2D(34069 + i3, 0, 0, 0, cubeImage1[i3].width, cubeImage1[i3].height, glFormat1, glType1, cubeImage1[i3].data);
                          else state1.texImage2D(34069 + i3, 0, glInternalFormat1, cubeImage1[i3].width, cubeImage1[i3].height, 0, glFormat1, glType1, cubeImage1[i3].data);
                          for(let j1 = 0; j1 < mipmaps1.length; j1++){
                              const mipmap1 = mipmaps1[j1];
                              const mipmapImage1 = mipmap1.image[i3].image;
                              if (useTexStorage1) state1.texSubImage2D(34069 + i3, j1 + 1, 0, 0, mipmapImage1.width, mipmapImage1.height, glFormat1, glType1, mipmapImage1.data);
                              else state1.texImage2D(34069 + i3, j1 + 1, glInternalFormat1, mipmapImage1.width, mipmapImage1.height, 0, glFormat1, glType1, mipmapImage1.data);
                          }
                      } else {
                          if (useTexStorage1) state1.texSubImage2D(34069 + i3, 0, 0, 0, glFormat1, glType1, cubeImage1[i3]);
                          else state1.texImage2D(34069 + i3, 0, glInternalFormat1, glFormat1, glType1, cubeImage1[i3]);
                          for(let j1 = 0; j1 < mipmaps1.length; j1++){
                              const mipmap1 = mipmaps1[j1];
                              if (useTexStorage1) state1.texSubImage2D(34069 + i3, j1 + 1, 0, 0, glFormat1, glType1, mipmap1.image[i3]);
                              else state1.texImage2D(34069 + i3, j1 + 1, glInternalFormat1, glFormat1, glType1, mipmap1.image[i3]);
                          }
                      }
                  }
                  if (textureNeedsGenerateMipmaps1(texture1, supportsMips1)) // We assume images for cube map have the same size.
                  generateMipmap1(34067);
                  source1.__currentVersion = source1.version;
                  if (texture1.onUpdate) texture1.onUpdate(texture1);
              }
              textureProperties1.__version = texture1.version;
          }
          // Render targets
          // Setup storage for target texture and bind it to correct framebuffer
          function setupFrameBufferTexture1(framebuffer1, renderTarget1, texture1, attachment1, textureTarget1) {
              const glFormat1 = utils1.convert(texture1.format, texture1.encoding);
              const glType1 = utils1.convert(texture1.type);
              const glInternalFormat1 = getInternalFormat1(texture1.internalFormat, glFormat1, glType1, texture1.encoding);
              const renderTargetProperties1 = properties1.get(renderTarget1);
              if (!renderTargetProperties1.__hasExternalTextures) {
                  if (textureTarget1 === 32879 || textureTarget1 === 35866) state1.texImage3D(textureTarget1, 0, glInternalFormat1, renderTarget1.width, renderTarget1.height, renderTarget1.depth, 0, glFormat1, glType1, null);
                  else state1.texImage2D(textureTarget1, 0, glInternalFormat1, renderTarget1.width, renderTarget1.height, 0, glFormat1, glType1, null);
              }
              state1.bindFramebuffer(36160, framebuffer1);
              if (useMultisampledRTT1(renderTarget1)) multisampledRTTExt1.framebufferTexture2DMultisampleEXT(36160, attachment1, textureTarget1, properties1.get(texture1).__webglTexture, 0, getRenderTargetSamples1(renderTarget1));
              else _gl1.framebufferTexture2D(36160, attachment1, textureTarget1, properties1.get(texture1).__webglTexture, 0);
              state1.bindFramebuffer(36160, null);
          }
          // Setup storage for internal depth/stencil buffers and bind to correct framebuffer
          function setupRenderBufferStorage1(renderbuffer1, renderTarget1, isMultisample1) {
              _gl1.bindRenderbuffer(36161, renderbuffer1);
              if (renderTarget1.depthBuffer && !renderTarget1.stencilBuffer) {
                  let glInternalFormat1 = 33189;
                  if (isMultisample1 || useMultisampledRTT1(renderTarget1)) {
                      const depthTexture1 = renderTarget1.depthTexture;
                      if (depthTexture1 && depthTexture1.isDepthTexture) {
                          if (depthTexture1.type === FloatType) glInternalFormat1 = 36012;
                          else if (depthTexture1.type === UnsignedIntType) glInternalFormat1 = 33190;
                      }
                      const samples1 = getRenderTargetSamples1(renderTarget1);
                      if (useMultisampledRTT1(renderTarget1)) multisampledRTTExt1.renderbufferStorageMultisampleEXT(36161, samples1, glInternalFormat1, renderTarget1.width, renderTarget1.height);
                      else _gl1.renderbufferStorageMultisample(36161, samples1, glInternalFormat1, renderTarget1.width, renderTarget1.height);
                  } else _gl1.renderbufferStorage(36161, glInternalFormat1, renderTarget1.width, renderTarget1.height);
                  _gl1.framebufferRenderbuffer(36160, 36096, 36161, renderbuffer1);
              } else if (renderTarget1.depthBuffer && renderTarget1.stencilBuffer) {
                  const samples1 = getRenderTargetSamples1(renderTarget1);
                  if (isMultisample1 && useMultisampledRTT1(renderTarget1) === false) _gl1.renderbufferStorageMultisample(36161, samples1, 35056, renderTarget1.width, renderTarget1.height);
                  else if (useMultisampledRTT1(renderTarget1)) multisampledRTTExt1.renderbufferStorageMultisampleEXT(36161, samples1, 35056, renderTarget1.width, renderTarget1.height);
                  else _gl1.renderbufferStorage(36161, 34041, renderTarget1.width, renderTarget1.height);
                  _gl1.framebufferRenderbuffer(36160, 33306, 36161, renderbuffer1);
              } else {
                  // Use the first texture for MRT so far
                  const texture1 = renderTarget1.isWebGLMultipleRenderTargets === true ? renderTarget1.texture[0] : renderTarget1.texture;
                  const glFormat1 = utils1.convert(texture1.format, texture1.encoding);
                  const glType1 = utils1.convert(texture1.type);
                  const glInternalFormat1 = getInternalFormat1(texture1.internalFormat, glFormat1, glType1, texture1.encoding);
                  const samples1 = getRenderTargetSamples1(renderTarget1);
                  if (isMultisample1 && useMultisampledRTT1(renderTarget1) === false) _gl1.renderbufferStorageMultisample(36161, samples1, glInternalFormat1, renderTarget1.width, renderTarget1.height);
                  else if (useMultisampledRTT1(renderTarget1)) multisampledRTTExt1.renderbufferStorageMultisampleEXT(36161, samples1, glInternalFormat1, renderTarget1.width, renderTarget1.height);
                  else _gl1.renderbufferStorage(36161, glInternalFormat1, renderTarget1.width, renderTarget1.height);
              }
              _gl1.bindRenderbuffer(36161, null);
          }
          // Setup resources for a Depth Texture for a FBO (needs an extension)
          function setupDepthTexture1(framebuffer1, renderTarget1) {
              const isCube1 = renderTarget1 && renderTarget1.isWebGLCubeRenderTarget;
              if (isCube1) throw new Error("Depth Texture with cube render targets is not supported");
              state1.bindFramebuffer(36160, framebuffer1);
              if (!(renderTarget1.depthTexture && renderTarget1.depthTexture.isDepthTexture)) throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
              // upload an empty depth texture with framebuffer size
              if (!properties1.get(renderTarget1.depthTexture).__webglTexture || renderTarget1.depthTexture.image.width !== renderTarget1.width || renderTarget1.depthTexture.image.height !== renderTarget1.height) {
                  renderTarget1.depthTexture.image.width = renderTarget1.width;
                  renderTarget1.depthTexture.image.height = renderTarget1.height;
                  renderTarget1.depthTexture.needsUpdate = true;
              }
              setTexture2D1(renderTarget1.depthTexture, 0);
              const webglDepthTexture1 = properties1.get(renderTarget1.depthTexture).__webglTexture;
              const samples1 = getRenderTargetSamples1(renderTarget1);
              if (renderTarget1.depthTexture.format === DepthFormat) {
                  if (useMultisampledRTT1(renderTarget1)) multisampledRTTExt1.framebufferTexture2DMultisampleEXT(36160, 36096, 3553, webglDepthTexture1, 0, samples1);
                  else _gl1.framebufferTexture2D(36160, 36096, 3553, webglDepthTexture1, 0);
              } else if (renderTarget1.depthTexture.format === DepthStencilFormat) {
                  if (useMultisampledRTT1(renderTarget1)) multisampledRTTExt1.framebufferTexture2DMultisampleEXT(36160, 33306, 3553, webglDepthTexture1, 0, samples1);
                  else _gl1.framebufferTexture2D(36160, 33306, 3553, webglDepthTexture1, 0);
              } else throw new Error("Unknown depthTexture format");
          }
          // Setup GL resources for a non-texture depth buffer
          function setupDepthRenderbuffer1(renderTarget1) {
              const renderTargetProperties1 = properties1.get(renderTarget1);
              const isCube1 = renderTarget1.isWebGLCubeRenderTarget === true;
              if (renderTarget1.depthTexture && !renderTargetProperties1.__autoAllocateDepthBuffer) {
                  if (isCube1) throw new Error("target.depthTexture not supported in Cube render targets");
                  setupDepthTexture1(renderTargetProperties1.__webglFramebuffer, renderTarget1);
              } else if (isCube1) {
                  renderTargetProperties1.__webglDepthbuffer = [];
                  for(let i3 = 0; i3 < 6; i3++){
                      state1.bindFramebuffer(36160, renderTargetProperties1.__webglFramebuffer[i3]);
                      renderTargetProperties1.__webglDepthbuffer[i3] = _gl1.createRenderbuffer();
                      setupRenderBufferStorage1(renderTargetProperties1.__webglDepthbuffer[i3], renderTarget1, false);
                  }
              } else {
                  state1.bindFramebuffer(36160, renderTargetProperties1.__webglFramebuffer);
                  renderTargetProperties1.__webglDepthbuffer = _gl1.createRenderbuffer();
                  setupRenderBufferStorage1(renderTargetProperties1.__webglDepthbuffer, renderTarget1, false);
              }
              state1.bindFramebuffer(36160, null);
          }
          // rebind framebuffer with external textures
          function rebindTextures1(renderTarget1, colorTexture1, depthTexture1) {
              const renderTargetProperties1 = properties1.get(renderTarget1);
              if (colorTexture1 !== undefined) setupFrameBufferTexture1(renderTargetProperties1.__webglFramebuffer, renderTarget1, renderTarget1.texture, 36064, 3553);
              if (depthTexture1 !== undefined) setupDepthRenderbuffer1(renderTarget1);
          }
          // Set up GL resources for the render target
          function setupRenderTarget1(renderTarget1) {
              const texture1 = renderTarget1.texture;
              const renderTargetProperties1 = properties1.get(renderTarget1);
              const textureProperties1 = properties1.get(texture1);
              renderTarget1.addEventListener("dispose", onRenderTargetDispose1);
              if (renderTarget1.isWebGLMultipleRenderTargets !== true) {
                  if (textureProperties1.__webglTexture === undefined) textureProperties1.__webglTexture = _gl1.createTexture();
                  textureProperties1.__version = texture1.version;
                  info1.memory.textures++;
              }
              const isCube1 = renderTarget1.isWebGLCubeRenderTarget === true;
              const isMultipleRenderTargets1 = renderTarget1.isWebGLMultipleRenderTargets === true;
              const supportsMips1 = isPowerOfTwo$11(renderTarget1) || isWebGL21;
              // Setup framebuffer
              if (isCube1) {
                  renderTargetProperties1.__webglFramebuffer = [];
                  for(let i3 = 0; i3 < 6; i3++)renderTargetProperties1.__webglFramebuffer[i3] = _gl1.createFramebuffer();
              } else {
                  renderTargetProperties1.__webglFramebuffer = _gl1.createFramebuffer();
                  if (isMultipleRenderTargets1) {
                      if (capabilities1.drawBuffers) {
                          const textures1 = renderTarget1.texture;
                          for(let i3 = 0, il1 = textures1.length; i3 < il1; i3++){
                              const attachmentProperties1 = properties1.get(textures1[i3]);
                              if (attachmentProperties1.__webglTexture === undefined) {
                                  attachmentProperties1.__webglTexture = _gl1.createTexture();
                                  info1.memory.textures++;
                              }
                          }
                      } else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");
                  } else if (isWebGL21 && renderTarget1.samples > 0 && useMultisampledRTT1(renderTarget1) === false) {
                      renderTargetProperties1.__webglMultisampledFramebuffer = _gl1.createFramebuffer();
                      renderTargetProperties1.__webglColorRenderbuffer = _gl1.createRenderbuffer();
                      _gl1.bindRenderbuffer(36161, renderTargetProperties1.__webglColorRenderbuffer);
                      const glFormat1 = utils1.convert(texture1.format, texture1.encoding);
                      const glType1 = utils1.convert(texture1.type);
                      const glInternalFormat1 = getInternalFormat1(texture1.internalFormat, glFormat1, glType1, texture1.encoding);
                      const samples1 = getRenderTargetSamples1(renderTarget1);
                      _gl1.renderbufferStorageMultisample(36161, samples1, glInternalFormat1, renderTarget1.width, renderTarget1.height);
                      state1.bindFramebuffer(36160, renderTargetProperties1.__webglMultisampledFramebuffer);
                      _gl1.framebufferRenderbuffer(36160, 36064, 36161, renderTargetProperties1.__webglColorRenderbuffer);
                      _gl1.bindRenderbuffer(36161, null);
                      if (renderTarget1.depthBuffer) {
                          renderTargetProperties1.__webglDepthRenderbuffer = _gl1.createRenderbuffer();
                          setupRenderBufferStorage1(renderTargetProperties1.__webglDepthRenderbuffer, renderTarget1, true);
                      }
                      state1.bindFramebuffer(36160, null);
                  }
              }
              // Setup color buffer
              if (isCube1) {
                  state1.bindTexture(34067, textureProperties1.__webglTexture);
                  setTextureParameters1(34067, texture1, supportsMips1);
                  for(let i3 = 0; i3 < 6; i3++)setupFrameBufferTexture1(renderTargetProperties1.__webglFramebuffer[i3], renderTarget1, texture1, 36064, 34069 + i3);
                  if (textureNeedsGenerateMipmaps1(texture1, supportsMips1)) generateMipmap1(34067);
                  state1.unbindTexture();
              } else if (isMultipleRenderTargets1) {
                  const textures1 = renderTarget1.texture;
                  for(let i3 = 0, il1 = textures1.length; i3 < il1; i3++){
                      const attachment1 = textures1[i3];
                      const attachmentProperties1 = properties1.get(attachment1);
                      state1.bindTexture(3553, attachmentProperties1.__webglTexture);
                      setTextureParameters1(3553, attachment1, supportsMips1);
                      setupFrameBufferTexture1(renderTargetProperties1.__webglFramebuffer, renderTarget1, attachment1, 36064 + i3, 3553);
                      if (textureNeedsGenerateMipmaps1(attachment1, supportsMips1)) generateMipmap1(3553);
                  }
                  state1.unbindTexture();
              } else {
                  let glTextureType1 = 3553;
                  if (renderTarget1.isWebGL3DRenderTarget || renderTarget1.isWebGLArrayRenderTarget) {
                      if (isWebGL21) glTextureType1 = renderTarget1.isWebGL3DRenderTarget ? 32879 : 35866;
                      else console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.");
                  }
                  state1.bindTexture(glTextureType1, textureProperties1.__webglTexture);
                  setTextureParameters1(glTextureType1, texture1, supportsMips1);
                  setupFrameBufferTexture1(renderTargetProperties1.__webglFramebuffer, renderTarget1, texture1, 36064, glTextureType1);
                  if (textureNeedsGenerateMipmaps1(texture1, supportsMips1)) generateMipmap1(glTextureType1);
                  state1.unbindTexture();
              }
              // Setup depth and stencil buffers
              if (renderTarget1.depthBuffer) setupDepthRenderbuffer1(renderTarget1);
          }
          function updateRenderTargetMipmap1(renderTarget1) {
              const supportsMips1 = isPowerOfTwo$11(renderTarget1) || isWebGL21;
              const textures1 = renderTarget1.isWebGLMultipleRenderTargets === true ? renderTarget1.texture : [
                  renderTarget1.texture
              ];
              for(let i3 = 0, il1 = textures1.length; i3 < il1; i3++){
                  const texture1 = textures1[i3];
                  if (textureNeedsGenerateMipmaps1(texture1, supportsMips1)) {
                      const target1 = renderTarget1.isWebGLCubeRenderTarget ? 34067 : 3553;
                      const webglTexture1 = properties1.get(texture1).__webglTexture;
                      state1.bindTexture(target1, webglTexture1);
                      generateMipmap1(target1);
                      state1.unbindTexture();
                  }
              }
          }
          function updateMultisampleRenderTarget1(renderTarget1) {
              if (isWebGL21 && renderTarget1.samples > 0 && useMultisampledRTT1(renderTarget1) === false) {
                  const width1 = renderTarget1.width;
                  const height1 = renderTarget1.height;
                  let mask1 = 16384;
                  const invalidationArray1 = [
                      36064
                  ];
                  const depthStyle1 = renderTarget1.stencilBuffer ? 33306 : 36096;
                  if (renderTarget1.depthBuffer) invalidationArray1.push(depthStyle1);
                  const renderTargetProperties1 = properties1.get(renderTarget1);
                  const ignoreDepthValues1 = renderTargetProperties1.__ignoreDepthValues !== undefined ? renderTargetProperties1.__ignoreDepthValues : false;
                  if (ignoreDepthValues1 === false) {
                      if (renderTarget1.depthBuffer) mask1 |= 256;
                      if (renderTarget1.stencilBuffer) mask1 |= 1024;
                  }
                  state1.bindFramebuffer(36008, renderTargetProperties1.__webglMultisampledFramebuffer);
                  state1.bindFramebuffer(36009, renderTargetProperties1.__webglFramebuffer);
                  if (ignoreDepthValues1 === true) {
                      _gl1.invalidateFramebuffer(36008, [
                          depthStyle1
                      ]);
                      _gl1.invalidateFramebuffer(36009, [
                          depthStyle1
                      ]);
                  }
                  _gl1.blitFramebuffer(0, 0, width1, height1, 0, 0, width1, height1, mask1, 9728);
                  _gl1.invalidateFramebuffer(36008, invalidationArray1);
                  state1.bindFramebuffer(36008, null);
                  state1.bindFramebuffer(36009, renderTargetProperties1.__webglMultisampledFramebuffer);
              }
          }
          function getRenderTargetSamples1(renderTarget1) {
              return Math.min(maxSamples1, renderTarget1.samples);
          }
          function useMultisampledRTT1(renderTarget1) {
              const renderTargetProperties1 = properties1.get(renderTarget1);
              return isWebGL21 && renderTarget1.samples > 0 && extensions1.has("WEBGL_multisampled_render_to_texture") === true && renderTargetProperties1.__useRenderToTexture !== false;
          }
          function updateVideoTexture1(texture1) {
              const frame1 = info1.render.frame;
              // Check the last frame we updated the VideoTexture
              if (_videoTextures1.get(texture1) !== frame1) {
                  _videoTextures1.set(texture1, frame1);
                  texture1.update();
              }
          }
          function verifyColorSpace1(texture1, image1) {
              const encoding1 = texture1.encoding;
              const format1 = texture1.format;
              const type1 = texture1.type;
              if (texture1.isCompressedTexture === true || texture1.isVideoTexture === true || texture1.format === _SRGBAFormat) return image1;
              if (encoding1 !== LinearEncoding) {
                  // sRGB
                  if (encoding1 === sRGBEncoding) {
                      if (isWebGL21 === false) {
                          // in WebGL 1, try to use EXT_sRGB extension and unsized formats
                          if (extensions1.has("EXT_sRGB") === true && format1 === RGBAFormat) {
                              texture1.format = _SRGBAFormat;
                              // it's not possible to generate mips in WebGL 1 with this extension
                              texture1.minFilter = LinearFilter;
                              texture1.generateMipmaps = false;
                          } else // slow fallback (CPU decode)
                          image1 = ImageUtils.sRGBToLinear(image1);
                      } else // in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format
                      if (format1 !== RGBAFormat || type1 !== UnsignedByteType) console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.");
                  } else console.error("THREE.WebGLTextures: Unsupported texture encoding:", encoding1);
              }
              return image1;
          }
          //
          this.allocateTextureUnit = allocateTextureUnit1;
          this.resetTextureUnits = resetTextureUnits1;
          this.setTexture2D = setTexture2D1;
          this.setTexture2DArray = setTexture2DArray1;
          this.setTexture3D = setTexture3D1;
          this.setTextureCube = setTextureCube1;
          this.rebindTextures = rebindTextures1;
          this.setupRenderTarget = setupRenderTarget1;
          this.updateRenderTargetMipmap = updateRenderTargetMipmap1;
          this.updateMultisampleRenderTarget = updateMultisampleRenderTarget1;
          this.setupDepthRenderbuffer = setupDepthRenderbuffer1;
          this.setupFrameBufferTexture = setupFrameBufferTexture1;
          this.useMultisampledRTT = useMultisampledRTT1;
      }
      function WebGLUtils(gl1, extensions1, capabilities1) {
          const isWebGL21 = capabilities1.isWebGL2;
          function convert1(p6, encoding1 = null) {
              let extension1;
              if (p6 === UnsignedByteType) return 5121;
              if (p6 === UnsignedShort4444Type) return 32819;
              if (p6 === UnsignedShort5551Type) return 32820;
              if (p6 === ByteType) return 5120;
              if (p6 === ShortType) return 5122;
              if (p6 === UnsignedShortType) return 5123;
              if (p6 === IntType) return 5124;
              if (p6 === UnsignedIntType) return 5125;
              if (p6 === FloatType) return 5126;
              if (p6 === HalfFloatType) {
                  if (isWebGL21) return 5131;
                  extension1 = extensions1.get("OES_texture_half_float");
                  if (extension1 !== null) return extension1.HALF_FLOAT_OES;
                  else return null;
              }
              if (p6 === AlphaFormat) return 6406;
              if (p6 === RGBAFormat) return 6408;
              if (p6 === LuminanceFormat) return 6409;
              if (p6 === LuminanceAlphaFormat) return 6410;
              if (p6 === DepthFormat) return 6402;
              if (p6 === DepthStencilFormat) return 34041;
              if (p6 === RedFormat) return 6403;
              if (p6 === RGBFormat) {
                  console.warn("THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228");
                  return 6408;
              }
              // WebGL 1 sRGB fallback
              if (p6 === _SRGBAFormat) {
                  extension1 = extensions1.get("EXT_sRGB");
                  if (extension1 !== null) return extension1.SRGB_ALPHA_EXT;
                  else return null;
              }
              // WebGL2 formats.
              if (p6 === RedIntegerFormat) return 36244;
              if (p6 === RGFormat) return 33319;
              if (p6 === RGIntegerFormat) return 33320;
              if (p6 === RGBAIntegerFormat) return 36249;
              // S3TC
              if (p6 === RGB_S3TC_DXT1_Format || p6 === RGBA_S3TC_DXT1_Format || p6 === RGBA_S3TC_DXT3_Format || p6 === RGBA_S3TC_DXT5_Format) {
                  if (encoding1 === sRGBEncoding) {
                      extension1 = extensions1.get("WEBGL_compressed_texture_s3tc_srgb");
                      if (extension1 !== null) {
                          if (p6 === RGB_S3TC_DXT1_Format) return extension1.COMPRESSED_SRGB_S3TC_DXT1_EXT;
                          if (p6 === RGBA_S3TC_DXT1_Format) return extension1.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
                          if (p6 === RGBA_S3TC_DXT3_Format) return extension1.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
                          if (p6 === RGBA_S3TC_DXT5_Format) return extension1.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
                      } else return null;
                  } else {
                      extension1 = extensions1.get("WEBGL_compressed_texture_s3tc");
                      if (extension1 !== null) {
                          if (p6 === RGB_S3TC_DXT1_Format) return extension1.COMPRESSED_RGB_S3TC_DXT1_EXT;
                          if (p6 === RGBA_S3TC_DXT1_Format) return extension1.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                          if (p6 === RGBA_S3TC_DXT3_Format) return extension1.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                          if (p6 === RGBA_S3TC_DXT5_Format) return extension1.COMPRESSED_RGBA_S3TC_DXT5_EXT;
                      } else return null;
                  }
              }
              // PVRTC
              if (p6 === RGB_PVRTC_4BPPV1_Format || p6 === RGB_PVRTC_2BPPV1_Format || p6 === RGBA_PVRTC_4BPPV1_Format || p6 === RGBA_PVRTC_2BPPV1_Format) {
                  extension1 = extensions1.get("WEBGL_compressed_texture_pvrtc");
                  if (extension1 !== null) {
                      if (p6 === RGB_PVRTC_4BPPV1_Format) return extension1.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                      if (p6 === RGB_PVRTC_2BPPV1_Format) return extension1.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                      if (p6 === RGBA_PVRTC_4BPPV1_Format) return extension1.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                      if (p6 === RGBA_PVRTC_2BPPV1_Format) return extension1.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
                  } else return null;
              }
              // ETC1
              if (p6 === RGB_ETC1_Format) {
                  extension1 = extensions1.get("WEBGL_compressed_texture_etc1");
                  if (extension1 !== null) return extension1.COMPRESSED_RGB_ETC1_WEBGL;
                  else return null;
              }
              // ETC2
              if (p6 === RGB_ETC2_Format || p6 === RGBA_ETC2_EAC_Format) {
                  extension1 = extensions1.get("WEBGL_compressed_texture_etc");
                  if (extension1 !== null) {
                      if (p6 === RGB_ETC2_Format) return encoding1 === sRGBEncoding ? extension1.COMPRESSED_SRGB8_ETC2 : extension1.COMPRESSED_RGB8_ETC2;
                      if (p6 === RGBA_ETC2_EAC_Format) return encoding1 === sRGBEncoding ? extension1.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension1.COMPRESSED_RGBA8_ETC2_EAC;
                  } else return null;
              }
              // ASTC
              if (p6 === RGBA_ASTC_4x4_Format || p6 === RGBA_ASTC_5x4_Format || p6 === RGBA_ASTC_5x5_Format || p6 === RGBA_ASTC_6x5_Format || p6 === RGBA_ASTC_6x6_Format || p6 === RGBA_ASTC_8x5_Format || p6 === RGBA_ASTC_8x6_Format || p6 === RGBA_ASTC_8x8_Format || p6 === RGBA_ASTC_10x5_Format || p6 === RGBA_ASTC_10x6_Format || p6 === RGBA_ASTC_10x8_Format || p6 === RGBA_ASTC_10x10_Format || p6 === RGBA_ASTC_12x10_Format || p6 === RGBA_ASTC_12x12_Format) {
                  extension1 = extensions1.get("WEBGL_compressed_texture_astc");
                  if (extension1 !== null) {
                      if (p6 === RGBA_ASTC_4x4_Format) return encoding1 === sRGBEncoding ? extension1.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension1.COMPRESSED_RGBA_ASTC_4x4_KHR;
                      if (p6 === RGBA_ASTC_5x4_Format) return encoding1 === sRGBEncoding ? extension1.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension1.COMPRESSED_RGBA_ASTC_5x4_KHR;
                      if (p6 === RGBA_ASTC_5x5_Format) return encoding1 === sRGBEncoding ? extension1.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension1.COMPRESSED_RGBA_ASTC_5x5_KHR;
                      if (p6 === RGBA_ASTC_6x5_Format) return encoding1 === sRGBEncoding ? extension1.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension1.COMPRESSED_RGBA_ASTC_6x5_KHR;
                      if (p6 === RGBA_ASTC_6x6_Format) return encoding1 === sRGBEncoding ? extension1.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension1.COMPRESSED_RGBA_ASTC_6x6_KHR;
                      if (p6 === RGBA_ASTC_8x5_Format) return encoding1 === sRGBEncoding ? extension1.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension1.COMPRESSED_RGBA_ASTC_8x5_KHR;
                      if (p6 === RGBA_ASTC_8x6_Format) return encoding1 === sRGBEncoding ? extension1.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension1.COMPRESSED_RGBA_ASTC_8x6_KHR;
                      if (p6 === RGBA_ASTC_8x8_Format) return encoding1 === sRGBEncoding ? extension1.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension1.COMPRESSED_RGBA_ASTC_8x8_KHR;
                      if (p6 === RGBA_ASTC_10x5_Format) return encoding1 === sRGBEncoding ? extension1.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension1.COMPRESSED_RGBA_ASTC_10x5_KHR;
                      if (p6 === RGBA_ASTC_10x6_Format) return encoding1 === sRGBEncoding ? extension1.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension1.COMPRESSED_RGBA_ASTC_10x6_KHR;
                      if (p6 === RGBA_ASTC_10x8_Format) return encoding1 === sRGBEncoding ? extension1.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension1.COMPRESSED_RGBA_ASTC_10x8_KHR;
                      if (p6 === RGBA_ASTC_10x10_Format) return encoding1 === sRGBEncoding ? extension1.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension1.COMPRESSED_RGBA_ASTC_10x10_KHR;
                      if (p6 === RGBA_ASTC_12x10_Format) return encoding1 === sRGBEncoding ? extension1.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension1.COMPRESSED_RGBA_ASTC_12x10_KHR;
                      if (p6 === RGBA_ASTC_12x12_Format) return encoding1 === sRGBEncoding ? extension1.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension1.COMPRESSED_RGBA_ASTC_12x12_KHR;
                  } else return null;
              }
              // BPTC
              if (p6 === RGBA_BPTC_Format) {
                  extension1 = extensions1.get("EXT_texture_compression_bptc");
                  if (extension1 !== null) {
                      if (p6 === RGBA_BPTC_Format) return encoding1 === sRGBEncoding ? extension1.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension1.COMPRESSED_RGBA_BPTC_UNORM_EXT;
                  } else return null;
              }
              //
              if (p6 === UnsignedInt248Type) {
                  if (isWebGL21) return 34042;
                  extension1 = extensions1.get("WEBGL_depth_texture");
                  if (extension1 !== null) return extension1.UNSIGNED_INT_24_8_WEBGL;
                  else return null;
              }
          }
          return {
              convert: convert1
          };
      }
      class ArrayCamera extends PerspectiveCamera {
          constructor(array1 = []){
              super();
              this.cameras = array1;
          }
      }
      ArrayCamera.prototype.isArrayCamera = true;
      class Group extends Object3D {
          constructor(){
              super();
              this.type = "Group";
          }
      }
      Group.prototype.isGroup = true;
      const _moveEvent = {
          type: "move"
      };
      class WebXRController {
          constructor(){
              this._targetRay = null;
              this._grip = null;
              this._hand = null;
          }
          getHandSpace() {
              if (this._hand === null) {
                  this._hand = new Group();
                  this._hand.matrixAutoUpdate = false;
                  this._hand.visible = false;
                  this._hand.joints = {};
                  this._hand.inputState = {
                      pinching: false
                  };
              }
              return this._hand;
          }
          getTargetRaySpace() {
              if (this._targetRay === null) {
                  this._targetRay = new Group();
                  this._targetRay.matrixAutoUpdate = false;
                  this._targetRay.visible = false;
                  this._targetRay.hasLinearVelocity = false;
                  this._targetRay.linearVelocity = new Vector3();
                  this._targetRay.hasAngularVelocity = false;
                  this._targetRay.angularVelocity = new Vector3();
              }
              return this._targetRay;
          }
          getGripSpace() {
              if (this._grip === null) {
                  this._grip = new Group();
                  this._grip.matrixAutoUpdate = false;
                  this._grip.visible = false;
                  this._grip.hasLinearVelocity = false;
                  this._grip.linearVelocity = new Vector3();
                  this._grip.hasAngularVelocity = false;
                  this._grip.angularVelocity = new Vector3();
              }
              return this._grip;
          }
          dispatchEvent(event1) {
              if (this._targetRay !== null) this._targetRay.dispatchEvent(event1);
              if (this._grip !== null) this._grip.dispatchEvent(event1);
              if (this._hand !== null) this._hand.dispatchEvent(event1);
              return this;
          }
          disconnect(inputSource1) {
              this.dispatchEvent({
                  type: "disconnected",
                  data: inputSource1
              });
              if (this._targetRay !== null) this._targetRay.visible = false;
              if (this._grip !== null) this._grip.visible = false;
              if (this._hand !== null) this._hand.visible = false;
              return this;
          }
          update(inputSource1, frame1, referenceSpace1) {
              let inputPose1 = null;
              let gripPose1 = null;
              let handPose1 = null;
              const targetRay1 = this._targetRay;
              const grip1 = this._grip;
              const hand1 = this._hand;
              if (inputSource1 && frame1.session.visibilityState !== "visible-blurred") {
                  if (targetRay1 !== null) {
                      inputPose1 = frame1.getPose(inputSource1.targetRaySpace, referenceSpace1);
                      if (inputPose1 !== null) {
                          targetRay1.matrix.fromArray(inputPose1.transform.matrix);
                          targetRay1.matrix.decompose(targetRay1.position, targetRay1.rotation, targetRay1.scale);
                          if (inputPose1.linearVelocity) {
                              targetRay1.hasLinearVelocity = true;
                              targetRay1.linearVelocity.copy(inputPose1.linearVelocity);
                          } else targetRay1.hasLinearVelocity = false;
                          if (inputPose1.angularVelocity) {
                              targetRay1.hasAngularVelocity = true;
                              targetRay1.angularVelocity.copy(inputPose1.angularVelocity);
                          } else targetRay1.hasAngularVelocity = false;
                          this.dispatchEvent(_moveEvent);
                      }
                  }
                  if (hand1 && inputSource1.hand) {
                      handPose1 = true;
                      for (const inputjoint1 of inputSource1.hand.values()){
                          // Update the joints groups with the XRJoint poses
                          const jointPose1 = frame1.getJointPose(inputjoint1, referenceSpace1);
                          if (hand1.joints[inputjoint1.jointName] === undefined) {
                              // The transform of this joint will be updated with the joint pose on each frame
                              const joint1 = new Group();
                              joint1.matrixAutoUpdate = false;
                              joint1.visible = false;
                              hand1.joints[inputjoint1.jointName] = joint1;
                              // ??
                              hand1.add(joint1);
                          }
                          const joint1 = hand1.joints[inputjoint1.jointName];
                          if (jointPose1 !== null) {
                              joint1.matrix.fromArray(jointPose1.transform.matrix);
                              joint1.matrix.decompose(joint1.position, joint1.rotation, joint1.scale);
                              joint1.jointRadius = jointPose1.radius;
                          }
                          joint1.visible = jointPose1 !== null;
                      }
                      // Custom events
                      // Check pinchz
                      const indexTip1 = hand1.joints["index-finger-tip"];
                      const thumbTip1 = hand1.joints["thumb-tip"];
                      const distance1 = indexTip1.position.distanceTo(thumbTip1.position);
                      const distanceToPinch1 = 0.02;
                      const threshold1 = 0.005;
                      if (hand1.inputState.pinching && distance1 > distanceToPinch1 + threshold1) {
                          hand1.inputState.pinching = false;
                          this.dispatchEvent({
                              type: "pinchend",
                              handedness: inputSource1.handedness,
                              target: this
                          });
                      } else if (!hand1.inputState.pinching && distance1 <= distanceToPinch1 - threshold1) {
                          hand1.inputState.pinching = true;
                          this.dispatchEvent({
                              type: "pinchstart",
                              handedness: inputSource1.handedness,
                              target: this
                          });
                      }
                  } else if (grip1 !== null && inputSource1.gripSpace) {
                      gripPose1 = frame1.getPose(inputSource1.gripSpace, referenceSpace1);
                      if (gripPose1 !== null) {
                          grip1.matrix.fromArray(gripPose1.transform.matrix);
                          grip1.matrix.decompose(grip1.position, grip1.rotation, grip1.scale);
                          if (gripPose1.linearVelocity) {
                              grip1.hasLinearVelocity = true;
                              grip1.linearVelocity.copy(gripPose1.linearVelocity);
                          } else grip1.hasLinearVelocity = false;
                          if (gripPose1.angularVelocity) {
                              grip1.hasAngularVelocity = true;
                              grip1.angularVelocity.copy(gripPose1.angularVelocity);
                          } else grip1.hasAngularVelocity = false;
                      }
                  }
              }
              if (targetRay1 !== null) targetRay1.visible = inputPose1 !== null;
              if (grip1 !== null) grip1.visible = gripPose1 !== null;
              if (hand1 !== null) hand1.visible = handPose1 !== null;
              return this;
          }
      }
      class DepthTexture extends Texture {
          constructor(width1, height1, type1, mapping1, wrapS1, wrapT1, magFilter1, minFilter1, anisotropy1, format1){
              format1 = format1 !== undefined ? format1 : DepthFormat;
              if (format1 !== DepthFormat && format1 !== DepthStencilFormat) throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
              if (type1 === undefined && format1 === DepthFormat) type1 = UnsignedShortType;
              if (type1 === undefined && format1 === DepthStencilFormat) type1 = UnsignedInt248Type;
              super(null, mapping1, wrapS1, wrapT1, magFilter1, minFilter1, format1, type1, anisotropy1);
              this.image = {
                  width: width1,
                  height: height1
              };
              this.magFilter = magFilter1 !== undefined ? magFilter1 : NearestFilter;
              this.minFilter = minFilter1 !== undefined ? minFilter1 : NearestFilter;
              this.flipY = false;
              this.generateMipmaps = false;
          }
      }
      DepthTexture.prototype.isDepthTexture = true;
      class WebXRManager extends EventDispatcher {
          constructor(renderer1, gl1){
              super();
              const scope1 = this;
              let session1 = null;
              let framebufferScaleFactor1 = 1.0;
              let referenceSpace1 = null;
              let referenceSpaceType1 = "local-floor";
              let pose1 = null;
              let glBinding1 = null;
              let glProjLayer1 = null;
              let glBaseLayer1 = null;
              let xrFrame1 = null;
              const attributes1 = gl1.getContextAttributes();
              let initialRenderTarget1 = null;
              let newRenderTarget1 = null;
              const controllers1 = [];
              const inputSourcesMap1 = new Map();
              //
              const cameraL1 = new PerspectiveCamera();
              cameraL1.layers.enable(1);
              cameraL1.viewport = new Vector4$1();
              const cameraR1 = new PerspectiveCamera();
              cameraR1.layers.enable(2);
              cameraR1.viewport = new Vector4$1();
              const cameras1 = [
                  cameraL1,
                  cameraR1
              ];
              const cameraVR1 = new ArrayCamera();
              cameraVR1.layers.enable(1);
              cameraVR1.layers.enable(2);
              let _currentDepthNear1 = null;
              let _currentDepthFar1 = null;
              //
              this.cameraAutoUpdate = true;
              this.enabled = false;
              this.isPresenting = false;
              this.getController = function(index3) {
                  let controller1 = controllers1[index3];
                  if (controller1 === undefined) {
                      controller1 = new WebXRController();
                      controllers1[index3] = controller1;
                  }
                  return controller1.getTargetRaySpace();
              };
              this.getControllerGrip = function(index3) {
                  let controller1 = controllers1[index3];
                  if (controller1 === undefined) {
                      controller1 = new WebXRController();
                      controllers1[index3] = controller1;
                  }
                  return controller1.getGripSpace();
              };
              this.getHand = function(index3) {
                  let controller1 = controllers1[index3];
                  if (controller1 === undefined) {
                      controller1 = new WebXRController();
                      controllers1[index3] = controller1;
                  }
                  return controller1.getHandSpace();
              };
              //
              function onSessionEvent1(event1) {
                  const controller1 = inputSourcesMap1.get(event1.inputSource);
                  if (controller1) controller1.dispatchEvent({
                      type: event1.type,
                      data: event1.inputSource
                  });
              }
              function onSessionEnd1() {
                  inputSourcesMap1.forEach(function(controller1, inputSource1) {
                      controller1.disconnect(inputSource1);
                  });
                  inputSourcesMap1.clear();
                  _currentDepthNear1 = null;
                  _currentDepthFar1 = null;
                  // restore framebuffer/rendering state
                  renderer1.setRenderTarget(initialRenderTarget1);
                  glBaseLayer1 = null;
                  glProjLayer1 = null;
                  glBinding1 = null;
                  session1 = null;
                  newRenderTarget1 = null;
                  //
                  animation1.stop();
                  scope1.isPresenting = false;
                  scope1.dispatchEvent({
                      type: "sessionend"
                  });
              }
              this.setFramebufferScaleFactor = function(value1) {
                  framebufferScaleFactor1 = value1;
                  if (scope1.isPresenting === true) console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
              };
              this.setReferenceSpaceType = function(value1) {
                  referenceSpaceType1 = value1;
                  if (scope1.isPresenting === true) console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
              };
              this.getReferenceSpace = function() {
                  return referenceSpace1;
              };
              this.getBaseLayer = function() {
                  return glProjLayer1 !== null ? glProjLayer1 : glBaseLayer1;
              };
              this.getBinding = function() {
                  return glBinding1;
              };
              this.getFrame = function() {
                  return xrFrame1;
              };
              this.getSession = function() {
                  return session1;
              };
              this.setSession = async function(value1) {
                  session1 = value1;
                  if (session1 !== null) {
                      initialRenderTarget1 = renderer1.getRenderTarget();
                      session1.addEventListener("select", onSessionEvent1);
                      session1.addEventListener("selectstart", onSessionEvent1);
                      session1.addEventListener("selectend", onSessionEvent1);
                      session1.addEventListener("squeeze", onSessionEvent1);
                      session1.addEventListener("squeezestart", onSessionEvent1);
                      session1.addEventListener("squeezeend", onSessionEvent1);
                      session1.addEventListener("end", onSessionEnd1);
                      session1.addEventListener("inputsourceschange", onInputSourcesChange1);
                      if (attributes1.xrCompatible !== true) await gl1.makeXRCompatible();
                      if (session1.renderState.layers === undefined || renderer1.capabilities.isWebGL2 === false) {
                          const layerInit1 = {
                              antialias: session1.renderState.layers === undefined ? attributes1.antialias : true,
                              alpha: attributes1.alpha,
                              depth: attributes1.depth,
                              stencil: attributes1.stencil,
                              framebufferScaleFactor: framebufferScaleFactor1
                          };
                          glBaseLayer1 = new XRWebGLLayer(session1, gl1, layerInit1);
                          session1.updateRenderState({
                              baseLayer: glBaseLayer1
                          });
                          newRenderTarget1 = new WebGLRenderTarget(glBaseLayer1.framebufferWidth, glBaseLayer1.framebufferHeight, {
                              format: RGBAFormat,
                              type: UnsignedByteType,
                              encoding: renderer1.outputEncoding
                          });
                      } else {
                          let depthFormat1 = null;
                          let depthType1 = null;
                          let glDepthFormat1 = null;
                          if (attributes1.depth) {
                              glDepthFormat1 = attributes1.stencil ? 35056 : 33190;
                              depthFormat1 = attributes1.stencil ? DepthStencilFormat : DepthFormat;
                              depthType1 = attributes1.stencil ? UnsignedInt248Type : UnsignedShortType;
                          }
                          const projectionlayerInit1 = {
                              colorFormat: renderer1.outputEncoding === sRGBEncoding ? 35907 : 32856,
                              depthFormat: glDepthFormat1,
                              scaleFactor: framebufferScaleFactor1
                          };
                          glBinding1 = new XRWebGLBinding(session1, gl1);
                          glProjLayer1 = glBinding1.createProjectionLayer(projectionlayerInit1);
                          session1.updateRenderState({
                              layers: [
                                  glProjLayer1
                              ]
                          });
                          newRenderTarget1 = new WebGLRenderTarget(glProjLayer1.textureWidth, glProjLayer1.textureHeight, {
                              format: RGBAFormat,
                              type: UnsignedByteType,
                              depthTexture: new DepthTexture(glProjLayer1.textureWidth, glProjLayer1.textureHeight, depthType1, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat1),
                              stencilBuffer: attributes1.stencil,
                              encoding: renderer1.outputEncoding,
                              samples: attributes1.antialias ? 4 : 0
                          });
                          const renderTargetProperties1 = renderer1.properties.get(newRenderTarget1);
                          renderTargetProperties1.__ignoreDepthValues = glProjLayer1.ignoreDepthValues;
                      }
                      newRenderTarget1.isXRRenderTarget = true; // TODO Remove this when possible, see #23278
                      // Set foveation to maximum.
                      this.setFoveation(1.0);
                      referenceSpace1 = await session1.requestReferenceSpace(referenceSpaceType1);
                      animation1.setContext(session1);
                      animation1.start();
                      scope1.isPresenting = true;
                      scope1.dispatchEvent({
                          type: "sessionstart"
                      });
                  }
              };
              function onInputSourcesChange1(event1) {
                  const inputSources1 = session1.inputSources;
                  // Assign inputSources to available controllers
                  for(let i3 = 0; i3 < controllers1.length; i3++)inputSourcesMap1.set(inputSources1[i3], controllers1[i3]);
                  // Notify disconnected
                  for(let i3 = 0; i3 < event1.removed.length; i3++){
                      const inputSource1 = event1.removed[i3];
                      const controller1 = inputSourcesMap1.get(inputSource1);
                      if (controller1) {
                          controller1.dispatchEvent({
                              type: "disconnected",
                              data: inputSource1
                          });
                          inputSourcesMap1.delete(inputSource1);
                      }
                  }
                  // Notify connected
                  for(let i3 = 0; i3 < event1.added.length; i3++){
                      const inputSource1 = event1.added[i3];
                      const controller1 = inputSourcesMap1.get(inputSource1);
                      if (controller1) controller1.dispatchEvent({
                          type: "connected",
                          data: inputSource1
                      });
                  }
              }
              //
              const cameraLPos1 = new Vector3();
              const cameraRPos1 = new Vector3();
              /**
             * Assumes 2 cameras that are parallel and share an X-axis, and that
             * the cameras' projection and world matrices have already been set.
             * And that near and far planes are identical for both cameras.
             * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
             */ function setProjectionFromUnion1(camera1, cameraL1, cameraR1) {
                  cameraLPos1.setFromMatrixPosition(cameraL1.matrixWorld);
                  cameraRPos1.setFromMatrixPosition(cameraR1.matrixWorld);
                  const ipd1 = cameraLPos1.distanceTo(cameraRPos1);
                  const projL1 = cameraL1.projectionMatrix.elements;
                  const projR1 = cameraR1.projectionMatrix.elements;
                  // VR systems will have identical far and near planes, and
                  // most likely identical top and bottom frustum extents.
                  // Use the left camera for these values.
                  const near1 = projL1[14] / (projL1[10] - 1);
                  const far1 = projL1[14] / (projL1[10] + 1);
                  const topFov1 = (projL1[9] + 1) / projL1[5];
                  const bottomFov1 = (projL1[9] - 1) / projL1[5];
                  const leftFov1 = (projL1[8] - 1) / projL1[0];
                  const rightFov1 = (projR1[8] + 1) / projR1[0];
                  const left1 = near1 * leftFov1;
                  const right1 = near1 * rightFov1;
                  // Calculate the new camera's position offset from the
                  // left camera. xOffset should be roughly half `ipd`.
                  const zOffset1 = ipd1 / (-leftFov1 + rightFov1);
                  const xOffset1 = zOffset1 * -leftFov1;
                  // TODO: Better way to apply this offset?
                  cameraL1.matrixWorld.decompose(camera1.position, camera1.quaternion, camera1.scale);
                  camera1.translateX(xOffset1);
                  camera1.translateZ(zOffset1);
                  camera1.matrixWorld.compose(camera1.position, camera1.quaternion, camera1.scale);
                  camera1.matrixWorldInverse.copy(camera1.matrixWorld).invert();
                  // Find the union of the frustum values of the cameras and scale
                  // the values so that the near plane's position does not change in world space,
                  // although must now be relative to the new union camera.
                  const near21 = near1 + zOffset1;
                  const far21 = far1 + zOffset1;
                  const left21 = left1 - xOffset1;
                  const right21 = right1 + (ipd1 - xOffset1);
                  const top21 = topFov1 * far1 / far21 * near21;
                  const bottom21 = bottomFov1 * far1 / far21 * near21;
                  camera1.projectionMatrix.makePerspective(left21, right21, top21, bottom21, near21, far21);
              }
              function updateCamera1(camera1, parent1) {
                  if (parent1 === null) camera1.matrixWorld.copy(camera1.matrix);
                  else camera1.matrixWorld.multiplyMatrices(parent1.matrixWorld, camera1.matrix);
                  camera1.matrixWorldInverse.copy(camera1.matrixWorld).invert();
              }
              this.updateCamera = function(camera1) {
                  if (session1 === null) return;
                  cameraVR1.near = cameraR1.near = cameraL1.near = camera1.near;
                  cameraVR1.far = cameraR1.far = cameraL1.far = camera1.far;
                  if (_currentDepthNear1 !== cameraVR1.near || _currentDepthFar1 !== cameraVR1.far) {
                      // Note that the new renderState won't apply until the next frame. See #18320
                      session1.updateRenderState({
                          depthNear: cameraVR1.near,
                          depthFar: cameraVR1.far
                      });
                      _currentDepthNear1 = cameraVR1.near;
                      _currentDepthFar1 = cameraVR1.far;
                  }
                  const parent1 = camera1.parent;
                  const cameras1 = cameraVR1.cameras;
                  updateCamera1(cameraVR1, parent1);
                  for(let i3 = 0; i3 < cameras1.length; i3++)updateCamera1(cameras1[i3], parent1);
                  cameraVR1.matrixWorld.decompose(cameraVR1.position, cameraVR1.quaternion, cameraVR1.scale);
                  // update user camera and its children
                  camera1.position.copy(cameraVR1.position);
                  camera1.quaternion.copy(cameraVR1.quaternion);
                  camera1.scale.copy(cameraVR1.scale);
                  camera1.matrix.copy(cameraVR1.matrix);
                  camera1.matrixWorld.copy(cameraVR1.matrixWorld);
                  const children1 = camera1.children;
                  for(let i3 = 0, l1 = children1.length; i3 < l1; i3++)children1[i3].updateMatrixWorld(true);
                  // update projection matrix for proper view frustum culling
                  if (cameras1.length === 2) setProjectionFromUnion1(cameraVR1, cameraL1, cameraR1);
                  else // assume single camera setup (AR)
                  cameraVR1.projectionMatrix.copy(cameraL1.projectionMatrix);
              };
              this.getCamera = function() {
                  return cameraVR1;
              };
              this.getFoveation = function() {
                  if (glProjLayer1 !== null) return glProjLayer1.fixedFoveation;
                  if (glBaseLayer1 !== null) return glBaseLayer1.fixedFoveation;
                  return undefined;
              };
              this.setFoveation = function(foveation1) {
                  // 0 = no foveation = full resolution
                  // 1 = maximum foveation = the edges render at lower resolution
                  if (glProjLayer1 !== null) glProjLayer1.fixedFoveation = foveation1;
                  if (glBaseLayer1 !== null && glBaseLayer1.fixedFoveation !== undefined) glBaseLayer1.fixedFoveation = foveation1;
              };
              // Animation Loop
              let onAnimationFrameCallback1 = null;
              function onAnimationFrame1(time1, frame1) {
                  pose1 = frame1.getViewerPose(referenceSpace1);
                  xrFrame1 = frame1;
                  if (pose1 !== null) {
                      const views1 = pose1.views;
                      if (glBaseLayer1 !== null) {
                          renderer1.setRenderTargetFramebuffer(newRenderTarget1, glBaseLayer1.framebuffer);
                          renderer1.setRenderTarget(newRenderTarget1);
                      }
                      let cameraVRNeedsUpdate1 = false;
                      // check if it's necessary to rebuild cameraVR's camera list
                      if (views1.length !== cameraVR1.cameras.length) {
                          cameraVR1.cameras.length = 0;
                          cameraVRNeedsUpdate1 = true;
                      }
                      for(let i3 = 0; i3 < views1.length; i3++){
                          const view1 = views1[i3];
                          let viewport1 = null;
                          if (glBaseLayer1 !== null) viewport1 = glBaseLayer1.getViewport(view1);
                          else {
                              const glSubImage1 = glBinding1.getViewSubImage(glProjLayer1, view1);
                              viewport1 = glSubImage1.viewport;
                              // For side-by-side projection, we only produce a single texture for both eyes.
                              if (i3 === 0) {
                                  renderer1.setRenderTargetTextures(newRenderTarget1, glSubImage1.colorTexture, glProjLayer1.ignoreDepthValues ? undefined : glSubImage1.depthStencilTexture);
                                  renderer1.setRenderTarget(newRenderTarget1);
                              }
                          }
                          const camera1 = cameras1[i3];
                          camera1.matrix.fromArray(view1.transform.matrix);
                          camera1.projectionMatrix.fromArray(view1.projectionMatrix);
                          camera1.viewport.set(viewport1.x, viewport1.y, viewport1.width, viewport1.height);
                          if (i3 === 0) cameraVR1.matrix.copy(camera1.matrix);
                          if (cameraVRNeedsUpdate1 === true) cameraVR1.cameras.push(camera1);
                      }
                  }
                  //
                  const inputSources1 = session1.inputSources;
                  for(let i3 = 0; i3 < controllers1.length; i3++){
                      const controller1 = controllers1[i3];
                      const inputSource1 = inputSources1[i3];
                      controller1.update(inputSource1, frame1, referenceSpace1);
                  }
                  if (onAnimationFrameCallback1) onAnimationFrameCallback1(time1, frame1);
                  xrFrame1 = null;
              }
              const animation1 = new WebGLAnimation();
              animation1.setAnimationLoop(onAnimationFrame1);
              this.setAnimationLoop = function(callback1) {
                  onAnimationFrameCallback1 = callback1;
              };
              this.dispose = function() {};
          }
      }
      function WebGLMaterials(properties1) {
          function refreshFogUniforms1(uniforms1, fog1) {
              uniforms1.fogColor.value.copy(fog1.color);
              if (fog1.isFog) {
                  uniforms1.fogNear.value = fog1.near;
                  uniforms1.fogFar.value = fog1.far;
              } else if (fog1.isFogExp2) uniforms1.fogDensity.value = fog1.density;
          }
          function refreshMaterialUniforms1(uniforms1, material1, pixelRatio1, height1, transmissionRenderTarget1) {
              if (material1.isMeshBasicMaterial) refreshUniformsCommon1(uniforms1, material1);
              else if (material1.isMeshLambertMaterial) {
                  refreshUniformsCommon1(uniforms1, material1);
                  refreshUniformsLambert1(uniforms1, material1);
              } else if (material1.isMeshToonMaterial) {
                  refreshUniformsCommon1(uniforms1, material1);
                  refreshUniformsToon1(uniforms1, material1);
              } else if (material1.isMeshPhongMaterial) {
                  refreshUniformsCommon1(uniforms1, material1);
                  refreshUniformsPhong1(uniforms1, material1);
              } else if (material1.isMeshStandardMaterial) {
                  refreshUniformsCommon1(uniforms1, material1);
                  if (material1.isMeshPhysicalMaterial) refreshUniformsPhysical1(uniforms1, material1, transmissionRenderTarget1);
                  else refreshUniformsStandard1(uniforms1, material1);
              } else if (material1.isMeshMatcapMaterial) {
                  refreshUniformsCommon1(uniforms1, material1);
                  refreshUniformsMatcap1(uniforms1, material1);
              } else if (material1.isMeshDepthMaterial) {
                  refreshUniformsCommon1(uniforms1, material1);
                  refreshUniformsDepth1(uniforms1, material1);
              } else if (material1.isMeshDistanceMaterial) {
                  refreshUniformsCommon1(uniforms1, material1);
                  refreshUniformsDistance1(uniforms1, material1);
              } else if (material1.isMeshNormalMaterial) {
                  refreshUniformsCommon1(uniforms1, material1);
                  refreshUniformsNormal1(uniforms1, material1);
              } else if (material1.isLineBasicMaterial) {
                  refreshUniformsLine1(uniforms1, material1);
                  if (material1.isLineDashedMaterial) refreshUniformsDash1(uniforms1, material1);
              } else if (material1.isPointsMaterial) refreshUniformsPoints1(uniforms1, material1, pixelRatio1, height1);
              else if (material1.isSpriteMaterial) refreshUniformsSprites1(uniforms1, material1);
              else if (material1.isShadowMaterial) {
                  uniforms1.color.value.copy(material1.color);
                  uniforms1.opacity.value = material1.opacity;
              } else if (material1.isShaderMaterial) material1.uniformsNeedUpdate = false; // #15581
          }
          function refreshUniformsCommon1(uniforms1, material1) {
              uniforms1.opacity.value = material1.opacity;
              if (material1.color) uniforms1.diffuse.value.copy(material1.color);
              if (material1.emissive) uniforms1.emissive.value.copy(material1.emissive).multiplyScalar(material1.emissiveIntensity);
              if (material1.map) uniforms1.map.value = material1.map;
              if (material1.alphaMap) uniforms1.alphaMap.value = material1.alphaMap;
              if (material1.specularMap) uniforms1.specularMap.value = material1.specularMap;
              if (material1.alphaTest > 0) uniforms1.alphaTest.value = material1.alphaTest;
              const envMap1 = properties1.get(material1).envMap;
              if (envMap1) {
                  uniforms1.envMap.value = envMap1;
                  uniforms1.flipEnvMap.value = envMap1.isCubeTexture && envMap1.isRenderTargetTexture === false ? -1 : 1;
                  uniforms1.reflectivity.value = material1.reflectivity;
                  uniforms1.ior.value = material1.ior;
                  uniforms1.refractionRatio.value = material1.refractionRatio;
              }
              if (material1.lightMap) {
                  uniforms1.lightMap.value = material1.lightMap;
                  uniforms1.lightMapIntensity.value = material1.lightMapIntensity;
              }
              if (material1.aoMap) {
                  uniforms1.aoMap.value = material1.aoMap;
                  uniforms1.aoMapIntensity.value = material1.aoMapIntensity;
              }
              // uv repeat and offset setting priorities
              // 1. color map
              // 2. specular map
              // 3. displacementMap map
              // 4. normal map
              // 5. bump map
              // 6. roughnessMap map
              // 7. metalnessMap map
              // 8. alphaMap map
              // 9. emissiveMap map
              // 10. clearcoat map
              // 11. clearcoat normal map
              // 12. clearcoat roughnessMap map
              // 13. specular intensity map
              // 14. specular tint map
              // 15. transmission map
              // 16. thickness map
              let uvScaleMap1;
              if (material1.map) uvScaleMap1 = material1.map;
              else if (material1.specularMap) uvScaleMap1 = material1.specularMap;
              else if (material1.displacementMap) uvScaleMap1 = material1.displacementMap;
              else if (material1.normalMap) uvScaleMap1 = material1.normalMap;
              else if (material1.bumpMap) uvScaleMap1 = material1.bumpMap;
              else if (material1.roughnessMap) uvScaleMap1 = material1.roughnessMap;
              else if (material1.metalnessMap) uvScaleMap1 = material1.metalnessMap;
              else if (material1.alphaMap) uvScaleMap1 = material1.alphaMap;
              else if (material1.emissiveMap) uvScaleMap1 = material1.emissiveMap;
              else if (material1.clearcoatMap) uvScaleMap1 = material1.clearcoatMap;
              else if (material1.clearcoatNormalMap) uvScaleMap1 = material1.clearcoatNormalMap;
              else if (material1.clearcoatRoughnessMap) uvScaleMap1 = material1.clearcoatRoughnessMap;
              else if (material1.specularIntensityMap) uvScaleMap1 = material1.specularIntensityMap;
              else if (material1.specularColorMap) uvScaleMap1 = material1.specularColorMap;
              else if (material1.transmissionMap) uvScaleMap1 = material1.transmissionMap;
              else if (material1.thicknessMap) uvScaleMap1 = material1.thicknessMap;
              else if (material1.sheenColorMap) uvScaleMap1 = material1.sheenColorMap;
              else if (material1.sheenRoughnessMap) uvScaleMap1 = material1.sheenRoughnessMap;
              if (uvScaleMap1 !== undefined) {
                  // backwards compatibility
                  if (uvScaleMap1.isWebGLRenderTarget) uvScaleMap1 = uvScaleMap1.texture;
                  if (uvScaleMap1.matrixAutoUpdate === true) uvScaleMap1.updateMatrix();
                  uniforms1.uvTransform.value.copy(uvScaleMap1.matrix);
              }
              // uv repeat and offset setting priorities for uv2
              // 1. ao map
              // 2. light map
              let uv2ScaleMap1;
              if (material1.aoMap) uv2ScaleMap1 = material1.aoMap;
              else if (material1.lightMap) uv2ScaleMap1 = material1.lightMap;
              if (uv2ScaleMap1 !== undefined) {
                  // backwards compatibility
                  if (uv2ScaleMap1.isWebGLRenderTarget) uv2ScaleMap1 = uv2ScaleMap1.texture;
                  if (uv2ScaleMap1.matrixAutoUpdate === true) uv2ScaleMap1.updateMatrix();
                  uniforms1.uv2Transform.value.copy(uv2ScaleMap1.matrix);
              }
          }
          function refreshUniformsLine1(uniforms1, material1) {
              uniforms1.diffuse.value.copy(material1.color);
              uniforms1.opacity.value = material1.opacity;
          }
          function refreshUniformsDash1(uniforms1, material1) {
              uniforms1.dashSize.value = material1.dashSize;
              uniforms1.totalSize.value = material1.dashSize + material1.gapSize;
              uniforms1.scale.value = material1.scale;
          }
          function refreshUniformsPoints1(uniforms1, material1, pixelRatio1, height1) {
              uniforms1.diffuse.value.copy(material1.color);
              uniforms1.opacity.value = material1.opacity;
              uniforms1.size.value = material1.size * pixelRatio1;
              uniforms1.scale.value = height1 * 0.5;
              if (material1.map) uniforms1.map.value = material1.map;
              if (material1.alphaMap) uniforms1.alphaMap.value = material1.alphaMap;
              if (material1.alphaTest > 0) uniforms1.alphaTest.value = material1.alphaTest;
              // uv repeat and offset setting priorities
              // 1. color map
              // 2. alpha map
              let uvScaleMap1;
              if (material1.map) uvScaleMap1 = material1.map;
              else if (material1.alphaMap) uvScaleMap1 = material1.alphaMap;
              if (uvScaleMap1 !== undefined) {
                  if (uvScaleMap1.matrixAutoUpdate === true) uvScaleMap1.updateMatrix();
                  uniforms1.uvTransform.value.copy(uvScaleMap1.matrix);
              }
          }
          function refreshUniformsSprites1(uniforms1, material1) {
              uniforms1.diffuse.value.copy(material1.color);
              uniforms1.opacity.value = material1.opacity;
              uniforms1.rotation.value = material1.rotation;
              if (material1.map) uniforms1.map.value = material1.map;
              if (material1.alphaMap) uniforms1.alphaMap.value = material1.alphaMap;
              if (material1.alphaTest > 0) uniforms1.alphaTest.value = material1.alphaTest;
              // uv repeat and offset setting priorities
              // 1. color map
              // 2. alpha map
              let uvScaleMap1;
              if (material1.map) uvScaleMap1 = material1.map;
              else if (material1.alphaMap) uvScaleMap1 = material1.alphaMap;
              if (uvScaleMap1 !== undefined) {
                  if (uvScaleMap1.matrixAutoUpdate === true) uvScaleMap1.updateMatrix();
                  uniforms1.uvTransform.value.copy(uvScaleMap1.matrix);
              }
          }
          function refreshUniformsLambert1(uniforms1, material1) {
              if (material1.emissiveMap) uniforms1.emissiveMap.value = material1.emissiveMap;
          }
          function refreshUniformsPhong1(uniforms1, material1) {
              uniforms1.specular.value.copy(material1.specular);
              uniforms1.shininess.value = Math.max(material1.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )
              if (material1.emissiveMap) uniforms1.emissiveMap.value = material1.emissiveMap;
              if (material1.bumpMap) {
                  uniforms1.bumpMap.value = material1.bumpMap;
                  uniforms1.bumpScale.value = material1.bumpScale;
                  if (material1.side === BackSide) uniforms1.bumpScale.value *= -1;
              }
              if (material1.normalMap) {
                  uniforms1.normalMap.value = material1.normalMap;
                  uniforms1.normalScale.value.copy(material1.normalScale);
                  if (material1.side === BackSide) uniforms1.normalScale.value.negate();
              }
              if (material1.displacementMap) {
                  uniforms1.displacementMap.value = material1.displacementMap;
                  uniforms1.displacementScale.value = material1.displacementScale;
                  uniforms1.displacementBias.value = material1.displacementBias;
              }
          }
          function refreshUniformsToon1(uniforms1, material1) {
              if (material1.gradientMap) uniforms1.gradientMap.value = material1.gradientMap;
              if (material1.emissiveMap) uniforms1.emissiveMap.value = material1.emissiveMap;
              if (material1.bumpMap) {
                  uniforms1.bumpMap.value = material1.bumpMap;
                  uniforms1.bumpScale.value = material1.bumpScale;
                  if (material1.side === BackSide) uniforms1.bumpScale.value *= -1;
              }
              if (material1.normalMap) {
                  uniforms1.normalMap.value = material1.normalMap;
                  uniforms1.normalScale.value.copy(material1.normalScale);
                  if (material1.side === BackSide) uniforms1.normalScale.value.negate();
              }
              if (material1.displacementMap) {
                  uniforms1.displacementMap.value = material1.displacementMap;
                  uniforms1.displacementScale.value = material1.displacementScale;
                  uniforms1.displacementBias.value = material1.displacementBias;
              }
          }
          function refreshUniformsStandard1(uniforms1, material1) {
              uniforms1.roughness.value = material1.roughness;
              uniforms1.metalness.value = material1.metalness;
              if (material1.roughnessMap) uniforms1.roughnessMap.value = material1.roughnessMap;
              if (material1.metalnessMap) uniforms1.metalnessMap.value = material1.metalnessMap;
              if (material1.emissiveMap) uniforms1.emissiveMap.value = material1.emissiveMap;
              if (material1.bumpMap) {
                  uniforms1.bumpMap.value = material1.bumpMap;
                  uniforms1.bumpScale.value = material1.bumpScale;
                  if (material1.side === BackSide) uniforms1.bumpScale.value *= -1;
              }
              if (material1.normalMap) {
                  uniforms1.normalMap.value = material1.normalMap;
                  uniforms1.normalScale.value.copy(material1.normalScale);
                  if (material1.side === BackSide) uniforms1.normalScale.value.negate();
              }
              if (material1.displacementMap) {
                  uniforms1.displacementMap.value = material1.displacementMap;
                  uniforms1.displacementScale.value = material1.displacementScale;
                  uniforms1.displacementBias.value = material1.displacementBias;
              }
              const envMap1 = properties1.get(material1).envMap;
              if (envMap1) //uniforms.envMap.value = material.envMap; // part of uniforms common
              uniforms1.envMapIntensity.value = material1.envMapIntensity;
          }
          function refreshUniformsPhysical1(uniforms1, material1, transmissionRenderTarget1) {
              refreshUniformsStandard1(uniforms1, material1);
              uniforms1.ior.value = material1.ior; // also part of uniforms common
              if (material1.sheen > 0) {
                  uniforms1.sheenColor.value.copy(material1.sheenColor).multiplyScalar(material1.sheen);
                  uniforms1.sheenRoughness.value = material1.sheenRoughness;
                  if (material1.sheenColorMap) uniforms1.sheenColorMap.value = material1.sheenColorMap;
                  if (material1.sheenRoughnessMap) uniforms1.sheenRoughnessMap.value = material1.sheenRoughnessMap;
              }
              if (material1.clearcoat > 0) {
                  uniforms1.clearcoat.value = material1.clearcoat;
                  uniforms1.clearcoatRoughness.value = material1.clearcoatRoughness;
                  if (material1.clearcoatMap) uniforms1.clearcoatMap.value = material1.clearcoatMap;
                  if (material1.clearcoatRoughnessMap) uniforms1.clearcoatRoughnessMap.value = material1.clearcoatRoughnessMap;
                  if (material1.clearcoatNormalMap) {
                      uniforms1.clearcoatNormalScale.value.copy(material1.clearcoatNormalScale);
                      uniforms1.clearcoatNormalMap.value = material1.clearcoatNormalMap;
                      if (material1.side === BackSide) uniforms1.clearcoatNormalScale.value.negate();
                  }
              }
              if (material1.transmission > 0) {
                  uniforms1.transmission.value = material1.transmission;
                  uniforms1.transmissionSamplerMap.value = transmissionRenderTarget1.texture;
                  uniforms1.transmissionSamplerSize.value.set(transmissionRenderTarget1.width, transmissionRenderTarget1.height);
                  if (material1.transmissionMap) uniforms1.transmissionMap.value = material1.transmissionMap;
                  uniforms1.thickness.value = material1.thickness;
                  if (material1.thicknessMap) uniforms1.thicknessMap.value = material1.thicknessMap;
                  uniforms1.attenuationDistance.value = material1.attenuationDistance;
                  uniforms1.attenuationColor.value.copy(material1.attenuationColor);
              }
              uniforms1.specularIntensity.value = material1.specularIntensity;
              uniforms1.specularColor.value.copy(material1.specularColor);
              if (material1.specularIntensityMap) uniforms1.specularIntensityMap.value = material1.specularIntensityMap;
              if (material1.specularColorMap) uniforms1.specularColorMap.value = material1.specularColorMap;
          }
          function refreshUniformsMatcap1(uniforms1, material1) {
              if (material1.matcap) uniforms1.matcap.value = material1.matcap;
              if (material1.bumpMap) {
                  uniforms1.bumpMap.value = material1.bumpMap;
                  uniforms1.bumpScale.value = material1.bumpScale;
                  if (material1.side === BackSide) uniforms1.bumpScale.value *= -1;
              }
              if (material1.normalMap) {
                  uniforms1.normalMap.value = material1.normalMap;
                  uniforms1.normalScale.value.copy(material1.normalScale);
                  if (material1.side === BackSide) uniforms1.normalScale.value.negate();
              }
              if (material1.displacementMap) {
                  uniforms1.displacementMap.value = material1.displacementMap;
                  uniforms1.displacementScale.value = material1.displacementScale;
                  uniforms1.displacementBias.value = material1.displacementBias;
              }
          }
          function refreshUniformsDepth1(uniforms1, material1) {
              if (material1.displacementMap) {
                  uniforms1.displacementMap.value = material1.displacementMap;
                  uniforms1.displacementScale.value = material1.displacementScale;
                  uniforms1.displacementBias.value = material1.displacementBias;
              }
          }
          function refreshUniformsDistance1(uniforms1, material1) {
              if (material1.displacementMap) {
                  uniforms1.displacementMap.value = material1.displacementMap;
                  uniforms1.displacementScale.value = material1.displacementScale;
                  uniforms1.displacementBias.value = material1.displacementBias;
              }
              uniforms1.referencePosition.value.copy(material1.referencePosition);
              uniforms1.nearDistance.value = material1.nearDistance;
              uniforms1.farDistance.value = material1.farDistance;
          }
          function refreshUniformsNormal1(uniforms1, material1) {
              if (material1.bumpMap) {
                  uniforms1.bumpMap.value = material1.bumpMap;
                  uniforms1.bumpScale.value = material1.bumpScale;
                  if (material1.side === BackSide) uniforms1.bumpScale.value *= -1;
              }
              if (material1.normalMap) {
                  uniforms1.normalMap.value = material1.normalMap;
                  uniforms1.normalScale.value.copy(material1.normalScale);
                  if (material1.side === BackSide) uniforms1.normalScale.value.negate();
              }
              if (material1.displacementMap) {
                  uniforms1.displacementMap.value = material1.displacementMap;
                  uniforms1.displacementScale.value = material1.displacementScale;
                  uniforms1.displacementBias.value = material1.displacementBias;
              }
          }
          return {
              refreshFogUniforms: refreshFogUniforms1,
              refreshMaterialUniforms: refreshMaterialUniforms1
          };
      }
      function createCanvasElement() {
          const canvas1 = createElementNS("canvas");
          canvas1.style.display = "block";
          return canvas1;
      }
      function WebGLRenderer(parameters1 = {}) {
          const _canvas1 = parameters1.canvas !== undefined ? parameters1.canvas : createCanvasElement(), _context1 = parameters1.context !== undefined ? parameters1.context : null, _depth1 = parameters1.depth !== undefined ? parameters1.depth : true, _stencil1 = parameters1.stencil !== undefined ? parameters1.stencil : true, _antialias1 = parameters1.antialias !== undefined ? parameters1.antialias : false, _premultipliedAlpha1 = parameters1.premultipliedAlpha !== undefined ? parameters1.premultipliedAlpha : true, _preserveDrawingBuffer1 = parameters1.preserveDrawingBuffer !== undefined ? parameters1.preserveDrawingBuffer : false, _powerPreference1 = parameters1.powerPreference !== undefined ? parameters1.powerPreference : "default", _failIfMajorPerformanceCaveat1 = parameters1.failIfMajorPerformanceCaveat !== undefined ? parameters1.failIfMajorPerformanceCaveat : false;
          let _alpha1;
          if (parameters1.context !== undefined) _alpha1 = _context1.getContextAttributes().alpha;
          else _alpha1 = parameters1.alpha !== undefined ? parameters1.alpha : false;
          let currentRenderList1 = null;
          let currentRenderState1 = null;
          // render() can be called from within a callback triggered by another render.
          // We track this so that the nested render call gets its list and state isolated from the parent render call.
          const renderListStack1 = [];
          const renderStateStack1 = [];
          // public properties
          this.domElement = _canvas1;
          // Debug configuration container
          this.debug = {
              /**
             * Enables error checking and reporting when shader programs are being compiled
             * @type {boolean}
             */ checkShaderErrors: true
          };
          // clearing
          this.autoClear = true;
          this.autoClearColor = true;
          this.autoClearDepth = true;
          this.autoClearStencil = true;
          // scene graph
          this.sortObjects = true;
          // user-defined clipping
          this.clippingPlanes = [];
          this.localClippingEnabled = false;
          // physically based shading
          this.outputEncoding = LinearEncoding;
          // physical lights
          this.physicallyCorrectLights = false;
          // tone mapping
          this.toneMapping = NoToneMapping;
          this.toneMappingExposure = 1.0;
          // internal properties
          const _this1 = this;
          let _isContextLost1 = false;
          // internal state cache
          let _currentActiveCubeFace1 = 0;
          let _currentActiveMipmapLevel1 = 0;
          let _currentRenderTarget1 = null;
          let _currentMaterialId1 = -1;
          let _currentCamera1 = null;
          const _currentViewport1 = new Vector4$1();
          const _currentScissor1 = new Vector4$1();
          let _currentScissorTest1 = null;
          //
          let _width1 = _canvas1.width;
          let _height1 = _canvas1.height;
          let _pixelRatio1 = 1;
          let _opaqueSort1 = null;
          let _transparentSort1 = null;
          const _viewport1 = new Vector4$1(0, 0, _width1, _height1);
          const _scissor1 = new Vector4$1(0, 0, _width1, _height1);
          let _scissorTest1 = false;
          // frustum
          const _frustum1 = new Frustum();
          // clipping
          let _clippingEnabled1 = false;
          let _localClippingEnabled1 = false;
          // transmission
          let _transmissionRenderTarget1 = null;
          // camera matrices cache
          const _projScreenMatrix1 = new Matrix4();
          const _vector21 = new Vector2();
          const _vector31 = new Vector3();
          const _emptyScene1 = {
              background: null,
              fog: null,
              environment: null,
              overrideMaterial: null,
              isScene: true
          };
          function getTargetPixelRatio1() {
              return _currentRenderTarget1 === null ? _pixelRatio1 : 1;
          }
          // initialize
          let _gl1 = _context1;
          function getContext1(contextNames1, contextAttributes1) {
              for(let i3 = 0; i3 < contextNames1.length; i3++){
                  const contextName1 = contextNames1[i3];
                  const context1 = _canvas1.getContext(contextName1, contextAttributes1);
                  if (context1 !== null) return context1;
              }
              return null;
          }
          try {
              const contextAttributes1 = {
                  alpha: true,
                  depth: _depth1,
                  stencil: _stencil1,
                  antialias: _antialias1,
                  premultipliedAlpha: _premultipliedAlpha1,
                  preserveDrawingBuffer: _preserveDrawingBuffer1,
                  powerPreference: _powerPreference1,
                  failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat1
              };
              // OffscreenCanvas does not have setAttribute, see #22811
              if ("setAttribute" in _canvas1) _canvas1.setAttribute("data-engine", `three.js r${REVISION}`);
              // event listeners must be registered before WebGL context is created, see #12753
              _canvas1.addEventListener("webglcontextlost", onContextLost1, false);
              _canvas1.addEventListener("webglcontextrestored", onContextRestore1, false);
              if (_gl1 === null) {
                  const contextNames1 = [
                      "webgl2",
                      "webgl",
                      "experimental-webgl"
                  ];
                  if (_this1.isWebGL1Renderer === true) contextNames1.shift();
                  _gl1 = getContext1(contextNames1, contextAttributes1);
                  if (_gl1 === null) {
                      if (getContext1(contextNames1)) throw new Error("Error creating WebGL context with your selected attributes.");
                      else throw new Error("Error creating WebGL context.");
                  }
              }
              // Some experimental-webgl implementations do not have getShaderPrecisionFormat
              if (_gl1.getShaderPrecisionFormat === undefined) _gl1.getShaderPrecisionFormat = function() {
                  return {
                      "rangeMin": 1,
                      "rangeMax": 1,
                      "precision": 1
                  };
              };
          } catch (error1) {
              console.error("THREE.WebGLRenderer: " + error1.message);
              throw error1;
          }
          let extensions1, capabilities1, state1, info1;
          let properties1, textures1, cubemaps1, cubeuvmaps1, attributes1, geometries1, objects1;
          let programCache1, materials1, renderLists1, renderStates1, clipping1, shadowMap1;
          let background1, morphtargets1, bufferRenderer1, indexedBufferRenderer1;
          let utils1, bindingStates1;
          function initGLContext1() {
              extensions1 = new WebGLExtensions(_gl1);
              capabilities1 = new WebGLCapabilities(_gl1, extensions1, parameters1);
              extensions1.init(capabilities1);
              utils1 = new WebGLUtils(_gl1, extensions1, capabilities1);
              state1 = new WebGLState(_gl1, extensions1, capabilities1);
              info1 = new WebGLInfo(_gl1);
              properties1 = new WebGLProperties();
              textures1 = new WebGLTextures(_gl1, extensions1, state1, properties1, capabilities1, utils1, info1);
              cubemaps1 = new WebGLCubeMaps(_this1);
              cubeuvmaps1 = new WebGLCubeUVMaps(_this1);
              attributes1 = new WebGLAttributes(_gl1, capabilities1);
              bindingStates1 = new WebGLBindingStates(_gl1, extensions1, attributes1, capabilities1);
              geometries1 = new WebGLGeometries(_gl1, attributes1, info1, bindingStates1);
              objects1 = new WebGLObjects(_gl1, geometries1, attributes1, info1);
              morphtargets1 = new WebGLMorphtargets(_gl1, capabilities1, textures1);
              clipping1 = new WebGLClipping(properties1);
              programCache1 = new WebGLPrograms(_this1, cubemaps1, cubeuvmaps1, extensions1, capabilities1, bindingStates1, clipping1);
              materials1 = new WebGLMaterials(properties1);
              renderLists1 = new WebGLRenderLists();
              renderStates1 = new WebGLRenderStates(extensions1, capabilities1);
              background1 = new WebGLBackground(_this1, cubemaps1, state1, objects1, _alpha1, _premultipliedAlpha1);
              shadowMap1 = new WebGLShadowMap(_this1, objects1, capabilities1);
              bufferRenderer1 = new WebGLBufferRenderer(_gl1, extensions1, info1, capabilities1);
              indexedBufferRenderer1 = new WebGLIndexedBufferRenderer(_gl1, extensions1, info1, capabilities1);
              info1.programs = programCache1.programs;
              _this1.capabilities = capabilities1;
              _this1.extensions = extensions1;
              _this1.properties = properties1;
              _this1.renderLists = renderLists1;
              _this1.shadowMap = shadowMap1;
              _this1.state = state1;
              _this1.info = info1;
          }
          initGLContext1();
          // xr
          const xr1 = new WebXRManager(_this1, _gl1);
          this.xr = xr1;
          // API
          this.getContext = function() {
              return _gl1;
          };
          this.getContextAttributes = function() {
              return _gl1.getContextAttributes();
          };
          this.forceContextLoss = function() {
              const extension1 = extensions1.get("WEBGL_lose_context");
              if (extension1) extension1.loseContext();
          };
          this.forceContextRestore = function() {
              const extension1 = extensions1.get("WEBGL_lose_context");
              if (extension1) extension1.restoreContext();
          };
          this.getPixelRatio = function() {
              return _pixelRatio1;
          };
          this.setPixelRatio = function(value1) {
              if (value1 === undefined) return;
              _pixelRatio1 = value1;
              this.setSize(_width1, _height1, false);
          };
          this.getSize = function(target1) {
              return target1.set(_width1, _height1);
          };
          this.setSize = function(width1, height1, updateStyle1) {
              if (xr1.isPresenting) {
                  console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
                  return;
              }
              _width1 = width1;
              _height1 = height1;
              _canvas1.width = Math.floor(width1 * _pixelRatio1);
              _canvas1.height = Math.floor(height1 * _pixelRatio1);
              if (updateStyle1 !== false) {
                  _canvas1.style.width = width1 + "px";
                  _canvas1.style.height = height1 + "px";
              }
              this.setViewport(0, 0, width1, height1);
          };
          this.getDrawingBufferSize = function(target1) {
              return target1.set(_width1 * _pixelRatio1, _height1 * _pixelRatio1).floor();
          };
          this.setDrawingBufferSize = function(width1, height1, pixelRatio1) {
              _width1 = width1;
              _height1 = height1;
              _pixelRatio1 = pixelRatio1;
              _canvas1.width = Math.floor(width1 * pixelRatio1);
              _canvas1.height = Math.floor(height1 * pixelRatio1);
              this.setViewport(0, 0, width1, height1);
          };
          this.getCurrentViewport = function(target1) {
              return target1.copy(_currentViewport1);
          };
          this.getViewport = function(target1) {
              return target1.copy(_viewport1);
          };
          this.setViewport = function(x4, y3, width1, height1) {
              if (x4.isVector4) _viewport1.set(x4.x, x4.y, x4.z, x4.w);
              else _viewport1.set(x4, y3, width1, height1);
              state1.viewport(_currentViewport1.copy(_viewport1).multiplyScalar(_pixelRatio1).floor());
          };
          this.getScissor = function(target1) {
              return target1.copy(_scissor1);
          };
          this.setScissor = function(x4, y3, width1, height1) {
              if (x4.isVector4) _scissor1.set(x4.x, x4.y, x4.z, x4.w);
              else _scissor1.set(x4, y3, width1, height1);
              state1.scissor(_currentScissor1.copy(_scissor1).multiplyScalar(_pixelRatio1).floor());
          };
          this.getScissorTest = function() {
              return _scissorTest1;
          };
          this.setScissorTest = function(boolean1) {
              state1.setScissorTest(_scissorTest1 = boolean1);
          };
          this.setOpaqueSort = function(method1) {
              _opaqueSort1 = method1;
          };
          this.setTransparentSort = function(method1) {
              _transparentSort1 = method1;
          };
          // Clearing
          this.getClearColor = function(target1) {
              return target1.copy(background1.getClearColor());
          };
          this.setClearColor = function() {
              background1.setClearColor.apply(background1, arguments);
          };
          this.getClearAlpha = function() {
              return background1.getClearAlpha();
          };
          this.setClearAlpha = function() {
              background1.setClearAlpha.apply(background1, arguments);
          };
          this.clear = function(color3 = true, depth1 = true, stencil1 = true) {
              let bits1 = 0;
              if (color3) bits1 |= 16384;
              if (depth1) bits1 |= 256;
              if (stencil1) bits1 |= 1024;
              _gl1.clear(bits1);
          };
          this.clearColor = function() {
              this.clear(true, false, false);
          };
          this.clearDepth = function() {
              this.clear(false, true, false);
          };
          this.clearStencil = function() {
              this.clear(false, false, true);
          };
          //
          this.dispose = function() {
              _canvas1.removeEventListener("webglcontextlost", onContextLost1, false);
              _canvas1.removeEventListener("webglcontextrestored", onContextRestore1, false);
              renderLists1.dispose();
              renderStates1.dispose();
              properties1.dispose();
              cubemaps1.dispose();
              cubeuvmaps1.dispose();
              objects1.dispose();
              bindingStates1.dispose();
              programCache1.dispose();
              xr1.dispose();
              xr1.removeEventListener("sessionstart", onXRSessionStart1);
              xr1.removeEventListener("sessionend", onXRSessionEnd1);
              if (_transmissionRenderTarget1) {
                  _transmissionRenderTarget1.dispose();
                  _transmissionRenderTarget1 = null;
              }
              animation1.stop();
          };
          // Events
          function onContextLost1(event1) {
              event1.preventDefault();
              console.log("THREE.WebGLRenderer: Context Lost.");
              _isContextLost1 = true;
          }
          function onContextRestore1() {
              console.log("THREE.WebGLRenderer: Context Restored.");
              _isContextLost1 = false;
              const infoAutoReset1 = info1.autoReset;
              const shadowMapEnabled1 = shadowMap1.enabled;
              const shadowMapAutoUpdate1 = shadowMap1.autoUpdate;
              const shadowMapNeedsUpdate1 = shadowMap1.needsUpdate;
              const shadowMapType1 = shadowMap1.type;
              initGLContext1();
              info1.autoReset = infoAutoReset1;
              shadowMap1.enabled = shadowMapEnabled1;
              shadowMap1.autoUpdate = shadowMapAutoUpdate1;
              shadowMap1.needsUpdate = shadowMapNeedsUpdate1;
              shadowMap1.type = shadowMapType1;
          }
          function onMaterialDispose1(event1) {
              const material1 = event1.target;
              material1.removeEventListener("dispose", onMaterialDispose1);
              deallocateMaterial1(material1);
          }
          // Buffer deallocation
          function deallocateMaterial1(material1) {
              releaseMaterialProgramReferences1(material1);
              properties1.remove(material1);
          }
          function releaseMaterialProgramReferences1(material1) {
              const programs1 = properties1.get(material1).programs;
              if (programs1 !== undefined) {
                  programs1.forEach(function(program1) {
                      programCache1.releaseProgram(program1);
                  });
                  if (material1.isShaderMaterial) programCache1.releaseShaderCache(material1);
              }
          }
          // Buffer rendering
          this.renderBufferDirect = function(camera1, scene1, geometry1, material1, object1, group1) {
              if (scene1 === null) scene1 = _emptyScene1; // renderBufferDirect second parameter used to be fog (could be null)
              const frontFaceCW1 = object1.isMesh && object1.matrixWorld.determinant() < 0;
              const program1 = setProgram1(camera1, scene1, geometry1, material1, object1);
              state1.setMaterial(material1, frontFaceCW1);
              //
              let index3 = geometry1.index;
              const position1 = geometry1.attributes.position;
              //
              if (index3 === null) {
                  if (position1 === undefined || position1.count === 0) return;
              } else if (index3.count === 0) return;
              //
              let rangeFactor1 = 1;
              if (material1.wireframe === true) {
                  index3 = geometries1.getWireframeAttribute(geometry1);
                  rangeFactor1 = 2;
              }
              bindingStates1.setup(object1, material1, program1, geometry1, index3);
              let attribute3;
              let renderer1 = bufferRenderer1;
              if (index3 !== null) {
                  attribute3 = attributes1.get(index3);
                  renderer1 = indexedBufferRenderer1;
                  renderer1.setIndex(attribute3);
              }
              //
              const dataCount1 = index3 !== null ? index3.count : position1.count;
              const rangeStart1 = geometry1.drawRange.start * rangeFactor1;
              const rangeCount1 = geometry1.drawRange.count * rangeFactor1;
              const groupStart1 = group1 !== null ? group1.start * rangeFactor1 : 0;
              const groupCount1 = group1 !== null ? group1.count * rangeFactor1 : Infinity;
              const drawStart1 = Math.max(rangeStart1, groupStart1);
              const drawEnd1 = Math.min(dataCount1, rangeStart1 + rangeCount1, groupStart1 + groupCount1) - 1;
              const drawCount1 = Math.max(0, drawEnd1 - drawStart1 + 1);
              if (drawCount1 === 0) return;
              //
              if (object1.isMesh) {
                  if (material1.wireframe === true) {
                      state1.setLineWidth(material1.wireframeLinewidth * getTargetPixelRatio1());
                      renderer1.setMode(1);
                  } else renderer1.setMode(4);
              } else if (object1.isLine) {
                  let lineWidth1 = material1.linewidth;
                  if (lineWidth1 === undefined) lineWidth1 = 1; // Not using Line*Material
                  state1.setLineWidth(lineWidth1 * getTargetPixelRatio1());
                  if (object1.isLineSegments) renderer1.setMode(1);
                  else if (object1.isLineLoop) renderer1.setMode(2);
                  else renderer1.setMode(3);
              } else if (object1.isPoints) renderer1.setMode(0);
              else if (object1.isSprite) renderer1.setMode(4);
              if (object1.isInstancedMesh) renderer1.renderInstances(drawStart1, drawCount1, object1.count);
              else if (geometry1.isInstancedBufferGeometry) {
                  const instanceCount1 = Math.min(geometry1.instanceCount, geometry1._maxInstanceCount);
                  renderer1.renderInstances(drawStart1, drawCount1, instanceCount1);
              } else renderer1.render(drawStart1, drawCount1);
          };
          // Compile
          this.compile = function(scene1, camera1) {
              currentRenderState1 = renderStates1.get(scene1);
              currentRenderState1.init();
              renderStateStack1.push(currentRenderState1);
              scene1.traverseVisible(function(object1) {
                  if (object1.isLight && object1.layers.test(camera1.layers)) {
                      currentRenderState1.pushLight(object1);
                      if (object1.castShadow) currentRenderState1.pushShadow(object1);
                  }
              });
              currentRenderState1.setupLights(_this1.physicallyCorrectLights);
              scene1.traverse(function(object1) {
                  const material1 = object1.material;
                  if (material1) {
                      if (Array.isArray(material1)) for(let i3 = 0; i3 < material1.length; i3++){
                          const material21 = material1[i3];
                          getProgram1(material21, scene1, object1);
                      }
                      else getProgram1(material1, scene1, object1);
                  }
              });
              renderStateStack1.pop();
              currentRenderState1 = null;
          };
          // Animation Loop
          let onAnimationFrameCallback1 = null;
          function onAnimationFrame1(time1) {
              if (onAnimationFrameCallback1) onAnimationFrameCallback1(time1);
          }
          function onXRSessionStart1() {
              animation1.stop();
          }
          function onXRSessionEnd1() {
              animation1.start();
          }
          const animation1 = new WebGLAnimation();
          animation1.setAnimationLoop(onAnimationFrame1);
          if (typeof window !== "undefined") animation1.setContext(window);
          this.setAnimationLoop = function(callback1) {
              onAnimationFrameCallback1 = callback1;
              xr1.setAnimationLoop(callback1);
              callback1 === null ? animation1.stop() : animation1.start();
          };
          xr1.addEventListener("sessionstart", onXRSessionStart1);
          xr1.addEventListener("sessionend", onXRSessionEnd1);
          // Rendering
          this.render = function(scene1, camera1) {
              if (camera1 !== undefined && camera1.isCamera !== true) {
                  console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
                  return;
              }
              if (_isContextLost1 === true) return;
              // update scene graph
              if (scene1.autoUpdate === true) scene1.updateMatrixWorld();
              // update camera matrices and frustum
              if (camera1.parent === null) camera1.updateMatrixWorld();
              if (xr1.enabled === true && xr1.isPresenting === true) {
                  if (xr1.cameraAutoUpdate === true) xr1.updateCamera(camera1);
                  camera1 = xr1.getCamera(); // use XR camera for rendering
              }
              //
              if (scene1.isScene === true) scene1.onBeforeRender(_this1, scene1, camera1, _currentRenderTarget1);
              currentRenderState1 = renderStates1.get(scene1, renderStateStack1.length);
              currentRenderState1.init();
              renderStateStack1.push(currentRenderState1);
              _projScreenMatrix1.multiplyMatrices(camera1.projectionMatrix, camera1.matrixWorldInverse);
              _frustum1.setFromProjectionMatrix(_projScreenMatrix1);
              _localClippingEnabled1 = this.localClippingEnabled;
              _clippingEnabled1 = clipping1.init(this.clippingPlanes, _localClippingEnabled1, camera1);
              currentRenderList1 = renderLists1.get(scene1, renderListStack1.length);
              currentRenderList1.init();
              renderListStack1.push(currentRenderList1);
              projectObject1(scene1, camera1, 0, _this1.sortObjects);
              currentRenderList1.finish();
              if (_this1.sortObjects === true) currentRenderList1.sort(_opaqueSort1, _transparentSort1);
              //
              if (_clippingEnabled1 === true) clipping1.beginShadows();
              const shadowsArray1 = currentRenderState1.state.shadowsArray;
              shadowMap1.render(shadowsArray1, scene1, camera1);
              if (_clippingEnabled1 === true) clipping1.endShadows();
              //
              if (this.info.autoReset === true) this.info.reset();
              //
              background1.render(currentRenderList1, scene1);
              // render scene
              currentRenderState1.setupLights(_this1.physicallyCorrectLights);
              if (camera1.isArrayCamera) {
                  const cameras1 = camera1.cameras;
                  for(let i3 = 0, l1 = cameras1.length; i3 < l1; i3++){
                      const camera21 = cameras1[i3];
                      renderScene1(currentRenderList1, scene1, camera21, camera21.viewport);
                  }
              } else renderScene1(currentRenderList1, scene1, camera1);
              //
              if (_currentRenderTarget1 !== null) {
                  // resolve multisample renderbuffers to a single-sample texture if necessary
                  textures1.updateMultisampleRenderTarget(_currentRenderTarget1);
                  // Generate mipmap if we're using any kind of mipmap filtering
                  textures1.updateRenderTargetMipmap(_currentRenderTarget1);
              }
              //
              if (scene1.isScene === true) scene1.onAfterRender(_this1, scene1, camera1);
              // _gl.finish();
              bindingStates1.resetDefaultState();
              _currentMaterialId1 = -1;
              _currentCamera1 = null;
              renderStateStack1.pop();
              if (renderStateStack1.length > 0) currentRenderState1 = renderStateStack1[renderStateStack1.length - 1];
              else currentRenderState1 = null;
              renderListStack1.pop();
              if (renderListStack1.length > 0) currentRenderList1 = renderListStack1[renderListStack1.length - 1];
              else currentRenderList1 = null;
          };
          function projectObject1(object1, camera1, groupOrder1, sortObjects1) {
              if (object1.visible === false) return;
              const visible1 = object1.layers.test(camera1.layers);
              if (visible1) {
                  if (object1.isGroup) groupOrder1 = object1.renderOrder;
                  else if (object1.isLOD) {
                      if (object1.autoUpdate === true) object1.update(camera1);
                  } else if (object1.isLight) {
                      currentRenderState1.pushLight(object1);
                      if (object1.castShadow) currentRenderState1.pushShadow(object1);
                  } else if (object1.isSprite) {
                      if (!object1.frustumCulled || _frustum1.intersectsSprite(object1)) {
                          if (sortObjects1) _vector31.setFromMatrixPosition(object1.matrixWorld).applyMatrix4(_projScreenMatrix1);
                          const geometry1 = objects1.update(object1);
                          const material1 = object1.material;
                          if (material1.visible) currentRenderList1.push(object1, geometry1, material1, groupOrder1, _vector31.z, null);
                      }
                  } else if (object1.isMesh || object1.isLine || object1.isPoints) {
                      if (object1.isSkinnedMesh) // update skeleton only once in a frame
                      {
                          if (object1.skeleton.frame !== info1.render.frame) {
                              object1.skeleton.update();
                              object1.skeleton.frame = info1.render.frame;
                          }
                      }
                      if (!object1.frustumCulled || _frustum1.intersectsObject(object1)) {
                          if (sortObjects1) _vector31.setFromMatrixPosition(object1.matrixWorld).applyMatrix4(_projScreenMatrix1);
                          const geometry1 = objects1.update(object1);
                          const material1 = object1.material;
                          if (Array.isArray(material1)) {
                              const groups1 = geometry1.groups;
                              for(let i3 = 0, l1 = groups1.length; i3 < l1; i3++){
                                  const group1 = groups1[i3];
                                  const groupMaterial1 = material1[group1.materialIndex];
                                  if (groupMaterial1 && groupMaterial1.visible) currentRenderList1.push(object1, geometry1, groupMaterial1, groupOrder1, _vector31.z, group1);
                              }
                          } else if (material1.visible) currentRenderList1.push(object1, geometry1, material1, groupOrder1, _vector31.z, null);
                      }
                  }
              }
              const children1 = object1.children;
              for(let i3 = 0, l1 = children1.length; i3 < l1; i3++)projectObject1(children1[i3], camera1, groupOrder1, sortObjects1);
          }
          function renderScene1(currentRenderList1, scene1, camera1, viewport1) {
              const opaqueObjects1 = currentRenderList1.opaque;
              const transmissiveObjects1 = currentRenderList1.transmissive;
              const transparentObjects1 = currentRenderList1.transparent;
              currentRenderState1.setupLightsView(camera1);
              if (transmissiveObjects1.length > 0) renderTransmissionPass1(opaqueObjects1, scene1, camera1);
              if (viewport1) state1.viewport(_currentViewport1.copy(viewport1));
              if (opaqueObjects1.length > 0) renderObjects1(opaqueObjects1, scene1, camera1);
              if (transmissiveObjects1.length > 0) renderObjects1(transmissiveObjects1, scene1, camera1);
              if (transparentObjects1.length > 0) renderObjects1(transparentObjects1, scene1, camera1);
              // Ensure depth buffer writing is enabled so it can be cleared on next render
              state1.buffers.depth.setTest(true);
              state1.buffers.depth.setMask(true);
              state1.buffers.color.setMask(true);
              state1.setPolygonOffset(false);
          }
          function renderTransmissionPass1(opaqueObjects1, scene1, camera1) {
              const isWebGL21 = capabilities1.isWebGL2;
              if (_transmissionRenderTarget1 === null) _transmissionRenderTarget1 = new WebGLRenderTarget(1, 1, {
                  generateMipmaps: true,
                  type: utils1.convert(HalfFloatType) !== null ? HalfFloatType : UnsignedByteType,
                  minFilter: LinearMipmapLinearFilter,
                  samples: isWebGL21 && _antialias1 === true ? 4 : 0
              });
              _this1.getDrawingBufferSize(_vector21);
              if (isWebGL21) _transmissionRenderTarget1.setSize(_vector21.x, _vector21.y);
              else _transmissionRenderTarget1.setSize(floorPowerOfTwo(_vector21.x), floorPowerOfTwo(_vector21.y));
              //
              const currentRenderTarget1 = _this1.getRenderTarget();
              _this1.setRenderTarget(_transmissionRenderTarget1);
              _this1.clear();
              // Turn off the features which can affect the frag color for opaque objects pass.
              // Otherwise they are applied twice in opaque objects pass and transmission objects pass.
              const currentToneMapping1 = _this1.toneMapping;
              _this1.toneMapping = NoToneMapping;
              renderObjects1(opaqueObjects1, scene1, camera1);
              _this1.toneMapping = currentToneMapping1;
              textures1.updateMultisampleRenderTarget(_transmissionRenderTarget1);
              textures1.updateRenderTargetMipmap(_transmissionRenderTarget1);
              _this1.setRenderTarget(currentRenderTarget1);
          }
          function renderObjects1(renderList1, scene1, camera1) {
              const overrideMaterial1 = scene1.isScene === true ? scene1.overrideMaterial : null;
              for(let i3 = 0, l1 = renderList1.length; i3 < l1; i3++){
                  const renderItem1 = renderList1[i3];
                  const object1 = renderItem1.object;
                  const geometry1 = renderItem1.geometry;
                  const material1 = overrideMaterial1 === null ? renderItem1.material : overrideMaterial1;
                  const group1 = renderItem1.group;
                  if (object1.layers.test(camera1.layers)) renderObject1(object1, scene1, camera1, geometry1, material1, group1);
              }
          }
          function renderObject1(object1, scene1, camera1, geometry1, material1, group1) {
              object1.onBeforeRender(_this1, scene1, camera1, geometry1, material1, group1);
              object1.modelViewMatrix.multiplyMatrices(camera1.matrixWorldInverse, object1.matrixWorld);
              object1.normalMatrix.getNormalMatrix(object1.modelViewMatrix);
              material1.onBeforeRender(_this1, scene1, camera1, geometry1, object1, group1);
              if (material1.transparent === true && material1.side === DoubleSide) {
                  material1.side = BackSide;
                  material1.needsUpdate = true;
                  _this1.renderBufferDirect(camera1, scene1, geometry1, material1, object1, group1);
                  material1.side = FrontSide;
                  material1.needsUpdate = true;
                  _this1.renderBufferDirect(camera1, scene1, geometry1, material1, object1, group1);
                  material1.side = DoubleSide;
              } else _this1.renderBufferDirect(camera1, scene1, geometry1, material1, object1, group1);
              object1.onAfterRender(_this1, scene1, camera1, geometry1, material1, group1);
          }
          function getProgram1(material1, scene1, object1) {
              if (scene1.isScene !== true) scene1 = _emptyScene1; // scene could be a Mesh, Line, Points, ...
              const materialProperties1 = properties1.get(material1);
              const lights1 = currentRenderState1.state.lights;
              const shadowsArray1 = currentRenderState1.state.shadowsArray;
              const lightsStateVersion1 = lights1.state.version;
              const parameters1 = programCache1.getParameters(material1, lights1.state, shadowsArray1, scene1, object1);
              const programCacheKey1 = programCache1.getProgramCacheKey(parameters1);
              let programs1 = materialProperties1.programs;
              // always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change
              materialProperties1.environment = material1.isMeshStandardMaterial ? scene1.environment : null;
              materialProperties1.fog = scene1.fog;
              materialProperties1.envMap = (material1.isMeshStandardMaterial ? cubeuvmaps1 : cubemaps1).get(material1.envMap || materialProperties1.environment);
              if (programs1 === undefined) {
                  // new material
                  material1.addEventListener("dispose", onMaterialDispose1);
                  programs1 = new Map();
                  materialProperties1.programs = programs1;
              }
              let program1 = programs1.get(programCacheKey1);
              if (program1 !== undefined) // early out if program and light state is identical
              {
                  if (materialProperties1.currentProgram === program1 && materialProperties1.lightsStateVersion === lightsStateVersion1) {
                      updateCommonMaterialProperties1(material1, parameters1);
                      return program1;
                  }
              } else {
                  parameters1.uniforms = programCache1.getUniforms(material1);
                  material1.onBuild(object1, parameters1, _this1);
                  material1.onBeforeCompile(parameters1, _this1);
                  program1 = programCache1.acquireProgram(parameters1, programCacheKey1);
                  programs1.set(programCacheKey1, program1);
                  materialProperties1.uniforms = parameters1.uniforms;
              }
              const uniforms1 = materialProperties1.uniforms;
              if (!material1.isShaderMaterial && !material1.isRawShaderMaterial || material1.clipping === true) uniforms1.clippingPlanes = clipping1.uniform;
              updateCommonMaterialProperties1(material1, parameters1);
              // store the light setup it was created for
              materialProperties1.needsLights = materialNeedsLights1(material1);
              materialProperties1.lightsStateVersion = lightsStateVersion1;
              if (materialProperties1.needsLights) {
                  // wire up the material to this renderer's lighting state
                  uniforms1.ambientLightColor.value = lights1.state.ambient;
                  uniforms1.lightProbe.value = lights1.state.probe;
                  uniforms1.directionalLights.value = lights1.state.directional;
                  uniforms1.directionalLightShadows.value = lights1.state.directionalShadow;
                  uniforms1.spotLights.value = lights1.state.spot;
                  uniforms1.spotLightShadows.value = lights1.state.spotShadow;
                  uniforms1.rectAreaLights.value = lights1.state.rectArea;
                  uniforms1.ltc_1.value = lights1.state.rectAreaLTC1;
                  uniforms1.ltc_2.value = lights1.state.rectAreaLTC2;
                  uniforms1.pointLights.value = lights1.state.point;
                  uniforms1.pointLightShadows.value = lights1.state.pointShadow;
                  uniforms1.hemisphereLights.value = lights1.state.hemi;
                  uniforms1.directionalShadowMap.value = lights1.state.directionalShadowMap;
                  uniforms1.directionalShadowMatrix.value = lights1.state.directionalShadowMatrix;
                  uniforms1.spotShadowMap.value = lights1.state.spotShadowMap;
                  uniforms1.spotShadowMatrix.value = lights1.state.spotShadowMatrix;
                  uniforms1.pointShadowMap.value = lights1.state.pointShadowMap;
                  uniforms1.pointShadowMatrix.value = lights1.state.pointShadowMatrix;
              // TODO (abelnation): add area lights shadow info to uniforms
              }
              const progUniforms1 = program1.getUniforms();
              const uniformsList1 = WebGLUniforms.seqWithValue(progUniforms1.seq, uniforms1);
              materialProperties1.currentProgram = program1;
              materialProperties1.uniformsList = uniformsList1;
              return program1;
          }
          function updateCommonMaterialProperties1(material1, parameters1) {
              const materialProperties1 = properties1.get(material1);
              materialProperties1.outputEncoding = parameters1.outputEncoding;
              materialProperties1.instancing = parameters1.instancing;
              materialProperties1.skinning = parameters1.skinning;
              materialProperties1.morphTargets = parameters1.morphTargets;
              materialProperties1.morphNormals = parameters1.morphNormals;
              materialProperties1.morphColors = parameters1.morphColors;
              materialProperties1.morphTargetsCount = parameters1.morphTargetsCount;
              materialProperties1.numClippingPlanes = parameters1.numClippingPlanes;
              materialProperties1.numIntersection = parameters1.numClipIntersection;
              materialProperties1.vertexAlphas = parameters1.vertexAlphas;
              materialProperties1.vertexTangents = parameters1.vertexTangents;
              materialProperties1.toneMapping = parameters1.toneMapping;
          }
          function setProgram1(camera1, scene1, geometry1, material1, object1) {
              if (scene1.isScene !== true) scene1 = _emptyScene1; // scene could be a Mesh, Line, Points, ...
              textures1.resetTextureUnits();
              const fog1 = scene1.fog;
              const environment1 = material1.isMeshStandardMaterial ? scene1.environment : null;
              const encoding1 = _currentRenderTarget1 === null ? _this1.outputEncoding : _currentRenderTarget1.isXRRenderTarget === true ? _currentRenderTarget1.texture.encoding : LinearEncoding;
              const envMap1 = (material1.isMeshStandardMaterial ? cubeuvmaps1 : cubemaps1).get(material1.envMap || environment1);
              const vertexAlphas1 = material1.vertexColors === true && !!geometry1.attributes.color && geometry1.attributes.color.itemSize === 4;
              const vertexTangents1 = !!material1.normalMap && !!geometry1.attributes.tangent;
              const morphTargets1 = !!geometry1.morphAttributes.position;
              const morphNormals1 = !!geometry1.morphAttributes.normal;
              const morphColors1 = !!geometry1.morphAttributes.color;
              const toneMapping1 = material1.toneMapped ? _this1.toneMapping : NoToneMapping;
              const morphAttribute1 = geometry1.morphAttributes.position || geometry1.morphAttributes.normal || geometry1.morphAttributes.color;
              const morphTargetsCount1 = morphAttribute1 !== undefined ? morphAttribute1.length : 0;
              const materialProperties1 = properties1.get(material1);
              const lights1 = currentRenderState1.state.lights;
              if (_clippingEnabled1 === true) {
                  if (_localClippingEnabled1 === true || camera1 !== _currentCamera1) {
                      const useCache1 = camera1 === _currentCamera1 && material1.id === _currentMaterialId1;
                      // we might want to call this function with some ClippingGroup
                      // object instead of the material, once it becomes feasible
                      // (#8465, #8379)
                      clipping1.setState(material1, camera1, useCache1);
                  }
              }
              //
              let needsProgramChange1 = false;
              if (material1.version === materialProperties1.__version) {
                  if (materialProperties1.needsLights && materialProperties1.lightsStateVersion !== lights1.state.version) needsProgramChange1 = true;
                  else if (materialProperties1.outputEncoding !== encoding1) needsProgramChange1 = true;
                  else if (object1.isInstancedMesh && materialProperties1.instancing === false) needsProgramChange1 = true;
                  else if (!object1.isInstancedMesh && materialProperties1.instancing === true) needsProgramChange1 = true;
                  else if (object1.isSkinnedMesh && materialProperties1.skinning === false) needsProgramChange1 = true;
                  else if (!object1.isSkinnedMesh && materialProperties1.skinning === true) needsProgramChange1 = true;
                  else if (materialProperties1.envMap !== envMap1) needsProgramChange1 = true;
                  else if (material1.fog && materialProperties1.fog !== fog1) needsProgramChange1 = true;
                  else if (materialProperties1.numClippingPlanes !== undefined && (materialProperties1.numClippingPlanes !== clipping1.numPlanes || materialProperties1.numIntersection !== clipping1.numIntersection)) needsProgramChange1 = true;
                  else if (materialProperties1.vertexAlphas !== vertexAlphas1) needsProgramChange1 = true;
                  else if (materialProperties1.vertexTangents !== vertexTangents1) needsProgramChange1 = true;
                  else if (materialProperties1.morphTargets !== morphTargets1) needsProgramChange1 = true;
                  else if (materialProperties1.morphNormals !== morphNormals1) needsProgramChange1 = true;
                  else if (materialProperties1.morphColors !== morphColors1) needsProgramChange1 = true;
                  else if (materialProperties1.toneMapping !== toneMapping1) needsProgramChange1 = true;
                  else if (capabilities1.isWebGL2 === true && materialProperties1.morphTargetsCount !== morphTargetsCount1) needsProgramChange1 = true;
              } else {
                  needsProgramChange1 = true;
                  materialProperties1.__version = material1.version;
              }
              //
              let program1 = materialProperties1.currentProgram;
              if (needsProgramChange1 === true) program1 = getProgram1(material1, scene1, object1);
              let refreshProgram1 = false;
              let refreshMaterial1 = false;
              let refreshLights1 = false;
              const p_uniforms1 = program1.getUniforms(), m_uniforms1 = materialProperties1.uniforms;
              if (state1.useProgram(program1.program)) {
                  refreshProgram1 = true;
                  refreshMaterial1 = true;
                  refreshLights1 = true;
              }
              if (material1.id !== _currentMaterialId1) {
                  _currentMaterialId1 = material1.id;
                  refreshMaterial1 = true;
              }
              if (refreshProgram1 || _currentCamera1 !== camera1) {
                  p_uniforms1.setValue(_gl1, "projectionMatrix", camera1.projectionMatrix);
                  if (capabilities1.logarithmicDepthBuffer) p_uniforms1.setValue(_gl1, "logDepthBufFC", 2.0 / (Math.log(camera1.far + 1.0) / Math.LN2));
                  if (_currentCamera1 !== camera1) {
                      _currentCamera1 = camera1;
                      // lighting uniforms depend on the camera so enforce an update
                      // now, in case this material supports lights - or later, when
                      // the next material that does gets activated:
                      refreshMaterial1 = true; // set to true on material change
                      refreshLights1 = true; // remains set until update done
                  }
                  // load material specific uniforms
                  // (shader material also gets them for the sake of genericity)
                  if (material1.isShaderMaterial || material1.isMeshPhongMaterial || material1.isMeshToonMaterial || material1.isMeshStandardMaterial || material1.envMap) {
                      const uCamPos1 = p_uniforms1.map.cameraPosition;
                      if (uCamPos1 !== undefined) uCamPos1.setValue(_gl1, _vector31.setFromMatrixPosition(camera1.matrixWorld));
                  }
                  if (material1.isMeshPhongMaterial || material1.isMeshToonMaterial || material1.isMeshLambertMaterial || material1.isMeshBasicMaterial || material1.isMeshStandardMaterial || material1.isShaderMaterial) p_uniforms1.setValue(_gl1, "isOrthographic", camera1.isOrthographicCamera === true);
                  if (material1.isMeshPhongMaterial || material1.isMeshToonMaterial || material1.isMeshLambertMaterial || material1.isMeshBasicMaterial || material1.isMeshStandardMaterial || material1.isShaderMaterial || material1.isShadowMaterial || object1.isSkinnedMesh) p_uniforms1.setValue(_gl1, "viewMatrix", camera1.matrixWorldInverse);
              }
              // skinning and morph target uniforms must be set even if material didn't change
              // auto-setting of texture unit for bone and morph texture must go before other textures
              // otherwise textures used for skinning and morphing can take over texture units reserved for other material textures
              if (object1.isSkinnedMesh) {
                  p_uniforms1.setOptional(_gl1, object1, "bindMatrix");
                  p_uniforms1.setOptional(_gl1, object1, "bindMatrixInverse");
                  const skeleton1 = object1.skeleton;
                  if (skeleton1) {
                      if (capabilities1.floatVertexTextures) {
                          if (skeleton1.boneTexture === null) skeleton1.computeBoneTexture();
                          p_uniforms1.setValue(_gl1, "boneTexture", skeleton1.boneTexture, textures1);
                          p_uniforms1.setValue(_gl1, "boneTextureSize", skeleton1.boneTextureSize);
                      } else p_uniforms1.setOptional(_gl1, skeleton1, "boneMatrices");
                  }
              }
              const morphAttributes1 = geometry1.morphAttributes;
              if (morphAttributes1.position !== undefined || morphAttributes1.normal !== undefined || morphAttributes1.color !== undefined && capabilities1.isWebGL2 === true) morphtargets1.update(object1, geometry1, material1, program1);
              if (refreshMaterial1 || materialProperties1.receiveShadow !== object1.receiveShadow) {
                  materialProperties1.receiveShadow = object1.receiveShadow;
                  p_uniforms1.setValue(_gl1, "receiveShadow", object1.receiveShadow);
              }
              if (refreshMaterial1) {
                  p_uniforms1.setValue(_gl1, "toneMappingExposure", _this1.toneMappingExposure);
                  if (materialProperties1.needsLights) // the current material requires lighting info
                  // note: all lighting uniforms are always set correctly
                  // they simply reference the renderer's state for their
                  // values
                  //
                  // use the current material's .needsUpdate flags to set
                  // the GL state when required
                  markUniformsLightsNeedsUpdate1(m_uniforms1, refreshLights1);
                  // refresh uniforms common to several materials
                  if (fog1 && material1.fog) materials1.refreshFogUniforms(m_uniforms1, fog1);
                  materials1.refreshMaterialUniforms(m_uniforms1, material1, _pixelRatio1, _height1, _transmissionRenderTarget1);
                  WebGLUniforms.upload(_gl1, materialProperties1.uniformsList, m_uniforms1, textures1);
              }
              if (material1.isShaderMaterial && material1.uniformsNeedUpdate === true) {
                  WebGLUniforms.upload(_gl1, materialProperties1.uniformsList, m_uniforms1, textures1);
                  material1.uniformsNeedUpdate = false;
              }
              if (material1.isSpriteMaterial) p_uniforms1.setValue(_gl1, "center", object1.center);
              // common matrices
              p_uniforms1.setValue(_gl1, "modelViewMatrix", object1.modelViewMatrix);
              p_uniforms1.setValue(_gl1, "normalMatrix", object1.normalMatrix);
              p_uniforms1.setValue(_gl1, "modelMatrix", object1.matrixWorld);
              return program1;
          }
          // If uniforms are marked as clean, they don't need to be loaded to the GPU.
          function markUniformsLightsNeedsUpdate1(uniforms1, value1) {
              uniforms1.ambientLightColor.needsUpdate = value1;
              uniforms1.lightProbe.needsUpdate = value1;
              uniforms1.directionalLights.needsUpdate = value1;
              uniforms1.directionalLightShadows.needsUpdate = value1;
              uniforms1.pointLights.needsUpdate = value1;
              uniforms1.pointLightShadows.needsUpdate = value1;
              uniforms1.spotLights.needsUpdate = value1;
              uniforms1.spotLightShadows.needsUpdate = value1;
              uniforms1.rectAreaLights.needsUpdate = value1;
              uniforms1.hemisphereLights.needsUpdate = value1;
          }
          function materialNeedsLights1(material1) {
              return material1.isMeshLambertMaterial || material1.isMeshToonMaterial || material1.isMeshPhongMaterial || material1.isMeshStandardMaterial || material1.isShadowMaterial || material1.isShaderMaterial && material1.lights === true;
          }
          this.getActiveCubeFace = function() {
              return _currentActiveCubeFace1;
          };
          this.getActiveMipmapLevel = function() {
              return _currentActiveMipmapLevel1;
          };
          this.getRenderTarget = function() {
              return _currentRenderTarget1;
          };
          this.setRenderTargetTextures = function(renderTarget1, colorTexture1, depthTexture1) {
              properties1.get(renderTarget1.texture).__webglTexture = colorTexture1;
              properties1.get(renderTarget1.depthTexture).__webglTexture = depthTexture1;
              const renderTargetProperties1 = properties1.get(renderTarget1);
              renderTargetProperties1.__hasExternalTextures = true;
              if (renderTargetProperties1.__hasExternalTextures) {
                  renderTargetProperties1.__autoAllocateDepthBuffer = depthTexture1 === undefined;
                  if (!renderTargetProperties1.__autoAllocateDepthBuffer) // The multisample_render_to_texture extension doesn't work properly if there
                  // are midframe flushes and an external depth buffer. Disable use of the extension.
                  {
                      if (extensions1.has("WEBGL_multisampled_render_to_texture") === true) {
                          console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided");
                          renderTargetProperties1.__useRenderToTexture = false;
                      }
                  }
              }
          };
          this.setRenderTargetFramebuffer = function(renderTarget1, defaultFramebuffer1) {
              const renderTargetProperties1 = properties1.get(renderTarget1);
              renderTargetProperties1.__webglFramebuffer = defaultFramebuffer1;
              renderTargetProperties1.__useDefaultFramebuffer = defaultFramebuffer1 === undefined;
          };
          this.setRenderTarget = function(renderTarget1, activeCubeFace1 = 0, activeMipmapLevel1 = 0) {
              _currentRenderTarget1 = renderTarget1;
              _currentActiveCubeFace1 = activeCubeFace1;
              _currentActiveMipmapLevel1 = activeMipmapLevel1;
              let useDefaultFramebuffer1 = true;
              if (renderTarget1) {
                  const renderTargetProperties1 = properties1.get(renderTarget1);
                  if (renderTargetProperties1.__useDefaultFramebuffer !== undefined) {
                      // We need to make sure to rebind the framebuffer.
                      state1.bindFramebuffer(36160, null);
                      useDefaultFramebuffer1 = false;
                  } else if (renderTargetProperties1.__webglFramebuffer === undefined) textures1.setupRenderTarget(renderTarget1);
                  else if (renderTargetProperties1.__hasExternalTextures) // Color and depth texture must be rebound in order for the swapchain to update.
                  textures1.rebindTextures(renderTarget1, properties1.get(renderTarget1.texture).__webglTexture, properties1.get(renderTarget1.depthTexture).__webglTexture);
              }
              let framebuffer1 = null;
              let isCube1 = false;
              let isRenderTarget3D1 = false;
              if (renderTarget1) {
                  const texture1 = renderTarget1.texture;
                  if (texture1.isData3DTexture || texture1.isDataArrayTexture) isRenderTarget3D1 = true;
                  const __webglFramebuffer1 = properties1.get(renderTarget1).__webglFramebuffer;
                  if (renderTarget1.isWebGLCubeRenderTarget) {
                      framebuffer1 = __webglFramebuffer1[activeCubeFace1];
                      isCube1 = true;
                  } else if (capabilities1.isWebGL2 && renderTarget1.samples > 0 && textures1.useMultisampledRTT(renderTarget1) === false) framebuffer1 = properties1.get(renderTarget1).__webglMultisampledFramebuffer;
                  else framebuffer1 = __webglFramebuffer1;
                  _currentViewport1.copy(renderTarget1.viewport);
                  _currentScissor1.copy(renderTarget1.scissor);
                  _currentScissorTest1 = renderTarget1.scissorTest;
              } else {
                  _currentViewport1.copy(_viewport1).multiplyScalar(_pixelRatio1).floor();
                  _currentScissor1.copy(_scissor1).multiplyScalar(_pixelRatio1).floor();
                  _currentScissorTest1 = _scissorTest1;
              }
              const framebufferBound1 = state1.bindFramebuffer(36160, framebuffer1);
              if (framebufferBound1 && capabilities1.drawBuffers && useDefaultFramebuffer1) state1.drawBuffers(renderTarget1, framebuffer1);
              state1.viewport(_currentViewport1);
              state1.scissor(_currentScissor1);
              state1.setScissorTest(_currentScissorTest1);
              if (isCube1) {
                  const textureProperties1 = properties1.get(renderTarget1.texture);
                  _gl1.framebufferTexture2D(36160, 36064, 34069 + activeCubeFace1, textureProperties1.__webglTexture, activeMipmapLevel1);
              } else if (isRenderTarget3D1) {
                  const textureProperties1 = properties1.get(renderTarget1.texture);
                  const layer1 = activeCubeFace1 || 0;
                  _gl1.framebufferTextureLayer(36160, 36064, textureProperties1.__webglTexture, activeMipmapLevel1 || 0, layer1);
              }
              _currentMaterialId1 = -1; // reset current material to ensure correct uniform bindings
          };
          this.readRenderTargetPixels = function(renderTarget1, x4, y3, width1, height1, buffer1, activeCubeFaceIndex1) {
              if (!(renderTarget1 && renderTarget1.isWebGLRenderTarget)) {
                  console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
                  return;
              }
              let framebuffer1 = properties1.get(renderTarget1).__webglFramebuffer;
              if (renderTarget1.isWebGLCubeRenderTarget && activeCubeFaceIndex1 !== undefined) framebuffer1 = framebuffer1[activeCubeFaceIndex1];
              if (framebuffer1) {
                  state1.bindFramebuffer(36160, framebuffer1);
                  try {
                      const texture1 = renderTarget1.texture;
                      const textureFormat1 = texture1.format;
                      const textureType1 = texture1.type;
                      if (textureFormat1 !== RGBAFormat && utils1.convert(textureFormat1) !== _gl1.getParameter(35739)) {
                          console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
                          return;
                      }
                      const halfFloatSupportedByExt1 = textureType1 === HalfFloatType && (extensions1.has("EXT_color_buffer_half_float") || capabilities1.isWebGL2 && extensions1.has("EXT_color_buffer_float"));
                      if (textureType1 !== UnsignedByteType && utils1.convert(textureType1) !== _gl1.getParameter(35738) && // Edge and Chrome Mac < 52 (#9513)
                      !(textureType1 === FloatType && (capabilities1.isWebGL2 || extensions1.has("OES_texture_float") || extensions1.has("WEBGL_color_buffer_float"))) && // Chrome Mac >= 52 and Firefox
                      !halfFloatSupportedByExt1) {
                          console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
                          return;
                      }
                      if (_gl1.checkFramebufferStatus(36160) === 36053) // the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)
                      {
                          if (x4 >= 0 && x4 <= renderTarget1.width - width1 && y3 >= 0 && y3 <= renderTarget1.height - height1) _gl1.readPixels(x4, y3, width1, height1, utils1.convert(textureFormat1), utils1.convert(textureType1), buffer1);
                      } else console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.");
                  } finally{
                      // restore framebuffer of current render target if necessary
                      const framebuffer1 = _currentRenderTarget1 !== null ? properties1.get(_currentRenderTarget1).__webglFramebuffer : null;
                      state1.bindFramebuffer(36160, framebuffer1);
                  }
              }
          };
          this.copyFramebufferToTexture = function(position1, texture1, level1 = 0) {
              if (texture1.isFramebufferTexture !== true) {
                  console.error("THREE.WebGLRenderer: copyFramebufferToTexture() can only be used with FramebufferTexture.");
                  return;
              }
              const levelScale1 = Math.pow(2, -level1);
              const width1 = Math.floor(texture1.image.width * levelScale1);
              const height1 = Math.floor(texture1.image.height * levelScale1);
              textures1.setTexture2D(texture1, 0);
              _gl1.copyTexSubImage2D(3553, level1, 0, 0, position1.x, position1.y, width1, height1);
              state1.unbindTexture();
          };
          this.copyTextureToTexture = function(position1, srcTexture1, dstTexture1, level1 = 0) {
              const width1 = srcTexture1.image.width;
              const height1 = srcTexture1.image.height;
              const glFormat1 = utils1.convert(dstTexture1.format);
              const glType1 = utils1.convert(dstTexture1.type);
              textures1.setTexture2D(dstTexture1, 0);
              // As another texture upload may have changed pixelStorei
              // parameters, make sure they are correct for the dstTexture
              _gl1.pixelStorei(37440, dstTexture1.flipY);
              _gl1.pixelStorei(37441, dstTexture1.premultiplyAlpha);
              _gl1.pixelStorei(3317, dstTexture1.unpackAlignment);
              if (srcTexture1.isDataTexture) _gl1.texSubImage2D(3553, level1, position1.x, position1.y, width1, height1, glFormat1, glType1, srcTexture1.image.data);
              else if (srcTexture1.isCompressedTexture) _gl1.compressedTexSubImage2D(3553, level1, position1.x, position1.y, srcTexture1.mipmaps[0].width, srcTexture1.mipmaps[0].height, glFormat1, srcTexture1.mipmaps[0].data);
              else _gl1.texSubImage2D(3553, level1, position1.x, position1.y, glFormat1, glType1, srcTexture1.image);
              // Generate mipmaps only when copying level 0
              if (level1 === 0 && dstTexture1.generateMipmaps) _gl1.generateMipmap(3553);
              state1.unbindTexture();
          };
          this.copyTextureToTexture3D = function(sourceBox1, position1, srcTexture1, dstTexture1, level1 = 0) {
              if (_this1.isWebGL1Renderer) {
                  console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");
                  return;
              }
              const width1 = sourceBox1.max.x - sourceBox1.min.x + 1;
              const height1 = sourceBox1.max.y - sourceBox1.min.y + 1;
              const depth1 = sourceBox1.max.z - sourceBox1.min.z + 1;
              const glFormat1 = utils1.convert(dstTexture1.format);
              const glType1 = utils1.convert(dstTexture1.type);
              let glTarget1;
              if (dstTexture1.isData3DTexture) {
                  textures1.setTexture3D(dstTexture1, 0);
                  glTarget1 = 32879;
              } else if (dstTexture1.isDataArrayTexture) {
                  textures1.setTexture2DArray(dstTexture1, 0);
                  glTarget1 = 35866;
              } else {
                  console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
                  return;
              }
              _gl1.pixelStorei(37440, dstTexture1.flipY);
              _gl1.pixelStorei(37441, dstTexture1.premultiplyAlpha);
              _gl1.pixelStorei(3317, dstTexture1.unpackAlignment);
              const unpackRowLen1 = _gl1.getParameter(3314);
              const unpackImageHeight1 = _gl1.getParameter(32878);
              const unpackSkipPixels1 = _gl1.getParameter(3316);
              const unpackSkipRows1 = _gl1.getParameter(3315);
              const unpackSkipImages1 = _gl1.getParameter(32877);
              const image1 = srcTexture1.isCompressedTexture ? srcTexture1.mipmaps[0] : srcTexture1.image;
              _gl1.pixelStorei(3314, image1.width);
              _gl1.pixelStorei(32878, image1.height);
              _gl1.pixelStorei(3316, sourceBox1.min.x);
              _gl1.pixelStorei(3315, sourceBox1.min.y);
              _gl1.pixelStorei(32877, sourceBox1.min.z);
              if (srcTexture1.isDataTexture || srcTexture1.isData3DTexture) _gl1.texSubImage3D(glTarget1, level1, position1.x, position1.y, position1.z, width1, height1, depth1, glFormat1, glType1, image1.data);
              else if (srcTexture1.isCompressedTexture) {
                  console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.");
                  _gl1.compressedTexSubImage3D(glTarget1, level1, position1.x, position1.y, position1.z, width1, height1, depth1, glFormat1, image1.data);
              } else _gl1.texSubImage3D(glTarget1, level1, position1.x, position1.y, position1.z, width1, height1, depth1, glFormat1, glType1, image1);
              _gl1.pixelStorei(3314, unpackRowLen1);
              _gl1.pixelStorei(32878, unpackImageHeight1);
              _gl1.pixelStorei(3316, unpackSkipPixels1);
              _gl1.pixelStorei(3315, unpackSkipRows1);
              _gl1.pixelStorei(32877, unpackSkipImages1);
              // Generate mipmaps only when copying level 0
              if (level1 === 0 && dstTexture1.generateMipmaps) _gl1.generateMipmap(glTarget1);
              state1.unbindTexture();
          };
          this.initTexture = function(texture1) {
              textures1.setTexture2D(texture1, 0);
              state1.unbindTexture();
          };
          this.resetState = function() {
              _currentActiveCubeFace1 = 0;
              _currentActiveMipmapLevel1 = 0;
              _currentRenderTarget1 = null;
              state1.reset();
              bindingStates1.reset();
          };
          if (typeof __THREE_DEVTOOLS__ !== "undefined") __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {
              detail: this
          }));
      }
      WebGLRenderer.prototype.isWebGLRenderer = true;
      class WebGL1Renderer extends WebGLRenderer {
      }
      WebGL1Renderer.prototype.isWebGL1Renderer = true;
      class FogExp2 {
          constructor(color3, density1 = 0.00025){
              this.name = "";
              this.color = new Color(color3);
              this.density = density1;
          }
          clone() {
              return new FogExp2(this.color, this.density);
          }
          toJSON() {
              return {
                  type: "FogExp2",
                  color: this.color.getHex(),
                  density: this.density
              };
          }
      }
      FogExp2.prototype.isFogExp2 = true;
      class Fog {
          constructor(color3, near1 = 1, far1 = 1000){
              this.name = "";
              this.color = new Color(color3);
              this.near = near1;
              this.far = far1;
          }
          clone() {
              return new Fog(this.color, this.near, this.far);
          }
          toJSON() {
              return {
                  type: "Fog",
                  color: this.color.getHex(),
                  near: this.near,
                  far: this.far
              };
          }
      }
      Fog.prototype.isFog = true;
      class Scene extends Object3D {
          constructor(){
              super();
              this.type = "Scene";
              this.background = null;
              this.environment = null;
              this.fog = null;
              this.overrideMaterial = null;
              this.autoUpdate = true; // checked by the renderer
              if (typeof __THREE_DEVTOOLS__ !== "undefined") __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {
                  detail: this
              }));
          }
          copy(source1, recursive1) {
              super.copy(source1, recursive1);
              if (source1.background !== null) this.background = source1.background.clone();
              if (source1.environment !== null) this.environment = source1.environment.clone();
              if (source1.fog !== null) this.fog = source1.fog.clone();
              if (source1.overrideMaterial !== null) this.overrideMaterial = source1.overrideMaterial.clone();
              this.autoUpdate = source1.autoUpdate;
              this.matrixAutoUpdate = source1.matrixAutoUpdate;
              return this;
          }
          toJSON(meta1) {
              const data1 = super.toJSON(meta1);
              if (this.fog !== null) data1.object.fog = this.fog.toJSON();
              return data1;
          }
      }
      Scene.prototype.isScene = true;
      class InterleavedBuffer {
          constructor(array1, stride1){
              this.array = array1;
              this.stride = stride1;
              this.count = array1 !== undefined ? array1.length / stride1 : 0;
              this.usage = StaticDrawUsage;
              this.updateRange = {
                  offset: 0,
                  count: -1
              };
              this.version = 0;
              this.uuid = generateUUID();
          }
          onUploadCallback() {}
          set needsUpdate(value1) {
              if (value1 === true) this.version++;
          }
          setUsage(value1) {
              this.usage = value1;
              return this;
          }
          copy(source1) {
              this.array = new source1.array.constructor(source1.array);
              this.count = source1.count;
              this.stride = source1.stride;
              this.usage = source1.usage;
              return this;
          }
          copyAt(index11, attribute3, index21) {
              index11 *= this.stride;
              index21 *= attribute3.stride;
              for(let i3 = 0, l1 = this.stride; i3 < l1; i3++)this.array[index11 + i3] = attribute3.array[index21 + i3];
              return this;
          }
          set(value1, offset2 = 0) {
              this.array.set(value1, offset2);
              return this;
          }
          clone(data1) {
              if (data1.arrayBuffers === undefined) data1.arrayBuffers = {};
              if (this.array.buffer._uuid === undefined) this.array.buffer._uuid = generateUUID();
              if (data1.arrayBuffers[this.array.buffer._uuid] === undefined) data1.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;
              const array1 = new this.array.constructor(data1.arrayBuffers[this.array.buffer._uuid]);
              const ib1 = new this.constructor(array1, this.stride);
              ib1.setUsage(this.usage);
              return ib1;
          }
          onUpload(callback1) {
              this.onUploadCallback = callback1;
              return this;
          }
          toJSON(data1) {
              if (data1.arrayBuffers === undefined) data1.arrayBuffers = {};
              // generate UUID for array buffer if necessary
              if (this.array.buffer._uuid === undefined) this.array.buffer._uuid = generateUUID();
              if (data1.arrayBuffers[this.array.buffer._uuid] === undefined) data1.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));
              //
              return {
                  uuid: this.uuid,
                  buffer: this.array.buffer._uuid,
                  type: this.array.constructor.name,
                  stride: this.stride
              };
          }
      }
      InterleavedBuffer.prototype.isInterleavedBuffer = true;
      const _vector$6 = /*@__PURE__*/ new Vector3();
      class InterleavedBufferAttribute {
          constructor(interleavedBuffer1, itemSize1, offset2, normalized1 = false){
              this.name = "";
              this.data = interleavedBuffer1;
              this.itemSize = itemSize1;
              this.offset = offset2;
              this.normalized = normalized1 === true;
          }
          get count() {
              return this.data.count;
          }
          get array() {
              return this.data.array;
          }
          set needsUpdate(value1) {
              this.data.needsUpdate = value1;
          }
          applyMatrix4(m1) {
              for(let i3 = 0, l1 = this.data.count; i3 < l1; i3++){
                  _vector$6.x = this.getX(i3);
                  _vector$6.y = this.getY(i3);
                  _vector$6.z = this.getZ(i3);
                  _vector$6.applyMatrix4(m1);
                  this.setXYZ(i3, _vector$6.x, _vector$6.y, _vector$6.z);
              }
              return this;
          }
          applyNormalMatrix(m1) {
              for(let i3 = 0, l1 = this.count; i3 < l1; i3++){
                  _vector$6.x = this.getX(i3);
                  _vector$6.y = this.getY(i3);
                  _vector$6.z = this.getZ(i3);
                  _vector$6.applyNormalMatrix(m1);
                  this.setXYZ(i3, _vector$6.x, _vector$6.y, _vector$6.z);
              }
              return this;
          }
          transformDirection(m1) {
              for(let i3 = 0, l1 = this.count; i3 < l1; i3++){
                  _vector$6.x = this.getX(i3);
                  _vector$6.y = this.getY(i3);
                  _vector$6.z = this.getZ(i3);
                  _vector$6.transformDirection(m1);
                  this.setXYZ(i3, _vector$6.x, _vector$6.y, _vector$6.z);
              }
              return this;
          }
          setX(index3, x4) {
              this.data.array[index3 * this.data.stride + this.offset] = x4;
              return this;
          }
          setY(index3, y3) {
              this.data.array[index3 * this.data.stride + this.offset + 1] = y3;
              return this;
          }
          setZ(index3, z3) {
              this.data.array[index3 * this.data.stride + this.offset + 2] = z3;
              return this;
          }
          setW(index3, w2) {
              this.data.array[index3 * this.data.stride + this.offset + 3] = w2;
              return this;
          }
          getX(index3) {
              return this.data.array[index3 * this.data.stride + this.offset];
          }
          getY(index3) {
              return this.data.array[index3 * this.data.stride + this.offset + 1];
          }
          getZ(index3) {
              return this.data.array[index3 * this.data.stride + this.offset + 2];
          }
          getW(index3) {
              return this.data.array[index3 * this.data.stride + this.offset + 3];
          }
          setXY(index3, x4, y3) {
              index3 = index3 * this.data.stride + this.offset;
              this.data.array[index3 + 0] = x4;
              this.data.array[index3 + 1] = y3;
              return this;
          }
          setXYZ(index3, x4, y3, z3) {
              index3 = index3 * this.data.stride + this.offset;
              this.data.array[index3 + 0] = x4;
              this.data.array[index3 + 1] = y3;
              this.data.array[index3 + 2] = z3;
              return this;
          }
          setXYZW(index3, x4, y3, z3, w2) {
              index3 = index3 * this.data.stride + this.offset;
              this.data.array[index3 + 0] = x4;
              this.data.array[index3 + 1] = y3;
              this.data.array[index3 + 2] = z3;
              this.data.array[index3 + 3] = w2;
              return this;
          }
          clone(data1) {
              if (data1 === undefined) {
                  console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");
                  const array1 = [];
                  for(let i3 = 0; i3 < this.count; i3++){
                      const index3 = i3 * this.data.stride + this.offset;
                      for(let j1 = 0; j1 < this.itemSize; j1++)array1.push(this.data.array[index3 + j1]);
                  }
                  return new BufferAttribute(new this.array.constructor(array1), this.itemSize, this.normalized);
              } else {
                  if (data1.interleavedBuffers === undefined) data1.interleavedBuffers = {};
                  if (data1.interleavedBuffers[this.data.uuid] === undefined) data1.interleavedBuffers[this.data.uuid] = this.data.clone(data1);
                  return new InterleavedBufferAttribute(data1.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
              }
          }
          toJSON(data1) {
              if (data1 === undefined) {
                  console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");
                  const array1 = [];
                  for(let i3 = 0; i3 < this.count; i3++){
                      const index3 = i3 * this.data.stride + this.offset;
                      for(let j1 = 0; j1 < this.itemSize; j1++)array1.push(this.data.array[index3 + j1]);
                  }
                  // deinterleave data and save it as an ordinary buffer attribute for now
                  return {
                      itemSize: this.itemSize,
                      type: this.array.constructor.name,
                      array: array1,
                      normalized: this.normalized
                  };
              } else {
                  // save as true interlaved attribtue
                  if (data1.interleavedBuffers === undefined) data1.interleavedBuffers = {};
                  if (data1.interleavedBuffers[this.data.uuid] === undefined) data1.interleavedBuffers[this.data.uuid] = this.data.toJSON(data1);
                  return {
                      isInterleavedBufferAttribute: true,
                      itemSize: this.itemSize,
                      data: this.data.uuid,
                      offset: this.offset,
                      normalized: this.normalized
                  };
              }
          }
      }
      InterleavedBufferAttribute.prototype.isInterleavedBufferAttribute = true;
      /**
     * parameters = {
     *  color: <hex>,
     *  map: new THREE.Texture( <Image> ),
     *  alphaMap: new THREE.Texture( <Image> ),
     *  rotation: <float>,
     *  sizeAttenuation: <bool>
     * }
     */ class SpriteMaterial extends Material {
          constructor(parameters1){
              super();
              this.type = "SpriteMaterial";
              this.color = new Color(0xffffff);
              this.map = null;
              this.alphaMap = null;
              this.rotation = 0;
              this.sizeAttenuation = true;
              this.transparent = true;
              this.setValues(parameters1);
          }
          copy(source1) {
              super.copy(source1);
              this.color.copy(source1.color);
              this.map = source1.map;
              this.alphaMap = source1.alphaMap;
              this.rotation = source1.rotation;
              this.sizeAttenuation = source1.sizeAttenuation;
              return this;
          }
      }
      SpriteMaterial.prototype.isSpriteMaterial = true;
      let _geometry;
      const _intersectPoint = /*@__PURE__*/ new Vector3();
      const _worldScale = /*@__PURE__*/ new Vector3();
      const _mvPosition = /*@__PURE__*/ new Vector3();
      const _alignedPosition = /*@__PURE__*/ new Vector2();
      const _rotatedPosition = /*@__PURE__*/ new Vector2();
      const _viewWorldMatrix = /*@__PURE__*/ new Matrix4();
      const _vA = /*@__PURE__*/ new Vector3();
      const _vB = /*@__PURE__*/ new Vector3();
      const _vC = /*@__PURE__*/ new Vector3();
      const _uvA = /*@__PURE__*/ new Vector2();
      const _uvB = /*@__PURE__*/ new Vector2();
      const _uvC = /*@__PURE__*/ new Vector2();
      class Sprite extends Object3D {
          constructor(material1){
              super();
              this.type = "Sprite";
              if (_geometry === undefined) {
                  _geometry = new BufferGeometry();
                  const float32Array1 = new Float32Array([
                      -0.5,
                      -0.5,
                      0,
                      0,
                      0,
                      0.5,
                      -0.5,
                      0,
                      1,
                      0,
                      0.5,
                      0.5,
                      0,
                      1,
                      1,
                      -0.5,
                      0.5,
                      0,
                      0,
                      1
                  ]);
                  const interleavedBuffer1 = new InterleavedBuffer(float32Array1, 5);
                  _geometry.setIndex([
                      0,
                      1,
                      2,
                      0,
                      2,
                      3
                  ]);
                  _geometry.setAttribute("position", new InterleavedBufferAttribute(interleavedBuffer1, 3, 0, false));
                  _geometry.setAttribute("uv", new InterleavedBufferAttribute(interleavedBuffer1, 2, 3, false));
              }
              this.geometry = _geometry;
              this.material = material1 !== undefined ? material1 : new SpriteMaterial();
              this.center = new Vector2(0.5, 0.5);
          }
          raycast(raycaster1, intersects1) {
              if (raycaster1.camera === null) console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.');
              _worldScale.setFromMatrixScale(this.matrixWorld);
              _viewWorldMatrix.copy(raycaster1.camera.matrixWorld);
              this.modelViewMatrix.multiplyMatrices(raycaster1.camera.matrixWorldInverse, this.matrixWorld);
              _mvPosition.setFromMatrixPosition(this.modelViewMatrix);
              if (raycaster1.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) _worldScale.multiplyScalar(-_mvPosition.z);
              const rotation1 = this.material.rotation;
              let sin1, cos1;
              if (rotation1 !== 0) {
                  cos1 = Math.cos(rotation1);
                  sin1 = Math.sin(rotation1);
              }
              const center1 = this.center;
              transformVertex(_vA.set(-0.5, -0.5, 0), _mvPosition, center1, _worldScale, sin1, cos1);
              transformVertex(_vB.set(0.5, -0.5, 0), _mvPosition, center1, _worldScale, sin1, cos1);
              transformVertex(_vC.set(0.5, 0.5, 0), _mvPosition, center1, _worldScale, sin1, cos1);
              _uvA.set(0, 0);
              _uvB.set(1, 0);
              _uvC.set(1, 1);
              // check first triangle
              let intersect1 = raycaster1.ray.intersectTriangle(_vA, _vB, _vC, false, _intersectPoint);
              if (intersect1 === null) {
                  // check second triangle
                  transformVertex(_vB.set(-0.5, 0.5, 0), _mvPosition, center1, _worldScale, sin1, cos1);
                  _uvB.set(0, 1);
                  intersect1 = raycaster1.ray.intersectTriangle(_vA, _vC, _vB, false, _intersectPoint);
                  if (intersect1 === null) return;
              }
              const distance1 = raycaster1.ray.origin.distanceTo(_intersectPoint);
              if (distance1 < raycaster1.near || distance1 > raycaster1.far) return;
              intersects1.push({
                  distance: distance1,
                  point: _intersectPoint.clone(),
                  uv: Triangle.getUV(_intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2()),
                  face: null,
                  object: this
              });
          }
          copy(source1) {
              super.copy(source1);
              if (source1.center !== undefined) this.center.copy(source1.center);
              this.material = source1.material;
              return this;
          }
      }
      Sprite.prototype.isSprite = true;
      function transformVertex(vertexPosition1, mvPosition1, center1, scale1, sin1, cos1) {
          // compute position in camera space
          _alignedPosition.subVectors(vertexPosition1, center1).addScalar(0.5).multiply(scale1);
          // to check if rotation is not zero
          if (sin1 !== undefined) {
              _rotatedPosition.x = cos1 * _alignedPosition.x - sin1 * _alignedPosition.y;
              _rotatedPosition.y = sin1 * _alignedPosition.x + cos1 * _alignedPosition.y;
          } else _rotatedPosition.copy(_alignedPosition);
          vertexPosition1.copy(mvPosition1);
          vertexPosition1.x += _rotatedPosition.x;
          vertexPosition1.y += _rotatedPosition.y;
          // transform to world space
          vertexPosition1.applyMatrix4(_viewWorldMatrix);
      }
      const _v1$2 = /*@__PURE__*/ new Vector3();
      const _v2$1 = /*@__PURE__*/ new Vector3();
      class LOD extends Object3D {
          constructor(){
              super();
              this._currentLevel = 0;
              this.type = "LOD";
              Object.defineProperties(this, {
                  levels: {
                      enumerable: true,
                      value: []
                  },
                  isLOD: {
                      value: true
                  }
              });
              this.autoUpdate = true;
          }
          copy(source1) {
              super.copy(source1, false);
              const levels1 = source1.levels;
              for(let i3 = 0, l1 = levels1.length; i3 < l1; i3++){
                  const level1 = levels1[i3];
                  this.addLevel(level1.object.clone(), level1.distance);
              }
              this.autoUpdate = source1.autoUpdate;
              return this;
          }
          addLevel(object1, distance1 = 0) {
              distance1 = Math.abs(distance1);
              const levels1 = this.levels;
              let l1;
              for(l1 = 0; l1 < levels1.length; l1++){
                  if (distance1 < levels1[l1].distance) break;
              }
              levels1.splice(l1, 0, {
                  distance: distance1,
                  object: object1
              });
              this.add(object1);
              return this;
          }
          getCurrentLevel() {
              return this._currentLevel;
          }
          getObjectForDistance(distance1) {
              const levels1 = this.levels;
              if (levels1.length > 0) {
                  let i3, l1;
                  for(i3 = 1, l1 = levels1.length; i3 < l1; i3++){
                      if (distance1 < levels1[i3].distance) break;
                  }
                  return levels1[i3 - 1].object;
              }
              return null;
          }
          raycast(raycaster1, intersects1) {
              const levels1 = this.levels;
              if (levels1.length > 0) {
                  _v1$2.setFromMatrixPosition(this.matrixWorld);
                  const distance1 = raycaster1.ray.origin.distanceTo(_v1$2);
                  this.getObjectForDistance(distance1).raycast(raycaster1, intersects1);
              }
          }
          update(camera1) {
              const levels1 = this.levels;
              if (levels1.length > 1) {
                  _v1$2.setFromMatrixPosition(camera1.matrixWorld);
                  _v2$1.setFromMatrixPosition(this.matrixWorld);
                  const distance1 = _v1$2.distanceTo(_v2$1) / camera1.zoom;
                  levels1[0].object.visible = true;
                  let i3, l1;
                  for(i3 = 1, l1 = levels1.length; i3 < l1; i3++){
                      if (distance1 >= levels1[i3].distance) {
                          levels1[i3 - 1].object.visible = false;
                          levels1[i3].object.visible = true;
                      } else break;
                  }
                  this._currentLevel = i3 - 1;
                  for(; i3 < l1; i3++)levels1[i3].object.visible = false;
              }
          }
          toJSON(meta1) {
              const data1 = super.toJSON(meta1);
              if (this.autoUpdate === false) data1.object.autoUpdate = false;
              data1.object.levels = [];
              const levels1 = this.levels;
              for(let i3 = 0, l1 = levels1.length; i3 < l1; i3++){
                  const level1 = levels1[i3];
                  data1.object.levels.push({
                      object: level1.object.uuid,
                      distance: level1.distance
                  });
              }
              return data1;
          }
      }
      const _basePosition = /*@__PURE__*/ new Vector3();
      const _skinIndex = /*@__PURE__*/ new Vector4$1();
      const _skinWeight = /*@__PURE__*/ new Vector4$1();
      const _vector$5 = /*@__PURE__*/ new Vector3();
      const _matrix = /*@__PURE__*/ new Matrix4();
      class SkinnedMesh extends Mesh {
          constructor(geometry1, material1){
              super(geometry1, material1);
              this.type = "SkinnedMesh";
              this.bindMode = "attached";
              this.bindMatrix = new Matrix4();
              this.bindMatrixInverse = new Matrix4();
          }
          copy(source1) {
              super.copy(source1);
              this.bindMode = source1.bindMode;
              this.bindMatrix.copy(source1.bindMatrix);
              this.bindMatrixInverse.copy(source1.bindMatrixInverse);
              this.skeleton = source1.skeleton;
              return this;
          }
          bind(skeleton1, bindMatrix1) {
              this.skeleton = skeleton1;
              if (bindMatrix1 === undefined) {
                  this.updateMatrixWorld(true);
                  this.skeleton.calculateInverses();
                  bindMatrix1 = this.matrixWorld;
              }
              this.bindMatrix.copy(bindMatrix1);
              this.bindMatrixInverse.copy(bindMatrix1).invert();
          }
          pose() {
              this.skeleton.pose();
          }
          normalizeSkinWeights() {
              const vector1 = new Vector4$1();
              const skinWeight1 = this.geometry.attributes.skinWeight;
              for(let i3 = 0, l1 = skinWeight1.count; i3 < l1; i3++){
                  vector1.x = skinWeight1.getX(i3);
                  vector1.y = skinWeight1.getY(i3);
                  vector1.z = skinWeight1.getZ(i3);
                  vector1.w = skinWeight1.getW(i3);
                  const scale1 = 1.0 / vector1.manhattanLength();
                  if (scale1 !== Infinity) vector1.multiplyScalar(scale1);
                  else vector1.set(1, 0, 0, 0); // do something reasonable
                  skinWeight1.setXYZW(i3, vector1.x, vector1.y, vector1.z, vector1.w);
              }
          }
          updateMatrixWorld(force1) {
              super.updateMatrixWorld(force1);
              if (this.bindMode === "attached") this.bindMatrixInverse.copy(this.matrixWorld).invert();
              else if (this.bindMode === "detached") this.bindMatrixInverse.copy(this.bindMatrix).invert();
              else console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
          }
          boneTransform(index3, target1) {
              const skeleton1 = this.skeleton;
              const geometry1 = this.geometry;
              _skinIndex.fromBufferAttribute(geometry1.attributes.skinIndex, index3);
              _skinWeight.fromBufferAttribute(geometry1.attributes.skinWeight, index3);
              _basePosition.copy(target1).applyMatrix4(this.bindMatrix);
              target1.set(0, 0, 0);
              for(let i3 = 0; i3 < 4; i3++){
                  const weight2 = _skinWeight.getComponent(i3);
                  if (weight2 !== 0) {
                      const boneIndex1 = _skinIndex.getComponent(i3);
                      _matrix.multiplyMatrices(skeleton1.bones[boneIndex1].matrixWorld, skeleton1.boneInverses[boneIndex1]);
                      target1.addScaledVector(_vector$5.copy(_basePosition).applyMatrix4(_matrix), weight2);
                  }
              }
              return target1.applyMatrix4(this.bindMatrixInverse);
          }
      }
      SkinnedMesh.prototype.isSkinnedMesh = true;
      class Bone extends Object3D {
          constructor(){
              super();
              this.type = "Bone";
          }
      }
      Bone.prototype.isBone = true;
      class DataTexture extends Texture {
          constructor(data1 = null, width1 = 1, height1 = 1, format1, type1, mapping1, wrapS1, wrapT1, magFilter1 = NearestFilter, minFilter1 = NearestFilter, anisotropy1, encoding1){
              super(null, mapping1, wrapS1, wrapT1, magFilter1, minFilter1, format1, type1, anisotropy1, encoding1);
              this.image = {
                  data: data1,
                  width: width1,
                  height: height1
              };
              this.generateMipmaps = false;
              this.flipY = false;
              this.unpackAlignment = 1;
          }
      }
      DataTexture.prototype.isDataTexture = true;
      const _offsetMatrix = /*@__PURE__*/ new Matrix4();
      const _identityMatrix = /*@__PURE__*/ new Matrix4();
      class Skeleton {
          constructor(bones1 = [], boneInverses1 = []){
              this.uuid = generateUUID();
              this.bones = bones1.slice(0);
              this.boneInverses = boneInverses1;
              this.boneMatrices = null;
              this.boneTexture = null;
              this.boneTextureSize = 0;
              this.frame = -1;
              this.init();
          }
          init() {
              const bones1 = this.bones;
              const boneInverses1 = this.boneInverses;
              this.boneMatrices = new Float32Array(bones1.length * 16);
              // calculate inverse bone matrices if necessary
              if (boneInverses1.length === 0) this.calculateInverses();
              else // handle special case
              if (bones1.length !== boneInverses1.length) {
                  console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.");
                  this.boneInverses = [];
                  for(let i3 = 0, il1 = this.bones.length; i3 < il1; i3++)this.boneInverses.push(new Matrix4());
              }
          }
          calculateInverses() {
              this.boneInverses.length = 0;
              for(let i3 = 0, il1 = this.bones.length; i3 < il1; i3++){
                  const inverse1 = new Matrix4();
                  if (this.bones[i3]) inverse1.copy(this.bones[i3].matrixWorld).invert();
                  this.boneInverses.push(inverse1);
              }
          }
          pose() {
              // recover the bind-time world matrices
              for(let i3 = 0, il1 = this.bones.length; i3 < il1; i3++){
                  const bone1 = this.bones[i3];
                  if (bone1) bone1.matrixWorld.copy(this.boneInverses[i3]).invert();
              }
              // compute the local matrices, positions, rotations and scales
              for(let i3 = 0, il1 = this.bones.length; i3 < il1; i3++){
                  const bone1 = this.bones[i3];
                  if (bone1) {
                      if (bone1.parent && bone1.parent.isBone) {
                          bone1.matrix.copy(bone1.parent.matrixWorld).invert();
                          bone1.matrix.multiply(bone1.matrixWorld);
                      } else bone1.matrix.copy(bone1.matrixWorld);
                      bone1.matrix.decompose(bone1.position, bone1.quaternion, bone1.scale);
                  }
              }
          }
          update() {
              const bones1 = this.bones;
              const boneInverses1 = this.boneInverses;
              const boneMatrices1 = this.boneMatrices;
              const boneTexture1 = this.boneTexture;
              // flatten bone matrices to array
              for(let i3 = 0, il1 = bones1.length; i3 < il1; i3++){
                  // compute the offset between the current and the original transform
                  const matrix1 = bones1[i3] ? bones1[i3].matrixWorld : _identityMatrix;
                  _offsetMatrix.multiplyMatrices(matrix1, boneInverses1[i3]);
                  _offsetMatrix.toArray(boneMatrices1, i3 * 16);
              }
              if (boneTexture1 !== null) boneTexture1.needsUpdate = true;
          }
          clone() {
              return new Skeleton(this.bones, this.boneInverses);
          }
          computeBoneTexture() {
              // layout (1 matrix = 4 pixels)
              //      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
              //  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
              //       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
              //       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
              //       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)
              let size1 = Math.sqrt(this.bones.length * 4); // 4 pixels needed for 1 matrix
              size1 = ceilPowerOfTwo(size1);
              size1 = Math.max(size1, 4);
              const boneMatrices1 = new Float32Array(size1 * size1 * 4); // 4 floats per RGBA pixel
              boneMatrices1.set(this.boneMatrices); // copy current values
              const boneTexture1 = new DataTexture(boneMatrices1, size1, size1, RGBAFormat, FloatType);
              boneTexture1.needsUpdate = true;
              this.boneMatrices = boneMatrices1;
              this.boneTexture = boneTexture1;
              this.boneTextureSize = size1;
              return this;
          }
          getBoneByName(name1) {
              for(let i3 = 0, il1 = this.bones.length; i3 < il1; i3++){
                  const bone1 = this.bones[i3];
                  if (bone1.name === name1) return bone1;
              }
              return undefined;
          }
          dispose() {
              if (this.boneTexture !== null) {
                  this.boneTexture.dispose();
                  this.boneTexture = null;
              }
          }
          fromJSON(json1, bones1) {
              this.uuid = json1.uuid;
              for(let i3 = 0, l1 = json1.bones.length; i3 < l1; i3++){
                  const uuid1 = json1.bones[i3];
                  let bone1 = bones1[uuid1];
                  if (bone1 === undefined) {
                      console.warn("THREE.Skeleton: No bone found with UUID:", uuid1);
                      bone1 = new Bone();
                  }
                  this.bones.push(bone1);
                  this.boneInverses.push(new Matrix4().fromArray(json1.boneInverses[i3]));
              }
              this.init();
              return this;
          }
          toJSON() {
              const data1 = {
                  metadata: {
                      version: 4.5,
                      type: "Skeleton",
                      generator: "Skeleton.toJSON"
                  },
                  bones: [],
                  boneInverses: []
              };
              data1.uuid = this.uuid;
              const bones1 = this.bones;
              const boneInverses1 = this.boneInverses;
              for(let i3 = 0, l1 = bones1.length; i3 < l1; i3++){
                  const bone1 = bones1[i3];
                  data1.bones.push(bone1.uuid);
                  const boneInverse1 = boneInverses1[i3];
                  data1.boneInverses.push(boneInverse1.toArray());
              }
              return data1;
          }
      }
      class InstancedBufferAttribute extends BufferAttribute {
          constructor(array1, itemSize1, normalized1, meshPerAttribute1 = 1){
              if (typeof normalized1 === "number") {
                  meshPerAttribute1 = normalized1;
                  normalized1 = false;
                  console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.");
              }
              super(array1, itemSize1, normalized1);
              this.meshPerAttribute = meshPerAttribute1;
          }
          copy(source1) {
              super.copy(source1);
              this.meshPerAttribute = source1.meshPerAttribute;
              return this;
          }
          toJSON() {
              const data1 = super.toJSON();
              data1.meshPerAttribute = this.meshPerAttribute;
              data1.isInstancedBufferAttribute = true;
              return data1;
          }
      }
      InstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;
      const _instanceLocalMatrix = /*@__PURE__*/ new Matrix4();
      const _instanceWorldMatrix = /*@__PURE__*/ new Matrix4();
      const _instanceIntersects = [];
      const _mesh = /*@__PURE__*/ new Mesh();
      class InstancedMesh extends Mesh {
          constructor(geometry1, material1, count1){
              super(geometry1, material1);
              this.instanceMatrix = new InstancedBufferAttribute(new Float32Array(count1 * 16), 16);
              this.instanceColor = null;
              this.count = count1;
              this.frustumCulled = false;
          }
          copy(source1) {
              super.copy(source1);
              this.instanceMatrix.copy(source1.instanceMatrix);
              if (source1.instanceColor !== null) this.instanceColor = source1.instanceColor.clone();
              this.count = source1.count;
              return this;
          }
          getColorAt(index3, color3) {
              color3.fromArray(this.instanceColor.array, index3 * 3);
          }
          getMatrixAt(index3, matrix1) {
              matrix1.fromArray(this.instanceMatrix.array, index3 * 16);
          }
          raycast(raycaster1, intersects1) {
              const matrixWorld1 = this.matrixWorld;
              const raycastTimes1 = this.count;
              _mesh.geometry = this.geometry;
              _mesh.material = this.material;
              if (_mesh.material === undefined) return;
              for(let instanceId1 = 0; instanceId1 < raycastTimes1; instanceId1++){
                  // calculate the world matrix for each instance
                  this.getMatrixAt(instanceId1, _instanceLocalMatrix);
                  _instanceWorldMatrix.multiplyMatrices(matrixWorld1, _instanceLocalMatrix);
                  // the mesh represents this single instance
                  _mesh.matrixWorld = _instanceWorldMatrix;
                  _mesh.raycast(raycaster1, _instanceIntersects);
                  // process the result of raycast
                  for(let i3 = 0, l1 = _instanceIntersects.length; i3 < l1; i3++){
                      const intersect1 = _instanceIntersects[i3];
                      intersect1.instanceId = instanceId1;
                      intersect1.object = this;
                      intersects1.push(intersect1);
                  }
                  _instanceIntersects.length = 0;
              }
          }
          setColorAt(index3, color3) {
              if (this.instanceColor === null) this.instanceColor = new InstancedBufferAttribute(new Float32Array(this.instanceMatrix.count * 3), 3);
              color3.toArray(this.instanceColor.array, index3 * 3);
          }
          setMatrixAt(index3, matrix1) {
              matrix1.toArray(this.instanceMatrix.array, index3 * 16);
          }
          updateMorphTargets() {}
          dispose() {
              this.dispatchEvent({
                  type: "dispose"
              });
          }
      }
      InstancedMesh.prototype.isInstancedMesh = true;
      /**
     * parameters = {
     *  color: <hex>,
     *  opacity: <float>,
     *
     *  linewidth: <float>,
     *  linecap: "round",
     *  linejoin: "round"
     * }
     */ class LineBasicMaterial extends Material {
          constructor(parameters1){
              super();
              this.type = "LineBasicMaterial";
              this.color = new Color(0xffffff);
              this.linewidth = 1;
              this.linecap = "round";
              this.linejoin = "round";
              this.setValues(parameters1);
          }
          copy(source1) {
              super.copy(source1);
              this.color.copy(source1.color);
              this.linewidth = source1.linewidth;
              this.linecap = source1.linecap;
              this.linejoin = source1.linejoin;
              return this;
          }
      }
      LineBasicMaterial.prototype.isLineBasicMaterial = true;
      const _start$1 = /*@__PURE__*/ new Vector3();
      const _end$1 = /*@__PURE__*/ new Vector3();
      const _inverseMatrix$1 = /*@__PURE__*/ new Matrix4();
      const _ray$1 = /*@__PURE__*/ new Ray();
      const _sphere$1 = /*@__PURE__*/ new Sphere();
      class Line extends Object3D {
          constructor(geometry1 = new BufferGeometry(), material1 = new LineBasicMaterial()){
              super();
              this.type = "Line";
              this.geometry = geometry1;
              this.material = material1;
              this.updateMorphTargets();
          }
          copy(source1) {
              super.copy(source1);
              this.material = source1.material;
              this.geometry = source1.geometry;
              return this;
          }
          computeLineDistances() {
              const geometry1 = this.geometry;
              if (geometry1.isBufferGeometry) {
                  // we assume non-indexed geometry
                  if (geometry1.index === null) {
                      const positionAttribute1 = geometry1.attributes.position;
                      const lineDistances1 = [
                          0
                      ];
                      for(let i3 = 1, l1 = positionAttribute1.count; i3 < l1; i3++){
                          _start$1.fromBufferAttribute(positionAttribute1, i3 - 1);
                          _end$1.fromBufferAttribute(positionAttribute1, i3);
                          lineDistances1[i3] = lineDistances1[i3 - 1];
                          lineDistances1[i3] += _start$1.distanceTo(_end$1);
                      }
                      geometry1.setAttribute("lineDistance", new Float32BufferAttribute(lineDistances1, 1));
                  } else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
              } else if (geometry1.isGeometry) console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
              return this;
          }
          raycast(raycaster1, intersects1) {
              const geometry1 = this.geometry;
              const matrixWorld1 = this.matrixWorld;
              const threshold1 = raycaster1.params.Line.threshold;
              const drawRange1 = geometry1.drawRange;
              // Checking boundingSphere distance to ray
              if (geometry1.boundingSphere === null) geometry1.computeBoundingSphere();
              _sphere$1.copy(geometry1.boundingSphere);
              _sphere$1.applyMatrix4(matrixWorld1);
              _sphere$1.radius += threshold1;
              if (raycaster1.ray.intersectsSphere(_sphere$1) === false) return;
              //
              _inverseMatrix$1.copy(matrixWorld1).invert();
              _ray$1.copy(raycaster1.ray).applyMatrix4(_inverseMatrix$1);
              const localThreshold1 = threshold1 / ((this.scale.x + this.scale.y + this.scale.z) / 3);
              const localThresholdSq1 = localThreshold1 * localThreshold1;
              const vStart1 = new Vector3();
              const vEnd1 = new Vector3();
              const interSegment1 = new Vector3();
              const interRay1 = new Vector3();
              const step1 = this.isLineSegments ? 2 : 1;
              if (geometry1.isBufferGeometry) {
                  const index3 = geometry1.index;
                  const attributes1 = geometry1.attributes;
                  const positionAttribute1 = attributes1.position;
                  if (index3 !== null) {
                      const start1 = Math.max(0, drawRange1.start);
                      const end1 = Math.min(index3.count, drawRange1.start + drawRange1.count);
                      for(let i3 = start1, l1 = end1 - 1; i3 < l1; i3 += step1){
                          const a3 = index3.getX(i3);
                          const b3 = index3.getX(i3 + 1);
                          vStart1.fromBufferAttribute(positionAttribute1, a3);
                          vEnd1.fromBufferAttribute(positionAttribute1, b3);
                          const distSq1 = _ray$1.distanceSqToSegment(vStart1, vEnd1, interRay1, interSegment1);
                          if (distSq1 > localThresholdSq1) continue;
                          interRay1.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation
                          const distance1 = raycaster1.ray.origin.distanceTo(interRay1);
                          if (distance1 < raycaster1.near || distance1 > raycaster1.far) continue;
                          intersects1.push({
                              distance: distance1,
                              // What do we want? intersection point on the ray or on the segment??
                              // point: raycaster.ray.at( distance ),
                              point: interSegment1.clone().applyMatrix4(this.matrixWorld),
                              index: i3,
                              face: null,
                              faceIndex: null,
                              object: this
                          });
                      }
                  } else {
                      const start1 = Math.max(0, drawRange1.start);
                      const end1 = Math.min(positionAttribute1.count, drawRange1.start + drawRange1.count);
                      for(let i3 = start1, l1 = end1 - 1; i3 < l1; i3 += step1){
                          vStart1.fromBufferAttribute(positionAttribute1, i3);
                          vEnd1.fromBufferAttribute(positionAttribute1, i3 + 1);
                          const distSq1 = _ray$1.distanceSqToSegment(vStart1, vEnd1, interRay1, interSegment1);
                          if (distSq1 > localThresholdSq1) continue;
                          interRay1.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation
                          const distance1 = raycaster1.ray.origin.distanceTo(interRay1);
                          if (distance1 < raycaster1.near || distance1 > raycaster1.far) continue;
                          intersects1.push({
                              distance: distance1,
                              // What do we want? intersection point on the ray or on the segment??
                              // point: raycaster.ray.at( distance ),
                              point: interSegment1.clone().applyMatrix4(this.matrixWorld),
                              index: i3,
                              face: null,
                              faceIndex: null,
                              object: this
                          });
                      }
                  }
              } else if (geometry1.isGeometry) console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
          }
          updateMorphTargets() {
              const geometry1 = this.geometry;
              if (geometry1.isBufferGeometry) {
                  const morphAttributes1 = geometry1.morphAttributes;
                  const keys1 = Object.keys(morphAttributes1);
                  if (keys1.length > 0) {
                      const morphAttribute1 = morphAttributes1[keys1[0]];
                      if (morphAttribute1 !== undefined) {
                          this.morphTargetInfluences = [];
                          this.morphTargetDictionary = {};
                          for(let m1 = 0, ml1 = morphAttribute1.length; m1 < ml1; m1++){
                              const name1 = morphAttribute1[m1].name || String(m1);
                              this.morphTargetInfluences.push(0);
                              this.morphTargetDictionary[name1] = m1;
                          }
                      }
                  }
              } else {
                  const morphTargets1 = geometry1.morphTargets;
                  if (morphTargets1 !== undefined && morphTargets1.length > 0) console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.");
              }
          }
      }
      Line.prototype.isLine = true;
      const _start = /*@__PURE__*/ new Vector3();
      const _end = /*@__PURE__*/ new Vector3();
      class LineSegments extends Line {
          constructor(geometry1, material1){
              super(geometry1, material1);
              this.type = "LineSegments";
          }
          computeLineDistances() {
              const geometry1 = this.geometry;
              if (geometry1.isBufferGeometry) {
                  // we assume non-indexed geometry
                  if (geometry1.index === null) {
                      const positionAttribute1 = geometry1.attributes.position;
                      const lineDistances1 = [];
                      for(let i3 = 0, l1 = positionAttribute1.count; i3 < l1; i3 += 2){
                          _start.fromBufferAttribute(positionAttribute1, i3);
                          _end.fromBufferAttribute(positionAttribute1, i3 + 1);
                          lineDistances1[i3] = i3 === 0 ? 0 : lineDistances1[i3 - 1];
                          lineDistances1[i3 + 1] = lineDistances1[i3] + _start.distanceTo(_end);
                      }
                      geometry1.setAttribute("lineDistance", new Float32BufferAttribute(lineDistances1, 1));
                  } else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
              } else if (geometry1.isGeometry) console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
              return this;
          }
      }
      LineSegments.prototype.isLineSegments = true;
      class LineLoop extends Line {
          constructor(geometry1, material1){
              super(geometry1, material1);
              this.type = "LineLoop";
          }
      }
      LineLoop.prototype.isLineLoop = true;
      /**
     * parameters = {
     *  color: <hex>,
     *  opacity: <float>,
     *  map: new THREE.Texture( <Image> ),
     *  alphaMap: new THREE.Texture( <Image> ),
     *
     *  size: <float>,
     *  sizeAttenuation: <bool>
     *
     * }
     */ class PointsMaterial extends Material {
          constructor(parameters1){
              super();
              this.type = "PointsMaterial";
              this.color = new Color(0xffffff);
              this.map = null;
              this.alphaMap = null;
              this.size = 1;
              this.sizeAttenuation = true;
              this.setValues(parameters1);
          }
          copy(source1) {
              super.copy(source1);
              this.color.copy(source1.color);
              this.map = source1.map;
              this.alphaMap = source1.alphaMap;
              this.size = source1.size;
              this.sizeAttenuation = source1.sizeAttenuation;
              return this;
          }
      }
      PointsMaterial.prototype.isPointsMaterial = true;
      const _inverseMatrix = /*@__PURE__*/ new Matrix4();
      const _ray = /*@__PURE__*/ new Ray();
      const _sphere = /*@__PURE__*/ new Sphere();
      const _position$2 = /*@__PURE__*/ new Vector3();
      class Points extends Object3D {
          constructor(geometry1 = new BufferGeometry(), material1 = new PointsMaterial()){
              super();
              this.type = "Points";
              this.geometry = geometry1;
              this.material = material1;
              this.updateMorphTargets();
          }
          copy(source1) {
              super.copy(source1);
              this.material = source1.material;
              this.geometry = source1.geometry;
              return this;
          }
          raycast(raycaster1, intersects1) {
              const geometry1 = this.geometry;
              const matrixWorld1 = this.matrixWorld;
              const threshold1 = raycaster1.params.Points.threshold;
              const drawRange1 = geometry1.drawRange;
              // Checking boundingSphere distance to ray
              if (geometry1.boundingSphere === null) geometry1.computeBoundingSphere();
              _sphere.copy(geometry1.boundingSphere);
              _sphere.applyMatrix4(matrixWorld1);
              _sphere.radius += threshold1;
              if (raycaster1.ray.intersectsSphere(_sphere) === false) return;
              //
              _inverseMatrix.copy(matrixWorld1).invert();
              _ray.copy(raycaster1.ray).applyMatrix4(_inverseMatrix);
              const localThreshold1 = threshold1 / ((this.scale.x + this.scale.y + this.scale.z) / 3);
              const localThresholdSq1 = localThreshold1 * localThreshold1;
              if (geometry1.isBufferGeometry) {
                  const index3 = geometry1.index;
                  const attributes1 = geometry1.attributes;
                  const positionAttribute1 = attributes1.position;
                  if (index3 !== null) {
                      const start1 = Math.max(0, drawRange1.start);
                      const end1 = Math.min(index3.count, drawRange1.start + drawRange1.count);
                      for(let i3 = start1, il1 = end1; i3 < il1; i3++){
                          const a3 = index3.getX(i3);
                          _position$2.fromBufferAttribute(positionAttribute1, a3);
                          testPoint(_position$2, a3, localThresholdSq1, matrixWorld1, raycaster1, intersects1, this);
                      }
                  } else {
                      const start1 = Math.max(0, drawRange1.start);
                      const end1 = Math.min(positionAttribute1.count, drawRange1.start + drawRange1.count);
                      for(let i3 = start1, l1 = end1; i3 < l1; i3++){
                          _position$2.fromBufferAttribute(positionAttribute1, i3);
                          testPoint(_position$2, i3, localThresholdSq1, matrixWorld1, raycaster1, intersects1, this);
                      }
                  }
              } else console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
          }
          updateMorphTargets() {
              const geometry1 = this.geometry;
              if (geometry1.isBufferGeometry) {
                  const morphAttributes1 = geometry1.morphAttributes;
                  const keys1 = Object.keys(morphAttributes1);
                  if (keys1.length > 0) {
                      const morphAttribute1 = morphAttributes1[keys1[0]];
                      if (morphAttribute1 !== undefined) {
                          this.morphTargetInfluences = [];
                          this.morphTargetDictionary = {};
                          for(let m1 = 0, ml1 = morphAttribute1.length; m1 < ml1; m1++){
                              const name1 = morphAttribute1[m1].name || String(m1);
                              this.morphTargetInfluences.push(0);
                              this.morphTargetDictionary[name1] = m1;
                          }
                      }
                  }
              } else {
                  const morphTargets1 = geometry1.morphTargets;
                  if (morphTargets1 !== undefined && morphTargets1.length > 0) console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.");
              }
          }
      }
      Points.prototype.isPoints = true;
      function testPoint(point1, index3, localThresholdSq1, matrixWorld1, raycaster1, intersects1, object1) {
          const rayPointDistanceSq1 = _ray.distanceSqToPoint(point1);
          if (rayPointDistanceSq1 < localThresholdSq1) {
              const intersectPoint1 = new Vector3();
              _ray.closestPointToPoint(point1, intersectPoint1);
              intersectPoint1.applyMatrix4(matrixWorld1);
              const distance1 = raycaster1.ray.origin.distanceTo(intersectPoint1);
              if (distance1 < raycaster1.near || distance1 > raycaster1.far) return;
              intersects1.push({
                  distance: distance1,
                  distanceToRay: Math.sqrt(rayPointDistanceSq1),
                  point: intersectPoint1,
                  index: index3,
                  face: null,
                  object: object1
              });
          }
      }
      class VideoTexture extends Texture {
          constructor(video1, mapping1, wrapS1, wrapT1, magFilter1, minFilter1, format1, type1, anisotropy1){
              super(video1, mapping1, wrapS1, wrapT1, magFilter1, minFilter1, format1, type1, anisotropy1);
              this.minFilter = minFilter1 !== undefined ? minFilter1 : LinearFilter;
              this.magFilter = magFilter1 !== undefined ? magFilter1 : LinearFilter;
              this.generateMipmaps = false;
              const scope1 = this;
              function updateVideo1() {
                  scope1.needsUpdate = true;
                  video1.requestVideoFrameCallback(updateVideo1);
              }
              if ("requestVideoFrameCallback" in video1) video1.requestVideoFrameCallback(updateVideo1);
          }
          clone() {
              return new this.constructor(this.image).copy(this);
          }
          update() {
              const video1 = this.image;
              const hasVideoFrameCallback1 = "requestVideoFrameCallback" in video1;
              if (hasVideoFrameCallback1 === false && video1.readyState >= video1.HAVE_CURRENT_DATA) this.needsUpdate = true;
          }
      }
      VideoTexture.prototype.isVideoTexture = true;
      class FramebufferTexture extends Texture {
          constructor(width1, height1, format1){
              super({
                  width: width1,
                  height: height1
              });
              this.format = format1;
              this.magFilter = NearestFilter;
              this.minFilter = NearestFilter;
              this.generateMipmaps = false;
              this.needsUpdate = true;
          }
      }
      FramebufferTexture.prototype.isFramebufferTexture = true;
      class CompressedTexture extends Texture {
          constructor(mipmaps1, width1, height1, format1, type1, mapping1, wrapS1, wrapT1, magFilter1, minFilter1, anisotropy1, encoding1){
              super(null, mapping1, wrapS1, wrapT1, magFilter1, minFilter1, format1, type1, anisotropy1, encoding1);
              this.image = {
                  width: width1,
                  height: height1
              };
              this.mipmaps = mipmaps1;
              // no flipping for cube textures
              // (also flipping doesn't work for compressed textures )
              this.flipY = false;
              // can't generate mipmaps for compressed textures
              // mips must be embedded in DDS files
              this.generateMipmaps = false;
          }
      }
      CompressedTexture.prototype.isCompressedTexture = true;
      class CanvasTexture extends Texture {
          constructor(canvas1, mapping1, wrapS1, wrapT1, magFilter1, minFilter1, format1, type1, anisotropy1){
              super(canvas1, mapping1, wrapS1, wrapT1, magFilter1, minFilter1, format1, type1, anisotropy1);
              this.needsUpdate = true;
          }
      }
      CanvasTexture.prototype.isCanvasTexture = true;
      class CircleGeometry extends BufferGeometry {
          constructor(radius1 = 1, segments1 = 8, thetaStart1 = 0, thetaLength1 = Math.PI * 2){
              super();
              this.type = "CircleGeometry";
              this.parameters = {
                  radius: radius1,
                  segments: segments1,
                  thetaStart: thetaStart1,
                  thetaLength: thetaLength1
              };
              segments1 = Math.max(3, segments1);
              // buffers
              const indices1 = [];
              const vertices1 = [];
              const normals1 = [];
              const uvs1 = [];
              // helper variables
              const vertex1 = new Vector3();
              const uv4 = new Vector2();
              // center point
              vertices1.push(0, 0, 0);
              normals1.push(0, 0, 1);
              uvs1.push(0.5, 0.5);
              for(let s10 = 0, i3 = 3; s10 <= segments1; s10++, i3 += 3){
                  const segment1 = thetaStart1 + s10 / segments1 * thetaLength1;
                  // vertex
                  vertex1.x = radius1 * Math.cos(segment1);
                  vertex1.y = radius1 * Math.sin(segment1);
                  vertices1.push(vertex1.x, vertex1.y, vertex1.z);
                  // normal
                  normals1.push(0, 0, 1);
                  // uvs
                  uv4.x = (vertices1[i3] / radius1 + 1) / 2;
                  uv4.y = (vertices1[i3 + 1] / radius1 + 1) / 2;
                  uvs1.push(uv4.x, uv4.y);
              }
              // indices
              for(let i3 = 1; i3 <= segments1; i3++)indices1.push(i3, i3 + 1, 0);
              // build geometry
              this.setIndex(indices1);
              this.setAttribute("position", new Float32BufferAttribute(vertices1, 3));
              this.setAttribute("normal", new Float32BufferAttribute(normals1, 3));
              this.setAttribute("uv", new Float32BufferAttribute(uvs1, 2));
          }
          static fromJSON(data1) {
              return new CircleGeometry(data1.radius, data1.segments, data1.thetaStart, data1.thetaLength);
          }
      }
      class CylinderGeometry extends BufferGeometry {
          constructor(radiusTop1 = 1, radiusBottom1 = 1, height1 = 1, radialSegments1 = 8, heightSegments1 = 1, openEnded1 = false, thetaStart1 = 0, thetaLength1 = Math.PI * 2){
              super();
              this.type = "CylinderGeometry";
              this.parameters = {
                  radiusTop: radiusTop1,
                  radiusBottom: radiusBottom1,
                  height: height1,
                  radialSegments: radialSegments1,
                  heightSegments: heightSegments1,
                  openEnded: openEnded1,
                  thetaStart: thetaStart1,
                  thetaLength: thetaLength1
              };
              const scope1 = this;
              radialSegments1 = Math.floor(radialSegments1);
              heightSegments1 = Math.floor(heightSegments1);
              // buffers
              const indices1 = [];
              const vertices1 = [];
              const normals1 = [];
              const uvs1 = [];
              // helper variables
              let index3 = 0;
              const indexArray1 = [];
              const halfHeight1 = height1 / 2;
              let groupStart1 = 0;
              // generate geometry
              generateTorso1();
              if (openEnded1 === false) {
                  if (radiusTop1 > 0) generateCap1(true);
                  if (radiusBottom1 > 0) generateCap1(false);
              }
              // build geometry
              this.setIndex(indices1);
              this.setAttribute("position", new Float32BufferAttribute(vertices1, 3));
              this.setAttribute("normal", new Float32BufferAttribute(normals1, 3));
              this.setAttribute("uv", new Float32BufferAttribute(uvs1, 2));
              function generateTorso1() {
                  const normal1 = new Vector3();
                  const vertex1 = new Vector3();
                  let groupCount1 = 0;
                  // this will be used to calculate the normal
                  const slope1 = (radiusBottom1 - radiusTop1) / height1;
                  // generate vertices, normals and uvs
                  for(let y3 = 0; y3 <= heightSegments1; y3++){
                      const indexRow1 = [];
                      const v4 = y3 / heightSegments1;
                      // calculate the radius of the current row
                      const radius1 = v4 * (radiusBottom1 - radiusTop1) + radiusTop1;
                      for(let x4 = 0; x4 <= radialSegments1; x4++){
                          const u4 = x4 / radialSegments1;
                          const theta1 = u4 * thetaLength1 + thetaStart1;
                          const sinTheta1 = Math.sin(theta1);
                          const cosTheta1 = Math.cos(theta1);
                          // vertex
                          vertex1.x = radius1 * sinTheta1;
                          vertex1.y = -v4 * height1 + halfHeight1;
                          vertex1.z = radius1 * cosTheta1;
                          vertices1.push(vertex1.x, vertex1.y, vertex1.z);
                          // normal
                          normal1.set(sinTheta1, slope1, cosTheta1).normalize();
                          normals1.push(normal1.x, normal1.y, normal1.z);
                          // uv
                          uvs1.push(u4, 1 - v4);
                          // save index of vertex in respective row
                          indexRow1.push(index3++);
                      }
                      // now save vertices of the row in our index array
                      indexArray1.push(indexRow1);
                  }
                  // generate indices
                  for(let x4 = 0; x4 < radialSegments1; x4++)for(let y3 = 0; y3 < heightSegments1; y3++){
                      // we use the index array to access the correct indices
                      const a3 = indexArray1[y3][x4];
                      const b3 = indexArray1[y3 + 1][x4];
                      const c4 = indexArray1[y3 + 1][x4 + 1];
                      const d7 = indexArray1[y3][x4 + 1];
                      // faces
                      indices1.push(a3, b3, d7);
                      indices1.push(b3, c4, d7);
                      // update group counter
                      groupCount1 += 6;
                  }
                  // add a group to the geometry. this will ensure multi material support
                  scope1.addGroup(groupStart1, groupCount1, 0);
                  // calculate new start value for groups
                  groupStart1 += groupCount1;
              }
              function generateCap1(top1) {
                  // save the index of the first center vertex
                  const centerIndexStart1 = index3;
                  const uv4 = new Vector2();
                  const vertex1 = new Vector3();
                  let groupCount1 = 0;
                  const radius1 = top1 === true ? radiusTop1 : radiusBottom1;
                  const sign1 = top1 === true ? 1 : -1;
                  // first we generate the center vertex data of the cap.
                  // because the geometry needs one set of uvs per face,
                  // we must generate a center vertex per face/segment
                  for(let x4 = 1; x4 <= radialSegments1; x4++){
                      // vertex
                      vertices1.push(0, halfHeight1 * sign1, 0);
                      // normal
                      normals1.push(0, sign1, 0);
                      // uv
                      uvs1.push(0.5, 0.5);
                      // increase index
                      index3++;
                  }
                  // save the index of the last center vertex
                  const centerIndexEnd1 = index3;
                  // now we generate the surrounding vertices, normals and uvs
                  for(let x4 = 0; x4 <= radialSegments1; x4++){
                      const u4 = x4 / radialSegments1;
                      const theta1 = u4 * thetaLength1 + thetaStart1;
                      const cosTheta1 = Math.cos(theta1);
                      const sinTheta1 = Math.sin(theta1);
                      // vertex
                      vertex1.x = radius1 * sinTheta1;
                      vertex1.y = halfHeight1 * sign1;
                      vertex1.z = radius1 * cosTheta1;
                      vertices1.push(vertex1.x, vertex1.y, vertex1.z);
                      // normal
                      normals1.push(0, sign1, 0);
                      // uv
                      uv4.x = cosTheta1 * 0.5 + 0.5;
                      uv4.y = sinTheta1 * 0.5 * sign1 + 0.5;
                      uvs1.push(uv4.x, uv4.y);
                      // increase index
                      index3++;
                  }
                  // generate indices
                  for(let x4 = 0; x4 < radialSegments1; x4++){
                      const c4 = centerIndexStart1 + x4;
                      const i3 = centerIndexEnd1 + x4;
                      if (top1 === true) // face top
                      indices1.push(i3, i3 + 1, c4);
                      else // face bottom
                      indices1.push(i3 + 1, i3, c4);
                      groupCount1 += 3;
                  }
                  // add a group to the geometry. this will ensure multi material support
                  scope1.addGroup(groupStart1, groupCount1, top1 === true ? 1 : 2);
                  // calculate new start value for groups
                  groupStart1 += groupCount1;
              }
          }
          static fromJSON(data1) {
              return new CylinderGeometry(data1.radiusTop, data1.radiusBottom, data1.height, data1.radialSegments, data1.heightSegments, data1.openEnded, data1.thetaStart, data1.thetaLength);
          }
      }
      class ConeGeometry extends CylinderGeometry {
          constructor(radius1 = 1, height1 = 1, radialSegments1 = 8, heightSegments1 = 1, openEnded1 = false, thetaStart1 = 0, thetaLength1 = Math.PI * 2){
              super(0, radius1, height1, radialSegments1, heightSegments1, openEnded1, thetaStart1, thetaLength1);
              this.type = "ConeGeometry";
              this.parameters = {
                  radius: radius1,
                  height: height1,
                  radialSegments: radialSegments1,
                  heightSegments: heightSegments1,
                  openEnded: openEnded1,
                  thetaStart: thetaStart1,
                  thetaLength: thetaLength1
              };
          }
          static fromJSON(data1) {
              return new ConeGeometry(data1.radius, data1.height, data1.radialSegments, data1.heightSegments, data1.openEnded, data1.thetaStart, data1.thetaLength);
          }
      }
      class PolyhedronGeometry extends BufferGeometry {
          constructor(vertices1 = [], indices1 = [], radius1 = 1, detail1 = 0){
              super();
              this.type = "PolyhedronGeometry";
              this.parameters = {
                  vertices: vertices1,
                  indices: indices1,
                  radius: radius1,
                  detail: detail1
              };
              // default buffer data
              const vertexBuffer1 = [];
              const uvBuffer1 = [];
              // the subdivision creates the vertex buffer data
              subdivide1(detail1);
              // all vertices should lie on a conceptual sphere with a given radius
              applyRadius1(radius1);
              // finally, create the uv data
              generateUVs1();
              // build non-indexed geometry
              this.setAttribute("position", new Float32BufferAttribute(vertexBuffer1, 3));
              this.setAttribute("normal", new Float32BufferAttribute(vertexBuffer1.slice(), 3));
              this.setAttribute("uv", new Float32BufferAttribute(uvBuffer1, 2));
              if (detail1 === 0) this.computeVertexNormals(); // flat normals
              else this.normalizeNormals(); // smooth normals
              // helper functions
              function subdivide1(detail1) {
                  const a3 = new Vector3();
                  const b3 = new Vector3();
                  const c4 = new Vector3();
                  // iterate over all faces and apply a subdivison with the given detail value
                  for(let i3 = 0; i3 < indices1.length; i3 += 3){
                      // get the vertices of the face
                      getVertexByIndex1(indices1[i3 + 0], a3);
                      getVertexByIndex1(indices1[i3 + 1], b3);
                      getVertexByIndex1(indices1[i3 + 2], c4);
                      // perform subdivision
                      subdivideFace1(a3, b3, c4, detail1);
                  }
              }
              function subdivideFace1(a3, b3, c4, detail1) {
                  const cols1 = detail1 + 1;
                  // we use this multidimensional array as a data structure for creating the subdivision
                  const v4 = [];
                  // construct all of the vertices for this subdivision
                  for(let i3 = 0; i3 <= cols1; i3++){
                      v4[i3] = [];
                      const aj1 = a3.clone().lerp(c4, i3 / cols1);
                      const bj1 = b3.clone().lerp(c4, i3 / cols1);
                      const rows1 = cols1 - i3;
                      for(let j1 = 0; j1 <= rows1; j1++)if (j1 === 0 && i3 === cols1) v4[i3][j1] = aj1;
                      else v4[i3][j1] = aj1.clone().lerp(bj1, j1 / rows1);
                  }
                  // construct all of the faces
                  for(let i3 = 0; i3 < cols1; i3++)for(let j1 = 0; j1 < 2 * (cols1 - i3) - 1; j1++){
                      const k1 = Math.floor(j1 / 2);
                      if (j1 % 2 === 0) {
                          pushVertex1(v4[i3][k1 + 1]);
                          pushVertex1(v4[i3 + 1][k1]);
                          pushVertex1(v4[i3][k1]);
                      } else {
                          pushVertex1(v4[i3][k1 + 1]);
                          pushVertex1(v4[i3 + 1][k1 + 1]);
                          pushVertex1(v4[i3 + 1][k1]);
                      }
                  }
              }
              function applyRadius1(radius1) {
                  const vertex1 = new Vector3();
                  // iterate over the entire buffer and apply the radius to each vertex
                  for(let i3 = 0; i3 < vertexBuffer1.length; i3 += 3){
                      vertex1.x = vertexBuffer1[i3 + 0];
                      vertex1.y = vertexBuffer1[i3 + 1];
                      vertex1.z = vertexBuffer1[i3 + 2];
                      vertex1.normalize().multiplyScalar(radius1);
                      vertexBuffer1[i3 + 0] = vertex1.x;
                      vertexBuffer1[i3 + 1] = vertex1.y;
                      vertexBuffer1[i3 + 2] = vertex1.z;
                  }
              }
              function generateUVs1() {
                  const vertex1 = new Vector3();
                  for(let i3 = 0; i3 < vertexBuffer1.length; i3 += 3){
                      vertex1.x = vertexBuffer1[i3 + 0];
                      vertex1.y = vertexBuffer1[i3 + 1];
                      vertex1.z = vertexBuffer1[i3 + 2];
                      const u4 = azimuth1(vertex1) / 2 / Math.PI + 0.5;
                      const v4 = inclination1(vertex1) / Math.PI + 0.5;
                      uvBuffer1.push(u4, 1 - v4);
                  }
                  correctUVs1();
                  correctSeam1();
              }
              function correctSeam1() {
                  // handle case when face straddles the seam, see #3269
                  for(let i3 = 0; i3 < uvBuffer1.length; i3 += 6){
                      // uv data of a single face
                      const x01 = uvBuffer1[i3 + 0];
                      const x11 = uvBuffer1[i3 + 2];
                      const x21 = uvBuffer1[i3 + 4];
                      const max1 = Math.max(x01, x11, x21);
                      const min1 = Math.min(x01, x11, x21);
                      // 0.9 is somewhat arbitrary
                      if (max1 > 0.9 && min1 < 0.1) {
                          if (x01 < 0.2) uvBuffer1[i3 + 0] += 1;
                          if (x11 < 0.2) uvBuffer1[i3 + 2] += 1;
                          if (x21 < 0.2) uvBuffer1[i3 + 4] += 1;
                      }
                  }
              }
              function pushVertex1(vertex1) {
                  vertexBuffer1.push(vertex1.x, vertex1.y, vertex1.z);
              }
              function getVertexByIndex1(index3, vertex1) {
                  const stride1 = index3 * 3;
                  vertex1.x = vertices1[stride1 + 0];
                  vertex1.y = vertices1[stride1 + 1];
                  vertex1.z = vertices1[stride1 + 2];
              }
              function correctUVs1() {
                  const a3 = new Vector3();
                  const b3 = new Vector3();
                  const c4 = new Vector3();
                  const centroid1 = new Vector3();
                  const uvA1 = new Vector2();
                  const uvB1 = new Vector2();
                  const uvC1 = new Vector2();
                  for(let i3 = 0, j1 = 0; i3 < vertexBuffer1.length; i3 += 9, j1 += 6){
                      a3.set(vertexBuffer1[i3 + 0], vertexBuffer1[i3 + 1], vertexBuffer1[i3 + 2]);
                      b3.set(vertexBuffer1[i3 + 3], vertexBuffer1[i3 + 4], vertexBuffer1[i3 + 5]);
                      c4.set(vertexBuffer1[i3 + 6], vertexBuffer1[i3 + 7], vertexBuffer1[i3 + 8]);
                      uvA1.set(uvBuffer1[j1 + 0], uvBuffer1[j1 + 1]);
                      uvB1.set(uvBuffer1[j1 + 2], uvBuffer1[j1 + 3]);
                      uvC1.set(uvBuffer1[j1 + 4], uvBuffer1[j1 + 5]);
                      centroid1.copy(a3).add(b3).add(c4).divideScalar(3);
                      const azi1 = azimuth1(centroid1);
                      correctUV1(uvA1, j1 + 0, a3, azi1);
                      correctUV1(uvB1, j1 + 2, b3, azi1);
                      correctUV1(uvC1, j1 + 4, c4, azi1);
                  }
              }
              function correctUV1(uv4, stride1, vector1, azimuth1) {
                  if (azimuth1 < 0 && uv4.x === 1) uvBuffer1[stride1] = uv4.x - 1;
                  if (vector1.x === 0 && vector1.z === 0) uvBuffer1[stride1] = azimuth1 / 2 / Math.PI + 0.5;
              }
              // Angle around the Y axis, counter-clockwise when looking from above.
              function azimuth1(vector1) {
                  return Math.atan2(vector1.z, -vector1.x);
              }
              // Angle above the XZ plane.
              function inclination1(vector1) {
                  return Math.atan2(-vector1.y, Math.sqrt(vector1.x * vector1.x + vector1.z * vector1.z));
              }
          }
          static fromJSON(data1) {
              return new PolyhedronGeometry(data1.vertices, data1.indices, data1.radius, data1.details);
          }
      }
      class DodecahedronGeometry extends PolyhedronGeometry {
          constructor(radius1 = 1, detail1 = 0){
              const t4 = (1 + Math.sqrt(5)) / 2;
              const r1 = 1 / t4;
              const vertices1 = [
                  // (±1, ±1, ±1)
                  -1,
                  -1,
                  -1,
                  -1,
                  -1,
                  1,
                  -1,
                  1,
                  -1,
                  -1,
                  1,
                  1,
                  1,
                  -1,
                  -1,
                  1,
                  -1,
                  1,
                  1,
                  1,
                  -1,
                  1,
                  1,
                  1,
                  // (0, ±1/φ, ±φ)
                  0,
                  -r1,
                  -t4,
                  0,
                  -r1,
                  t4,
                  0,
                  r1,
                  -t4,
                  0,
                  r1,
                  t4,
                  // (±1/φ, ±φ, 0)
                  -r1,
                  -t4,
                  0,
                  -r1,
                  t4,
                  0,
                  r1,
                  -t4,
                  0,
                  r1,
                  t4,
                  0,
                  // (±φ, 0, ±1/φ)
                  -t4,
                  0,
                  -r1,
                  t4,
                  0,
                  -r1,
                  -t4,
                  0,
                  r1,
                  t4,
                  0,
                  r1
              ];
              const indices1 = [
                  3,
                  11,
                  7,
                  3,
                  7,
                  15,
                  3,
                  15,
                  13,
                  7,
                  19,
                  17,
                  7,
                  17,
                  6,
                  7,
                  6,
                  15,
                  17,
                  4,
                  8,
                  17,
                  8,
                  10,
                  17,
                  10,
                  6,
                  8,
                  0,
                  16,
                  8,
                  16,
                  2,
                  8,
                  2,
                  10,
                  0,
                  12,
                  1,
                  0,
                  1,
                  18,
                  0,
                  18,
                  16,
                  6,
                  10,
                  2,
                  6,
                  2,
                  13,
                  6,
                  13,
                  15,
                  2,
                  16,
                  18,
                  2,
                  18,
                  3,
                  2,
                  3,
                  13,
                  18,
                  1,
                  9,
                  18,
                  9,
                  11,
                  18,
                  11,
                  3,
                  4,
                  14,
                  12,
                  4,
                  12,
                  0,
                  4,
                  0,
                  8,
                  11,
                  9,
                  5,
                  11,
                  5,
                  19,
                  11,
                  19,
                  7,
                  19,
                  5,
                  14,
                  19,
                  14,
                  4,
                  19,
                  4,
                  17,
                  1,
                  12,
                  14,
                  1,
                  14,
                  5,
                  1,
                  5,
                  9
              ];
              super(vertices1, indices1, radius1, detail1);
              this.type = "DodecahedronGeometry";
              this.parameters = {
                  radius: radius1,
                  detail: detail1
              };
          }
          static fromJSON(data1) {
              return new DodecahedronGeometry(data1.radius, data1.detail);
          }
      }
      const _v0 = new Vector3();
      const _v1$1 = new Vector3();
      const _normal = new Vector3();
      const _triangle = new Triangle();
      class EdgesGeometry extends BufferGeometry {
          constructor(geometry1 = null, thresholdAngle1 = 1){
              super();
              this.type = "EdgesGeometry";
              this.parameters = {
                  geometry: geometry1,
                  thresholdAngle: thresholdAngle1
              };
              if (geometry1 !== null) {
                  const precisionPoints1 = 4;
                  const precision1 = Math.pow(10, precisionPoints1);
                  const thresholdDot1 = Math.cos(DEG2RAD * thresholdAngle1);
                  const indexAttr1 = geometry1.getIndex();
                  const positionAttr1 = geometry1.getAttribute("position");
                  const indexCount1 = indexAttr1 ? indexAttr1.count : positionAttr1.count;
                  const indexArr1 = [
                      0,
                      0,
                      0
                  ];
                  const vertKeys1 = [
                      "a",
                      "b",
                      "c"
                  ];
                  const hashes1 = new Array(3);
                  const edgeData1 = {};
                  const vertices1 = [];
                  for(let i3 = 0; i3 < indexCount1; i3 += 3){
                      if (indexAttr1) {
                          indexArr1[0] = indexAttr1.getX(i3);
                          indexArr1[1] = indexAttr1.getX(i3 + 1);
                          indexArr1[2] = indexAttr1.getX(i3 + 2);
                      } else {
                          indexArr1[0] = i3;
                          indexArr1[1] = i3 + 1;
                          indexArr1[2] = i3 + 2;
                      }
                      const { a: a3, b: b3, c: c4 } = _triangle;
                      a3.fromBufferAttribute(positionAttr1, indexArr1[0]);
                      b3.fromBufferAttribute(positionAttr1, indexArr1[1]);
                      c4.fromBufferAttribute(positionAttr1, indexArr1[2]);
                      _triangle.getNormal(_normal);
                      // create hashes for the edge from the vertices
                      hashes1[0] = `${Math.round(a3.x * precision1)},${Math.round(a3.y * precision1)},${Math.round(a3.z * precision1)}`;
                      hashes1[1] = `${Math.round(b3.x * precision1)},${Math.round(b3.y * precision1)},${Math.round(b3.z * precision1)}`;
                      hashes1[2] = `${Math.round(c4.x * precision1)},${Math.round(c4.y * precision1)},${Math.round(c4.z * precision1)}`;
                      // skip degenerate triangles
                      if (hashes1[0] === hashes1[1] || hashes1[1] === hashes1[2] || hashes1[2] === hashes1[0]) continue;
                      // iterate over every edge
                      for(let j1 = 0; j1 < 3; j1++){
                          // get the first and next vertex making up the edge
                          const jNext1 = (j1 + 1) % 3;
                          const vecHash01 = hashes1[j1];
                          const vecHash11 = hashes1[jNext1];
                          const v01 = _triangle[vertKeys1[j1]];
                          const v11 = _triangle[vertKeys1[jNext1]];
                          const hash3 = `${vecHash01}_${vecHash11}`;
                          const reverseHash1 = `${vecHash11}_${vecHash01}`;
                          if (reverseHash1 in edgeData1 && edgeData1[reverseHash1]) {
                              // if we found a sibling edge add it into the vertex array if
                              // it meets the angle threshold and delete the edge from the map.
                              if (_normal.dot(edgeData1[reverseHash1].normal) <= thresholdDot1) {
                                  vertices1.push(v01.x, v01.y, v01.z);
                                  vertices1.push(v11.x, v11.y, v11.z);
                              }
                              edgeData1[reverseHash1] = null;
                          } else if (!(hash3 in edgeData1)) // if we've already got an edge here then skip adding a new one
                          edgeData1[hash3] = {
                              index0: indexArr1[j1],
                              index1: indexArr1[jNext1],
                              normal: _normal.clone()
                          };
                      }
                  }
                  // iterate over all remaining, unmatched edges and add them to the vertex array
                  for(const key1 in edgeData1)if (edgeData1[key1]) {
                      const { index0: index01, index1: index11 } = edgeData1[key1];
                      _v0.fromBufferAttribute(positionAttr1, index01);
                      _v1$1.fromBufferAttribute(positionAttr1, index11);
                      vertices1.push(_v0.x, _v0.y, _v0.z);
                      vertices1.push(_v1$1.x, _v1$1.y, _v1$1.z);
                  }
                  this.setAttribute("position", new Float32BufferAttribute(vertices1, 3));
              }
          }
      }
      /**
     * Extensible curve object.
     *
     * Some common of curve methods:
     * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )
     * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )
     * .getPoints(), .getSpacedPoints()
     * .getLength()
     * .updateArcLengths()
     *
     * This following curves inherit from THREE.Curve:
     *
     * -- 2D curves --
     * THREE.ArcCurve
     * THREE.CubicBezierCurve
     * THREE.EllipseCurve
     * THREE.LineCurve
     * THREE.QuadraticBezierCurve
     * THREE.SplineCurve
     *
     * -- 3D curves --
     * THREE.CatmullRomCurve3
     * THREE.CubicBezierCurve3
     * THREE.LineCurve3
     * THREE.QuadraticBezierCurve3
     *
     * A series of curves can be represented as a THREE.CurvePath.
     *
     **/ class Curve {
          constructor(){
              this.type = "Curve";
              this.arcLengthDivisions = 200;
          }
          // Virtual base class method to overwrite and implement in subclasses
          //	- t [0 .. 1]
          getPoint() {
              console.warn("THREE.Curve: .getPoint() not implemented.");
              return null;
          }
          // Get point at relative position in curve according to arc length
          // - u [0 .. 1]
          getPointAt(u4, optionalTarget1) {
              const t4 = this.getUtoTmapping(u4);
              return this.getPoint(t4, optionalTarget1);
          }
          // Get sequence of points using getPoint( t )
          getPoints(divisions1 = 5) {
              const points1 = [];
              for(let d7 = 0; d7 <= divisions1; d7++)points1.push(this.getPoint(d7 / divisions1));
              return points1;
          }
          // Get sequence of points using getPointAt( u )
          getSpacedPoints(divisions1 = 5) {
              const points1 = [];
              for(let d7 = 0; d7 <= divisions1; d7++)points1.push(this.getPointAt(d7 / divisions1));
              return points1;
          }
          // Get total curve arc length
          getLength() {
              const lengths1 = this.getLengths();
              return lengths1[lengths1.length - 1];
          }
          // Get list of cumulative segment lengths
          getLengths(divisions1 = this.arcLengthDivisions) {
              if (this.cacheArcLengths && this.cacheArcLengths.length === divisions1 + 1 && !this.needsUpdate) return this.cacheArcLengths;
              this.needsUpdate = false;
              const cache1 = [];
              let current1, last1 = this.getPoint(0);
              let sum1 = 0;
              cache1.push(0);
              for(let p6 = 1; p6 <= divisions1; p6++){
                  current1 = this.getPoint(p6 / divisions1);
                  sum1 += current1.distanceTo(last1);
                  cache1.push(sum1);
                  last1 = current1;
              }
              this.cacheArcLengths = cache1;
              return cache1; // { sums: cache, sum: sum }; Sum is in the last element.
          }
          updateArcLengths() {
              this.needsUpdate = true;
              this.getLengths();
          }
          // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
          getUtoTmapping(u4, distance1) {
              const arcLengths1 = this.getLengths();
              let i3 = 0;
              const il1 = arcLengths1.length;
              let targetArcLength1; // The targeted u distance value to get
              if (distance1) targetArcLength1 = distance1;
              else targetArcLength1 = u4 * arcLengths1[il1 - 1];
              // binary search for the index with largest value smaller than target u distance
              let low1 = 0, high1 = il1 - 1, comparison1;
              while(low1 <= high1){
                  i3 = Math.floor(low1 + (high1 - low1) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats
                  comparison1 = arcLengths1[i3] - targetArcLength1;
                  if (comparison1 < 0) low1 = i3 + 1;
                  else if (comparison1 > 0) high1 = i3 - 1;
                  else {
                      high1 = i3;
                      break;
                  // DONE
                  }
              }
              i3 = high1;
              if (arcLengths1[i3] === targetArcLength1) return i3 / (il1 - 1);
              // we could get finer grain at lengths, or use simple interpolation between two points
              const lengthBefore1 = arcLengths1[i3];
              const lengthAfter1 = arcLengths1[i3 + 1];
              const segmentLength1 = lengthAfter1 - lengthBefore1;
              // determine where we are between the 'before' and 'after' points
              const segmentFraction1 = (targetArcLength1 - lengthBefore1) / segmentLength1;
              // add that fractional amount to t
              const t4 = (i3 + segmentFraction1) / (il1 - 1);
              return t4;
          }
          // Returns a unit vector tangent at t
          // In case any sub curve does not implement its tangent derivation,
          // 2 points a small delta apart will be used to find its gradient
          // which seems to give a reasonable approximation
          getTangent(t4, optionalTarget1) {
              const delta1 = 0.0001;
              let t15 = t4 - delta1;
              let t21 = t4 + delta1;
              // Capping in case of danger
              if (t15 < 0) t15 = 0;
              if (t21 > 1) t21 = 1;
              const pt11 = this.getPoint(t15);
              const pt21 = this.getPoint(t21);
              const tangent1 = optionalTarget1 || (pt11.isVector2 ? new Vector2() : new Vector3());
              tangent1.copy(pt21).sub(pt11).normalize();
              return tangent1;
          }
          getTangentAt(u4, optionalTarget1) {
              const t4 = this.getUtoTmapping(u4);
              return this.getTangent(t4, optionalTarget1);
          }
          computeFrenetFrames(segments1, closed1) {
              // see http://www.cs.indiana.edu/pub/techreports/TR425.pdf
              const normal1 = new Vector3();
              const tangents1 = [];
              const normals1 = [];
              const binormals1 = [];
              const vec1 = new Vector3();
              const mat1 = new Matrix4();
              // compute the tangent vectors for each segment on the curve
              for(let i3 = 0; i3 <= segments1; i3++){
                  const u4 = i3 / segments1;
                  tangents1[i3] = this.getTangentAt(u4, new Vector3());
              }
              // select an initial normal vector perpendicular to the first tangent vector,
              // and in the direction of the minimum tangent xyz component
              normals1[0] = new Vector3();
              binormals1[0] = new Vector3();
              let min1 = Number.MAX_VALUE;
              const tx1 = Math.abs(tangents1[0].x);
              const ty1 = Math.abs(tangents1[0].y);
              const tz1 = Math.abs(tangents1[0].z);
              if (tx1 <= min1) {
                  min1 = tx1;
                  normal1.set(1, 0, 0);
              }
              if (ty1 <= min1) {
                  min1 = ty1;
                  normal1.set(0, 1, 0);
              }
              if (tz1 <= min1) normal1.set(0, 0, 1);
              vec1.crossVectors(tangents1[0], normal1).normalize();
              normals1[0].crossVectors(tangents1[0], vec1);
              binormals1[0].crossVectors(tangents1[0], normals1[0]);
              // compute the slowly-varying normal and binormal vectors for each segment on the curve
              for(let i3 = 1; i3 <= segments1; i3++){
                  normals1[i3] = normals1[i3 - 1].clone();
                  binormals1[i3] = binormals1[i3 - 1].clone();
                  vec1.crossVectors(tangents1[i3 - 1], tangents1[i3]);
                  if (vec1.length() > Number.EPSILON) {
                      vec1.normalize();
                      const theta1 = Math.acos(clamp$1(tangents1[i3 - 1].dot(tangents1[i3]), -1, 1)); // clamp for floating pt errors
                      normals1[i3].applyMatrix4(mat1.makeRotationAxis(vec1, theta1));
                  }
                  binormals1[i3].crossVectors(tangents1[i3], normals1[i3]);
              }
              // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same
              if (closed1 === true) {
                  let theta1 = Math.acos(clamp$1(normals1[0].dot(normals1[segments1]), -1, 1));
                  theta1 /= segments1;
                  if (tangents1[0].dot(vec1.crossVectors(normals1[0], normals1[segments1])) > 0) theta1 = -theta1;
                  for(let i3 = 1; i3 <= segments1; i3++){
                      // twist a little...
                      normals1[i3].applyMatrix4(mat1.makeRotationAxis(tangents1[i3], theta1 * i3));
                      binormals1[i3].crossVectors(tangents1[i3], normals1[i3]);
                  }
              }
              return {
                  tangents: tangents1,
                  normals: normals1,
                  binormals: binormals1
              };
          }
          clone() {
              return new this.constructor().copy(this);
          }
          copy(source1) {
              this.arcLengthDivisions = source1.arcLengthDivisions;
              return this;
          }
          toJSON() {
              const data1 = {
                  metadata: {
                      version: 4.5,
                      type: "Curve",
                      generator: "Curve.toJSON"
                  }
              };
              data1.arcLengthDivisions = this.arcLengthDivisions;
              data1.type = this.type;
              return data1;
          }
          fromJSON(json1) {
              this.arcLengthDivisions = json1.arcLengthDivisions;
              return this;
          }
      }
      class EllipseCurve extends Curve {
          constructor(aX1 = 0, aY1 = 0, xRadius1 = 1, yRadius1 = 1, aStartAngle1 = 0, aEndAngle1 = Math.PI * 2, aClockwise1 = false, aRotation1 = 0){
              super();
              this.type = "EllipseCurve";
              this.aX = aX1;
              this.aY = aY1;
              this.xRadius = xRadius1;
              this.yRadius = yRadius1;
              this.aStartAngle = aStartAngle1;
              this.aEndAngle = aEndAngle1;
              this.aClockwise = aClockwise1;
              this.aRotation = aRotation1;
          }
          getPoint(t4, optionalTarget1) {
              const point1 = optionalTarget1 || new Vector2();
              const twoPi1 = Math.PI * 2;
              let deltaAngle1 = this.aEndAngle - this.aStartAngle;
              const samePoints1 = Math.abs(deltaAngle1) < Number.EPSILON;
              // ensures that deltaAngle is 0 .. 2 PI
              while(deltaAngle1 < 0)deltaAngle1 += twoPi1;
              while(deltaAngle1 > twoPi1)deltaAngle1 -= twoPi1;
              if (deltaAngle1 < Number.EPSILON) {
                  if (samePoints1) deltaAngle1 = 0;
                  else deltaAngle1 = twoPi1;
              }
              if (this.aClockwise === true && !samePoints1) {
                  if (deltaAngle1 === twoPi1) deltaAngle1 = -twoPi1;
                  else deltaAngle1 = deltaAngle1 - twoPi1;
              }
              const angle1 = this.aStartAngle + t4 * deltaAngle1;
              let x4 = this.aX + this.xRadius * Math.cos(angle1);
              let y3 = this.aY + this.yRadius * Math.sin(angle1);
              if (this.aRotation !== 0) {
                  const cos1 = Math.cos(this.aRotation);
                  const sin1 = Math.sin(this.aRotation);
                  const tx1 = x4 - this.aX;
                  const ty1 = y3 - this.aY;
                  // Rotate the point about the center of the ellipse.
                  x4 = tx1 * cos1 - ty1 * sin1 + this.aX;
                  y3 = tx1 * sin1 + ty1 * cos1 + this.aY;
              }
              return point1.set(x4, y3);
          }
          copy(source1) {
              super.copy(source1);
              this.aX = source1.aX;
              this.aY = source1.aY;
              this.xRadius = source1.xRadius;
              this.yRadius = source1.yRadius;
              this.aStartAngle = source1.aStartAngle;
              this.aEndAngle = source1.aEndAngle;
              this.aClockwise = source1.aClockwise;
              this.aRotation = source1.aRotation;
              return this;
          }
          toJSON() {
              const data1 = super.toJSON();
              data1.aX = this.aX;
              data1.aY = this.aY;
              data1.xRadius = this.xRadius;
              data1.yRadius = this.yRadius;
              data1.aStartAngle = this.aStartAngle;
              data1.aEndAngle = this.aEndAngle;
              data1.aClockwise = this.aClockwise;
              data1.aRotation = this.aRotation;
              return data1;
          }
          fromJSON(json1) {
              super.fromJSON(json1);
              this.aX = json1.aX;
              this.aY = json1.aY;
              this.xRadius = json1.xRadius;
              this.yRadius = json1.yRadius;
              this.aStartAngle = json1.aStartAngle;
              this.aEndAngle = json1.aEndAngle;
              this.aClockwise = json1.aClockwise;
              this.aRotation = json1.aRotation;
              return this;
          }
      }
      EllipseCurve.prototype.isEllipseCurve = true;
      class ArcCurve extends EllipseCurve {
          constructor(aX1, aY1, aRadius1, aStartAngle1, aEndAngle1, aClockwise1){
              super(aX1, aY1, aRadius1, aRadius1, aStartAngle1, aEndAngle1, aClockwise1);
              this.type = "ArcCurve";
          }
      }
      ArcCurve.prototype.isArcCurve = true;
      /**
     * Centripetal CatmullRom Curve - which is useful for avoiding
     * cusps and self-intersections in non-uniform catmull rom curves.
     * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
     *
     * curve.type accepts centripetal(default), chordal and catmullrom
     * curve.tension is used for catmullrom which defaults to 0.5
     */ /*
    Based on an optimized c++ solution in
     - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
     - http://ideone.com/NoEbVM
  
    This CubicPoly class could be used for reusing some variables and calculations,
    but for three.js curve use, it could be possible inlined and flatten into a single function call
    which can be placed in CurveUtils.
    */ function CubicPoly() {
          let c01 = 0, c11 = 0, c21 = 0, c31 = 0;
          /*
         * Compute coefficients for a cubic polynomial
         *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
         * such that
         *   p(0) = x0, p(1) = x1
         *  and
         *   p'(0) = t0, p'(1) = t1.
         */ function init1(x01, x11, t01, t15) {
              c01 = x01;
              c11 = t01;
              c21 = -3 * x01 + 3 * x11 - 2 * t01 - t15;
              c31 = 2 * x01 - 2 * x11 + t01 + t15;
          }
          return {
              initCatmullRom: function(x01, x11, x21, x31, tension1) {
                  init1(x11, x21, tension1 * (x21 - x01), tension1 * (x31 - x11));
              },
              initNonuniformCatmullRom: function(x01, x11, x21, x31, dt01, dt11, dt21) {
                  // compute tangents when parameterized in [t1,t2]
                  let t15 = (x11 - x01) / dt01 - (x21 - x01) / (dt01 + dt11) + (x21 - x11) / dt11;
                  let t21 = (x21 - x11) / dt11 - (x31 - x11) / (dt11 + dt21) + (x31 - x21) / dt21;
                  // rescale tangents for parametrization in [0,1]
                  t15 *= dt11;
                  t21 *= dt11;
                  init1(x11, x21, t15, t21);
              },
              calc: function(t4) {
                  const t21 = t4 * t4;
                  const t31 = t21 * t4;
                  return c01 + c11 * t4 + c21 * t21 + c31 * t31;
              }
          };
      }
      //
      const tmp = new Vector3();
      const px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();
      class CatmullRomCurve3 extends Curve {
          constructor(points1 = [], closed1 = false, curveType1 = "centripetal", tension1 = 0.5){
              super();
              this.type = "CatmullRomCurve3";
              this.points = points1;
              this.closed = closed1;
              this.curveType = curveType1;
              this.tension = tension1;
          }
          getPoint(t4, optionalTarget1 = new Vector3()) {
              const point1 = optionalTarget1;
              const points1 = this.points;
              const l1 = points1.length;
              const p6 = (l1 - (this.closed ? 0 : 1)) * t4;
              let intPoint1 = Math.floor(p6);
              let weight2 = p6 - intPoint1;
              if (this.closed) intPoint1 += intPoint1 > 0 ? 0 : (Math.floor(Math.abs(intPoint1) / l1) + 1) * l1;
              else if (weight2 === 0 && intPoint1 === l1 - 1) {
                  intPoint1 = l1 - 2;
                  weight2 = 1;
              }
              let p01, p31; // 4 points (p1 & p2 defined below)
              if (this.closed || intPoint1 > 0) p01 = points1[(intPoint1 - 1) % l1];
              else {
                  // extrapolate first point
                  tmp.subVectors(points1[0], points1[1]).add(points1[0]);
                  p01 = tmp;
              }
              const p11 = points1[intPoint1 % l1];
              const p21 = points1[(intPoint1 + 1) % l1];
              if (this.closed || intPoint1 + 2 < l1) p31 = points1[(intPoint1 + 2) % l1];
              else {
                  // extrapolate last point
                  tmp.subVectors(points1[l1 - 1], points1[l1 - 2]).add(points1[l1 - 1]);
                  p31 = tmp;
              }
              if (this.curveType === "centripetal" || this.curveType === "chordal") {
                  // init Centripetal / Chordal Catmull-Rom
                  const pow1 = this.curveType === "chordal" ? 0.5 : 0.25;
                  let dt01 = Math.pow(p01.distanceToSquared(p11), pow1);
                  let dt11 = Math.pow(p11.distanceToSquared(p21), pow1);
                  let dt21 = Math.pow(p21.distanceToSquared(p31), pow1);
                  // safety check for repeated points
                  if (dt11 < 1e-4) dt11 = 1.0;
                  if (dt01 < 1e-4) dt01 = dt11;
                  if (dt21 < 1e-4) dt21 = dt11;
                  px.initNonuniformCatmullRom(p01.x, p11.x, p21.x, p31.x, dt01, dt11, dt21);
                  py.initNonuniformCatmullRom(p01.y, p11.y, p21.y, p31.y, dt01, dt11, dt21);
                  pz.initNonuniformCatmullRom(p01.z, p11.z, p21.z, p31.z, dt01, dt11, dt21);
              } else if (this.curveType === "catmullrom") {
                  px.initCatmullRom(p01.x, p11.x, p21.x, p31.x, this.tension);
                  py.initCatmullRom(p01.y, p11.y, p21.y, p31.y, this.tension);
                  pz.initCatmullRom(p01.z, p11.z, p21.z, p31.z, this.tension);
              }
              point1.set(px.calc(weight2), py.calc(weight2), pz.calc(weight2));
              return point1;
          }
          copy(source1) {
              super.copy(source1);
              this.points = [];
              for(let i3 = 0, l1 = source1.points.length; i3 < l1; i3++){
                  const point1 = source1.points[i3];
                  this.points.push(point1.clone());
              }
              this.closed = source1.closed;
              this.curveType = source1.curveType;
              this.tension = source1.tension;
              return this;
          }
          toJSON() {
              const data1 = super.toJSON();
              data1.points = [];
              for(let i3 = 0, l1 = this.points.length; i3 < l1; i3++){
                  const point1 = this.points[i3];
                  data1.points.push(point1.toArray());
              }
              data1.closed = this.closed;
              data1.curveType = this.curveType;
              data1.tension = this.tension;
              return data1;
          }
          fromJSON(json1) {
              super.fromJSON(json1);
              this.points = [];
              for(let i3 = 0, l1 = json1.points.length; i3 < l1; i3++){
                  const point1 = json1.points[i3];
                  this.points.push(new Vector3().fromArray(point1));
              }
              this.closed = json1.closed;
              this.curveType = json1.curveType;
              this.tension = json1.tension;
              return this;
          }
      }
      CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;
      /**
     * Bezier Curves formulas obtained from
     * https://en.wikipedia.org/wiki/B%C3%A9zier_curve
     */ function CatmullRom(t4, p01, p11, p21, p31) {
          const v01 = (p21 - p01) * 0.5;
          const v11 = (p31 - p11) * 0.5;
          const t21 = t4 * t4;
          const t31 = t4 * t21;
          return (2 * p11 - 2 * p21 + v01 + v11) * t31 + (-3 * p11 + 3 * p21 - 2 * v01 - v11) * t21 + v01 * t4 + p11;
      }
      //
      function QuadraticBezierP0(t4, p6) {
          const k1 = 1 - t4;
          return k1 * k1 * p6;
      }
      function QuadraticBezierP1(t4, p6) {
          return 2 * (1 - t4) * t4 * p6;
      }
      function QuadraticBezierP2(t4, p6) {
          return t4 * t4 * p6;
      }
      function QuadraticBezier(t4, p01, p11, p21) {
          return QuadraticBezierP0(t4, p01) + QuadraticBezierP1(t4, p11) + QuadraticBezierP2(t4, p21);
      }
      //
      function CubicBezierP0(t4, p6) {
          const k1 = 1 - t4;
          return k1 * k1 * k1 * p6;
      }
      function CubicBezierP1(t4, p6) {
          const k1 = 1 - t4;
          return 3 * k1 * k1 * t4 * p6;
      }
      function CubicBezierP2(t4, p6) {
          return 3 * (1 - t4) * t4 * t4 * p6;
      }
      function CubicBezierP3(t4, p6) {
          return t4 * t4 * t4 * p6;
      }
      function CubicBezier(t4, p01, p11, p21, p31) {
          return CubicBezierP0(t4, p01) + CubicBezierP1(t4, p11) + CubicBezierP2(t4, p21) + CubicBezierP3(t4, p31);
      }
      class CubicBezierCurve extends Curve {
          constructor(v01 = new Vector2(), v11 = new Vector2(), v21 = new Vector2(), v31 = new Vector2()){
              super();
              this.type = "CubicBezierCurve";
              this.v0 = v01;
              this.v1 = v11;
              this.v2 = v21;
              this.v3 = v31;
          }
          getPoint(t4, optionalTarget1 = new Vector2()) {
              const point1 = optionalTarget1;
              const v01 = this.v0, v11 = this.v1, v21 = this.v2, v31 = this.v3;
              point1.set(CubicBezier(t4, v01.x, v11.x, v21.x, v31.x), CubicBezier(t4, v01.y, v11.y, v21.y, v31.y));
              return point1;
          }
          copy(source1) {
              super.copy(source1);
              this.v0.copy(source1.v0);
              this.v1.copy(source1.v1);
              this.v2.copy(source1.v2);
              this.v3.copy(source1.v3);
              return this;
          }
          toJSON() {
              const data1 = super.toJSON();
              data1.v0 = this.v0.toArray();
              data1.v1 = this.v1.toArray();
              data1.v2 = this.v2.toArray();
              data1.v3 = this.v3.toArray();
              return data1;
          }
          fromJSON(json1) {
              super.fromJSON(json1);
              this.v0.fromArray(json1.v0);
              this.v1.fromArray(json1.v1);
              this.v2.fromArray(json1.v2);
              this.v3.fromArray(json1.v3);
              return this;
          }
      }
      CubicBezierCurve.prototype.isCubicBezierCurve = true;
      class CubicBezierCurve3 extends Curve {
          constructor(v01 = new Vector3(), v11 = new Vector3(), v21 = new Vector3(), v31 = new Vector3()){
              super();
              this.type = "CubicBezierCurve3";
              this.v0 = v01;
              this.v1 = v11;
              this.v2 = v21;
              this.v3 = v31;
          }
          getPoint(t4, optionalTarget1 = new Vector3()) {
              const point1 = optionalTarget1;
              const v01 = this.v0, v11 = this.v1, v21 = this.v2, v31 = this.v3;
              point1.set(CubicBezier(t4, v01.x, v11.x, v21.x, v31.x), CubicBezier(t4, v01.y, v11.y, v21.y, v31.y), CubicBezier(t4, v01.z, v11.z, v21.z, v31.z));
              return point1;
          }
          copy(source1) {
              super.copy(source1);
              this.v0.copy(source1.v0);
              this.v1.copy(source1.v1);
              this.v2.copy(source1.v2);
              this.v3.copy(source1.v3);
              return this;
          }
          toJSON() {
              const data1 = super.toJSON();
              data1.v0 = this.v0.toArray();
              data1.v1 = this.v1.toArray();
              data1.v2 = this.v2.toArray();
              data1.v3 = this.v3.toArray();
              return data1;
          }
          fromJSON(json1) {
              super.fromJSON(json1);
              this.v0.fromArray(json1.v0);
              this.v1.fromArray(json1.v1);
              this.v2.fromArray(json1.v2);
              this.v3.fromArray(json1.v3);
              return this;
          }
      }
      CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;
      class LineCurve extends Curve {
          constructor(v11 = new Vector2(), v21 = new Vector2()){
              super();
              this.type = "LineCurve";
              this.v1 = v11;
              this.v2 = v21;
          }
          getPoint(t4, optionalTarget1 = new Vector2()) {
              const point1 = optionalTarget1;
              if (t4 === 1) point1.copy(this.v2);
              else {
                  point1.copy(this.v2).sub(this.v1);
                  point1.multiplyScalar(t4).add(this.v1);
              }
              return point1;
          }
          // Line curve is linear, so we can overwrite default getPointAt
          getPointAt(u4, optionalTarget1) {
              return this.getPoint(u4, optionalTarget1);
          }
          getTangent(t4, optionalTarget1) {
              const tangent1 = optionalTarget1 || new Vector2();
              tangent1.copy(this.v2).sub(this.v1).normalize();
              return tangent1;
          }
          copy(source1) {
              super.copy(source1);
              this.v1.copy(source1.v1);
              this.v2.copy(source1.v2);
              return this;
          }
          toJSON() {
              const data1 = super.toJSON();
              data1.v1 = this.v1.toArray();
              data1.v2 = this.v2.toArray();
              return data1;
          }
          fromJSON(json1) {
              super.fromJSON(json1);
              this.v1.fromArray(json1.v1);
              this.v2.fromArray(json1.v2);
              return this;
          }
      }
      LineCurve.prototype.isLineCurve = true;
      class LineCurve3 extends Curve {
          constructor(v11 = new Vector3(), v21 = new Vector3()){
              super();
              this.type = "LineCurve3";
              this.isLineCurve3 = true;
              this.v1 = v11;
              this.v2 = v21;
          }
          getPoint(t4, optionalTarget1 = new Vector3()) {
              const point1 = optionalTarget1;
              if (t4 === 1) point1.copy(this.v2);
              else {
                  point1.copy(this.v2).sub(this.v1);
                  point1.multiplyScalar(t4).add(this.v1);
              }
              return point1;
          }
          // Line curve is linear, so we can overwrite default getPointAt
          getPointAt(u4, optionalTarget1) {
              return this.getPoint(u4, optionalTarget1);
          }
          copy(source1) {
              super.copy(source1);
              this.v1.copy(source1.v1);
              this.v2.copy(source1.v2);
              return this;
          }
          toJSON() {
              const data1 = super.toJSON();
              data1.v1 = this.v1.toArray();
              data1.v2 = this.v2.toArray();
              return data1;
          }
          fromJSON(json1) {
              super.fromJSON(json1);
              this.v1.fromArray(json1.v1);
              this.v2.fromArray(json1.v2);
              return this;
          }
      }
      class QuadraticBezierCurve extends Curve {
          constructor(v01 = new Vector2(), v11 = new Vector2(), v21 = new Vector2()){
              super();
              this.type = "QuadraticBezierCurve";
              this.v0 = v01;
              this.v1 = v11;
              this.v2 = v21;
          }
          getPoint(t4, optionalTarget1 = new Vector2()) {
              const point1 = optionalTarget1;
              const v01 = this.v0, v11 = this.v1, v21 = this.v2;
              point1.set(QuadraticBezier(t4, v01.x, v11.x, v21.x), QuadraticBezier(t4, v01.y, v11.y, v21.y));
              return point1;
          }
          copy(source1) {
              super.copy(source1);
              this.v0.copy(source1.v0);
              this.v1.copy(source1.v1);
              this.v2.copy(source1.v2);
              return this;
          }
          toJSON() {
              const data1 = super.toJSON();
              data1.v0 = this.v0.toArray();
              data1.v1 = this.v1.toArray();
              data1.v2 = this.v2.toArray();
              return data1;
          }
          fromJSON(json1) {
              super.fromJSON(json1);
              this.v0.fromArray(json1.v0);
              this.v1.fromArray(json1.v1);
              this.v2.fromArray(json1.v2);
              return this;
          }
      }
      QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;
      class QuadraticBezierCurve3 extends Curve {
          constructor(v01 = new Vector3(), v11 = new Vector3(), v21 = new Vector3()){
              super();
              this.type = "QuadraticBezierCurve3";
              this.v0 = v01;
              this.v1 = v11;
              this.v2 = v21;
          }
          getPoint(t4, optionalTarget1 = new Vector3()) {
              const point1 = optionalTarget1;
              const v01 = this.v0, v11 = this.v1, v21 = this.v2;
              point1.set(QuadraticBezier(t4, v01.x, v11.x, v21.x), QuadraticBezier(t4, v01.y, v11.y, v21.y), QuadraticBezier(t4, v01.z, v11.z, v21.z));
              return point1;
          }
          copy(source1) {
              super.copy(source1);
              this.v0.copy(source1.v0);
              this.v1.copy(source1.v1);
              this.v2.copy(source1.v2);
              return this;
          }
          toJSON() {
              const data1 = super.toJSON();
              data1.v0 = this.v0.toArray();
              data1.v1 = this.v1.toArray();
              data1.v2 = this.v2.toArray();
              return data1;
          }
          fromJSON(json1) {
              super.fromJSON(json1);
              this.v0.fromArray(json1.v0);
              this.v1.fromArray(json1.v1);
              this.v2.fromArray(json1.v2);
              return this;
          }
      }
      QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;
      class SplineCurve extends Curve {
          constructor(points1 = []){
              super();
              this.type = "SplineCurve";
              this.points = points1;
          }
          getPoint(t4, optionalTarget1 = new Vector2()) {
              const point1 = optionalTarget1;
              const points1 = this.points;
              const p6 = (points1.length - 1) * t4;
              const intPoint1 = Math.floor(p6);
              const weight2 = p6 - intPoint1;
              const p01 = points1[intPoint1 === 0 ? intPoint1 : intPoint1 - 1];
              const p11 = points1[intPoint1];
              const p21 = points1[intPoint1 > points1.length - 2 ? points1.length - 1 : intPoint1 + 1];
              const p31 = points1[intPoint1 > points1.length - 3 ? points1.length - 1 : intPoint1 + 2];
              point1.set(CatmullRom(weight2, p01.x, p11.x, p21.x, p31.x), CatmullRom(weight2, p01.y, p11.y, p21.y, p31.y));
              return point1;
          }
          copy(source1) {
              super.copy(source1);
              this.points = [];
              for(let i3 = 0, l1 = source1.points.length; i3 < l1; i3++){
                  const point1 = source1.points[i3];
                  this.points.push(point1.clone());
              }
              return this;
          }
          toJSON() {
              const data1 = super.toJSON();
              data1.points = [];
              for(let i3 = 0, l1 = this.points.length; i3 < l1; i3++){
                  const point1 = this.points[i3];
                  data1.points.push(point1.toArray());
              }
              return data1;
          }
          fromJSON(json1) {
              super.fromJSON(json1);
              this.points = [];
              for(let i3 = 0, l1 = json1.points.length; i3 < l1; i3++){
                  const point1 = json1.points[i3];
                  this.points.push(new Vector2().fromArray(point1));
              }
              return this;
          }
      }
      SplineCurve.prototype.isSplineCurve = true;
      var Curves = /*#__PURE__*/ Object.freeze({
          __proto__: null,
          ArcCurve: ArcCurve,
          CatmullRomCurve3: CatmullRomCurve3,
          CubicBezierCurve: CubicBezierCurve,
          CubicBezierCurve3: CubicBezierCurve3,
          EllipseCurve: EllipseCurve,
          LineCurve: LineCurve,
          LineCurve3: LineCurve3,
          QuadraticBezierCurve: QuadraticBezierCurve,
          QuadraticBezierCurve3: QuadraticBezierCurve3,
          SplineCurve: SplineCurve
      });
      /**************************************************************
     *	Curved Path - a curve path is simply a array of connected
     *  curves, but retains the api of a curve
     **************************************************************/ class CurvePath extends Curve {
          constructor(){
              super();
              this.type = "CurvePath";
              this.curves = [];
              this.autoClose = false; // Automatically closes the path
          }
          add(curve1) {
              this.curves.push(curve1);
          }
          closePath() {
              // Add a line curve if start and end of lines are not connected
              const startPoint1 = this.curves[0].getPoint(0);
              const endPoint1 = this.curves[this.curves.length - 1].getPoint(1);
              if (!startPoint1.equals(endPoint1)) this.curves.push(new LineCurve(endPoint1, startPoint1));
          }
          // To get accurate point with reference to
          // entire path distance at time t,
          // following has to be done:
          // 1. Length of each sub path have to be known
          // 2. Locate and identify type of curve
          // 3. Get t for the curve
          // 4. Return curve.getPointAt(t')
          getPoint(t4, optionalTarget1) {
              const d7 = t4 * this.getLength();
              const curveLengths1 = this.getCurveLengths();
              let i3 = 0;
              // To think about boundaries points.
              while(i3 < curveLengths1.length){
                  if (curveLengths1[i3] >= d7) {
                      const diff1 = curveLengths1[i3] - d7;
                      const curve1 = this.curves[i3];
                      const segmentLength1 = curve1.getLength();
                      const u4 = segmentLength1 === 0 ? 0 : 1 - diff1 / segmentLength1;
                      return curve1.getPointAt(u4, optionalTarget1);
                  }
                  i3++;
              }
              return null;
          // loop where sum != 0, sum > d , sum+1 <d
          }
          // We cannot use the default THREE.Curve getPoint() with getLength() because in
          // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
          // getPoint() depends on getLength
          getLength() {
              const lens1 = this.getCurveLengths();
              return lens1[lens1.length - 1];
          }
          // cacheLengths must be recalculated.
          updateArcLengths() {
              this.needsUpdate = true;
              this.cacheLengths = null;
              this.getCurveLengths();
          }
          // Compute lengths and cache them
          // We cannot overwrite getLengths() because UtoT mapping uses it.
          getCurveLengths() {
              // We use cache values if curves and cache array are same length
              if (this.cacheLengths && this.cacheLengths.length === this.curves.length) return this.cacheLengths;
              // Get length of sub-curve
              // Push sums into cached array
              const lengths1 = [];
              let sums1 = 0;
              for(let i3 = 0, l1 = this.curves.length; i3 < l1; i3++){
                  sums1 += this.curves[i3].getLength();
                  lengths1.push(sums1);
              }
              this.cacheLengths = lengths1;
              return lengths1;
          }
          getSpacedPoints(divisions1 = 40) {
              const points1 = [];
              for(let i3 = 0; i3 <= divisions1; i3++)points1.push(this.getPoint(i3 / divisions1));
              if (this.autoClose) points1.push(points1[0]);
              return points1;
          }
          getPoints(divisions1 = 12) {
              const points1 = [];
              let last1;
              for(let i3 = 0, curves1 = this.curves; i3 < curves1.length; i3++){
                  const curve1 = curves1[i3];
                  const resolution1 = curve1.isEllipseCurve ? divisions1 * 2 : curve1.isLineCurve || curve1.isLineCurve3 ? 1 : curve1.isSplineCurve ? divisions1 * curve1.points.length : divisions1;
                  const pts1 = curve1.getPoints(resolution1);
                  for(let j1 = 0; j1 < pts1.length; j1++){
                      const point1 = pts1[j1];
                      if (last1 && last1.equals(point1)) continue; // ensures no consecutive points are duplicates
                      points1.push(point1);
                      last1 = point1;
                  }
              }
              if (this.autoClose && points1.length > 1 && !points1[points1.length - 1].equals(points1[0])) points1.push(points1[0]);
              return points1;
          }
          copy(source1) {
              super.copy(source1);
              this.curves = [];
              for(let i3 = 0, l1 = source1.curves.length; i3 < l1; i3++){
                  const curve1 = source1.curves[i3];
                  this.curves.push(curve1.clone());
              }
              this.autoClose = source1.autoClose;
              return this;
          }
          toJSON() {
              const data1 = super.toJSON();
              data1.autoClose = this.autoClose;
              data1.curves = [];
              for(let i3 = 0, l1 = this.curves.length; i3 < l1; i3++){
                  const curve1 = this.curves[i3];
                  data1.curves.push(curve1.toJSON());
              }
              return data1;
          }
          fromJSON(json1) {
              super.fromJSON(json1);
              this.autoClose = json1.autoClose;
              this.curves = [];
              for(let i3 = 0, l1 = json1.curves.length; i3 < l1; i3++){
                  const curve1 = json1.curves[i3];
                  this.curves.push(new Curves[curve1.type]().fromJSON(curve1));
              }
              return this;
          }
      }
      class Path extends CurvePath {
          constructor(points1){
              super();
              this.type = "Path";
              this.currentPoint = new Vector2();
              if (points1) this.setFromPoints(points1);
          }
          setFromPoints(points1) {
              this.moveTo(points1[0].x, points1[0].y);
              for(let i3 = 1, l1 = points1.length; i3 < l1; i3++)this.lineTo(points1[i3].x, points1[i3].y);
              return this;
          }
          moveTo(x4, y3) {
              this.currentPoint.set(x4, y3); // TODO consider referencing vectors instead of copying?
              return this;
          }
          lineTo(x4, y3) {
              const curve1 = new LineCurve(this.currentPoint.clone(), new Vector2(x4, y3));
              this.curves.push(curve1);
              this.currentPoint.set(x4, y3);
              return this;
          }
          quadraticCurveTo(aCPx1, aCPy1, aX1, aY1) {
              const curve1 = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx1, aCPy1), new Vector2(aX1, aY1));
              this.curves.push(curve1);
              this.currentPoint.set(aX1, aY1);
              return this;
          }
          bezierCurveTo(aCP1x1, aCP1y1, aCP2x1, aCP2y1, aX1, aY1) {
              const curve1 = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x1, aCP1y1), new Vector2(aCP2x1, aCP2y1), new Vector2(aX1, aY1));
              this.curves.push(curve1);
              this.currentPoint.set(aX1, aY1);
              return this;
          }
          splineThru(pts1 /*Array of Vector*/ ) {
              const npts1 = [
                  this.currentPoint.clone()
              ].concat(pts1);
              const curve1 = new SplineCurve(npts1);
              this.curves.push(curve1);
              this.currentPoint.copy(pts1[pts1.length - 1]);
              return this;
          }
          arc(aX1, aY1, aRadius1, aStartAngle1, aEndAngle1, aClockwise1) {
              const x01 = this.currentPoint.x;
              const y01 = this.currentPoint.y;
              this.absarc(aX1 + x01, aY1 + y01, aRadius1, aStartAngle1, aEndAngle1, aClockwise1);
              return this;
          }
          absarc(aX1, aY1, aRadius1, aStartAngle1, aEndAngle1, aClockwise1) {
              this.absellipse(aX1, aY1, aRadius1, aRadius1, aStartAngle1, aEndAngle1, aClockwise1);
              return this;
          }
          ellipse(aX1, aY1, xRadius1, yRadius1, aStartAngle1, aEndAngle1, aClockwise1, aRotation1) {
              const x01 = this.currentPoint.x;
              const y01 = this.currentPoint.y;
              this.absellipse(aX1 + x01, aY1 + y01, xRadius1, yRadius1, aStartAngle1, aEndAngle1, aClockwise1, aRotation1);
              return this;
          }
          absellipse(aX1, aY1, xRadius1, yRadius1, aStartAngle1, aEndAngle1, aClockwise1, aRotation1) {
              const curve1 = new EllipseCurve(aX1, aY1, xRadius1, yRadius1, aStartAngle1, aEndAngle1, aClockwise1, aRotation1);
              if (this.curves.length > 0) {
                  // if a previous curve is present, attempt to join
                  const firstPoint1 = curve1.getPoint(0);
                  if (!firstPoint1.equals(this.currentPoint)) this.lineTo(firstPoint1.x, firstPoint1.y);
              }
              this.curves.push(curve1);
              const lastPoint1 = curve1.getPoint(1);
              this.currentPoint.copy(lastPoint1);
              return this;
          }
          copy(source1) {
              super.copy(source1);
              this.currentPoint.copy(source1.currentPoint);
              return this;
          }
          toJSON() {
              const data1 = super.toJSON();
              data1.currentPoint = this.currentPoint.toArray();
              return data1;
          }
          fromJSON(json1) {
              super.fromJSON(json1);
              this.currentPoint.fromArray(json1.currentPoint);
              return this;
          }
      }
      class Shape extends Path {
          constructor(points1){
              super(points1);
              this.uuid = generateUUID();
              this.type = "Shape";
              this.holes = [];
          }
          getPointsHoles(divisions1) {
              const holesPts1 = [];
              for(let i3 = 0, l1 = this.holes.length; i3 < l1; i3++)holesPts1[i3] = this.holes[i3].getPoints(divisions1);
              return holesPts1;
          }
          // get points of shape and holes (keypoints based on segments parameter)
          extractPoints(divisions1) {
              return {
                  shape: this.getPoints(divisions1),
                  holes: this.getPointsHoles(divisions1)
              };
          }
          copy(source1) {
              super.copy(source1);
              this.holes = [];
              for(let i3 = 0, l1 = source1.holes.length; i3 < l1; i3++){
                  const hole1 = source1.holes[i3];
                  this.holes.push(hole1.clone());
              }
              return this;
          }
          toJSON() {
              const data1 = super.toJSON();
              data1.uuid = this.uuid;
              data1.holes = [];
              for(let i3 = 0, l1 = this.holes.length; i3 < l1; i3++){
                  const hole1 = this.holes[i3];
                  data1.holes.push(hole1.toJSON());
              }
              return data1;
          }
          fromJSON(json1) {
              super.fromJSON(json1);
              this.uuid = json1.uuid;
              this.holes = [];
              for(let i3 = 0, l1 = json1.holes.length; i3 < l1; i3++){
                  const hole1 = json1.holes[i3];
                  this.holes.push(new Path().fromJSON(hole1));
              }
              return this;
          }
      }
      /**
     * Port from https://github.com/mapbox/earcut (v2.2.2)
     */ const Earcut = {
          triangulate: function(data1, holeIndices1, dim1 = 2) {
              const hasHoles1 = holeIndices1 && holeIndices1.length;
              const outerLen1 = hasHoles1 ? holeIndices1[0] * dim1 : data1.length;
              let outerNode1 = linkedList(data1, 0, outerLen1, dim1, true);
              const triangles1 = [];
              if (!outerNode1 || outerNode1.next === outerNode1.prev) return triangles1;
              let minX1, minY1, maxX1, maxY1, x4, y3, invSize1;
              if (hasHoles1) outerNode1 = eliminateHoles(data1, holeIndices1, outerNode1, dim1);
              // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
              if (data1.length > 80 * dim1) {
                  minX1 = maxX1 = data1[0];
                  minY1 = maxY1 = data1[1];
                  for(let i3 = dim1; i3 < outerLen1; i3 += dim1){
                      x4 = data1[i3];
                      y3 = data1[i3 + 1];
                      if (x4 < minX1) minX1 = x4;
                      if (y3 < minY1) minY1 = y3;
                      if (x4 > maxX1) maxX1 = x4;
                      if (y3 > maxY1) maxY1 = y3;
                  }
                  // minX, minY and invSize are later used to transform coords into integers for z-order calculation
                  invSize1 = Math.max(maxX1 - minX1, maxY1 - minY1);
                  invSize1 = invSize1 !== 0 ? 1 / invSize1 : 0;
              }
              earcutLinked(outerNode1, triangles1, dim1, minX1, minY1, invSize1);
              return triangles1;
          }
      };
      // create a circular doubly linked list from polygon points in the specified winding order
      function linkedList(data1, start1, end1, dim1, clockwise1) {
          let i3, last1;
          if (clockwise1 === signedArea(data1, start1, end1, dim1) > 0) for(i3 = start1; i3 < end1; i3 += dim1)last1 = insertNode(i3, data1[i3], data1[i3 + 1], last1);
          else for(i3 = end1 - dim1; i3 >= start1; i3 -= dim1)last1 = insertNode(i3, data1[i3], data1[i3 + 1], last1);
          if (last1 && equals(last1, last1.next)) {
              removeNode(last1);
              last1 = last1.next;
          }
          return last1;
      }
      // eliminate colinear or duplicate points
      function filterPoints(start1, end1) {
          if (!start1) return start1;
          if (!end1) end1 = start1;
          let p6 = start1, again1;
          do {
              again1 = false;
              if (!p6.steiner && (equals(p6, p6.next) || area(p6.prev, p6, p6.next) === 0)) {
                  removeNode(p6);
                  p6 = end1 = p6.prev;
                  if (p6 === p6.next) break;
                  again1 = true;
              } else p6 = p6.next;
          }while (again1 || p6 !== end1);
          return end1;
      }
      // main ear slicing loop which triangulates a polygon (given as a linked list)
      function earcutLinked(ear1, triangles1, dim1, minX1, minY1, invSize1, pass1) {
          if (!ear1) return;
          // interlink polygon nodes in z-order
          if (!pass1 && invSize1) indexCurve(ear1, minX1, minY1, invSize1);
          let stop1 = ear1, prev1, next1;
          // iterate through ears, slicing them one by one
          while(ear1.prev !== ear1.next){
              prev1 = ear1.prev;
              next1 = ear1.next;
              if (invSize1 ? isEarHashed(ear1, minX1, minY1, invSize1) : isEar(ear1)) {
                  // cut off the triangle
                  triangles1.push(prev1.i / dim1);
                  triangles1.push(ear1.i / dim1);
                  triangles1.push(next1.i / dim1);
                  removeNode(ear1);
                  // skipping the next vertex leads to less sliver triangles
                  ear1 = next1.next;
                  stop1 = next1.next;
                  continue;
              }
              ear1 = next1;
              // if we looped through the whole remaining polygon and can't find any more ears
              if (ear1 === stop1) {
                  // try filtering points and slicing again
                  if (!pass1) earcutLinked(filterPoints(ear1), triangles1, dim1, minX1, minY1, invSize1, 1);
                  else if (pass1 === 1) {
                      ear1 = cureLocalIntersections(filterPoints(ear1), triangles1, dim1);
                      earcutLinked(ear1, triangles1, dim1, minX1, minY1, invSize1, 2);
                  // as a last resort, try splitting the remaining polygon into two
                  } else if (pass1 === 2) splitEarcut(ear1, triangles1, dim1, minX1, minY1, invSize1);
                  break;
              }
          }
      }
      // check whether a polygon node forms a valid ear with adjacent nodes
      function isEar(ear1) {
          const a3 = ear1.prev, b3 = ear1, c4 = ear1.next;
          if (area(a3, b3, c4) >= 0) return false; // reflex, can't be an ear
          // now make sure we don't have other points inside the potential ear
          let p6 = ear1.next.next;
          while(p6 !== ear1.prev){
              if (pointInTriangle(a3.x, a3.y, b3.x, b3.y, c4.x, c4.y, p6.x, p6.y) && area(p6.prev, p6, p6.next) >= 0) return false;
              p6 = p6.next;
          }
          return true;
      }
      function isEarHashed(ear1, minX1, minY1, invSize1) {
          const a3 = ear1.prev, b3 = ear1, c4 = ear1.next;
          if (area(a3, b3, c4) >= 0) return false; // reflex, can't be an ear
          // triangle bbox; min & max are calculated like this for speed
          const minTX1 = a3.x < b3.x ? a3.x < c4.x ? a3.x : c4.x : b3.x < c4.x ? b3.x : c4.x, minTY1 = a3.y < b3.y ? a3.y < c4.y ? a3.y : c4.y : b3.y < c4.y ? b3.y : c4.y, maxTX1 = a3.x > b3.x ? a3.x > c4.x ? a3.x : c4.x : b3.x > c4.x ? b3.x : c4.x, maxTY1 = a3.y > b3.y ? a3.y > c4.y ? a3.y : c4.y : b3.y > c4.y ? b3.y : c4.y;
          // z-order range for the current triangle bbox;
          const minZ1 = zOrder(minTX1, minTY1, minX1, minY1, invSize1), maxZ1 = zOrder(maxTX1, maxTY1, minX1, minY1, invSize1);
          let p6 = ear1.prevZ, n3 = ear1.nextZ;
          // look for points inside the triangle in both directions
          while(p6 && p6.z >= minZ1 && n3 && n3.z <= maxZ1){
              if (p6 !== ear1.prev && p6 !== ear1.next && pointInTriangle(a3.x, a3.y, b3.x, b3.y, c4.x, c4.y, p6.x, p6.y) && area(p6.prev, p6, p6.next) >= 0) return false;
              p6 = p6.prevZ;
              if (n3 !== ear1.prev && n3 !== ear1.next && pointInTriangle(a3.x, a3.y, b3.x, b3.y, c4.x, c4.y, n3.x, n3.y) && area(n3.prev, n3, n3.next) >= 0) return false;
              n3 = n3.nextZ;
          }
          // look for remaining points in decreasing z-order
          while(p6 && p6.z >= minZ1){
              if (p6 !== ear1.prev && p6 !== ear1.next && pointInTriangle(a3.x, a3.y, b3.x, b3.y, c4.x, c4.y, p6.x, p6.y) && area(p6.prev, p6, p6.next) >= 0) return false;
              p6 = p6.prevZ;
          }
          // look for remaining points in increasing z-order
          while(n3 && n3.z <= maxZ1){
              if (n3 !== ear1.prev && n3 !== ear1.next && pointInTriangle(a3.x, a3.y, b3.x, b3.y, c4.x, c4.y, n3.x, n3.y) && area(n3.prev, n3, n3.next) >= 0) return false;
              n3 = n3.nextZ;
          }
          return true;
      }
      // go through all polygon nodes and cure small local self-intersections
      function cureLocalIntersections(start1, triangles1, dim1) {
          let p6 = start1;
          do {
              const a3 = p6.prev, b3 = p6.next.next;
              if (!equals(a3, b3) && intersects(a3, p6, p6.next, b3) && locallyInside(a3, b3) && locallyInside(b3, a3)) {
                  triangles1.push(a3.i / dim1);
                  triangles1.push(p6.i / dim1);
                  triangles1.push(b3.i / dim1);
                  // remove two nodes involved
                  removeNode(p6);
                  removeNode(p6.next);
                  p6 = start1 = b3;
              }
              p6 = p6.next;
          }while (p6 !== start1);
          return filterPoints(p6);
      }
      // try splitting polygon into two and triangulate them independently
      function splitEarcut(start1, triangles1, dim1, minX1, minY1, invSize1) {
          // look for a valid diagonal that divides the polygon into two
          let a3 = start1;
          do {
              let b3 = a3.next.next;
              while(b3 !== a3.prev){
                  if (a3.i !== b3.i && isValidDiagonal(a3, b3)) {
                      // split the polygon in two by the diagonal
                      let c4 = splitPolygon(a3, b3);
                      // filter colinear points around the cuts
                      a3 = filterPoints(a3, a3.next);
                      c4 = filterPoints(c4, c4.next);
                      // run earcut on each half
                      earcutLinked(a3, triangles1, dim1, minX1, minY1, invSize1);
                      earcutLinked(c4, triangles1, dim1, minX1, minY1, invSize1);
                      return;
                  }
                  b3 = b3.next;
              }
              a3 = a3.next;
          }while (a3 !== start1);
      }
      // link every hole into the outer loop, producing a single-ring polygon without holes
      function eliminateHoles(data1, holeIndices1, outerNode1, dim1) {
          const queue1 = [];
          let i3, len1, start1, end1, list1;
          for(i3 = 0, len1 = holeIndices1.length; i3 < len1; i3++){
              start1 = holeIndices1[i3] * dim1;
              end1 = i3 < len1 - 1 ? holeIndices1[i3 + 1] * dim1 : data1.length;
              list1 = linkedList(data1, start1, end1, dim1, false);
              if (list1 === list1.next) list1.steiner = true;
              queue1.push(getLeftmost(list1));
          }
          queue1.sort(compareX);
          // process holes from left to right
          for(i3 = 0; i3 < queue1.length; i3++){
              eliminateHole(queue1[i3], outerNode1);
              outerNode1 = filterPoints(outerNode1, outerNode1.next);
          }
          return outerNode1;
      }
      function compareX(a3, b3) {
          return a3.x - b3.x;
      }
      // find a bridge between vertices that connects hole with an outer ring and and link it
      function eliminateHole(hole1, outerNode1) {
          outerNode1 = findHoleBridge(hole1, outerNode1);
          if (outerNode1) {
              const b3 = splitPolygon(outerNode1, hole1);
              // filter collinear points around the cuts
              filterPoints(outerNode1, outerNode1.next);
              filterPoints(b3, b3.next);
          }
      }
      // David Eberly's algorithm for finding a bridge between hole and outer polygon
      function findHoleBridge(hole1, outerNode1) {
          let p6 = outerNode1;
          const hx1 = hole1.x;
          const hy1 = hole1.y;
          let qx1 = -Infinity, m1;
          // find a segment intersected by a ray from the hole's leftmost point to the left;
          // segment's endpoint with lesser x will be potential connection point
          do {
              if (hy1 <= p6.y && hy1 >= p6.next.y && p6.next.y !== p6.y) {
                  const x4 = p6.x + (hy1 - p6.y) * (p6.next.x - p6.x) / (p6.next.y - p6.y);
                  if (x4 <= hx1 && x4 > qx1) {
                      qx1 = x4;
                      if (x4 === hx1) {
                          if (hy1 === p6.y) return p6;
                          if (hy1 === p6.next.y) return p6.next;
                      }
                      m1 = p6.x < p6.next.x ? p6 : p6.next;
                  }
              }
              p6 = p6.next;
          }while (p6 !== outerNode1);
          if (!m1) return null;
          if (hx1 === qx1) return m1; // hole touches outer segment; pick leftmost endpoint
          // look for points inside the triangle of hole point, segment intersection and endpoint;
          // if there are no points found, we have a valid connection;
          // otherwise choose the point of the minimum angle with the ray as connection point
          const stop1 = m1, mx1 = m1.x, my1 = m1.y;
          let tanMin1 = Infinity, tan3;
          p6 = m1;
          do {
              if (hx1 >= p6.x && p6.x >= mx1 && hx1 !== p6.x && pointInTriangle(hy1 < my1 ? hx1 : qx1, hy1, mx1, my1, hy1 < my1 ? qx1 : hx1, hy1, p6.x, p6.y)) {
                  tan3 = Math.abs(hy1 - p6.y) / (hx1 - p6.x); // tangential
                  if (locallyInside(p6, hole1) && (tan3 < tanMin1 || tan3 === tanMin1 && (p6.x > m1.x || p6.x === m1.x && sectorContainsSector(m1, p6)))) {
                      m1 = p6;
                      tanMin1 = tan3;
                  }
              }
              p6 = p6.next;
          }while (p6 !== stop1);
          return m1;
      }
      // whether sector in vertex m contains sector in vertex p in the same coordinates
      function sectorContainsSector(m1, p6) {
          return area(m1.prev, m1, p6.prev) < 0 && area(p6.next, m1, m1.next) < 0;
      }
      // interlink polygon nodes in z-order
      function indexCurve(start1, minX1, minY1, invSize1) {
          let p6 = start1;
          do {
              if (p6.z === null) p6.z = zOrder(p6.x, p6.y, minX1, minY1, invSize1);
              p6.prevZ = p6.prev;
              p6.nextZ = p6.next;
              p6 = p6.next;
          }while (p6 !== start1);
          p6.prevZ.nextZ = null;
          p6.prevZ = null;
          sortLinked(p6);
      }
      // Simon Tatham's linked list merge sort algorithm
      // http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
      function sortLinked(list1) {
          let i3, p6, q3, e1, tail1, numMerges1, pSize1, qSize1, inSize1 = 1;
          do {
              p6 = list1;
              list1 = null;
              tail1 = null;
              numMerges1 = 0;
              while(p6){
                  numMerges1++;
                  q3 = p6;
                  pSize1 = 0;
                  for(i3 = 0; i3 < inSize1; i3++){
                      pSize1++;
                      q3 = q3.nextZ;
                      if (!q3) break;
                  }
                  qSize1 = inSize1;
                  while(pSize1 > 0 || qSize1 > 0 && q3){
                      if (pSize1 !== 0 && (qSize1 === 0 || !q3 || p6.z <= q3.z)) {
                          e1 = p6;
                          p6 = p6.nextZ;
                          pSize1--;
                      } else {
                          e1 = q3;
                          q3 = q3.nextZ;
                          qSize1--;
                      }
                      if (tail1) tail1.nextZ = e1;
                      else list1 = e1;
                      e1.prevZ = tail1;
                      tail1 = e1;
                  }
                  p6 = q3;
              }
              tail1.nextZ = null;
              inSize1 *= 2;
          }while (numMerges1 > 1);
          return list1;
      }
      // z-order of a point given coords and inverse of the longer side of data bbox
      function zOrder(x4, y3, minX1, minY1, invSize1) {
          // coords are transformed into non-negative 15-bit integer range
          x4 = 32767 * (x4 - minX1) * invSize1;
          y3 = 32767 * (y3 - minY1) * invSize1;
          x4 = (x4 | x4 << 8) & 0x00FF00FF;
          x4 = (x4 | x4 << 4) & 0x0F0F0F0F;
          x4 = (x4 | x4 << 2) & 0x33333333;
          x4 = (x4 | x4 << 1) & 0x55555555;
          y3 = (y3 | y3 << 8) & 0x00FF00FF;
          y3 = (y3 | y3 << 4) & 0x0F0F0F0F;
          y3 = (y3 | y3 << 2) & 0x33333333;
          y3 = (y3 | y3 << 1) & 0x55555555;
          return x4 | y3 << 1;
      }
      // find the leftmost node of a polygon ring
      function getLeftmost(start1) {
          let p6 = start1, leftmost1 = start1;
          do {
              if (p6.x < leftmost1.x || p6.x === leftmost1.x && p6.y < leftmost1.y) leftmost1 = p6;
              p6 = p6.next;
          }while (p6 !== start1);
          return leftmost1;
      }
      // check if a point lies within a convex triangle
      function pointInTriangle(ax1, ay1, bx1, by1, cx1, cy1, px1, py1) {
          return (cx1 - px1) * (ay1 - py1) - (ax1 - px1) * (cy1 - py1) >= 0 && (ax1 - px1) * (by1 - py1) - (bx1 - px1) * (ay1 - py1) >= 0 && (bx1 - px1) * (cy1 - py1) - (cx1 - px1) * (by1 - py1) >= 0;
      }
      // check if a diagonal between two polygon nodes is valid (lies in polygon interior)
      function isValidDiagonal(a3, b3) {
          return a3.next.i !== b3.i && a3.prev.i !== b3.i && !intersectsPolygon(a3, b3) && // dones't intersect other edges
          (locallyInside(a3, b3) && locallyInside(b3, a3) && middleInside(a3, b3) && // locally visible
          (area(a3.prev, a3, b3.prev) || area(a3, b3.prev, b3)) || // does not create opposite-facing sectors
          equals(a3, b3) && area(a3.prev, a3, a3.next) > 0 && area(b3.prev, b3, b3.next) > 0); // special zero-length case
      }
      // signed area of a triangle
      function area(p6, q3, r1) {
          return (q3.y - p6.y) * (r1.x - q3.x) - (q3.x - p6.x) * (r1.y - q3.y);
      }
      // check if two points are equal
      function equals(p11, p21) {
          return p11.x === p21.x && p11.y === p21.y;
      }
      // check if two segments intersect
      function intersects(p11, q11, p21, q21) {
          const o11 = sign(area(p11, q11, p21));
          const o21 = sign(area(p11, q11, q21));
          const o31 = sign(area(p21, q21, p11));
          const o41 = sign(area(p21, q21, q11));
          if (o11 !== o21 && o31 !== o41) return true; // general case
          if (o11 === 0 && onSegment(p11, p21, q11)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1
          if (o21 === 0 && onSegment(p11, q21, q11)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1
          if (o31 === 0 && onSegment(p21, p11, q21)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2
          if (o41 === 0 && onSegment(p21, q11, q21)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2
          return false;
      }
      // for collinear points p, q, r, check if point q lies on segment pr
      function onSegment(p6, q3, r1) {
          return q3.x <= Math.max(p6.x, r1.x) && q3.x >= Math.min(p6.x, r1.x) && q3.y <= Math.max(p6.y, r1.y) && q3.y >= Math.min(p6.y, r1.y);
      }
      function sign(num1) {
          return num1 > 0 ? 1 : num1 < 0 ? -1 : 0;
      }
      // check if a polygon diagonal intersects any polygon segments
      function intersectsPolygon(a3, b3) {
          let p6 = a3;
          do {
              if (p6.i !== a3.i && p6.next.i !== a3.i && p6.i !== b3.i && p6.next.i !== b3.i && intersects(p6, p6.next, a3, b3)) return true;
              p6 = p6.next;
          }while (p6 !== a3);
          return false;
      }
      // check if a polygon diagonal is locally inside the polygon
      function locallyInside(a3, b3) {
          return area(a3.prev, a3, a3.next) < 0 ? area(a3, b3, a3.next) >= 0 && area(a3, a3.prev, b3) >= 0 : area(a3, b3, a3.prev) < 0 || area(a3, a3.next, b3) < 0;
      }
      // check if the middle point of a polygon diagonal is inside the polygon
      function middleInside(a3, b3) {
          let p6 = a3, inside1 = false;
          const px1 = (a3.x + b3.x) / 2, py1 = (a3.y + b3.y) / 2;
          do {
              if (p6.y > py1 !== p6.next.y > py1 && p6.next.y !== p6.y && px1 < (p6.next.x - p6.x) * (py1 - p6.y) / (p6.next.y - p6.y) + p6.x) inside1 = !inside1;
              p6 = p6.next;
          }while (p6 !== a3);
          return inside1;
      }
      // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
      // if one belongs to the outer ring and another to a hole, it merges it into a single ring
      function splitPolygon(a3, b3) {
          const a25 = new Node(a3.i, a3.x, a3.y), b25 = new Node(b3.i, b3.x, b3.y), an1 = a3.next, bp1 = b3.prev;
          a3.next = b3;
          b3.prev = a3;
          a25.next = an1;
          an1.prev = a25;
          b25.next = a25;
          a25.prev = b25;
          bp1.next = b25;
          b25.prev = bp1;
          return b25;
      }
      // create a node and optionally link it with previous one (in a circular doubly linked list)
      function insertNode(i3, x4, y3, last1) {
          const p6 = new Node(i3, x4, y3);
          if (!last1) {
              p6.prev = p6;
              p6.next = p6;
          } else {
              p6.next = last1.next;
              p6.prev = last1;
              last1.next.prev = p6;
              last1.next = p6;
          }
          return p6;
      }
      function removeNode(p6) {
          p6.next.prev = p6.prev;
          p6.prev.next = p6.next;
          if (p6.prevZ) p6.prevZ.nextZ = p6.nextZ;
          if (p6.nextZ) p6.nextZ.prevZ = p6.prevZ;
      }
      function Node(i3, x4, y3) {
          // vertex index in coordinates array
          this.i = i3;
          // vertex coordinates
          this.x = x4;
          this.y = y3;
          // previous and next vertex nodes in a polygon ring
          this.prev = null;
          this.next = null;
          // z-order curve value
          this.z = null;
          // previous and next nodes in z-order
          this.prevZ = null;
          this.nextZ = null;
          // indicates whether this is a steiner point
          this.steiner = false;
      }
      function signedArea(data1, start1, end1, dim1) {
          let sum1 = 0;
          for(let i3 = start1, j1 = end1 - dim1; i3 < end1; i3 += dim1){
              sum1 += (data1[j1] - data1[i3]) * (data1[i3 + 1] + data1[j1 + 1]);
              j1 = i3;
          }
          return sum1;
      }
      class ShapeUtils {
          // calculate area of the contour polygon
          static area(contour1) {
              const n3 = contour1.length;
              let a3 = 0.0;
              for(let p6 = n3 - 1, q3 = 0; q3 < n3; p6 = q3++)a3 += contour1[p6].x * contour1[q3].y - contour1[q3].x * contour1[p6].y;
              return a3 * 0.5;
          }
          static isClockWise(pts1) {
              return ShapeUtils.area(pts1) < 0;
          }
          static triangulateShape(contour1, holes1) {
              const vertices1 = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
              const holeIndices1 = []; // array of hole indices
              const faces1 = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]
              removeDupEndPts(contour1);
              addContour(vertices1, contour1);
              //
              let holeIndex1 = contour1.length;
              holes1.forEach(removeDupEndPts);
              for(let i3 = 0; i3 < holes1.length; i3++){
                  holeIndices1.push(holeIndex1);
                  holeIndex1 += holes1[i3].length;
                  addContour(vertices1, holes1[i3]);
              }
              //
              const triangles1 = Earcut.triangulate(vertices1, holeIndices1);
              //
              for(let i3 = 0; i3 < triangles1.length; i3 += 3)faces1.push(triangles1.slice(i3, i3 + 3));
              return faces1;
          }
      }
      function removeDupEndPts(points1) {
          const l1 = points1.length;
          if (l1 > 2 && points1[l1 - 1].equals(points1[0])) points1.pop();
      }
      function addContour(vertices1, contour1) {
          for(let i3 = 0; i3 < contour1.length; i3++){
              vertices1.push(contour1[i3].x);
              vertices1.push(contour1[i3].y);
          }
      }
      /**
     * Creates extruded geometry from a path shape.
     *
     * parameters = {
     *
     *  curveSegments: <int>, // number of points on the curves
     *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
     *  depth: <float>, // Depth to extrude the shape
     *
     *  bevelEnabled: <bool>, // turn on bevel
     *  bevelThickness: <float>, // how deep into the original shape bevel goes
     *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel
     *  bevelOffset: <float>, // how far from shape outline does bevel start
     *  bevelSegments: <int>, // number of bevel layers
     *
     *  extrudePath: <THREE.Curve> // curve to extrude shape along
     *
     *  UVGenerator: <Object> // object that provides UV generator functions
     *
     * }
     */ class ExtrudeGeometry extends BufferGeometry {
          constructor(shapes1 = new Shape([
              new Vector2(0.5, 0.5),
              new Vector2(-0.5, 0.5),
              new Vector2(-0.5, -0.5),
              new Vector2(0.5, -0.5)
          ]), options1 = {}){
              super();
              this.type = "ExtrudeGeometry";
              this.parameters = {
                  shapes: shapes1,
                  options: options1
              };
              shapes1 = Array.isArray(shapes1) ? shapes1 : [
                  shapes1
              ];
              const scope1 = this;
              const verticesArray1 = [];
              const uvArray1 = [];
              for(let i3 = 0, l1 = shapes1.length; i3 < l1; i3++){
                  const shape1 = shapes1[i3];
                  addShape1(shape1);
              }
              // build geometry
              this.setAttribute("position", new Float32BufferAttribute(verticesArray1, 3));
              this.setAttribute("uv", new Float32BufferAttribute(uvArray1, 2));
              this.computeVertexNormals();
              // functions
              function addShape1(shape1) {
                  const placeholder1 = [];
                  // options
                  const curveSegments1 = options1.curveSegments !== undefined ? options1.curveSegments : 12;
                  const steps1 = options1.steps !== undefined ? options1.steps : 1;
                  let depth1 = options1.depth !== undefined ? options1.depth : 1;
                  let bevelEnabled1 = options1.bevelEnabled !== undefined ? options1.bevelEnabled : true;
                  let bevelThickness1 = options1.bevelThickness !== undefined ? options1.bevelThickness : 0.2;
                  let bevelSize1 = options1.bevelSize !== undefined ? options1.bevelSize : bevelThickness1 - 0.1;
                  let bevelOffset1 = options1.bevelOffset !== undefined ? options1.bevelOffset : 0;
                  let bevelSegments1 = options1.bevelSegments !== undefined ? options1.bevelSegments : 3;
                  const extrudePath1 = options1.extrudePath;
                  const uvgen1 = options1.UVGenerator !== undefined ? options1.UVGenerator : WorldUVGenerator;
                  // deprecated options
                  if (options1.amount !== undefined) {
                      console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth.");
                      depth1 = options1.amount;
                  }
                  //
                  let extrudePts1, extrudeByPath1 = false;
                  let splineTube1, binormal1, normal1, position21;
                  if (extrudePath1) {
                      extrudePts1 = extrudePath1.getSpacedPoints(steps1);
                      extrudeByPath1 = true;
                      bevelEnabled1 = false; // bevels not supported for path extrusion
                      // SETUP TNB variables
                      // TODO1 - have a .isClosed in spline?
                      splineTube1 = extrudePath1.computeFrenetFrames(steps1, false);
                      // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);
                      binormal1 = new Vector3();
                      normal1 = new Vector3();
                      position21 = new Vector3();
                  }
                  // Safeguards if bevels are not enabled
                  if (!bevelEnabled1) {
                      bevelSegments1 = 0;
                      bevelThickness1 = 0;
                      bevelSize1 = 0;
                      bevelOffset1 = 0;
                  }
                  // Variables initialization
                  const shapePoints1 = shape1.extractPoints(curveSegments1);
                  let vertices1 = shapePoints1.shape;
                  const holes1 = shapePoints1.holes;
                  const reverse1 = !ShapeUtils.isClockWise(vertices1);
                  if (reverse1) {
                      vertices1 = vertices1.reverse();
                      // Maybe we should also check if holes are in the opposite direction, just to be safe ...
                      for(let h1 = 0, hl1 = holes1.length; h1 < hl1; h1++){
                          const ahole1 = holes1[h1];
                          if (ShapeUtils.isClockWise(ahole1)) holes1[h1] = ahole1.reverse();
                      }
                  }
                  const faces1 = ShapeUtils.triangulateShape(vertices1, holes1);
                  /* Vertices */ const contour1 = vertices1; // vertices has all points but contour has only points of circumference
                  for(let h1 = 0, hl1 = holes1.length; h1 < hl1; h1++){
                      const ahole1 = holes1[h1];
                      vertices1 = vertices1.concat(ahole1);
                  }
                  function scalePt21(pt3, vec1, size1) {
                      if (!vec1) console.error("THREE.ExtrudeGeometry: vec does not exist");
                      return vec1.clone().multiplyScalar(size1).add(pt3);
                  }
                  const vlen1 = vertices1.length, flen1 = faces1.length;
                  // Find directions for point movement
                  function getBevelVec1(inPt1, inPrev1, inNext1) {
                      // computes for inPt the corresponding point inPt' on a new contour
                      //   shifted by 1 unit (length of normalized vector) to the left
                      // if we walk along contour clockwise, this new contour is outside the old one
                      //
                      // inPt' is the intersection of the two lines parallel to the two
                      //  adjacent edges of inPt at a distance of 1 unit on the left side.
                      let v_trans_x1, v_trans_y1, shrink_by1; // resulting translation vector for inPt
                      // good reading for geometry algorithms (here: line-line intersection)
                      // http://geomalgorithms.com/a05-_intersect-1.html
                      const v_prev_x1 = inPt1.x - inPrev1.x, v_prev_y1 = inPt1.y - inPrev1.y;
                      const v_next_x1 = inNext1.x - inPt1.x, v_next_y1 = inNext1.y - inPt1.y;
                      const v_prev_lensq1 = v_prev_x1 * v_prev_x1 + v_prev_y1 * v_prev_y1;
                      // check for collinear edges
                      const collinear01 = v_prev_x1 * v_next_y1 - v_prev_y1 * v_next_x1;
                      if (Math.abs(collinear01) > Number.EPSILON) {
                          // not collinear
                          // length of vectors for normalizing
                          const v_prev_len1 = Math.sqrt(v_prev_lensq1);
                          const v_next_len1 = Math.sqrt(v_next_x1 * v_next_x1 + v_next_y1 * v_next_y1);
                          // shift adjacent points by unit vectors to the left
                          const ptPrevShift_x1 = inPrev1.x - v_prev_y1 / v_prev_len1;
                          const ptPrevShift_y1 = inPrev1.y + v_prev_x1 / v_prev_len1;
                          const ptNextShift_x1 = inNext1.x - v_next_y1 / v_next_len1;
                          const ptNextShift_y1 = inNext1.y + v_next_x1 / v_next_len1;
                          // scaling factor for v_prev to intersection point
                          const sf1 = ((ptNextShift_x1 - ptPrevShift_x1) * v_next_y1 - (ptNextShift_y1 - ptPrevShift_y1) * v_next_x1) / (v_prev_x1 * v_next_y1 - v_prev_y1 * v_next_x1);
                          // vector from inPt to intersection point
                          v_trans_x1 = ptPrevShift_x1 + v_prev_x1 * sf1 - inPt1.x;
                          v_trans_y1 = ptPrevShift_y1 + v_prev_y1 * sf1 - inPt1.y;
                          // Don't normalize!, otherwise sharp corners become ugly
                          //  but prevent crazy spikes
                          const v_trans_lensq1 = v_trans_x1 * v_trans_x1 + v_trans_y1 * v_trans_y1;
                          if (v_trans_lensq1 <= 2) return new Vector2(v_trans_x1, v_trans_y1);
                          else shrink_by1 = Math.sqrt(v_trans_lensq1 / 2);
                      } else {
                          // handle special case of collinear edges
                          let direction_eq1 = false; // assumes: opposite
                          if (v_prev_x1 > Number.EPSILON) {
                              if (v_next_x1 > Number.EPSILON) direction_eq1 = true;
                          } else {
                              if (v_prev_x1 < -Number.EPSILON) {
                                  if (v_next_x1 < -Number.EPSILON) direction_eq1 = true;
                              } else if (Math.sign(v_prev_y1) === Math.sign(v_next_y1)) direction_eq1 = true;
                          }
                          if (direction_eq1) {
                              // console.log("Warning: lines are a straight sequence");
                              v_trans_x1 = -v_prev_y1;
                              v_trans_y1 = v_prev_x1;
                              shrink_by1 = Math.sqrt(v_prev_lensq1);
                          } else {
                              // console.log("Warning: lines are a straight spike");
                              v_trans_x1 = v_prev_x1;
                              v_trans_y1 = v_prev_y1;
                              shrink_by1 = Math.sqrt(v_prev_lensq1 / 2);
                          }
                      }
                      return new Vector2(v_trans_x1 / shrink_by1, v_trans_y1 / shrink_by1);
                  }
                  const contourMovements1 = [];
                  for(let i3 = 0, il1 = contour1.length, j1 = il1 - 1, k1 = i3 + 1; i3 < il1; i3++, j1++, k1++){
                      if (j1 === il1) j1 = 0;
                      if (k1 === il1) k1 = 0;
                      //  (j)---(i)---(k)
                      // console.log('i,j,k', i, j , k)
                      contourMovements1[i3] = getBevelVec1(contour1[i3], contour1[j1], contour1[k1]);
                  }
                  const holesMovements1 = [];
                  let oneHoleMovements1, verticesMovements1 = contourMovements1.concat();
                  for(let h1 = 0, hl1 = holes1.length; h1 < hl1; h1++){
                      const ahole1 = holes1[h1];
                      oneHoleMovements1 = [];
                      for(let i3 = 0, il1 = ahole1.length, j1 = il1 - 1, k1 = i3 + 1; i3 < il1; i3++, j1++, k1++){
                          if (j1 === il1) j1 = 0;
                          if (k1 === il1) k1 = 0;
                          //  (j)---(i)---(k)
                          oneHoleMovements1[i3] = getBevelVec1(ahole1[i3], ahole1[j1], ahole1[k1]);
                      }
                      holesMovements1.push(oneHoleMovements1);
                      verticesMovements1 = verticesMovements1.concat(oneHoleMovements1);
                  }
                  // Loop bevelSegments, 1 for the front, 1 for the back
                  for(let b3 = 0; b3 < bevelSegments1; b3++){
                      //for ( b = bevelSegments; b > 0; b -- ) {
                      const t4 = b3 / bevelSegments1;
                      const z3 = bevelThickness1 * Math.cos(t4 * Math.PI / 2);
                      const bs1 = bevelSize1 * Math.sin(t4 * Math.PI / 2) + bevelOffset1;
                      // contract shape
                      for(let i3 = 0, il1 = contour1.length; i3 < il1; i3++){
                          const vert1 = scalePt21(contour1[i3], contourMovements1[i3], bs1);
                          v4(vert1.x, vert1.y, -z3);
                      }
                      // expand holes
                      for(let h1 = 0, hl1 = holes1.length; h1 < hl1; h1++){
                          const ahole1 = holes1[h1];
                          oneHoleMovements1 = holesMovements1[h1];
                          for(let i3 = 0, il1 = ahole1.length; i3 < il1; i3++){
                              const vert1 = scalePt21(ahole1[i3], oneHoleMovements1[i3], bs1);
                              v4(vert1.x, vert1.y, -z3);
                          }
                      }
                  }
                  const bs1 = bevelSize1 + bevelOffset1;
                  // Back facing vertices
                  for(let i3 = 0; i3 < vlen1; i3++){
                      const vert1 = bevelEnabled1 ? scalePt21(vertices1[i3], verticesMovements1[i3], bs1) : vertices1[i3];
                      if (!extrudeByPath1) v4(vert1.x, vert1.y, 0);
                      else {
                          // v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );
                          normal1.copy(splineTube1.normals[0]).multiplyScalar(vert1.x);
                          binormal1.copy(splineTube1.binormals[0]).multiplyScalar(vert1.y);
                          position21.copy(extrudePts1[0]).add(normal1).add(binormal1);
                          v4(position21.x, position21.y, position21.z);
                      }
                  }
                  // Add stepped vertices...
                  // Including front facing vertices
                  for(let s10 = 1; s10 <= steps1; s10++)for(let i3 = 0; i3 < vlen1; i3++){
                      const vert1 = bevelEnabled1 ? scalePt21(vertices1[i3], verticesMovements1[i3], bs1) : vertices1[i3];
                      if (!extrudeByPath1) v4(vert1.x, vert1.y, depth1 / steps1 * s10);
                      else {
                          // v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );
                          normal1.copy(splineTube1.normals[s10]).multiplyScalar(vert1.x);
                          binormal1.copy(splineTube1.binormals[s10]).multiplyScalar(vert1.y);
                          position21.copy(extrudePts1[s10]).add(normal1).add(binormal1);
                          v4(position21.x, position21.y, position21.z);
                      }
                  }
                  // Add bevel segments planes
                  //for ( b = 1; b <= bevelSegments; b ++ ) {
                  for(let b3 = bevelSegments1 - 1; b3 >= 0; b3--){
                      const t4 = b3 / bevelSegments1;
                      const z3 = bevelThickness1 * Math.cos(t4 * Math.PI / 2);
                      const bs1 = bevelSize1 * Math.sin(t4 * Math.PI / 2) + bevelOffset1;
                      // contract shape
                      for(let i3 = 0, il1 = contour1.length; i3 < il1; i3++){
                          const vert1 = scalePt21(contour1[i3], contourMovements1[i3], bs1);
                          v4(vert1.x, vert1.y, depth1 + z3);
                      }
                      // expand holes
                      for(let h1 = 0, hl1 = holes1.length; h1 < hl1; h1++){
                          const ahole1 = holes1[h1];
                          oneHoleMovements1 = holesMovements1[h1];
                          for(let i3 = 0, il1 = ahole1.length; i3 < il1; i3++){
                              const vert1 = scalePt21(ahole1[i3], oneHoleMovements1[i3], bs1);
                              if (!extrudeByPath1) v4(vert1.x, vert1.y, depth1 + z3);
                              else v4(vert1.x, vert1.y + extrudePts1[steps1 - 1].y, extrudePts1[steps1 - 1].x + z3);
                          }
                      }
                  }
                  /* Faces */ // Top and bottom faces
                  buildLidFaces1();
                  // Sides faces
                  buildSideFaces1();
                  /////  Internal functions
                  function buildLidFaces1() {
                      const start1 = verticesArray1.length / 3;
                      if (bevelEnabled1) {
                          let layer1 = 0; // steps + 1
                          let offset2 = vlen1 * layer1;
                          // Bottom faces
                          for(let i3 = 0; i3 < flen1; i3++){
                              const face1 = faces1[i3];
                              f31(face1[2] + offset2, face1[1] + offset2, face1[0] + offset2);
                          }
                          layer1 = steps1 + bevelSegments1 * 2;
                          offset2 = vlen1 * layer1;
                          // Top faces
                          for(let i3 = 0; i3 < flen1; i3++){
                              const face1 = faces1[i3];
                              f31(face1[0] + offset2, face1[1] + offset2, face1[2] + offset2);
                          }
                      } else {
                          // Bottom faces
                          for(let i3 = 0; i3 < flen1; i3++){
                              const face1 = faces1[i3];
                              f31(face1[2], face1[1], face1[0]);
                          }
                          // Top faces
                          for(let i3 = 0; i3 < flen1; i3++){
                              const face1 = faces1[i3];
                              f31(face1[0] + vlen1 * steps1, face1[1] + vlen1 * steps1, face1[2] + vlen1 * steps1);
                          }
                      }
                      scope1.addGroup(start1, verticesArray1.length / 3 - start1, 0);
                  }
                  // Create faces for the z-sides of the shape
                  function buildSideFaces1() {
                      const start1 = verticesArray1.length / 3;
                      let layeroffset1 = 0;
                      sidewalls1(contour1, layeroffset1);
                      layeroffset1 += contour1.length;
                      for(let h1 = 0, hl1 = holes1.length; h1 < hl1; h1++){
                          const ahole1 = holes1[h1];
                          sidewalls1(ahole1, layeroffset1);
                          //, true
                          layeroffset1 += ahole1.length;
                      }
                      scope1.addGroup(start1, verticesArray1.length / 3 - start1, 1);
                  }
                  function sidewalls1(contour1, layeroffset1) {
                      let i3 = contour1.length;
                      while(--i3 >= 0){
                          const j1 = i3;
                          let k1 = i3 - 1;
                          if (k1 < 0) k1 = contour1.length - 1;
                          //console.log('b', i,j, i-1, k,vertices.length);
                          for(let s10 = 0, sl1 = steps1 + bevelSegments1 * 2; s10 < sl1; s10++){
                              const slen11 = vlen1 * s10;
                              const slen21 = vlen1 * (s10 + 1);
                              const a3 = layeroffset1 + j1 + slen11, b3 = layeroffset1 + k1 + slen11, c4 = layeroffset1 + k1 + slen21, d7 = layeroffset1 + j1 + slen21;
                              f41(a3, b3, c4, d7);
                          }
                      }
                  }
                  function v4(x4, y3, z3) {
                      placeholder1.push(x4);
                      placeholder1.push(y3);
                      placeholder1.push(z3);
                  }
                  function f31(a3, b3, c4) {
                      addVertex1(a3);
                      addVertex1(b3);
                      addVertex1(c4);
                      const nextIndex1 = verticesArray1.length / 3;
                      const uvs1 = uvgen1.generateTopUV(scope1, verticesArray1, nextIndex1 - 3, nextIndex1 - 2, nextIndex1 - 1);
                      addUV1(uvs1[0]);
                      addUV1(uvs1[1]);
                      addUV1(uvs1[2]);
                  }
                  function f41(a3, b3, c4, d7) {
                      addVertex1(a3);
                      addVertex1(b3);
                      addVertex1(d7);
                      addVertex1(b3);
                      addVertex1(c4);
                      addVertex1(d7);
                      const nextIndex1 = verticesArray1.length / 3;
                      const uvs1 = uvgen1.generateSideWallUV(scope1, verticesArray1, nextIndex1 - 6, nextIndex1 - 3, nextIndex1 - 2, nextIndex1 - 1);
                      addUV1(uvs1[0]);
                      addUV1(uvs1[1]);
                      addUV1(uvs1[3]);
                      addUV1(uvs1[1]);
                      addUV1(uvs1[2]);
                      addUV1(uvs1[3]);
                  }
                  function addVertex1(index3) {
                      verticesArray1.push(placeholder1[index3 * 3 + 0]);
                      verticesArray1.push(placeholder1[index3 * 3 + 1]);
                      verticesArray1.push(placeholder1[index3 * 3 + 2]);
                  }
                  function addUV1(vector21) {
                      uvArray1.push(vector21.x);
                      uvArray1.push(vector21.y);
                  }
              }
          }
          toJSON() {
              const data1 = super.toJSON();
              const shapes1 = this.parameters.shapes;
              const options1 = this.parameters.options;
              return toJSON$1(shapes1, options1, data1);
          }
          static fromJSON(data1, shapes1) {
              const geometryShapes1 = [];
              for(let j1 = 0, jl1 = data1.shapes.length; j1 < jl1; j1++){
                  const shape1 = shapes1[data1.shapes[j1]];
                  geometryShapes1.push(shape1);
              }
              const extrudePath1 = data1.options.extrudePath;
              if (extrudePath1 !== undefined) data1.options.extrudePath = new Curves[extrudePath1.type]().fromJSON(extrudePath1);
              return new ExtrudeGeometry(geometryShapes1, data1.options);
          }
      }
      const WorldUVGenerator = {
          generateTopUV: function(geometry1, vertices1, indexA1, indexB1, indexC1) {
              const a_x1 = vertices1[indexA1 * 3];
              const a_y1 = vertices1[indexA1 * 3 + 1];
              const b_x1 = vertices1[indexB1 * 3];
              const b_y1 = vertices1[indexB1 * 3 + 1];
              const c_x1 = vertices1[indexC1 * 3];
              const c_y1 = vertices1[indexC1 * 3 + 1];
              return [
                  new Vector2(a_x1, a_y1),
                  new Vector2(b_x1, b_y1),
                  new Vector2(c_x1, c_y1)
              ];
          },
          generateSideWallUV: function(geometry1, vertices1, indexA1, indexB1, indexC1, indexD1) {
              const a_x1 = vertices1[indexA1 * 3];
              const a_y1 = vertices1[indexA1 * 3 + 1];
              const a_z1 = vertices1[indexA1 * 3 + 2];
              const b_x1 = vertices1[indexB1 * 3];
              const b_y1 = vertices1[indexB1 * 3 + 1];
              const b_z1 = vertices1[indexB1 * 3 + 2];
              const c_x1 = vertices1[indexC1 * 3];
              const c_y1 = vertices1[indexC1 * 3 + 1];
              const c_z1 = vertices1[indexC1 * 3 + 2];
              const d_x1 = vertices1[indexD1 * 3];
              const d_y1 = vertices1[indexD1 * 3 + 1];
              const d_z1 = vertices1[indexD1 * 3 + 2];
              if (Math.abs(a_y1 - b_y1) < Math.abs(a_x1 - b_x1)) return [
                  new Vector2(a_x1, 1 - a_z1),
                  new Vector2(b_x1, 1 - b_z1),
                  new Vector2(c_x1, 1 - c_z1),
                  new Vector2(d_x1, 1 - d_z1)
              ];
              else return [
                  new Vector2(a_y1, 1 - a_z1),
                  new Vector2(b_y1, 1 - b_z1),
                  new Vector2(c_y1, 1 - c_z1),
                  new Vector2(d_y1, 1 - d_z1)
              ];
          }
      };
      function toJSON$1(shapes1, options1, data1) {
          data1.shapes = [];
          if (Array.isArray(shapes1)) for(let i3 = 0, l1 = shapes1.length; i3 < l1; i3++){
              const shape1 = shapes1[i3];
              data1.shapes.push(shape1.uuid);
          }
          else data1.shapes.push(shapes1.uuid);
          if (options1.extrudePath !== undefined) data1.options.extrudePath = options1.extrudePath.toJSON();
          return data1;
      }
      class IcosahedronGeometry extends PolyhedronGeometry {
          constructor(radius1 = 1, detail1 = 0){
              const t4 = (1 + Math.sqrt(5)) / 2;
              const vertices1 = [
                  -1,
                  t4,
                  0,
                  1,
                  t4,
                  0,
                  -1,
                  -t4,
                  0,
                  1,
                  -t4,
                  0,
                  0,
                  -1,
                  t4,
                  0,
                  1,
                  t4,
                  0,
                  -1,
                  -t4,
                  0,
                  1,
                  -t4,
                  t4,
                  0,
                  -1,
                  t4,
                  0,
                  1,
                  -t4,
                  0,
                  -1,
                  -t4,
                  0,
                  1
              ];
              const indices1 = [
                  0,
                  11,
                  5,
                  0,
                  5,
                  1,
                  0,
                  1,
                  7,
                  0,
                  7,
                  10,
                  0,
                  10,
                  11,
                  1,
                  5,
                  9,
                  5,
                  11,
                  4,
                  11,
                  10,
                  2,
                  10,
                  7,
                  6,
                  7,
                  1,
                  8,
                  3,
                  9,
                  4,
                  3,
                  4,
                  2,
                  3,
                  2,
                  6,
                  3,
                  6,
                  8,
                  3,
                  8,
                  9,
                  4,
                  9,
                  5,
                  2,
                  4,
                  11,
                  6,
                  2,
                  10,
                  8,
                  6,
                  7,
                  9,
                  8,
                  1
              ];
              super(vertices1, indices1, radius1, detail1);
              this.type = "IcosahedronGeometry";
              this.parameters = {
                  radius: radius1,
                  detail: detail1
              };
          }
          static fromJSON(data1) {
              return new IcosahedronGeometry(data1.radius, data1.detail);
          }
      }
      class LatheGeometry extends BufferGeometry {
          constructor(points1 = [
              new Vector2(0, 0.5),
              new Vector2(0.5, 0),
              new Vector2(0, -0.5)
          ], segments1 = 12, phiStart1 = 0, phiLength1 = Math.PI * 2){
              super();
              this.type = "LatheGeometry";
              this.parameters = {
                  points: points1,
                  segments: segments1,
                  phiStart: phiStart1,
                  phiLength: phiLength1
              };
              segments1 = Math.floor(segments1);
              // clamp phiLength so it's in range of [ 0, 2PI ]
              phiLength1 = clamp$1(phiLength1, 0, Math.PI * 2);
              // buffers
              const indices1 = [];
              const vertices1 = [];
              const uvs1 = [];
              const initNormals1 = [];
              const normals1 = [];
              // helper variables
              const inverseSegments1 = 1.0 / segments1;
              const vertex1 = new Vector3();
              const uv4 = new Vector2();
              const normal1 = new Vector3();
              const curNormal1 = new Vector3();
              const prevNormal1 = new Vector3();
              let dx1 = 0;
              let dy1 = 0;
              // pre-compute normals for initial "meridian"
              for(let j1 = 0; j1 <= points1.length - 1; j1++)switch(j1){
                  case 0:
                      dx1 = points1[j1 + 1].x - points1[j1].x;
                      dy1 = points1[j1 + 1].y - points1[j1].y;
                      normal1.x = dy1 * 1.0;
                      normal1.y = -dx1;
                      normal1.z = dy1 * 0.0;
                      prevNormal1.copy(normal1);
                      normal1.normalize();
                      initNormals1.push(normal1.x, normal1.y, normal1.z);
                      break;
                  case points1.length - 1:
                      initNormals1.push(prevNormal1.x, prevNormal1.y, prevNormal1.z);
                      break;
                  default:
                      dx1 = points1[j1 + 1].x - points1[j1].x;
                      dy1 = points1[j1 + 1].y - points1[j1].y;
                      normal1.x = dy1 * 1.0;
                      normal1.y = -dx1;
                      normal1.z = dy1 * 0.0;
                      curNormal1.copy(normal1);
                      normal1.x += prevNormal1.x;
                      normal1.y += prevNormal1.y;
                      normal1.z += prevNormal1.z;
                      normal1.normalize();
                      initNormals1.push(normal1.x, normal1.y, normal1.z);
                      prevNormal1.copy(curNormal1);
              }
              // generate vertices, uvs and normals
              for(let i3 = 0; i3 <= segments1; i3++){
                  const phi1 = phiStart1 + i3 * inverseSegments1 * phiLength1;
                  const sin1 = Math.sin(phi1);
                  const cos1 = Math.cos(phi1);
                  for(let j1 = 0; j1 <= points1.length - 1; j1++){
                      // vertex
                      vertex1.x = points1[j1].x * sin1;
                      vertex1.y = points1[j1].y;
                      vertex1.z = points1[j1].x * cos1;
                      vertices1.push(vertex1.x, vertex1.y, vertex1.z);
                      // uv
                      uv4.x = i3 / segments1;
                      uv4.y = j1 / (points1.length - 1);
                      uvs1.push(uv4.x, uv4.y);
                      // normal
                      const x4 = initNormals1[3 * j1 + 0] * sin1;
                      const y3 = initNormals1[3 * j1 + 1];
                      const z3 = initNormals1[3 * j1 + 0] * cos1;
                      normals1.push(x4, y3, z3);
                  }
              }
              // indices
              for(let i3 = 0; i3 < segments1; i3++)for(let j1 = 0; j1 < points1.length - 1; j1++){
                  const base1 = j1 + i3 * points1.length;
                  const a3 = base1;
                  const b3 = base1 + points1.length;
                  const c4 = base1 + points1.length + 1;
                  const d7 = base1 + 1;
                  // faces
                  indices1.push(a3, b3, d7);
                  indices1.push(c4, d7, b3);
              }
              // build geometry
              this.setIndex(indices1);
              this.setAttribute("position", new Float32BufferAttribute(vertices1, 3));
              this.setAttribute("uv", new Float32BufferAttribute(uvs1, 2));
              this.setAttribute("normal", new Float32BufferAttribute(normals1, 3));
          }
          static fromJSON(data1) {
              return new LatheGeometry(data1.points, data1.segments, data1.phiStart, data1.phiLength);
          }
      }
      class OctahedronGeometry extends PolyhedronGeometry {
          constructor(radius1 = 1, detail1 = 0){
              const vertices1 = [
                  1,
                  0,
                  0,
                  -1,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  -1,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  -1
              ];
              const indices1 = [
                  0,
                  2,
                  4,
                  0,
                  4,
                  3,
                  0,
                  3,
                  5,
                  0,
                  5,
                  2,
                  1,
                  2,
                  5,
                  1,
                  5,
                  3,
                  1,
                  3,
                  4,
                  1,
                  4,
                  2
              ];
              super(vertices1, indices1, radius1, detail1);
              this.type = "OctahedronGeometry";
              this.parameters = {
                  radius: radius1,
                  detail: detail1
              };
          }
          static fromJSON(data1) {
              return new OctahedronGeometry(data1.radius, data1.detail);
          }
      }
      class RingGeometry extends BufferGeometry {
          constructor(innerRadius1 = 0.5, outerRadius1 = 1, thetaSegments1 = 8, phiSegments1 = 1, thetaStart1 = 0, thetaLength1 = Math.PI * 2){
              super();
              this.type = "RingGeometry";
              this.parameters = {
                  innerRadius: innerRadius1,
                  outerRadius: outerRadius1,
                  thetaSegments: thetaSegments1,
                  phiSegments: phiSegments1,
                  thetaStart: thetaStart1,
                  thetaLength: thetaLength1
              };
              thetaSegments1 = Math.max(3, thetaSegments1);
              phiSegments1 = Math.max(1, phiSegments1);
              // buffers
              const indices1 = [];
              const vertices1 = [];
              const normals1 = [];
              const uvs1 = [];
              // some helper variables
              let radius1 = innerRadius1;
              const radiusStep1 = (outerRadius1 - innerRadius1) / phiSegments1;
              const vertex1 = new Vector3();
              const uv4 = new Vector2();
              // generate vertices, normals and uvs
              for(let j1 = 0; j1 <= phiSegments1; j1++){
                  for(let i3 = 0; i3 <= thetaSegments1; i3++){
                      // values are generate from the inside of the ring to the outside
                      const segment1 = thetaStart1 + i3 / thetaSegments1 * thetaLength1;
                      // vertex
                      vertex1.x = radius1 * Math.cos(segment1);
                      vertex1.y = radius1 * Math.sin(segment1);
                      vertices1.push(vertex1.x, vertex1.y, vertex1.z);
                      // normal
                      normals1.push(0, 0, 1);
                      // uv
                      uv4.x = (vertex1.x / outerRadius1 + 1) / 2;
                      uv4.y = (vertex1.y / outerRadius1 + 1) / 2;
                      uvs1.push(uv4.x, uv4.y);
                  }
                  // increase the radius for next row of vertices
                  radius1 += radiusStep1;
              }
              // indices
              for(let j1 = 0; j1 < phiSegments1; j1++){
                  const thetaSegmentLevel1 = j1 * (thetaSegments1 + 1);
                  for(let i3 = 0; i3 < thetaSegments1; i3++){
                      const segment1 = i3 + thetaSegmentLevel1;
                      const a3 = segment1;
                      const b3 = segment1 + thetaSegments1 + 1;
                      const c4 = segment1 + thetaSegments1 + 2;
                      const d7 = segment1 + 1;
                      // faces
                      indices1.push(a3, b3, d7);
                      indices1.push(b3, c4, d7);
                  }
              }
              // build geometry
              this.setIndex(indices1);
              this.setAttribute("position", new Float32BufferAttribute(vertices1, 3));
              this.setAttribute("normal", new Float32BufferAttribute(normals1, 3));
              this.setAttribute("uv", new Float32BufferAttribute(uvs1, 2));
          }
          static fromJSON(data1) {
              return new RingGeometry(data1.innerRadius, data1.outerRadius, data1.thetaSegments, data1.phiSegments, data1.thetaStart, data1.thetaLength);
          }
      }
      class ShapeGeometry extends BufferGeometry {
          constructor(shapes1 = new Shape([
              new Vector2(0, 0.5),
              new Vector2(-0.5, -0.5),
              new Vector2(0.5, -0.5)
          ]), curveSegments1 = 12){
              super();
              this.type = "ShapeGeometry";
              this.parameters = {
                  shapes: shapes1,
                  curveSegments: curveSegments1
              };
              // buffers
              const indices1 = [];
              const vertices1 = [];
              const normals1 = [];
              const uvs1 = [];
              // helper variables
              let groupStart1 = 0;
              let groupCount1 = 0;
              // allow single and array values for "shapes" parameter
              if (Array.isArray(shapes1) === false) addShape1(shapes1);
              else for(let i3 = 0; i3 < shapes1.length; i3++){
                  addShape1(shapes1[i3]);
                  this.addGroup(groupStart1, groupCount1, i3); // enables MultiMaterial support
                  groupStart1 += groupCount1;
                  groupCount1 = 0;
              }
              // build geometry
              this.setIndex(indices1);
              this.setAttribute("position", new Float32BufferAttribute(vertices1, 3));
              this.setAttribute("normal", new Float32BufferAttribute(normals1, 3));
              this.setAttribute("uv", new Float32BufferAttribute(uvs1, 2));
              // helper functions
              function addShape1(shape1) {
                  const indexOffset1 = vertices1.length / 3;
                  const points1 = shape1.extractPoints(curveSegments1);
                  let shapeVertices1 = points1.shape;
                  const shapeHoles1 = points1.holes;
                  // check direction of vertices
                  if (ShapeUtils.isClockWise(shapeVertices1) === false) shapeVertices1 = shapeVertices1.reverse();
                  for(let i3 = 0, l1 = shapeHoles1.length; i3 < l1; i3++){
                      const shapeHole1 = shapeHoles1[i3];
                      if (ShapeUtils.isClockWise(shapeHole1) === true) shapeHoles1[i3] = shapeHole1.reverse();
                  }
                  const faces1 = ShapeUtils.triangulateShape(shapeVertices1, shapeHoles1);
                  // join vertices of inner and outer paths to a single array
                  for(let i3 = 0, l1 = shapeHoles1.length; i3 < l1; i3++){
                      const shapeHole1 = shapeHoles1[i3];
                      shapeVertices1 = shapeVertices1.concat(shapeHole1);
                  }
                  // vertices, normals, uvs
                  for(let i3 = 0, l1 = shapeVertices1.length; i3 < l1; i3++){
                      const vertex1 = shapeVertices1[i3];
                      vertices1.push(vertex1.x, vertex1.y, 0);
                      normals1.push(0, 0, 1);
                      uvs1.push(vertex1.x, vertex1.y); // world uvs
                  }
                  // incides
                  for(let i3 = 0, l1 = faces1.length; i3 < l1; i3++){
                      const face1 = faces1[i3];
                      const a3 = face1[0] + indexOffset1;
                      const b3 = face1[1] + indexOffset1;
                      const c4 = face1[2] + indexOffset1;
                      indices1.push(a3, b3, c4);
                      groupCount1 += 3;
                  }
              }
          }
          toJSON() {
              const data1 = super.toJSON();
              const shapes1 = this.parameters.shapes;
              return toJSON(shapes1, data1);
          }
          static fromJSON(data1, shapes1) {
              const geometryShapes1 = [];
              for(let j1 = 0, jl1 = data1.shapes.length; j1 < jl1; j1++){
                  const shape1 = shapes1[data1.shapes[j1]];
                  geometryShapes1.push(shape1);
              }
              return new ShapeGeometry(geometryShapes1, data1.curveSegments);
          }
      }
      function toJSON(shapes1, data1) {
          data1.shapes = [];
          if (Array.isArray(shapes1)) for(let i3 = 0, l1 = shapes1.length; i3 < l1; i3++){
              const shape1 = shapes1[i3];
              data1.shapes.push(shape1.uuid);
          }
          else data1.shapes.push(shapes1.uuid);
          return data1;
      }
      class SphereGeometry extends BufferGeometry {
          constructor(radius1 = 1, widthSegments1 = 32, heightSegments1 = 16, phiStart1 = 0, phiLength1 = Math.PI * 2, thetaStart1 = 0, thetaLength1 = Math.PI){
              super();
              this.type = "SphereGeometry";
              this.parameters = {
                  radius: radius1,
                  widthSegments: widthSegments1,
                  heightSegments: heightSegments1,
                  phiStart: phiStart1,
                  phiLength: phiLength1,
                  thetaStart: thetaStart1,
                  thetaLength: thetaLength1
              };
              widthSegments1 = Math.max(3, Math.floor(widthSegments1));
              heightSegments1 = Math.max(2, Math.floor(heightSegments1));
              const thetaEnd1 = Math.min(thetaStart1 + thetaLength1, Math.PI);
              let index3 = 0;
              const grid1 = [];
              const vertex1 = new Vector3();
              const normal1 = new Vector3();
              // buffers
              const indices1 = [];
              const vertices1 = [];
              const normals1 = [];
              const uvs1 = [];
              // generate vertices, normals and uvs
              for(let iy1 = 0; iy1 <= heightSegments1; iy1++){
                  const verticesRow1 = [];
                  const v4 = iy1 / heightSegments1;
                  // special case for the poles
                  let uOffset1 = 0;
                  if (iy1 == 0 && thetaStart1 == 0) uOffset1 = 0.5 / widthSegments1;
                  else if (iy1 == heightSegments1 && thetaEnd1 == Math.PI) uOffset1 = -0.5 / widthSegments1;
                  for(let ix1 = 0; ix1 <= widthSegments1; ix1++){
                      const u4 = ix1 / widthSegments1;
                      // vertex
                      vertex1.x = -radius1 * Math.cos(phiStart1 + u4 * phiLength1) * Math.sin(thetaStart1 + v4 * thetaLength1);
                      vertex1.y = radius1 * Math.cos(thetaStart1 + v4 * thetaLength1);
                      vertex1.z = radius1 * Math.sin(phiStart1 + u4 * phiLength1) * Math.sin(thetaStart1 + v4 * thetaLength1);
                      vertices1.push(vertex1.x, vertex1.y, vertex1.z);
                      // normal
                      normal1.copy(vertex1).normalize();
                      normals1.push(normal1.x, normal1.y, normal1.z);
                      // uv
                      uvs1.push(u4 + uOffset1, 1 - v4);
                      verticesRow1.push(index3++);
                  }
                  grid1.push(verticesRow1);
              }
              // indices
              for(let iy1 = 0; iy1 < heightSegments1; iy1++)for(let ix1 = 0; ix1 < widthSegments1; ix1++){
                  const a3 = grid1[iy1][ix1 + 1];
                  const b3 = grid1[iy1][ix1];
                  const c4 = grid1[iy1 + 1][ix1];
                  const d7 = grid1[iy1 + 1][ix1 + 1];
                  if (iy1 !== 0 || thetaStart1 > 0) indices1.push(a3, b3, d7);
                  if (iy1 !== heightSegments1 - 1 || thetaEnd1 < Math.PI) indices1.push(b3, c4, d7);
              }
              // build geometry
              this.setIndex(indices1);
              this.setAttribute("position", new Float32BufferAttribute(vertices1, 3));
              this.setAttribute("normal", new Float32BufferAttribute(normals1, 3));
              this.setAttribute("uv", new Float32BufferAttribute(uvs1, 2));
          }
          static fromJSON(data1) {
              return new SphereGeometry(data1.radius, data1.widthSegments, data1.heightSegments, data1.phiStart, data1.phiLength, data1.thetaStart, data1.thetaLength);
          }
      }
      class TetrahedronGeometry extends PolyhedronGeometry {
          constructor(radius1 = 1, detail1 = 0){
              const vertices1 = [
                  1,
                  1,
                  1,
                  -1,
                  -1,
                  1,
                  -1,
                  1,
                  -1,
                  1,
                  -1,
                  -1
              ];
              const indices1 = [
                  2,
                  1,
                  0,
                  0,
                  3,
                  2,
                  1,
                  3,
                  0,
                  2,
                  3,
                  1
              ];
              super(vertices1, indices1, radius1, detail1);
              this.type = "TetrahedronGeometry";
              this.parameters = {
                  radius: radius1,
                  detail: detail1
              };
          }
          static fromJSON(data1) {
              return new TetrahedronGeometry(data1.radius, data1.detail);
          }
      }
      class TorusGeometry extends BufferGeometry {
          constructor(radius1 = 1, tube1 = 0.4, radialSegments1 = 8, tubularSegments1 = 6, arc1 = Math.PI * 2){
              super();
              this.type = "TorusGeometry";
              this.parameters = {
                  radius: radius1,
                  tube: tube1,
                  radialSegments: radialSegments1,
                  tubularSegments: tubularSegments1,
                  arc: arc1
              };
              radialSegments1 = Math.floor(radialSegments1);
              tubularSegments1 = Math.floor(tubularSegments1);
              // buffers
              const indices1 = [];
              const vertices1 = [];
              const normals1 = [];
              const uvs1 = [];
              // helper variables
              const center1 = new Vector3();
              const vertex1 = new Vector3();
              const normal1 = new Vector3();
              // generate vertices, normals and uvs
              for(let j1 = 0; j1 <= radialSegments1; j1++)for(let i3 = 0; i3 <= tubularSegments1; i3++){
                  const u4 = i3 / tubularSegments1 * arc1;
                  const v4 = j1 / radialSegments1 * Math.PI * 2;
                  // vertex
                  vertex1.x = (radius1 + tube1 * Math.cos(v4)) * Math.cos(u4);
                  vertex1.y = (radius1 + tube1 * Math.cos(v4)) * Math.sin(u4);
                  vertex1.z = tube1 * Math.sin(v4);
                  vertices1.push(vertex1.x, vertex1.y, vertex1.z);
                  // normal
                  center1.x = radius1 * Math.cos(u4);
                  center1.y = radius1 * Math.sin(u4);
                  normal1.subVectors(vertex1, center1).normalize();
                  normals1.push(normal1.x, normal1.y, normal1.z);
                  // uv
                  uvs1.push(i3 / tubularSegments1);
                  uvs1.push(j1 / radialSegments1);
              }
              // generate indices
              for(let j1 = 1; j1 <= radialSegments1; j1++)for(let i3 = 1; i3 <= tubularSegments1; i3++){
                  // indices
                  const a3 = (tubularSegments1 + 1) * j1 + i3 - 1;
                  const b3 = (tubularSegments1 + 1) * (j1 - 1) + i3 - 1;
                  const c4 = (tubularSegments1 + 1) * (j1 - 1) + i3;
                  const d7 = (tubularSegments1 + 1) * j1 + i3;
                  // faces
                  indices1.push(a3, b3, d7);
                  indices1.push(b3, c4, d7);
              }
              // build geometry
              this.setIndex(indices1);
              this.setAttribute("position", new Float32BufferAttribute(vertices1, 3));
              this.setAttribute("normal", new Float32BufferAttribute(normals1, 3));
              this.setAttribute("uv", new Float32BufferAttribute(uvs1, 2));
          }
          static fromJSON(data1) {
              return new TorusGeometry(data1.radius, data1.tube, data1.radialSegments, data1.tubularSegments, data1.arc);
          }
      }
      class TorusKnotGeometry extends BufferGeometry {
          constructor(radius1 = 1, tube1 = 0.4, tubularSegments1 = 64, radialSegments1 = 8, p6 = 2, q3 = 3){
              super();
              this.type = "TorusKnotGeometry";
              this.parameters = {
                  radius: radius1,
                  tube: tube1,
                  tubularSegments: tubularSegments1,
                  radialSegments: radialSegments1,
                  p: p6,
                  q: q3
              };
              tubularSegments1 = Math.floor(tubularSegments1);
              radialSegments1 = Math.floor(radialSegments1);
              // buffers
              const indices1 = [];
              const vertices1 = [];
              const normals1 = [];
              const uvs1 = [];
              // helper variables
              const vertex1 = new Vector3();
              const normal1 = new Vector3();
              const P11 = new Vector3();
              const P21 = new Vector3();
              const B1 = new Vector3();
              const T1 = new Vector3();
              const N1 = new Vector3();
              // generate vertices, normals and uvs
              for(let i3 = 0; i3 <= tubularSegments1; ++i3){
                  // the radian "u" is used to calculate the position on the torus curve of the current tubular segement
                  const u4 = i3 / tubularSegments1 * p6 * Math.PI * 2;
                  // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
                  // these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions
                  calculatePositionOnCurve1(u4, p6, q3, radius1, P11);
                  calculatePositionOnCurve1(u4 + 0.01, p6, q3, radius1, P21);
                  // calculate orthonormal basis
                  T1.subVectors(P21, P11);
                  N1.addVectors(P21, P11);
                  B1.crossVectors(T1, N1);
                  N1.crossVectors(B1, T1);
                  // normalize B, N. T can be ignored, we don't use it
                  B1.normalize();
                  N1.normalize();
                  for(let j1 = 0; j1 <= radialSegments1; ++j1){
                      // now calculate the vertices. they are nothing more than an extrusion of the torus curve.
                      // because we extrude a shape in the xy-plane, there is no need to calculate a z-value.
                      const v4 = j1 / radialSegments1 * Math.PI * 2;
                      const cx1 = -tube1 * Math.cos(v4);
                      const cy1 = tube1 * Math.sin(v4);
                      // now calculate the final vertex position.
                      // first we orient the extrusion with our basis vectos, then we add it to the current position on the curve
                      vertex1.x = P11.x + (cx1 * N1.x + cy1 * B1.x);
                      vertex1.y = P11.y + (cx1 * N1.y + cy1 * B1.y);
                      vertex1.z = P11.z + (cx1 * N1.z + cy1 * B1.z);
                      vertices1.push(vertex1.x, vertex1.y, vertex1.z);
                      // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
                      normal1.subVectors(vertex1, P11).normalize();
                      normals1.push(normal1.x, normal1.y, normal1.z);
                      // uv
                      uvs1.push(i3 / tubularSegments1);
                      uvs1.push(j1 / radialSegments1);
                  }
              }
              // generate indices
              for(let j1 = 1; j1 <= tubularSegments1; j1++)for(let i3 = 1; i3 <= radialSegments1; i3++){
                  // indices
                  const a3 = (radialSegments1 + 1) * (j1 - 1) + (i3 - 1);
                  const b3 = (radialSegments1 + 1) * j1 + (i3 - 1);
                  const c4 = (radialSegments1 + 1) * j1 + i3;
                  const d7 = (radialSegments1 + 1) * (j1 - 1) + i3;
                  // faces
                  indices1.push(a3, b3, d7);
                  indices1.push(b3, c4, d7);
              }
              // build geometry
              this.setIndex(indices1);
              this.setAttribute("position", new Float32BufferAttribute(vertices1, 3));
              this.setAttribute("normal", new Float32BufferAttribute(normals1, 3));
              this.setAttribute("uv", new Float32BufferAttribute(uvs1, 2));
              // this function calculates the current position on the torus curve
              function calculatePositionOnCurve1(u4, p6, q3, radius1, position1) {
                  const cu3 = Math.cos(u4);
                  const su1 = Math.sin(u4);
                  const quOverP1 = q3 / p6 * u4;
                  const cs1 = Math.cos(quOverP1);
                  position1.x = radius1 * (2 + cs1) * 0.5 * cu3;
                  position1.y = radius1 * (2 + cs1) * su1 * 0.5;
                  position1.z = radius1 * Math.sin(quOverP1) * 0.5;
              }
          }
          static fromJSON(data1) {
              return new TorusKnotGeometry(data1.radius, data1.tube, data1.tubularSegments, data1.radialSegments, data1.p, data1.q);
          }
      }
      class TubeGeometry extends BufferGeometry {
          constructor(path1 = new QuadraticBezierCurve3(new Vector3(-1, -1, 0), new Vector3(-1, 1, 0), new Vector3(1, 1, 0)), tubularSegments1 = 64, radius1 = 1, radialSegments1 = 8, closed1 = false){
              super();
              this.type = "TubeGeometry";
              this.parameters = {
                  path: path1,
                  tubularSegments: tubularSegments1,
                  radius: radius1,
                  radialSegments: radialSegments1,
                  closed: closed1
              };
              const frames1 = path1.computeFrenetFrames(tubularSegments1, closed1);
              // expose internals
              this.tangents = frames1.tangents;
              this.normals = frames1.normals;
              this.binormals = frames1.binormals;
              // helper variables
              const vertex1 = new Vector3();
              const normal1 = new Vector3();
              const uv4 = new Vector2();
              let P3 = new Vector3();
              // buffer
              const vertices1 = [];
              const normals1 = [];
              const uvs1 = [];
              const indices1 = [];
              // create buffer data
              generateBufferData1();
              // build geometry
              this.setIndex(indices1);
              this.setAttribute("position", new Float32BufferAttribute(vertices1, 3));
              this.setAttribute("normal", new Float32BufferAttribute(normals1, 3));
              this.setAttribute("uv", new Float32BufferAttribute(uvs1, 2));
              // functions
              function generateBufferData1() {
                  for(let i3 = 0; i3 < tubularSegments1; i3++)generateSegment1(i3);
                  // if the geometry is not closed, generate the last row of vertices and normals
                  // at the regular position on the given path
                  //
                  // if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)
                  generateSegment1(closed1 === false ? tubularSegments1 : 0);
                  // uvs are generated in a separate function.
                  // this makes it easy compute correct values for closed geometries
                  generateUVs1();
                  // finally create faces
                  generateIndices1();
              }
              function generateSegment1(i3) {
                  // we use getPointAt to sample evenly distributed points from the given path
                  P3 = path1.getPointAt(i3 / tubularSegments1, P3);
                  // retrieve corresponding normal and binormal
                  const N1 = frames1.normals[i3];
                  const B1 = frames1.binormals[i3];
                  // generate normals and vertices for the current segment
                  for(let j1 = 0; j1 <= radialSegments1; j1++){
                      const v4 = j1 / radialSegments1 * Math.PI * 2;
                      const sin1 = Math.sin(v4);
                      const cos1 = -Math.cos(v4);
                      // normal
                      normal1.x = cos1 * N1.x + sin1 * B1.x;
                      normal1.y = cos1 * N1.y + sin1 * B1.y;
                      normal1.z = cos1 * N1.z + sin1 * B1.z;
                      normal1.normalize();
                      normals1.push(normal1.x, normal1.y, normal1.z);
                      // vertex
                      vertex1.x = P3.x + radius1 * normal1.x;
                      vertex1.y = P3.y + radius1 * normal1.y;
                      vertex1.z = P3.z + radius1 * normal1.z;
                      vertices1.push(vertex1.x, vertex1.y, vertex1.z);
                  }
              }
              function generateIndices1() {
                  for(let j1 = 1; j1 <= tubularSegments1; j1++)for(let i3 = 1; i3 <= radialSegments1; i3++){
                      const a3 = (radialSegments1 + 1) * (j1 - 1) + (i3 - 1);
                      const b3 = (radialSegments1 + 1) * j1 + (i3 - 1);
                      const c4 = (radialSegments1 + 1) * j1 + i3;
                      const d7 = (radialSegments1 + 1) * (j1 - 1) + i3;
                      // faces
                      indices1.push(a3, b3, d7);
                      indices1.push(b3, c4, d7);
                  }
              }
              function generateUVs1() {
                  for(let i3 = 0; i3 <= tubularSegments1; i3++)for(let j1 = 0; j1 <= radialSegments1; j1++){
                      uv4.x = i3 / tubularSegments1;
                      uv4.y = j1 / radialSegments1;
                      uvs1.push(uv4.x, uv4.y);
                  }
              }
          }
          toJSON() {
              const data1 = super.toJSON();
              data1.path = this.parameters.path.toJSON();
              return data1;
          }
          static fromJSON(data1) {
              // This only works for built-in curves (e.g. CatmullRomCurve3).
              // User defined curves or instances of CurvePath will not be deserialized.
              return new TubeGeometry(new Curves[data1.path.type]().fromJSON(data1.path), data1.tubularSegments, data1.radius, data1.radialSegments, data1.closed);
          }
      }
      class WireframeGeometry extends BufferGeometry {
          constructor(geometry1 = null){
              super();
              this.type = "WireframeGeometry";
              this.parameters = {
                  geometry: geometry1
              };
              if (geometry1 !== null) {
                  // buffer
                  const vertices1 = [];
                  const edges1 = new Set();
                  // helper variables
                  const start1 = new Vector3();
                  const end1 = new Vector3();
                  if (geometry1.index !== null) {
                      // indexed BufferGeometry
                      const position1 = geometry1.attributes.position;
                      const indices1 = geometry1.index;
                      let groups1 = geometry1.groups;
                      if (groups1.length === 0) groups1 = [
                          {
                              start: 0,
                              count: indices1.count,
                              materialIndex: 0
                          }
                      ];
                      // create a data structure that contains all eges without duplicates
                      for(let o5 = 0, ol1 = groups1.length; o5 < ol1; ++o5){
                          const group1 = groups1[o5];
                          const groupStart1 = group1.start;
                          const groupCount1 = group1.count;
                          for(let i3 = groupStart1, l1 = groupStart1 + groupCount1; i3 < l1; i3 += 3)for(let j1 = 0; j1 < 3; j1++){
                              const index11 = indices1.getX(i3 + j1);
                              const index21 = indices1.getX(i3 + (j1 + 1) % 3);
                              start1.fromBufferAttribute(position1, index11);
                              end1.fromBufferAttribute(position1, index21);
                              if (isUniqueEdge(start1, end1, edges1) === true) {
                                  vertices1.push(start1.x, start1.y, start1.z);
                                  vertices1.push(end1.x, end1.y, end1.z);
                              }
                          }
                      }
                  } else {
                      // non-indexed BufferGeometry
                      const position1 = geometry1.attributes.position;
                      for(let i3 = 0, l1 = position1.count / 3; i3 < l1; i3++)for(let j1 = 0; j1 < 3; j1++){
                          // three edges per triangle, an edge is represented as (index1, index2)
                          // e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)
                          const index11 = 3 * i3 + j1;
                          const index21 = 3 * i3 + (j1 + 1) % 3;
                          start1.fromBufferAttribute(position1, index11);
                          end1.fromBufferAttribute(position1, index21);
                          if (isUniqueEdge(start1, end1, edges1) === true) {
                              vertices1.push(start1.x, start1.y, start1.z);
                              vertices1.push(end1.x, end1.y, end1.z);
                          }
                      }
                  }
                  // build geometry
                  this.setAttribute("position", new Float32BufferAttribute(vertices1, 3));
              }
          }
      }
      function isUniqueEdge(start1, end1, edges1) {
          const hash11 = `${start1.x},${start1.y},${start1.z}-${end1.x},${end1.y},${end1.z}`;
          const hash21 = `${end1.x},${end1.y},${end1.z}-${start1.x},${start1.y},${start1.z}`; // coincident edge
          if (edges1.has(hash11) === true || edges1.has(hash21) === true) return false;
          else {
              edges1.add(hash11);
              edges1.add(hash21);
              return true;
          }
      }
      var Geometries = /*#__PURE__*/ Object.freeze({
          __proto__: null,
          BoxGeometry: BoxGeometry,
          BoxBufferGeometry: BoxGeometry,
          CircleGeometry: CircleGeometry,
          CircleBufferGeometry: CircleGeometry,
          ConeGeometry: ConeGeometry,
          ConeBufferGeometry: ConeGeometry,
          CylinderGeometry: CylinderGeometry,
          CylinderBufferGeometry: CylinderGeometry,
          DodecahedronGeometry: DodecahedronGeometry,
          DodecahedronBufferGeometry: DodecahedronGeometry,
          EdgesGeometry: EdgesGeometry,
          ExtrudeGeometry: ExtrudeGeometry,
          ExtrudeBufferGeometry: ExtrudeGeometry,
          IcosahedronGeometry: IcosahedronGeometry,
          IcosahedronBufferGeometry: IcosahedronGeometry,
          LatheGeometry: LatheGeometry,
          LatheBufferGeometry: LatheGeometry,
          OctahedronGeometry: OctahedronGeometry,
          OctahedronBufferGeometry: OctahedronGeometry,
          PlaneGeometry: PlaneGeometry,
          PlaneBufferGeometry: PlaneGeometry,
          PolyhedronGeometry: PolyhedronGeometry,
          PolyhedronBufferGeometry: PolyhedronGeometry,
          RingGeometry: RingGeometry,
          RingBufferGeometry: RingGeometry,
          ShapeGeometry: ShapeGeometry,
          ShapeBufferGeometry: ShapeGeometry,
          SphereGeometry: SphereGeometry,
          SphereBufferGeometry: SphereGeometry,
          TetrahedronGeometry: TetrahedronGeometry,
          TetrahedronBufferGeometry: TetrahedronGeometry,
          TorusGeometry: TorusGeometry,
          TorusBufferGeometry: TorusGeometry,
          TorusKnotGeometry: TorusKnotGeometry,
          TorusKnotBufferGeometry: TorusKnotGeometry,
          TubeGeometry: TubeGeometry,
          TubeBufferGeometry: TubeGeometry,
          WireframeGeometry: WireframeGeometry
      });
      /**
     * parameters = {
     *  color: <THREE.Color>
     * }
     */ class ShadowMaterial extends Material {
          constructor(parameters1){
              super();
              this.type = "ShadowMaterial";
              this.color = new Color(0x000000);
              this.transparent = true;
              this.setValues(parameters1);
          }
          copy(source1) {
              super.copy(source1);
              this.color.copy(source1.color);
              return this;
          }
      }
      ShadowMaterial.prototype.isShadowMaterial = true;
      class RawShaderMaterial extends ShaderMaterial {
          constructor(parameters1){
              super(parameters1);
              this.type = "RawShaderMaterial";
          }
      }
      RawShaderMaterial.prototype.isRawShaderMaterial = true;
      /**
     * parameters = {
     *  color: <hex>,
     *  roughness: <float>,
     *  metalness: <float>,
     *  opacity: <float>,
     *
     *  map: new THREE.Texture( <Image> ),
     *
     *  lightMap: new THREE.Texture( <Image> ),
     *  lightMapIntensity: <float>
     *
     *  aoMap: new THREE.Texture( <Image> ),
     *  aoMapIntensity: <float>
     *
     *  emissive: <hex>,
     *  emissiveIntensity: <float>
     *  emissiveMap: new THREE.Texture( <Image> ),
     *
     *  bumpMap: new THREE.Texture( <Image> ),
     *  bumpScale: <float>,
     *
     *  normalMap: new THREE.Texture( <Image> ),
     *  normalMapType: THREE.TangentSpaceNormalMap,
     *  normalScale: <Vector2>,
     *
     *  displacementMap: new THREE.Texture( <Image> ),
     *  displacementScale: <float>,
     *  displacementBias: <float>,
     *
     *  roughnessMap: new THREE.Texture( <Image> ),
     *
     *  metalnessMap: new THREE.Texture( <Image> ),
     *
     *  alphaMap: new THREE.Texture( <Image> ),
     *
     *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
     *  envMapIntensity: <float>
     *
     *  refractionRatio: <float>,
     *
     *  wireframe: <boolean>,
     *  wireframeLinewidth: <float>,
     *
     *  flatShading: <bool>
     * }
     */ class MeshStandardMaterial extends Material {
          constructor(parameters1){
              super();
              this.defines = {
                  "STANDARD": ""
              };
              this.type = "MeshStandardMaterial";
              this.color = new Color(0xffffff); // diffuse
              this.roughness = 1.0;
              this.metalness = 0.0;
              this.map = null;
              this.lightMap = null;
              this.lightMapIntensity = 1.0;
              this.aoMap = null;
              this.aoMapIntensity = 1.0;
              this.emissive = new Color(0x000000);
              this.emissiveIntensity = 1.0;
              this.emissiveMap = null;
              this.bumpMap = null;
              this.bumpScale = 1;
              this.normalMap = null;
              this.normalMapType = TangentSpaceNormalMap;
              this.normalScale = new Vector2(1, 1);
              this.displacementMap = null;
              this.displacementScale = 1;
              this.displacementBias = 0;
              this.roughnessMap = null;
              this.metalnessMap = null;
              this.alphaMap = null;
              this.envMap = null;
              this.envMapIntensity = 1.0;
              this.refractionRatio = 0.98;
              this.wireframe = false;
              this.wireframeLinewidth = 1;
              this.wireframeLinecap = "round";
              this.wireframeLinejoin = "round";
              this.flatShading = false;
              this.setValues(parameters1);
          }
          copy(source1) {
              super.copy(source1);
              this.defines = {
                  "STANDARD": ""
              };
              this.color.copy(source1.color);
              this.roughness = source1.roughness;
              this.metalness = source1.metalness;
              this.map = source1.map;
              this.lightMap = source1.lightMap;
              this.lightMapIntensity = source1.lightMapIntensity;
              this.aoMap = source1.aoMap;
              this.aoMapIntensity = source1.aoMapIntensity;
              this.emissive.copy(source1.emissive);
              this.emissiveMap = source1.emissiveMap;
              this.emissiveIntensity = source1.emissiveIntensity;
              this.bumpMap = source1.bumpMap;
              this.bumpScale = source1.bumpScale;
              this.normalMap = source1.normalMap;
              this.normalMapType = source1.normalMapType;
              this.normalScale.copy(source1.normalScale);
              this.displacementMap = source1.displacementMap;
              this.displacementScale = source1.displacementScale;
              this.displacementBias = source1.displacementBias;
              this.roughnessMap = source1.roughnessMap;
              this.metalnessMap = source1.metalnessMap;
              this.alphaMap = source1.alphaMap;
              this.envMap = source1.envMap;
              this.envMapIntensity = source1.envMapIntensity;
              this.refractionRatio = source1.refractionRatio;
              this.wireframe = source1.wireframe;
              this.wireframeLinewidth = source1.wireframeLinewidth;
              this.wireframeLinecap = source1.wireframeLinecap;
              this.wireframeLinejoin = source1.wireframeLinejoin;
              this.flatShading = source1.flatShading;
              return this;
          }
      }
      MeshStandardMaterial.prototype.isMeshStandardMaterial = true;
      /**
     * parameters = {
     *  clearcoat: <float>,
     *  clearcoatMap: new THREE.Texture( <Image> ),
     *  clearcoatRoughness: <float>,
     *  clearcoatRoughnessMap: new THREE.Texture( <Image> ),
     *  clearcoatNormalScale: <Vector2>,
     *  clearcoatNormalMap: new THREE.Texture( <Image> ),
     *
     *  ior: <float>,
     *  reflectivity: <float>,
     *
     *  sheen: <float>,
     *  sheenColor: <Color>,
     *  sheenColorMap: new THREE.Texture( <Image> ),
     *  sheenRoughness: <float>,
     *  sheenRoughnessMap: new THREE.Texture( <Image> ),
     *
     *  transmission: <float>,
     *  transmissionMap: new THREE.Texture( <Image> ),
     *
     *  thickness: <float>,
     *  thicknessMap: new THREE.Texture( <Image> ),
     *  attenuationDistance: <float>,
     *  attenuationColor: <Color>,
     *
     *  specularIntensity: <float>,
     *  specularIntensityMap: new THREE.Texture( <Image> ),
     *  specularColor: <Color>,
     *  specularColorMap: new THREE.Texture( <Image> )
     * }
     */ class MeshPhysicalMaterial extends MeshStandardMaterial {
          constructor(parameters1){
              super();
              this.defines = {
                  "STANDARD": "",
                  "PHYSICAL": ""
              };
              this.type = "MeshPhysicalMaterial";
              this.clearcoatMap = null;
              this.clearcoatRoughness = 0.0;
              this.clearcoatRoughnessMap = null;
              this.clearcoatNormalScale = new Vector2(1, 1);
              this.clearcoatNormalMap = null;
              this.ior = 1.5;
              Object.defineProperty(this, "reflectivity", {
                  get: function() {
                      return clamp$1(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
                  },
                  set: function(reflectivity1) {
                      this.ior = (1 + 0.4 * reflectivity1) / (1 - 0.4 * reflectivity1);
                  }
              });
              this.sheenColor = new Color(0x000000);
              this.sheenColorMap = null;
              this.sheenRoughness = 1.0;
              this.sheenRoughnessMap = null;
              this.transmissionMap = null;
              this.thickness = 0;
              this.thicknessMap = null;
              this.attenuationDistance = 0.0;
              this.attenuationColor = new Color(1, 1, 1);
              this.specularIntensity = 1.0;
              this.specularIntensityMap = null;
              this.specularColor = new Color(1, 1, 1);
              this.specularColorMap = null;
              this._sheen = 0.0;
              this._clearcoat = 0;
              this._transmission = 0;
              this.setValues(parameters1);
          }
          get sheen() {
              return this._sheen;
          }
          set sheen(value1) {
              if (this._sheen > 0 !== value1 > 0) this.version++;
              this._sheen = value1;
          }
          get clearcoat() {
              return this._clearcoat;
          }
          set clearcoat(value1) {
              if (this._clearcoat > 0 !== value1 > 0) this.version++;
              this._clearcoat = value1;
          }
          get transmission() {
              return this._transmission;
          }
          set transmission(value1) {
              if (this._transmission > 0 !== value1 > 0) this.version++;
              this._transmission = value1;
          }
          copy(source1) {
              super.copy(source1);
              this.defines = {
                  "STANDARD": "",
                  "PHYSICAL": ""
              };
              this.clearcoat = source1.clearcoat;
              this.clearcoatMap = source1.clearcoatMap;
              this.clearcoatRoughness = source1.clearcoatRoughness;
              this.clearcoatRoughnessMap = source1.clearcoatRoughnessMap;
              this.clearcoatNormalMap = source1.clearcoatNormalMap;
              this.clearcoatNormalScale.copy(source1.clearcoatNormalScale);
              this.ior = source1.ior;
              this.sheen = source1.sheen;
              this.sheenColor.copy(source1.sheenColor);
              this.sheenColorMap = source1.sheenColorMap;
              this.sheenRoughness = source1.sheenRoughness;
              this.sheenRoughnessMap = source1.sheenRoughnessMap;
              this.transmission = source1.transmission;
              this.transmissionMap = source1.transmissionMap;
              this.thickness = source1.thickness;
              this.thicknessMap = source1.thicknessMap;
              this.attenuationDistance = source1.attenuationDistance;
              this.attenuationColor.copy(source1.attenuationColor);
              this.specularIntensity = source1.specularIntensity;
              this.specularIntensityMap = source1.specularIntensityMap;
              this.specularColor.copy(source1.specularColor);
              this.specularColorMap = source1.specularColorMap;
              return this;
          }
      }
      MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;
      /**
     * parameters = {
     *  color: <hex>,
     *  specular: <hex>,
     *  shininess: <float>,
     *  opacity: <float>,
     *
     *  map: new THREE.Texture( <Image> ),
     *
     *  lightMap: new THREE.Texture( <Image> ),
     *  lightMapIntensity: <float>
     *
     *  aoMap: new THREE.Texture( <Image> ),
     *  aoMapIntensity: <float>
     *
     *  emissive: <hex>,
     *  emissiveIntensity: <float>
     *  emissiveMap: new THREE.Texture( <Image> ),
     *
     *  bumpMap: new THREE.Texture( <Image> ),
     *  bumpScale: <float>,
     *
     *  normalMap: new THREE.Texture( <Image> ),
     *  normalMapType: THREE.TangentSpaceNormalMap,
     *  normalScale: <Vector2>,
     *
     *  displacementMap: new THREE.Texture( <Image> ),
     *  displacementScale: <float>,
     *  displacementBias: <float>,
     *
     *  specularMap: new THREE.Texture( <Image> ),
     *
     *  alphaMap: new THREE.Texture( <Image> ),
     *
     *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
     *  combine: THREE.MultiplyOperation,
     *  reflectivity: <float>,
     *  refractionRatio: <float>,
     *
     *  wireframe: <boolean>,
     *  wireframeLinewidth: <float>,
     *
     *  flatShading: <bool>
     * }
     */ class MeshPhongMaterial extends Material {
          constructor(parameters1){
              super();
              this.type = "MeshPhongMaterial";
              this.color = new Color(0xffffff); // diffuse
              this.specular = new Color(0x111111);
              this.shininess = 30;
              this.map = null;
              this.lightMap = null;
              this.lightMapIntensity = 1.0;
              this.aoMap = null;
              this.aoMapIntensity = 1.0;
              this.emissive = new Color(0x000000);
              this.emissiveIntensity = 1.0;
              this.emissiveMap = null;
              this.bumpMap = null;
              this.bumpScale = 1;
              this.normalMap = null;
              this.normalMapType = TangentSpaceNormalMap;
              this.normalScale = new Vector2(1, 1);
              this.displacementMap = null;
              this.displacementScale = 1;
              this.displacementBias = 0;
              this.specularMap = null;
              this.alphaMap = null;
              this.envMap = null;
              this.combine = MultiplyOperation;
              this.reflectivity = 1;
              this.refractionRatio = 0.98;
              this.wireframe = false;
              this.wireframeLinewidth = 1;
              this.wireframeLinecap = "round";
              this.wireframeLinejoin = "round";
              this.flatShading = false;
              this.setValues(parameters1);
          }
          copy(source1) {
              super.copy(source1);
              this.color.copy(source1.color);
              this.specular.copy(source1.specular);
              this.shininess = source1.shininess;
              this.map = source1.map;
              this.lightMap = source1.lightMap;
              this.lightMapIntensity = source1.lightMapIntensity;
              this.aoMap = source1.aoMap;
              this.aoMapIntensity = source1.aoMapIntensity;
              this.emissive.copy(source1.emissive);
              this.emissiveMap = source1.emissiveMap;
              this.emissiveIntensity = source1.emissiveIntensity;
              this.bumpMap = source1.bumpMap;
              this.bumpScale = source1.bumpScale;
              this.normalMap = source1.normalMap;
              this.normalMapType = source1.normalMapType;
              this.normalScale.copy(source1.normalScale);
              this.displacementMap = source1.displacementMap;
              this.displacementScale = source1.displacementScale;
              this.displacementBias = source1.displacementBias;
              this.specularMap = source1.specularMap;
              this.alphaMap = source1.alphaMap;
              this.envMap = source1.envMap;
              this.combine = source1.combine;
              this.reflectivity = source1.reflectivity;
              this.refractionRatio = source1.refractionRatio;
              this.wireframe = source1.wireframe;
              this.wireframeLinewidth = source1.wireframeLinewidth;
              this.wireframeLinecap = source1.wireframeLinecap;
              this.wireframeLinejoin = source1.wireframeLinejoin;
              this.flatShading = source1.flatShading;
              return this;
          }
      }
      MeshPhongMaterial.prototype.isMeshPhongMaterial = true;
      /**
     * parameters = {
     *  color: <hex>,
     *
     *  map: new THREE.Texture( <Image> ),
     *  gradientMap: new THREE.Texture( <Image> ),
     *
     *  lightMap: new THREE.Texture( <Image> ),
     *  lightMapIntensity: <float>
     *
     *  aoMap: new THREE.Texture( <Image> ),
     *  aoMapIntensity: <float>
     *
     *  emissive: <hex>,
     *  emissiveIntensity: <float>
     *  emissiveMap: new THREE.Texture( <Image> ),
     *
     *  bumpMap: new THREE.Texture( <Image> ),
     *  bumpScale: <float>,
     *
     *  normalMap: new THREE.Texture( <Image> ),
     *  normalMapType: THREE.TangentSpaceNormalMap,
     *  normalScale: <Vector2>,
     *
     *  displacementMap: new THREE.Texture( <Image> ),
     *  displacementScale: <float>,
     *  displacementBias: <float>,
     *
     *  alphaMap: new THREE.Texture( <Image> ),
     *
     *  wireframe: <boolean>,
     *  wireframeLinewidth: <float>,
     *
     * }
     */ class MeshToonMaterial extends Material {
          constructor(parameters1){
              super();
              this.defines = {
                  "TOON": ""
              };
              this.type = "MeshToonMaterial";
              this.color = new Color(0xffffff);
              this.map = null;
              this.gradientMap = null;
              this.lightMap = null;
              this.lightMapIntensity = 1.0;
              this.aoMap = null;
              this.aoMapIntensity = 1.0;
              this.emissive = new Color(0x000000);
              this.emissiveIntensity = 1.0;
              this.emissiveMap = null;
              this.bumpMap = null;
              this.bumpScale = 1;
              this.normalMap = null;
              this.normalMapType = TangentSpaceNormalMap;
              this.normalScale = new Vector2(1, 1);
              this.displacementMap = null;
              this.displacementScale = 1;
              this.displacementBias = 0;
              this.alphaMap = null;
              this.wireframe = false;
              this.wireframeLinewidth = 1;
              this.wireframeLinecap = "round";
              this.wireframeLinejoin = "round";
              this.setValues(parameters1);
          }
          copy(source1) {
              super.copy(source1);
              this.color.copy(source1.color);
              this.map = source1.map;
              this.gradientMap = source1.gradientMap;
              this.lightMap = source1.lightMap;
              this.lightMapIntensity = source1.lightMapIntensity;
              this.aoMap = source1.aoMap;
              this.aoMapIntensity = source1.aoMapIntensity;
              this.emissive.copy(source1.emissive);
              this.emissiveMap = source1.emissiveMap;
              this.emissiveIntensity = source1.emissiveIntensity;
              this.bumpMap = source1.bumpMap;
              this.bumpScale = source1.bumpScale;
              this.normalMap = source1.normalMap;
              this.normalMapType = source1.normalMapType;
              this.normalScale.copy(source1.normalScale);
              this.displacementMap = source1.displacementMap;
              this.displacementScale = source1.displacementScale;
              this.displacementBias = source1.displacementBias;
              this.alphaMap = source1.alphaMap;
              this.wireframe = source1.wireframe;
              this.wireframeLinewidth = source1.wireframeLinewidth;
              this.wireframeLinecap = source1.wireframeLinecap;
              this.wireframeLinejoin = source1.wireframeLinejoin;
              return this;
          }
      }
      MeshToonMaterial.prototype.isMeshToonMaterial = true;
      /**
     * parameters = {
     *  opacity: <float>,
     *
     *  bumpMap: new THREE.Texture( <Image> ),
     *  bumpScale: <float>,
     *
     *  normalMap: new THREE.Texture( <Image> ),
     *  normalMapType: THREE.TangentSpaceNormalMap,
     *  normalScale: <Vector2>,
     *
     *  displacementMap: new THREE.Texture( <Image> ),
     *  displacementScale: <float>,
     *  displacementBias: <float>,
     *
     *  wireframe: <boolean>,
     *  wireframeLinewidth: <float>
     *
     *  flatShading: <bool>
     * }
     */ class MeshNormalMaterial extends Material {
          constructor(parameters1){
              super();
              this.type = "MeshNormalMaterial";
              this.bumpMap = null;
              this.bumpScale = 1;
              this.normalMap = null;
              this.normalMapType = TangentSpaceNormalMap;
              this.normalScale = new Vector2(1, 1);
              this.displacementMap = null;
              this.displacementScale = 1;
              this.displacementBias = 0;
              this.wireframe = false;
              this.wireframeLinewidth = 1;
              this.fog = false;
              this.flatShading = false;
              this.setValues(parameters1);
          }
          copy(source1) {
              super.copy(source1);
              this.bumpMap = source1.bumpMap;
              this.bumpScale = source1.bumpScale;
              this.normalMap = source1.normalMap;
              this.normalMapType = source1.normalMapType;
              this.normalScale.copy(source1.normalScale);
              this.displacementMap = source1.displacementMap;
              this.displacementScale = source1.displacementScale;
              this.displacementBias = source1.displacementBias;
              this.wireframe = source1.wireframe;
              this.wireframeLinewidth = source1.wireframeLinewidth;
              this.flatShading = source1.flatShading;
              return this;
          }
      }
      MeshNormalMaterial.prototype.isMeshNormalMaterial = true;
      /**
     * parameters = {
     *  color: <hex>,
     *  opacity: <float>,
     *
     *  map: new THREE.Texture( <Image> ),
     *
     *  lightMap: new THREE.Texture( <Image> ),
     *  lightMapIntensity: <float>
     *
     *  aoMap: new THREE.Texture( <Image> ),
     *  aoMapIntensity: <float>
     *
     *  emissive: <hex>,
     *  emissiveIntensity: <float>
     *  emissiveMap: new THREE.Texture( <Image> ),
     *
     *  specularMap: new THREE.Texture( <Image> ),
     *
     *  alphaMap: new THREE.Texture( <Image> ),
     *
     *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
     *  combine: THREE.Multiply,
     *  reflectivity: <float>,
     *  refractionRatio: <float>,
     *
     *  wireframe: <boolean>,
     *  wireframeLinewidth: <float>,
     *
     * }
     */ class MeshLambertMaterial extends Material {
          constructor(parameters1){
              super();
              this.type = "MeshLambertMaterial";
              this.color = new Color(0xffffff); // diffuse
              this.map = null;
              this.lightMap = null;
              this.lightMapIntensity = 1.0;
              this.aoMap = null;
              this.aoMapIntensity = 1.0;
              this.emissive = new Color(0x000000);
              this.emissiveIntensity = 1.0;
              this.emissiveMap = null;
              this.specularMap = null;
              this.alphaMap = null;
              this.envMap = null;
              this.combine = MultiplyOperation;
              this.reflectivity = 1;
              this.refractionRatio = 0.98;
              this.wireframe = false;
              this.wireframeLinewidth = 1;
              this.wireframeLinecap = "round";
              this.wireframeLinejoin = "round";
              this.setValues(parameters1);
          }
          copy(source1) {
              super.copy(source1);
              this.color.copy(source1.color);
              this.map = source1.map;
              this.lightMap = source1.lightMap;
              this.lightMapIntensity = source1.lightMapIntensity;
              this.aoMap = source1.aoMap;
              this.aoMapIntensity = source1.aoMapIntensity;
              this.emissive.copy(source1.emissive);
              this.emissiveMap = source1.emissiveMap;
              this.emissiveIntensity = source1.emissiveIntensity;
              this.specularMap = source1.specularMap;
              this.alphaMap = source1.alphaMap;
              this.envMap = source1.envMap;
              this.combine = source1.combine;
              this.reflectivity = source1.reflectivity;
              this.refractionRatio = source1.refractionRatio;
              this.wireframe = source1.wireframe;
              this.wireframeLinewidth = source1.wireframeLinewidth;
              this.wireframeLinecap = source1.wireframeLinecap;
              this.wireframeLinejoin = source1.wireframeLinejoin;
              return this;
          }
      }
      MeshLambertMaterial.prototype.isMeshLambertMaterial = true;
      /**
     * parameters = {
     *  color: <hex>,
     *  opacity: <float>,
     *
     *  matcap: new THREE.Texture( <Image> ),
     *
     *  map: new THREE.Texture( <Image> ),
     *
     *  bumpMap: new THREE.Texture( <Image> ),
     *  bumpScale: <float>,
     *
     *  normalMap: new THREE.Texture( <Image> ),
     *  normalMapType: THREE.TangentSpaceNormalMap,
     *  normalScale: <Vector2>,
     *
     *  displacementMap: new THREE.Texture( <Image> ),
     *  displacementScale: <float>,
     *  displacementBias: <float>,
     *
     *  alphaMap: new THREE.Texture( <Image> ),
     *
     *  flatShading: <bool>
     * }
     */ class MeshMatcapMaterial extends Material {
          constructor(parameters1){
              super();
              this.defines = {
                  "MATCAP": ""
              };
              this.type = "MeshMatcapMaterial";
              this.color = new Color(0xffffff); // diffuse
              this.matcap = null;
              this.map = null;
              this.bumpMap = null;
              this.bumpScale = 1;
              this.normalMap = null;
              this.normalMapType = TangentSpaceNormalMap;
              this.normalScale = new Vector2(1, 1);
              this.displacementMap = null;
              this.displacementScale = 1;
              this.displacementBias = 0;
              this.alphaMap = null;
              this.flatShading = false;
              this.setValues(parameters1);
          }
          copy(source1) {
              super.copy(source1);
              this.defines = {
                  "MATCAP": ""
              };
              this.color.copy(source1.color);
              this.matcap = source1.matcap;
              this.map = source1.map;
              this.bumpMap = source1.bumpMap;
              this.bumpScale = source1.bumpScale;
              this.normalMap = source1.normalMap;
              this.normalMapType = source1.normalMapType;
              this.normalScale.copy(source1.normalScale);
              this.displacementMap = source1.displacementMap;
              this.displacementScale = source1.displacementScale;
              this.displacementBias = source1.displacementBias;
              this.alphaMap = source1.alphaMap;
              this.flatShading = source1.flatShading;
              return this;
          }
      }
      MeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;
      /**
     * parameters = {
     *  color: <hex>,
     *  opacity: <float>,
     *
     *  linewidth: <float>,
     *
     *  scale: <float>,
     *  dashSize: <float>,
     *  gapSize: <float>
     * }
     */ class LineDashedMaterial extends LineBasicMaterial {
          constructor(parameters1){
              super();
              this.type = "LineDashedMaterial";
              this.scale = 1;
              this.dashSize = 3;
              this.gapSize = 1;
              this.setValues(parameters1);
          }
          copy(source1) {
              super.copy(source1);
              this.scale = source1.scale;
              this.dashSize = source1.dashSize;
              this.gapSize = source1.gapSize;
              return this;
          }
      }
      LineDashedMaterial.prototype.isLineDashedMaterial = true;
      const materialLib = {
          ShadowMaterial,
          SpriteMaterial,
          RawShaderMaterial,
          ShaderMaterial,
          PointsMaterial,
          MeshPhysicalMaterial,
          MeshStandardMaterial,
          MeshPhongMaterial,
          MeshToonMaterial,
          MeshNormalMaterial,
          MeshLambertMaterial,
          MeshDepthMaterial,
          MeshDistanceMaterial,
          MeshBasicMaterial,
          MeshMatcapMaterial,
          LineDashedMaterial,
          LineBasicMaterial,
          Material
      };
      Material.fromType = function(type1) {
          return new materialLib[type1]();
      };
      const AnimationUtils = {
          // same as Array.prototype.slice, but also works on typed arrays
          arraySlice: function(array1, from1, to1) {
              if (AnimationUtils.isTypedArray(array1)) // in ios9 array.subarray(from, undefined) will return empty array
              // but array.subarray(from) or array.subarray(from, len) is correct
              return new array1.constructor(array1.subarray(from1, to1 !== undefined ? to1 : array1.length));
              return array1.slice(from1, to1);
          },
          // converts an array to a specific type
          convertArray: function(array1, type1, forceClone1) {
              if (!array1 || // let 'undefined' and 'null' pass
              !forceClone1 && array1.constructor === type1) return array1;
              if (typeof type1.BYTES_PER_ELEMENT === "number") return new type1(array1); // create typed array
              return Array.prototype.slice.call(array1); // create Array
          },
          isTypedArray: function(object1) {
              return ArrayBuffer.isView(object1) && !(object1 instanceof DataView);
          },
          // returns an array by which times and values can be sorted
          getKeyframeOrder: function(times1) {
              function compareTime1(i3, j1) {
                  return times1[i3] - times1[j1];
              }
              const n3 = times1.length;
              const result1 = new Array(n3);
              for(let i3 = 0; i3 !== n3; ++i3)result1[i3] = i3;
              result1.sort(compareTime1);
              return result1;
          },
          // uses the array previously returned by 'getKeyframeOrder' to sort data
          sortedArray: function(values1, stride1, order1) {
              const nValues1 = values1.length;
              const result1 = new values1.constructor(nValues1);
              for(let i3 = 0, dstOffset1 = 0; dstOffset1 !== nValues1; ++i3){
                  const srcOffset2 = order1[i3] * stride1;
                  for(let j1 = 0; j1 !== stride1; ++j1)result1[dstOffset1++] = values1[srcOffset2 + j1];
              }
              return result1;
          },
          // function for parsing AOS keyframe formats
          flattenJSON: function(jsonKeys1, times1, values1, valuePropertyName1) {
              let i3 = 1, key1 = jsonKeys1[0];
              while(key1 !== undefined && key1[valuePropertyName1] === undefined)key1 = jsonKeys1[i3++];
              if (key1 === undefined) return; // no data
              let value1 = key1[valuePropertyName1];
              if (value1 === undefined) return; // no data
              if (Array.isArray(value1)) do {
                  value1 = key1[valuePropertyName1];
                  if (value1 !== undefined) {
                      times1.push(key1.time);
                      values1.push.apply(values1, value1); // push all elements
                  }
                  key1 = jsonKeys1[i3++];
              }while (key1 !== undefined);
              else if (value1.toArray !== undefined) // ...assume THREE.Math-ish
              do {
                  value1 = key1[valuePropertyName1];
                  if (value1 !== undefined) {
                      times1.push(key1.time);
                      value1.toArray(values1, values1.length);
                  }
                  key1 = jsonKeys1[i3++];
              }while (key1 !== undefined);
              else // otherwise push as-is
              do {
                  value1 = key1[valuePropertyName1];
                  if (value1 !== undefined) {
                      times1.push(key1.time);
                      values1.push(value1);
                  }
                  key1 = jsonKeys1[i3++];
              }while (key1 !== undefined);
          },
          subclip: function(sourceClip1, name1, startFrame1, endFrame1, fps1 = 30) {
              const clip1 = sourceClip1.clone();
              clip1.name = name1;
              const tracks1 = [];
              for(let i3 = 0; i3 < clip1.tracks.length; ++i3){
                  const track1 = clip1.tracks[i3];
                  const valueSize1 = track1.getValueSize();
                  const times1 = [];
                  const values1 = [];
                  for(let j1 = 0; j1 < track1.times.length; ++j1){
                      const frame1 = track1.times[j1] * fps1;
                      if (frame1 < startFrame1 || frame1 >= endFrame1) continue;
                      times1.push(track1.times[j1]);
                      for(let k1 = 0; k1 < valueSize1; ++k1)values1.push(track1.values[j1 * valueSize1 + k1]);
                  }
                  if (times1.length === 0) continue;
                  track1.times = AnimationUtils.convertArray(times1, track1.times.constructor);
                  track1.values = AnimationUtils.convertArray(values1, track1.values.constructor);
                  tracks1.push(track1);
              }
              clip1.tracks = tracks1;
              // find minimum .times value across all tracks in the trimmed clip
              let minStartTime1 = Infinity;
              for(let i3 = 0; i3 < clip1.tracks.length; ++i3)if (minStartTime1 > clip1.tracks[i3].times[0]) minStartTime1 = clip1.tracks[i3].times[0];
              // shift all tracks such that clip begins at t=0
              for(let i3 = 0; i3 < clip1.tracks.length; ++i3)clip1.tracks[i3].shift(-1 * minStartTime1);
              clip1.resetDuration();
              return clip1;
          },
          makeClipAdditive: function(targetClip1, referenceFrame1 = 0, referenceClip1 = targetClip1, fps1 = 30) {
              if (fps1 <= 0) fps1 = 30;
              const numTracks1 = referenceClip1.tracks.length;
              const referenceTime1 = referenceFrame1 / fps1;
              // Make each track's values relative to the values at the reference frame
              for(let i3 = 0; i3 < numTracks1; ++i3){
                  const referenceTrack1 = referenceClip1.tracks[i3];
                  const referenceTrackType1 = referenceTrack1.ValueTypeName;
                  // Skip this track if it's non-numeric
                  if (referenceTrackType1 === "bool" || referenceTrackType1 === "string") continue;
                  // Find the track in the target clip whose name and type matches the reference track
                  const targetTrack1 = targetClip1.tracks.find(function(track1) {
                      return track1.name === referenceTrack1.name && track1.ValueTypeName === referenceTrackType1;
                  });
                  if (targetTrack1 === undefined) continue;
                  let referenceOffset1 = 0;
                  const referenceValueSize1 = referenceTrack1.getValueSize();
                  if (referenceTrack1.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) referenceOffset1 = referenceValueSize1 / 3;
                  let targetOffset1 = 0;
                  const targetValueSize1 = targetTrack1.getValueSize();
                  if (targetTrack1.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) targetOffset1 = targetValueSize1 / 3;
                  const lastIndex1 = referenceTrack1.times.length - 1;
                  let referenceValue1;
                  // Find the value to subtract out of the track
                  if (referenceTime1 <= referenceTrack1.times[0]) {
                      // Reference frame is earlier than the first keyframe, so just use the first keyframe
                      const startIndex1 = referenceOffset1;
                      const endIndex1 = referenceValueSize1 - referenceOffset1;
                      referenceValue1 = AnimationUtils.arraySlice(referenceTrack1.values, startIndex1, endIndex1);
                  } else if (referenceTime1 >= referenceTrack1.times[lastIndex1]) {
                      // Reference frame is after the last keyframe, so just use the last keyframe
                      const startIndex1 = lastIndex1 * referenceValueSize1 + referenceOffset1;
                      const endIndex1 = startIndex1 + referenceValueSize1 - referenceOffset1;
                      referenceValue1 = AnimationUtils.arraySlice(referenceTrack1.values, startIndex1, endIndex1);
                  } else {
                      // Interpolate to the reference value
                      const interpolant1 = referenceTrack1.createInterpolant();
                      const startIndex1 = referenceOffset1;
                      const endIndex1 = referenceValueSize1 - referenceOffset1;
                      interpolant1.evaluate(referenceTime1);
                      referenceValue1 = AnimationUtils.arraySlice(interpolant1.resultBuffer, startIndex1, endIndex1);
                  }
                  // Conjugate the quaternion
                  if (referenceTrackType1 === "quaternion") {
                      const referenceQuat1 = new Quaternion().fromArray(referenceValue1).normalize().conjugate();
                      referenceQuat1.toArray(referenceValue1);
                  }
                  // Subtract the reference value from all of the track values
                  const numTimes1 = targetTrack1.times.length;
                  for(let j1 = 0; j1 < numTimes1; ++j1){
                      const valueStart1 = j1 * targetValueSize1 + targetOffset1;
                      if (referenceTrackType1 === "quaternion") // Multiply the conjugate for quaternion track types
                      Quaternion.multiplyQuaternionsFlat(targetTrack1.values, valueStart1, referenceValue1, 0, targetTrack1.values, valueStart1);
                      else {
                          const valueEnd1 = targetValueSize1 - targetOffset1 * 2;
                          // Subtract each value for all other numeric track types
                          for(let k1 = 0; k1 < valueEnd1; ++k1)targetTrack1.values[valueStart1 + k1] -= referenceValue1[k1];
                      }
                  }
              }
              targetClip1.blendMode = AdditiveAnimationBlendMode;
              return targetClip1;
          }
      };
      /**
     * Abstract base class of interpolants over parametric samples.
     *
     * The parameter domain is one dimensional, typically the time or a path
     * along a curve defined by the data.
     *
     * The sample values can have any dimensionality and derived classes may
     * apply special interpretations to the data.
     *
     * This class provides the interval seek in a Template Method, deferring
     * the actual interpolation to derived classes.
     *
     * Time complexity is O(1) for linear access crossing at most two points
     * and O(log N) for random access, where N is the number of positions.
     *
     * References:
     *
     * 		http://www.oodesign.com/template-method-pattern.html
     *
     */ class Interpolant {
          constructor(parameterPositions1, sampleValues1, sampleSize1, resultBuffer1){
              this.parameterPositions = parameterPositions1;
              this._cachedIndex = 0;
              this.resultBuffer = resultBuffer1 !== undefined ? resultBuffer1 : new sampleValues1.constructor(sampleSize1);
              this.sampleValues = sampleValues1;
              this.valueSize = sampleSize1;
              this.settings = null;
              this.DefaultSettings_ = {};
          }
          evaluate(t4) {
              const pp1 = this.parameterPositions;
              let i11 = this._cachedIndex, t15 = pp1[i11], t01 = pp1[i11 - 1];
              validate_interval: {
                  seek: {
                      let right1;
                      linear_scan: {
                          //- See http://jsperf.com/comparison-to-undefined/3
                          //- slower code:
                          //-
                          //- 				if ( t >= t1 || t1 === undefined ) {
                          forward_scan: if (!(t4 < t15)) {
                              for(let giveUpAt1 = i11 + 2;;){
                                  if (t15 === undefined) {
                                      if (t4 < t01) break forward_scan;
                                      // after end
                                      i11 = pp1.length;
                                      this._cachedIndex = i11;
                                      return this.afterEnd_(i11 - 1, t4, t01);
                                  }
                                  if (i11 === giveUpAt1) break; // this loop
                                  t01 = t15;
                                  t15 = pp1[++i11];
                                  if (t4 < t15) break seek;
                              }
                              // prepare binary search on the right side of the index
                              right1 = pp1.length;
                              break linear_scan;
                          }
                          //- slower code:
                          //-					if ( t < t0 || t0 === undefined ) {
                          if (!(t4 >= t01)) {
                              // looping?
                              const t1global1 = pp1[1];
                              if (t4 < t1global1) {
                                  i11 = 2; // + 1, using the scan for the details
                                  t01 = t1global1;
                              }
                              // linear reverse scan
                              for(let giveUpAt1 = i11 - 2;;){
                                  if (t01 === undefined) {
                                      // before start
                                      this._cachedIndex = 0;
                                      return this.beforeStart_(0, t4, t15);
                                  }
                                  if (i11 === giveUpAt1) break; // this loop
                                  t15 = t01;
                                  t01 = pp1[--i11 - 1];
                                  if (t4 >= t01) break seek;
                              }
                              // prepare binary search on the left side of the index
                              right1 = i11;
                              i11 = 0;
                              break linear_scan;
                          }
                          break validate_interval;
                      } // linear scan
                      // binary search
                      while(i11 < right1){
                          const mid1 = i11 + right1 >>> 1;
                          if (t4 < pp1[mid1]) right1 = mid1;
                          else i11 = mid1 + 1;
                      }
                      t15 = pp1[i11];
                      t01 = pp1[i11 - 1];
                      // check boundary cases, again
                      if (t01 === undefined) {
                          this._cachedIndex = 0;
                          return this.beforeStart_(0, t4, t15);
                      }
                      if (t15 === undefined) {
                          i11 = pp1.length;
                          this._cachedIndex = i11;
                          return this.afterEnd_(i11 - 1, t01, t4);
                      }
                  } // seek
                  this._cachedIndex = i11;
                  this.intervalChanged_(i11, t01, t15);
              } // validate_interval
              return this.interpolate_(i11, t01, t4, t15);
          }
          getSettings_() {
              return this.settings || this.DefaultSettings_;
          }
          copySampleValue_(index3) {
              // copies a sample value to the result buffer
              const result1 = this.resultBuffer, values1 = this.sampleValues, stride1 = this.valueSize, offset2 = index3 * stride1;
              for(let i3 = 0; i3 !== stride1; ++i3)result1[i3] = values1[offset2 + i3];
              return result1;
          }
          // Template methods for derived classes:
          interpolate_() {
              throw new Error("call to abstract method");
          // implementations shall return this.resultBuffer
          }
          intervalChanged_() {
          // empty
          }
      }
      // ALIAS DEFINITIONS
      Interpolant.prototype.beforeStart_ = Interpolant.prototype.copySampleValue_;
      Interpolant.prototype.afterEnd_ = Interpolant.prototype.copySampleValue_;
      /**
     * Fast and simple cubic spline interpolant.
     *
     * It was derived from a Hermitian construction setting the first derivative
     * at each sample position to the linear slope between neighboring positions
     * over their parameter interval.
     */ class CubicInterpolant extends Interpolant {
          constructor(parameterPositions1, sampleValues1, sampleSize1, resultBuffer1){
              super(parameterPositions1, sampleValues1, sampleSize1, resultBuffer1);
              this._weightPrev = -0;
              this._offsetPrev = -0;
              this._weightNext = -0;
              this._offsetNext = -0;
              this.DefaultSettings_ = {
                  endingStart: ZeroCurvatureEnding,
                  endingEnd: ZeroCurvatureEnding
              };
          }
          intervalChanged_(i11, t01, t15) {
              const pp1 = this.parameterPositions;
              let iPrev1 = i11 - 2, iNext1 = i11 + 1, tPrev1 = pp1[iPrev1], tNext1 = pp1[iNext1];
              if (tPrev1 === undefined) switch(this.getSettings_().endingStart){
                  case ZeroSlopeEnding:
                      // f'(t0) = 0
                      iPrev1 = i11;
                      tPrev1 = 2 * t01 - t15;
                      break;
                  case WrapAroundEnding:
                      // use the other end of the curve
                      iPrev1 = pp1.length - 2;
                      tPrev1 = t01 + pp1[iPrev1] - pp1[iPrev1 + 1];
                      break;
                  default:
                      // f''(t0) = 0 a.k.a. Natural Spline
                      iPrev1 = i11;
                      tPrev1 = t15;
              }
              if (tNext1 === undefined) switch(this.getSettings_().endingEnd){
                  case ZeroSlopeEnding:
                      // f'(tN) = 0
                      iNext1 = i11;
                      tNext1 = 2 * t15 - t01;
                      break;
                  case WrapAroundEnding:
                      // use the other end of the curve
                      iNext1 = 1;
                      tNext1 = t15 + pp1[1] - pp1[0];
                      break;
                  default:
                      // f''(tN) = 0, a.k.a. Natural Spline
                      iNext1 = i11 - 1;
                      tNext1 = t01;
              }
              const halfDt1 = (t15 - t01) * 0.5, stride1 = this.valueSize;
              this._weightPrev = halfDt1 / (t01 - tPrev1);
              this._weightNext = halfDt1 / (tNext1 - t15);
              this._offsetPrev = iPrev1 * stride1;
              this._offsetNext = iNext1 * stride1;
          }
          interpolate_(i11, t01, t4, t15) {
              const result1 = this.resultBuffer, values1 = this.sampleValues, stride1 = this.valueSize, o11 = i11 * stride1, o01 = o11 - stride1, oP1 = this._offsetPrev, oN1 = this._offsetNext, wP1 = this._weightPrev, wN1 = this._weightNext, p6 = (t4 - t01) / (t15 - t01), pp1 = p6 * p6, ppp1 = pp1 * p6;
              // evaluate polynomials
              const sP1 = -wP1 * ppp1 + 2 * wP1 * pp1 - wP1 * p6;
              const s01 = (1 + wP1) * ppp1 + (-1.5 - 2 * wP1) * pp1 + (-0.5 + wP1) * p6 + 1;
              const s11 = (-1 - wN1) * ppp1 + (1.5 + wN1) * pp1 + 0.5 * p6;
              const sN1 = wN1 * ppp1 - wN1 * pp1;
              // combine data linearly
              for(let i3 = 0; i3 !== stride1; ++i3)result1[i3] = sP1 * values1[oP1 + i3] + s01 * values1[o01 + i3] + s11 * values1[o11 + i3] + sN1 * values1[oN1 + i3];
              return result1;
          }
      }
      class LinearInterpolant extends Interpolant {
          constructor(parameterPositions1, sampleValues1, sampleSize1, resultBuffer1){
              super(parameterPositions1, sampleValues1, sampleSize1, resultBuffer1);
          }
          interpolate_(i11, t01, t4, t15) {
              const result1 = this.resultBuffer, values1 = this.sampleValues, stride1 = this.valueSize, offset11 = i11 * stride1, offset01 = offset11 - stride1, weight11 = (t4 - t01) / (t15 - t01), weight01 = 1 - weight11;
              for(let i3 = 0; i3 !== stride1; ++i3)result1[i3] = values1[offset01 + i3] * weight01 + values1[offset11 + i3] * weight11;
              return result1;
          }
      }
      /**
     *
     * Interpolant that evaluates to the sample value at the position preceeding
     * the parameter.
     */ class DiscreteInterpolant extends Interpolant {
          constructor(parameterPositions1, sampleValues1, sampleSize1, resultBuffer1){
              super(parameterPositions1, sampleValues1, sampleSize1, resultBuffer1);
          }
          interpolate_(i11 /*, t0, t, t1 */ ) {
              return this.copySampleValue_(i11 - 1);
          }
      }
      class KeyframeTrack {
          constructor(name1, times1, values1, interpolation1){
              if (name1 === undefined) throw new Error("THREE.KeyframeTrack: track name is undefined");
              if (times1 === undefined || times1.length === 0) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + name1);
              this.name = name1;
              this.times = AnimationUtils.convertArray(times1, this.TimeBufferType);
              this.values = AnimationUtils.convertArray(values1, this.ValueBufferType);
              this.setInterpolation(interpolation1 || this.DefaultInterpolation);
          }
          // Serialization (in static context, because of constructor invocation
          // and automatic invocation of .toJSON):
          static toJSON(track1) {
              const trackType1 = track1.constructor;
              let json1;
              // derived classes can define a static toJSON method
              if (trackType1.toJSON !== this.toJSON) json1 = trackType1.toJSON(track1);
              else {
                  // by default, we assume the data can be serialized as-is
                  json1 = {
                      "name": track1.name,
                      "times": AnimationUtils.convertArray(track1.times, Array),
                      "values": AnimationUtils.convertArray(track1.values, Array)
                  };
                  const interpolation1 = track1.getInterpolation();
                  if (interpolation1 !== track1.DefaultInterpolation) json1.interpolation = interpolation1;
              }
              json1.type = track1.ValueTypeName; // mandatory
              return json1;
          }
          InterpolantFactoryMethodDiscrete(result1) {
              return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result1);
          }
          InterpolantFactoryMethodLinear(result1) {
              return new LinearInterpolant(this.times, this.values, this.getValueSize(), result1);
          }
          InterpolantFactoryMethodSmooth(result1) {
              return new CubicInterpolant(this.times, this.values, this.getValueSize(), result1);
          }
          setInterpolation(interpolation1) {
              let factoryMethod1;
              switch(interpolation1){
                  case InterpolateDiscrete:
                      factoryMethod1 = this.InterpolantFactoryMethodDiscrete;
                      break;
                  case InterpolateLinear:
                      factoryMethod1 = this.InterpolantFactoryMethodLinear;
                      break;
                  case InterpolateSmooth:
                      factoryMethod1 = this.InterpolantFactoryMethodSmooth;
                      break;
              }
              if (factoryMethod1 === undefined) {
                  const message1 = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
                  if (this.createInterpolant === undefined) {
                      // fall back to default, unless the default itself is messed up
                      if (interpolation1 !== this.DefaultInterpolation) this.setInterpolation(this.DefaultInterpolation);
                      else throw new Error(message1); // fatal, in this case
                  }
                  console.warn("THREE.KeyframeTrack:", message1);
                  return this;
              }
              this.createInterpolant = factoryMethod1;
              return this;
          }
          getInterpolation() {
              switch(this.createInterpolant){
                  case this.InterpolantFactoryMethodDiscrete:
                      return InterpolateDiscrete;
                  case this.InterpolantFactoryMethodLinear:
                      return InterpolateLinear;
                  case this.InterpolantFactoryMethodSmooth:
                      return InterpolateSmooth;
              }
          }
          getValueSize() {
              return this.values.length / this.times.length;
          }
          // move all keyframes either forwards or backwards in time
          shift(timeOffset1) {
              if (timeOffset1 !== 0.0) {
                  const times1 = this.times;
                  for(let i3 = 0, n3 = times1.length; i3 !== n3; ++i3)times1[i3] += timeOffset1;
              }
              return this;
          }
          // scale all keyframe times by a factor (useful for frame <-> seconds conversions)
          scale(timeScale1) {
              if (timeScale1 !== 1.0) {
                  const times1 = this.times;
                  for(let i3 = 0, n3 = times1.length; i3 !== n3; ++i3)times1[i3] *= timeScale1;
              }
              return this;
          }
          // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
          // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
          trim(startTime1, endTime1) {
              const times1 = this.times, nKeys1 = times1.length;
              let from1 = 0, to1 = nKeys1 - 1;
              while(from1 !== nKeys1 && times1[from1] < startTime1)++from1;
              while(to1 !== -1 && times1[to1] > endTime1)--to1;
              ++to1; // inclusive -> exclusive bound
              if (from1 !== 0 || to1 !== nKeys1) {
                  // empty tracks are forbidden, so keep at least one keyframe
                  if (from1 >= to1) {
                      to1 = Math.max(to1, 1);
                      from1 = to1 - 1;
                  }
                  const stride1 = this.getValueSize();
                  this.times = AnimationUtils.arraySlice(times1, from1, to1);
                  this.values = AnimationUtils.arraySlice(this.values, from1 * stride1, to1 * stride1);
              }
              return this;
          }
          // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
          validate() {
              let valid1 = true;
              const valueSize1 = this.getValueSize();
              if (valueSize1 - Math.floor(valueSize1) !== 0) {
                  console.error("THREE.KeyframeTrack: Invalid value size in track.", this);
                  valid1 = false;
              }
              const times1 = this.times, values1 = this.values, nKeys1 = times1.length;
              if (nKeys1 === 0) {
                  console.error("THREE.KeyframeTrack: Track is empty.", this);
                  valid1 = false;
              }
              let prevTime1 = null;
              for(let i3 = 0; i3 !== nKeys1; i3++){
                  const currTime1 = times1[i3];
                  if (typeof currTime1 === "number" && isNaN(currTime1)) {
                      console.error("THREE.KeyframeTrack: Time is not a valid number.", this, i3, currTime1);
                      valid1 = false;
                      break;
                  }
                  if (prevTime1 !== null && prevTime1 > currTime1) {
                      console.error("THREE.KeyframeTrack: Out of order keys.", this, i3, currTime1, prevTime1);
                      valid1 = false;
                      break;
                  }
                  prevTime1 = currTime1;
              }
              if (values1 !== undefined) {
                  if (AnimationUtils.isTypedArray(values1)) for(let i3 = 0, n3 = values1.length; i3 !== n3; ++i3){
                      const value1 = values1[i3];
                      if (isNaN(value1)) {
                          console.error("THREE.KeyframeTrack: Value is not a valid number.", this, i3, value1);
                          valid1 = false;
                          break;
                      }
                  }
              }
              return valid1;
          }
          // removes equivalent sequential keys as common in morph target sequences
          // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
          optimize() {
              // times or values may be shared with other tracks, so overwriting is unsafe
              const times1 = AnimationUtils.arraySlice(this.times), values1 = AnimationUtils.arraySlice(this.values), stride1 = this.getValueSize(), smoothInterpolation1 = this.getInterpolation() === InterpolateSmooth, lastIndex1 = times1.length - 1;
              let writeIndex1 = 1;
              for(let i3 = 1; i3 < lastIndex1; ++i3){
                  let keep1 = false;
                  const time1 = times1[i3];
                  const timeNext1 = times1[i3 + 1];
                  // remove adjacent keyframes scheduled at the same time
                  if (time1 !== timeNext1 && (i3 !== 1 || time1 !== times1[0])) {
                      if (!smoothInterpolation1) {
                          // remove unnecessary keyframes same as their neighbors
                          const offset2 = i3 * stride1, offsetP1 = offset2 - stride1, offsetN1 = offset2 + stride1;
                          for(let j1 = 0; j1 !== stride1; ++j1){
                              const value1 = values1[offset2 + j1];
                              if (value1 !== values1[offsetP1 + j1] || value1 !== values1[offsetN1 + j1]) {
                                  keep1 = true;
                                  break;
                              }
                          }
                      } else keep1 = true;
                  }
                  // in-place compaction
                  if (keep1) {
                      if (i3 !== writeIndex1) {
                          times1[writeIndex1] = times1[i3];
                          const readOffset1 = i3 * stride1, writeOffset1 = writeIndex1 * stride1;
                          for(let j1 = 0; j1 !== stride1; ++j1)values1[writeOffset1 + j1] = values1[readOffset1 + j1];
                      }
                      ++writeIndex1;
                  }
              }
              // flush last keyframe (compaction looks ahead)
              if (lastIndex1 > 0) {
                  times1[writeIndex1] = times1[lastIndex1];
                  for(let readOffset1 = lastIndex1 * stride1, writeOffset1 = writeIndex1 * stride1, j1 = 0; j1 !== stride1; ++j1)values1[writeOffset1 + j1] = values1[readOffset1 + j1];
                  ++writeIndex1;
              }
              if (writeIndex1 !== times1.length) {
                  this.times = AnimationUtils.arraySlice(times1, 0, writeIndex1);
                  this.values = AnimationUtils.arraySlice(values1, 0, writeIndex1 * stride1);
              } else {
                  this.times = times1;
                  this.values = values1;
              }
              return this;
          }
          clone() {
              const times1 = AnimationUtils.arraySlice(this.times, 0);
              const values1 = AnimationUtils.arraySlice(this.values, 0);
              const TypedKeyframeTrack1 = this.constructor;
              const track1 = new TypedKeyframeTrack1(this.name, times1, values1);
              // Interpolant argument to constructor is not saved, so copy the factory method directly.
              track1.createInterpolant = this.createInterpolant;
              return track1;
          }
      }
      KeyframeTrack.prototype.TimeBufferType = Float32Array;
      KeyframeTrack.prototype.ValueBufferType = Float32Array;
      KeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
      /**
     * A Track of Boolean keyframe values.
     */ class BooleanKeyframeTrack extends KeyframeTrack {
      }
      BooleanKeyframeTrack.prototype.ValueTypeName = "bool";
      BooleanKeyframeTrack.prototype.ValueBufferType = Array;
      BooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
      BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;
      BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;
      /**
     * A Track of keyframe values that represent color.
     */ class ColorKeyframeTrack extends KeyframeTrack {
      }
      ColorKeyframeTrack.prototype.ValueTypeName = "color";
      /**
     * A Track of numeric keyframe values.
     */ class NumberKeyframeTrack extends KeyframeTrack {
      }
      NumberKeyframeTrack.prototype.ValueTypeName = "number";
      /**
     * Spherical linear unit quaternion interpolant.
     */ class QuaternionLinearInterpolant extends Interpolant {
          constructor(parameterPositions1, sampleValues1, sampleSize1, resultBuffer1){
              super(parameterPositions1, sampleValues1, sampleSize1, resultBuffer1);
          }
          interpolate_(i11, t01, t4, t15) {
              const result1 = this.resultBuffer, values1 = this.sampleValues, stride1 = this.valueSize, alpha1 = (t4 - t01) / (t15 - t01);
              let offset2 = i11 * stride1;
              for(let end1 = offset2 + stride1; offset2 !== end1; offset2 += 4)Quaternion.slerpFlat(result1, 0, values1, offset2 - stride1, values1, offset2, alpha1);
              return result1;
          }
      }
      /**
     * A Track of quaternion keyframe values.
     */ class QuaternionKeyframeTrack extends KeyframeTrack {
          InterpolantFactoryMethodLinear(result1) {
              return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result1);
          }
      }
      QuaternionKeyframeTrack.prototype.ValueTypeName = "quaternion";
      // ValueBufferType is inherited
      QuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
      QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;
      /**
     * A Track that interpolates Strings
     */ class StringKeyframeTrack extends KeyframeTrack {
      }
      StringKeyframeTrack.prototype.ValueTypeName = "string";
      StringKeyframeTrack.prototype.ValueBufferType = Array;
      StringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
      StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;
      StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;
      /**
     * A Track of vectored keyframe values.
     */ class VectorKeyframeTrack extends KeyframeTrack {
      }
      VectorKeyframeTrack.prototype.ValueTypeName = "vector";
      class AnimationClip {
          constructor(name1, duration1 = -1, tracks1, blendMode1 = NormalAnimationBlendMode){
              this.name = name1;
              this.tracks = tracks1;
              this.duration = duration1;
              this.blendMode = blendMode1;
              this.uuid = generateUUID();
              // this means it should figure out its duration by scanning the tracks
              if (this.duration < 0) this.resetDuration();
          }
          static parse(json1) {
              const tracks1 = [], jsonTracks1 = json1.tracks, frameTime1 = 1.0 / (json1.fps || 1.0);
              for(let i3 = 0, n3 = jsonTracks1.length; i3 !== n3; ++i3)tracks1.push(parseKeyframeTrack(jsonTracks1[i3]).scale(frameTime1));
              const clip1 = new this(json1.name, json1.duration, tracks1, json1.blendMode);
              clip1.uuid = json1.uuid;
              return clip1;
          }
          static toJSON(clip1) {
              const tracks1 = [], clipTracks1 = clip1.tracks;
              const json1 = {
                  "name": clip1.name,
                  "duration": clip1.duration,
                  "tracks": tracks1,
                  "uuid": clip1.uuid,
                  "blendMode": clip1.blendMode
              };
              for(let i3 = 0, n3 = clipTracks1.length; i3 !== n3; ++i3)tracks1.push(KeyframeTrack.toJSON(clipTracks1[i3]));
              return json1;
          }
          static CreateFromMorphTargetSequence(name1, morphTargetSequence1, fps1, noLoop1) {
              const numMorphTargets1 = morphTargetSequence1.length;
              const tracks1 = [];
              for(let i3 = 0; i3 < numMorphTargets1; i3++){
                  let times1 = [];
                  let values1 = [];
                  times1.push((i3 + numMorphTargets1 - 1) % numMorphTargets1, i3, (i3 + 1) % numMorphTargets1);
                  values1.push(0, 1, 0);
                  const order1 = AnimationUtils.getKeyframeOrder(times1);
                  times1 = AnimationUtils.sortedArray(times1, 1, order1);
                  values1 = AnimationUtils.sortedArray(values1, 1, order1);
                  // if there is a key at the first frame, duplicate it as the
                  // last frame as well for perfect loop.
                  if (!noLoop1 && times1[0] === 0) {
                      times1.push(numMorphTargets1);
                      values1.push(values1[0]);
                  }
                  tracks1.push(new NumberKeyframeTrack(".morphTargetInfluences[" + morphTargetSequence1[i3].name + "]", times1, values1).scale(1.0 / fps1));
              }
              return new this(name1, -1, tracks1);
          }
          static findByName(objectOrClipArray1, name1) {
              let clipArray1 = objectOrClipArray1;
              if (!Array.isArray(objectOrClipArray1)) {
                  const o5 = objectOrClipArray1;
                  clipArray1 = o5.geometry && o5.geometry.animations || o5.animations;
              }
              for(let i3 = 0; i3 < clipArray1.length; i3++){
                  if (clipArray1[i3].name === name1) return clipArray1[i3];
              }
              return null;
          }
          static CreateClipsFromMorphTargetSequences(morphTargets1, fps1, noLoop1) {
              const animationToMorphTargets1 = {};
              // tested with https://regex101.com/ on trick sequences
              // such flamingo_flyA_003, flamingo_run1_003, crdeath0059
              const pattern1 = /^([\w-]*?)([\d]+)$/;
              // sort morph target names into animation groups based
              // patterns like Walk_001, Walk_002, Run_001, Run_002
              for(let i3 = 0, il1 = morphTargets1.length; i3 < il1; i3++){
                  const morphTarget1 = morphTargets1[i3];
                  const parts1 = morphTarget1.name.match(pattern1);
                  if (parts1 && parts1.length > 1) {
                      const name1 = parts1[1];
                      let animationMorphTargets1 = animationToMorphTargets1[name1];
                      if (!animationMorphTargets1) animationToMorphTargets1[name1] = animationMorphTargets1 = [];
                      animationMorphTargets1.push(morphTarget1);
                  }
              }
              const clips1 = [];
              for(const name1 in animationToMorphTargets1)clips1.push(this.CreateFromMorphTargetSequence(name1, animationToMorphTargets1[name1], fps1, noLoop1));
              return clips1;
          }
          // parse the animation.hierarchy format
          static parseAnimation(animation1, bones1) {
              if (!animation1) {
                  console.error("THREE.AnimationClip: No animation in JSONLoader data.");
                  return null;
              }
              const addNonemptyTrack1 = function(trackType1, trackName1, animationKeys1, propertyName1, destTracks1) {
                  // only return track if there are actually keys.
                  if (animationKeys1.length !== 0) {
                      const times1 = [];
                      const values1 = [];
                      AnimationUtils.flattenJSON(animationKeys1, times1, values1, propertyName1);
                      // empty keys are filtered out, so check again
                      if (times1.length !== 0) destTracks1.push(new trackType1(trackName1, times1, values1));
                  }
              };
              const tracks1 = [];
              const clipName1 = animation1.name || "default";
              const fps1 = animation1.fps || 30;
              const blendMode1 = animation1.blendMode;
              // automatic length determination in AnimationClip.
              let duration1 = animation1.length || -1;
              const hierarchyTracks1 = animation1.hierarchy || [];
              for(let h1 = 0; h1 < hierarchyTracks1.length; h1++){
                  const animationKeys1 = hierarchyTracks1[h1].keys;
                  // skip empty tracks
                  if (!animationKeys1 || animationKeys1.length === 0) continue;
                  // process morph targets
                  if (animationKeys1[0].morphTargets) {
                      // figure out all morph targets used in this track
                      const morphTargetNames1 = {};
                      let k1;
                      for(k1 = 0; k1 < animationKeys1.length; k1++){
                          if (animationKeys1[k1].morphTargets) for(let m1 = 0; m1 < animationKeys1[k1].morphTargets.length; m1++)morphTargetNames1[animationKeys1[k1].morphTargets[m1]] = -1;
                      }
                      // create a track for each morph target with all zero
                      // morphTargetInfluences except for the keys in which
                      // the morphTarget is named.
                      for(const morphTargetName1 in morphTargetNames1){
                          const times1 = [];
                          const values1 = [];
                          for(let m1 = 0; m1 !== animationKeys1[k1].morphTargets.length; ++m1){
                              const animationKey1 = animationKeys1[k1];
                              times1.push(animationKey1.time);
                              values1.push(animationKey1.morphTarget === morphTargetName1 ? 1 : 0);
                          }
                          tracks1.push(new NumberKeyframeTrack(".morphTargetInfluence[" + morphTargetName1 + "]", times1, values1));
                      }
                      duration1 = morphTargetNames1.length * fps1;
                  } else {
                      // ...assume skeletal animation
                      const boneName1 = ".bones[" + bones1[h1].name + "]";
                      addNonemptyTrack1(VectorKeyframeTrack, boneName1 + ".position", animationKeys1, "pos", tracks1);
                      addNonemptyTrack1(QuaternionKeyframeTrack, boneName1 + ".quaternion", animationKeys1, "rot", tracks1);
                      addNonemptyTrack1(VectorKeyframeTrack, boneName1 + ".scale", animationKeys1, "scl", tracks1);
                  }
              }
              if (tracks1.length === 0) return null;
              const clip1 = new this(clipName1, duration1, tracks1, blendMode1);
              return clip1;
          }
          resetDuration() {
              const tracks1 = this.tracks;
              let duration1 = 0;
              for(let i3 = 0, n3 = tracks1.length; i3 !== n3; ++i3){
                  const track1 = this.tracks[i3];
                  duration1 = Math.max(duration1, track1.times[track1.times.length - 1]);
              }
              this.duration = duration1;
              return this;
          }
          trim() {
              for(let i3 = 0; i3 < this.tracks.length; i3++)this.tracks[i3].trim(0, this.duration);
              return this;
          }
          validate() {
              let valid1 = true;
              for(let i3 = 0; i3 < this.tracks.length; i3++)valid1 = valid1 && this.tracks[i3].validate();
              return valid1;
          }
          optimize() {
              for(let i3 = 0; i3 < this.tracks.length; i3++)this.tracks[i3].optimize();
              return this;
          }
          clone() {
              const tracks1 = [];
              for(let i3 = 0; i3 < this.tracks.length; i3++)tracks1.push(this.tracks[i3].clone());
              return new this.constructor(this.name, this.duration, tracks1, this.blendMode);
          }
          toJSON() {
              return this.constructor.toJSON(this);
          }
      }
      function getTrackTypeForValueTypeName(typeName1) {
          switch(typeName1.toLowerCase()){
              case "scalar":
              case "double":
              case "float":
              case "number":
              case "integer":
                  return NumberKeyframeTrack;
              case "vector":
              case "vector2":
              case "vector3":
              case "vector4":
                  return VectorKeyframeTrack;
              case "color":
                  return ColorKeyframeTrack;
              case "quaternion":
                  return QuaternionKeyframeTrack;
              case "bool":
              case "boolean":
                  return BooleanKeyframeTrack;
              case "string":
                  return StringKeyframeTrack;
          }
          throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + typeName1);
      }
      function parseKeyframeTrack(json1) {
          if (json1.type === undefined) throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
          const trackType1 = getTrackTypeForValueTypeName(json1.type);
          if (json1.times === undefined) {
              const times1 = [], values1 = [];
              AnimationUtils.flattenJSON(json1.keys, times1, values1, "value");
              json1.times = times1;
              json1.values = values1;
          }
          // derived classes can define a static parse method
          if (trackType1.parse !== undefined) return trackType1.parse(json1);
          else // by default, we assume a constructor compatible with the base
          return new trackType1(json1.name, json1.times, json1.values, json1.interpolation);
      }
      const Cache = {
          enabled: false,
          files: {},
          add: function(key1, file1) {
              if (this.enabled === false) return;
              // console.log( 'THREE.Cache', 'Adding key:', key );
              this.files[key1] = file1;
          },
          get: function(key1) {
              if (this.enabled === false) return;
              // console.log( 'THREE.Cache', 'Checking key:', key );
              return this.files[key1];
          },
          remove: function(key1) {
              delete this.files[key1];
          },
          clear: function() {
              this.files = {};
          }
      };
      class LoadingManager {
          constructor(onLoad1, onProgress1, onError1){
              const scope1 = this;
              let isLoading1 = false;
              let itemsLoaded1 = 0;
              let itemsTotal1 = 0;
              let urlModifier1 = undefined;
              const handlers1 = [];
              // Refer to #5689 for the reason why we don't set .onStart
              // in the constructor
              this.onStart = undefined;
              this.onLoad = onLoad1;
              this.onProgress = onProgress1;
              this.onError = onError1;
              this.itemStart = function(url1) {
                  itemsTotal1++;
                  if (isLoading1 === false) {
                      if (scope1.onStart !== undefined) scope1.onStart(url1, itemsLoaded1, itemsTotal1);
                  }
                  isLoading1 = true;
              };
              this.itemEnd = function(url1) {
                  itemsLoaded1++;
                  if (scope1.onProgress !== undefined) scope1.onProgress(url1, itemsLoaded1, itemsTotal1);
                  if (itemsLoaded1 === itemsTotal1) {
                      isLoading1 = false;
                      if (scope1.onLoad !== undefined) scope1.onLoad();
                  }
              };
              this.itemError = function(url1) {
                  if (scope1.onError !== undefined) scope1.onError(url1);
              };
              this.resolveURL = function(url1) {
                  if (urlModifier1) return urlModifier1(url1);
                  return url1;
              };
              this.setURLModifier = function(transform1) {
                  urlModifier1 = transform1;
                  return this;
              };
              this.addHandler = function(regex1, loader1) {
                  handlers1.push(regex1, loader1);
                  return this;
              };
              this.removeHandler = function(regex1) {
                  const index3 = handlers1.indexOf(regex1);
                  if (index3 !== -1) handlers1.splice(index3, 2);
                  return this;
              };
              this.getHandler = function(file1) {
                  for(let i3 = 0, l1 = handlers1.length; i3 < l1; i3 += 2){
                      const regex1 = handlers1[i3];
                      const loader1 = handlers1[i3 + 1];
                      if (regex1.global) regex1.lastIndex = 0; // see #17920
                      if (regex1.test(file1)) return loader1;
                  }
                  return null;
              };
          }
      }
      const DefaultLoadingManager = new LoadingManager();
      class Loader {
          constructor(manager1){
              this.manager = manager1 !== undefined ? manager1 : DefaultLoadingManager;
              this.crossOrigin = "anonymous";
              this.withCredentials = false;
              this.path = "";
              this.resourcePath = "";
              this.requestHeader = {};
          }
          load() {}
          loadAsync(url1, onProgress1) {
              const scope1 = this;
              return new Promise(function(resolve1, reject1) {
                  scope1.load(url1, resolve1, onProgress1, reject1);
              });
          }
          parse() {}
          setCrossOrigin(crossOrigin1) {
              this.crossOrigin = crossOrigin1;
              return this;
          }
          setWithCredentials(value1) {
              this.withCredentials = value1;
              return this;
          }
          setPath(path1) {
              this.path = path1;
              return this;
          }
          setResourcePath(resourcePath1) {
              this.resourcePath = resourcePath1;
              return this;
          }
          setRequestHeader(requestHeader1) {
              this.requestHeader = requestHeader1;
              return this;
          }
      }
      const loading = {};
      class FileLoader extends Loader {
          constructor(manager1){
              super(manager1);
          }
          load(url1, onLoad1, onProgress1, onError1) {
              if (url1 === undefined) url1 = "";
              if (this.path !== undefined) url1 = this.path + url1;
              url1 = this.manager.resolveURL(url1);
              const cached1 = Cache.get(url1);
              if (cached1 !== undefined) {
                  this.manager.itemStart(url1);
                  setTimeout(()=>{
                      if (onLoad1) onLoad1(cached1);
                      this.manager.itemEnd(url1);
                  }, 0);
                  return cached1;
              }
              // Check if request is duplicate
              if (loading[url1] !== undefined) {
                  loading[url1].push({
                      onLoad: onLoad1,
                      onProgress: onProgress1,
                      onError: onError1
                  });
                  return;
              }
              // Initialise array for duplicate requests
              loading[url1] = [];
              loading[url1].push({
                  onLoad: onLoad1,
                  onProgress: onProgress1,
                  onError: onError1
              });
              // create request
              const req1 = new Request(url1, {
                  headers: new Headers(this.requestHeader),
                  credentials: this.withCredentials ? "include" : "same-origin"
              });
              // record states ( avoid data race )
              const mimeType1 = this.mimeType;
              const responseType1 = this.responseType;
              // start the fetch
              fetch(req1).then((response1)=>{
                  if (response1.status === 200 || response1.status === 0) {
                      // Some browsers return HTTP Status 0 when using non-http protocol
                      // e.g. 'file://' or 'data://'. Handle as success.
                      if (response1.status === 0) console.warn("THREE.FileLoader: HTTP Status 0 received.");
                      // Workaround: Checking if response.body === undefined for Alipay browser #23548
                      if (typeof ReadableStream === "undefined" || response1.body === undefined || response1.body.getReader === undefined) return response1;
                      const callbacks1 = loading[url1];
                      const reader1 = response1.body.getReader();
                      const contentLength1 = response1.headers.get("Content-Length");
                      const total1 = contentLength1 ? parseInt(contentLength1) : 0;
                      const lengthComputable1 = total1 !== 0;
                      let loaded1 = 0;
                      // periodically read data into the new stream tracking while download progress
                      const stream1 = new ReadableStream({
                          start (controller1) {
                              readData1();
                              function readData1() {
                                  reader1.read().then(({ done: done1, value: value1 })=>{
                                      if (done1) controller1.close();
                                      else {
                                          loaded1 += value1.byteLength;
                                          const event1 = new ProgressEvent("progress", {
                                              lengthComputable: lengthComputable1,
                                              loaded: loaded1,
                                              total: total1
                                          });
                                          for(let i3 = 0, il1 = callbacks1.length; i3 < il1; i3++){
                                              const callback1 = callbacks1[i3];
                                              if (callback1.onProgress) callback1.onProgress(event1);
                                          }
                                          controller1.enqueue(value1);
                                          readData1();
                                      }
                                  });
                              }
                          }
                      });
                      return new Response(stream1);
                  } else throw Error(`fetch for "${response1.url}" responded with ${response1.status}: ${response1.statusText}`);
              }).then((response1)=>{
                  switch(responseType1){
                      case "arraybuffer":
                          return response1.arrayBuffer();
                      case "blob":
                          return response1.blob();
                      case "document":
                          return response1.text().then((text1)=>{
                              const parser1 = new DOMParser();
                              return parser1.parseFromString(text1, mimeType1);
                          });
                      case "json":
                          return response1.json();
                      default:
                          if (mimeType1 === undefined) return response1.text();
                          else {
                              // sniff encoding
                              const re1 = /charset="?([^;"\s]*)"?/i;
                              const exec1 = re1.exec(mimeType1);
                              const label1 = exec1 && exec1[1] ? exec1[1].toLowerCase() : undefined;
                              const decoder1 = new TextDecoder(label1);
                              return response1.arrayBuffer().then((ab1)=>decoder1.decode(ab1));
                          }
                  }
              }).then((data1)=>{
                  // Add to cache only on HTTP success, so that we do not cache
                  // error response bodies as proper responses to requests.
                  Cache.add(url1, data1);
                  const callbacks1 = loading[url1];
                  delete loading[url1];
                  for(let i3 = 0, il1 = callbacks1.length; i3 < il1; i3++){
                      const callback1 = callbacks1[i3];
                      if (callback1.onLoad) callback1.onLoad(data1);
                  }
              }).catch((err1)=>{
                  // Abort errors and other errors are handled the same
                  const callbacks1 = loading[url1];
                  if (callbacks1 === undefined) {
                      // When onLoad was called and url was deleted in `loading`
                      this.manager.itemError(url1);
                      throw err1;
                  }
                  delete loading[url1];
                  for(let i3 = 0, il1 = callbacks1.length; i3 < il1; i3++){
                      const callback1 = callbacks1[i3];
                      if (callback1.onError) callback1.onError(err1);
                  }
                  this.manager.itemError(url1);
              }).finally(()=>{
                  this.manager.itemEnd(url1);
              });
              this.manager.itemStart(url1);
          }
          setResponseType(value1) {
              this.responseType = value1;
              return this;
          }
          setMimeType(value1) {
              this.mimeType = value1;
              return this;
          }
      }
      class AnimationLoader extends Loader {
          constructor(manager1){
              super(manager1);
          }
          load(url1, onLoad1, onProgress1, onError1) {
              const scope1 = this;
              const loader1 = new FileLoader(this.manager);
              loader1.setPath(this.path);
              loader1.setRequestHeader(this.requestHeader);
              loader1.setWithCredentials(this.withCredentials);
              loader1.load(url1, function(text1) {
                  try {
                      onLoad1(scope1.parse(JSON.parse(text1)));
                  } catch (e1) {
                      if (onError1) onError1(e1);
                      else console.error(e1);
                      scope1.manager.itemError(url1);
                  }
              }, onProgress1, onError1);
          }
          parse(json1) {
              const animations1 = [];
              for(let i3 = 0; i3 < json1.length; i3++){
                  const clip1 = AnimationClip.parse(json1[i3]);
                  animations1.push(clip1);
              }
              return animations1;
          }
      }
      /**
     * Abstract Base class to block based textures loader (dds, pvr, ...)
     *
     * Sub classes have to implement the parse() method which will be used in load().
     */ class CompressedTextureLoader extends Loader {
          constructor(manager1){
              super(manager1);
          }
          load(url1, onLoad1, onProgress1, onError1) {
              const scope1 = this;
              const images1 = [];
              const texture1 = new CompressedTexture();
              const loader1 = new FileLoader(this.manager);
              loader1.setPath(this.path);
              loader1.setResponseType("arraybuffer");
              loader1.setRequestHeader(this.requestHeader);
              loader1.setWithCredentials(scope1.withCredentials);
              let loaded1 = 0;
              function loadTexture1(i3) {
                  loader1.load(url1[i3], function(buffer1) {
                      const texDatas1 = scope1.parse(buffer1, true);
                      images1[i3] = {
                          width: texDatas1.width,
                          height: texDatas1.height,
                          format: texDatas1.format,
                          mipmaps: texDatas1.mipmaps
                      };
                      loaded1 += 1;
                      if (loaded1 === 6) {
                          if (texDatas1.mipmapCount === 1) texture1.minFilter = LinearFilter;
                          texture1.image = images1;
                          texture1.format = texDatas1.format;
                          texture1.needsUpdate = true;
                          if (onLoad1) onLoad1(texture1);
                      }
                  }, onProgress1, onError1);
              }
              if (Array.isArray(url1)) for(let i3 = 0, il1 = url1.length; i3 < il1; ++i3)loadTexture1(i3);
              else // compressed cubemap texture stored in a single DDS file
              loader1.load(url1, function(buffer1) {
                  const texDatas1 = scope1.parse(buffer1, true);
                  if (texDatas1.isCubemap) {
                      const faces1 = texDatas1.mipmaps.length / texDatas1.mipmapCount;
                      for(let f1 = 0; f1 < faces1; f1++){
                          images1[f1] = {
                              mipmaps: []
                          };
                          for(let i3 = 0; i3 < texDatas1.mipmapCount; i3++){
                              images1[f1].mipmaps.push(texDatas1.mipmaps[f1 * texDatas1.mipmapCount + i3]);
                              images1[f1].format = texDatas1.format;
                              images1[f1].width = texDatas1.width;
                              images1[f1].height = texDatas1.height;
                          }
                      }
                      texture1.image = images1;
                  } else {
                      texture1.image.width = texDatas1.width;
                      texture1.image.height = texDatas1.height;
                      texture1.mipmaps = texDatas1.mipmaps;
                  }
                  if (texDatas1.mipmapCount === 1) texture1.minFilter = LinearFilter;
                  texture1.format = texDatas1.format;
                  texture1.needsUpdate = true;
                  if (onLoad1) onLoad1(texture1);
              }, onProgress1, onError1);
              return texture1;
          }
      }
      class ImageLoader extends Loader {
          constructor(manager1){
              super(manager1);
          }
          load(url1, onLoad1, onProgress1, onError1) {
              if (this.path !== undefined) url1 = this.path + url1;
              url1 = this.manager.resolveURL(url1);
              const scope1 = this;
              const cached1 = Cache.get(url1);
              if (cached1 !== undefined) {
                  scope1.manager.itemStart(url1);
                  setTimeout(function() {
                      if (onLoad1) onLoad1(cached1);
                      scope1.manager.itemEnd(url1);
                  }, 0);
                  return cached1;
              }
              const image1 = createElementNS("img");
              function onImageLoad1() {
                  removeEventListeners1();
                  Cache.add(url1, this);
                  if (onLoad1) onLoad1(this);
                  scope1.manager.itemEnd(url1);
              }
              function onImageError1(event1) {
                  removeEventListeners1();
                  if (onError1) onError1(event1);
                  scope1.manager.itemError(url1);
                  scope1.manager.itemEnd(url1);
              }
              function removeEventListeners1() {
                  image1.removeEventListener("load", onImageLoad1, false);
                  image1.removeEventListener("error", onImageError1, false);
              }
              image1.addEventListener("load", onImageLoad1, false);
              image1.addEventListener("error", onImageError1, false);
              if (url1.slice(0, 5) !== "data:") {
                  if (this.crossOrigin !== undefined) image1.crossOrigin = this.crossOrigin;
              }
              scope1.manager.itemStart(url1);
              image1.src = url1;
              return image1;
          }
      }
      class CubeTextureLoader extends Loader {
          constructor(manager1){
              super(manager1);
          }
          load(urls1, onLoad1, onProgress1, onError1) {
              const texture1 = new CubeTexture();
              const loader1 = new ImageLoader(this.manager);
              loader1.setCrossOrigin(this.crossOrigin);
              loader1.setPath(this.path);
              let loaded1 = 0;
              function loadTexture1(i3) {
                  loader1.load(urls1[i3], function(image1) {
                      texture1.images[i3] = image1;
                      loaded1++;
                      if (loaded1 === 6) {
                          texture1.needsUpdate = true;
                          if (onLoad1) onLoad1(texture1);
                      }
                  }, undefined, onError1);
              }
              for(let i3 = 0; i3 < urls1.length; ++i3)loadTexture1(i3);
              return texture1;
          }
      }
      /**
     * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
     *
     * Sub classes have to implement the parse() method which will be used in load().
     */ class DataTextureLoader extends Loader {
          constructor(manager1){
              super(manager1);
          }
          load(url1, onLoad1, onProgress1, onError1) {
              const scope1 = this;
              const texture1 = new DataTexture();
              const loader1 = new FileLoader(this.manager);
              loader1.setResponseType("arraybuffer");
              loader1.setRequestHeader(this.requestHeader);
              loader1.setPath(this.path);
              loader1.setWithCredentials(scope1.withCredentials);
              loader1.load(url1, function(buffer1) {
                  const texData1 = scope1.parse(buffer1);
                  if (!texData1) return;
                  if (texData1.image !== undefined) texture1.image = texData1.image;
                  else if (texData1.data !== undefined) {
                      texture1.image.width = texData1.width;
                      texture1.image.height = texData1.height;
                      texture1.image.data = texData1.data;
                  }
                  texture1.wrapS = texData1.wrapS !== undefined ? texData1.wrapS : ClampToEdgeWrapping;
                  texture1.wrapT = texData1.wrapT !== undefined ? texData1.wrapT : ClampToEdgeWrapping;
                  texture1.magFilter = texData1.magFilter !== undefined ? texData1.magFilter : LinearFilter;
                  texture1.minFilter = texData1.minFilter !== undefined ? texData1.minFilter : LinearFilter;
                  texture1.anisotropy = texData1.anisotropy !== undefined ? texData1.anisotropy : 1;
                  if (texData1.encoding !== undefined) texture1.encoding = texData1.encoding;
                  if (texData1.flipY !== undefined) texture1.flipY = texData1.flipY;
                  if (texData1.format !== undefined) texture1.format = texData1.format;
                  if (texData1.type !== undefined) texture1.type = texData1.type;
                  if (texData1.mipmaps !== undefined) {
                      texture1.mipmaps = texData1.mipmaps;
                      texture1.minFilter = LinearMipmapLinearFilter; // presumably...
                  }
                  if (texData1.mipmapCount === 1) texture1.minFilter = LinearFilter;
                  if (texData1.generateMipmaps !== undefined) texture1.generateMipmaps = texData1.generateMipmaps;
                  texture1.needsUpdate = true;
                  if (onLoad1) onLoad1(texture1, texData1);
              }, onProgress1, onError1);
              return texture1;
          }
      }
      class TextureLoader extends Loader {
          constructor(manager1){
              super(manager1);
          }
          load(url1, onLoad1, onProgress1, onError1) {
              const texture1 = new Texture();
              const loader1 = new ImageLoader(this.manager);
              loader1.setCrossOrigin(this.crossOrigin);
              loader1.setPath(this.path);
              loader1.load(url1, function(image1) {
                  texture1.image = image1;
                  texture1.needsUpdate = true;
                  if (onLoad1 !== undefined) onLoad1(texture1);
              }, onProgress1, onError1);
              return texture1;
          }
      }
      class Light extends Object3D {
          constructor(color3, intensity1 = 1){
              super();
              this.type = "Light";
              this.color = new Color(color3);
              this.intensity = intensity1;
          }
          dispose() {
          // Empty here in base class; some subclasses override.
          }
          copy(source1) {
              super.copy(source1);
              this.color.copy(source1.color);
              this.intensity = source1.intensity;
              return this;
          }
          toJSON(meta1) {
              const data1 = super.toJSON(meta1);
              data1.object.color = this.color.getHex();
              data1.object.intensity = this.intensity;
              if (this.groundColor !== undefined) data1.object.groundColor = this.groundColor.getHex();
              if (this.distance !== undefined) data1.object.distance = this.distance;
              if (this.angle !== undefined) data1.object.angle = this.angle;
              if (this.decay !== undefined) data1.object.decay = this.decay;
              if (this.penumbra !== undefined) data1.object.penumbra = this.penumbra;
              if (this.shadow !== undefined) data1.object.shadow = this.shadow.toJSON();
              return data1;
          }
      }
      Light.prototype.isLight = true;
      class HemisphereLight extends Light {
          constructor(skyColor1, groundColor1, intensity1){
              super(skyColor1, intensity1);
              this.type = "HemisphereLight";
              this.position.copy(Object3D.DefaultUp);
              this.updateMatrix();
              this.groundColor = new Color(groundColor1);
          }
          copy(source1) {
              Light.prototype.copy.call(this, source1);
              this.groundColor.copy(source1.groundColor);
              return this;
          }
      }
      HemisphereLight.prototype.isHemisphereLight = true;
      const _projScreenMatrix$1 = /*@__PURE__*/ new Matrix4();
      const _lightPositionWorld$1 = /*@__PURE__*/ new Vector3();
      const _lookTarget$1 = /*@__PURE__*/ new Vector3();
      class LightShadow {
          constructor(camera1){
              this.camera = camera1;
              this.bias = 0;
              this.normalBias = 0;
              this.radius = 1;
              this.blurSamples = 8;
              this.mapSize = new Vector2(512, 512);
              this.map = null;
              this.mapPass = null;
              this.matrix = new Matrix4();
              this.autoUpdate = true;
              this.needsUpdate = false;
              this._frustum = new Frustum();
              this._frameExtents = new Vector2(1, 1);
              this._viewportCount = 1;
              this._viewports = [
                  new Vector4$1(0, 0, 1, 1)
              ];
          }
          getViewportCount() {
              return this._viewportCount;
          }
          getFrustum() {
              return this._frustum;
          }
          updateMatrices(light1) {
              const shadowCamera1 = this.camera;
              const shadowMatrix1 = this.matrix;
              _lightPositionWorld$1.setFromMatrixPosition(light1.matrixWorld);
              shadowCamera1.position.copy(_lightPositionWorld$1);
              _lookTarget$1.setFromMatrixPosition(light1.target.matrixWorld);
              shadowCamera1.lookAt(_lookTarget$1);
              shadowCamera1.updateMatrixWorld();
              _projScreenMatrix$1.multiplyMatrices(shadowCamera1.projectionMatrix, shadowCamera1.matrixWorldInverse);
              this._frustum.setFromProjectionMatrix(_projScreenMatrix$1);
              shadowMatrix1.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);
              shadowMatrix1.multiply(shadowCamera1.projectionMatrix);
              shadowMatrix1.multiply(shadowCamera1.matrixWorldInverse);
          }
          getViewport(viewportIndex1) {
              return this._viewports[viewportIndex1];
          }
          getFrameExtents() {
              return this._frameExtents;
          }
          dispose() {
              if (this.map) this.map.dispose();
              if (this.mapPass) this.mapPass.dispose();
          }
          copy(source1) {
              this.camera = source1.camera.clone();
              this.bias = source1.bias;
              this.radius = source1.radius;
              this.mapSize.copy(source1.mapSize);
              return this;
          }
          clone() {
              return new this.constructor().copy(this);
          }
          toJSON() {
              const object1 = {};
              if (this.bias !== 0) object1.bias = this.bias;
              if (this.normalBias !== 0) object1.normalBias = this.normalBias;
              if (this.radius !== 1) object1.radius = this.radius;
              if (this.mapSize.x !== 512 || this.mapSize.y !== 512) object1.mapSize = this.mapSize.toArray();
              object1.camera = this.camera.toJSON(false).object;
              delete object1.camera.matrix;
              return object1;
          }
      }
      class SpotLightShadow extends LightShadow {
          constructor(){
              super(new PerspectiveCamera(50, 1, 0.5, 500));
              this.focus = 1;
          }
          updateMatrices(light1) {
              const camera1 = this.camera;
              const fov1 = RAD2DEG * 2 * light1.angle * this.focus;
              const aspect1 = this.mapSize.width / this.mapSize.height;
              const far1 = light1.distance || camera1.far;
              if (fov1 !== camera1.fov || aspect1 !== camera1.aspect || far1 !== camera1.far) {
                  camera1.fov = fov1;
                  camera1.aspect = aspect1;
                  camera1.far = far1;
                  camera1.updateProjectionMatrix();
              }
              super.updateMatrices(light1);
          }
          copy(source1) {
              super.copy(source1);
              this.focus = source1.focus;
              return this;
          }
      }
      SpotLightShadow.prototype.isSpotLightShadow = true;
      class SpotLight extends Light {
          constructor(color3, intensity1, distance1 = 0, angle1 = Math.PI / 3, penumbra1 = 0, decay1 = 1){
              super(color3, intensity1);
              this.type = "SpotLight";
              this.position.copy(Object3D.DefaultUp);
              this.updateMatrix();
              this.target = new Object3D();
              this.distance = distance1;
              this.angle = angle1;
              this.penumbra = penumbra1;
              this.decay = decay1; // for physically correct lights, should be 2.
              this.shadow = new SpotLightShadow();
          }
          get power() {
              // compute the light's luminous power (in lumens) from its intensity (in candela)
              // by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)
              return this.intensity * Math.PI;
          }
          set power(power1) {
              // set the light's intensity (in candela) from the desired luminous power (in lumens)
              this.intensity = power1 / Math.PI;
          }
          dispose() {
              this.shadow.dispose();
          }
          copy(source1) {
              super.copy(source1);
              this.distance = source1.distance;
              this.angle = source1.angle;
              this.penumbra = source1.penumbra;
              this.decay = source1.decay;
              this.target = source1.target.clone();
              this.shadow = source1.shadow.clone();
              return this;
          }
      }
      SpotLight.prototype.isSpotLight = true;
      const _projScreenMatrix = /*@__PURE__*/ new Matrix4();
      const _lightPositionWorld = /*@__PURE__*/ new Vector3();
      const _lookTarget = /*@__PURE__*/ new Vector3();
      class PointLightShadow extends LightShadow {
          constructor(){
              super(new PerspectiveCamera(90, 1, 0.5, 500));
              this._frameExtents = new Vector2(4, 2);
              this._viewportCount = 6;
              this._viewports = [
                  // These viewports map a cube-map onto a 2D texture with the
                  // following orientation:
                  //
                  //  xzXZ
                  //   y Y
                  //
                  // X - Positive x direction
                  // x - Negative x direction
                  // Y - Positive y direction
                  // y - Negative y direction
                  // Z - Positive z direction
                  // z - Negative z direction
                  // positive X
                  new Vector4$1(2, 1, 1, 1),
                  // negative X
                  new Vector4$1(0, 1, 1, 1),
                  // positive Z
                  new Vector4$1(3, 1, 1, 1),
                  // negative Z
                  new Vector4$1(1, 1, 1, 1),
                  // positive Y
                  new Vector4$1(3, 0, 1, 1),
                  // negative Y
                  new Vector4$1(1, 0, 1, 1)
              ];
              this._cubeDirections = [
                  new Vector3(1, 0, 0),
                  new Vector3(-1, 0, 0),
                  new Vector3(0, 0, 1),
                  new Vector3(0, 0, -1),
                  new Vector3(0, 1, 0),
                  new Vector3(0, -1, 0)
              ];
              this._cubeUps = [
                  new Vector3(0, 1, 0),
                  new Vector3(0, 1, 0),
                  new Vector3(0, 1, 0),
                  new Vector3(0, 1, 0),
                  new Vector3(0, 0, 1),
                  new Vector3(0, 0, -1)
              ];
          }
          updateMatrices(light1, viewportIndex1 = 0) {
              const camera1 = this.camera;
              const shadowMatrix1 = this.matrix;
              const far1 = light1.distance || camera1.far;
              if (far1 !== camera1.far) {
                  camera1.far = far1;
                  camera1.updateProjectionMatrix();
              }
              _lightPositionWorld.setFromMatrixPosition(light1.matrixWorld);
              camera1.position.copy(_lightPositionWorld);
              _lookTarget.copy(camera1.position);
              _lookTarget.add(this._cubeDirections[viewportIndex1]);
              camera1.up.copy(this._cubeUps[viewportIndex1]);
              camera1.lookAt(_lookTarget);
              camera1.updateMatrixWorld();
              shadowMatrix1.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z);
              _projScreenMatrix.multiplyMatrices(camera1.projectionMatrix, camera1.matrixWorldInverse);
              this._frustum.setFromProjectionMatrix(_projScreenMatrix);
          }
      }
      PointLightShadow.prototype.isPointLightShadow = true;
      class PointLight extends Light {
          constructor(color3, intensity1, distance1 = 0, decay1 = 1){
              super(color3, intensity1);
              this.type = "PointLight";
              this.distance = distance1;
              this.decay = decay1; // for physically correct lights, should be 2.
              this.shadow = new PointLightShadow();
          }
          get power() {
              // compute the light's luminous power (in lumens) from its intensity (in candela)
              // for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)
              return this.intensity * 4 * Math.PI;
          }
          set power(power1) {
              // set the light's intensity (in candela) from the desired luminous power (in lumens)
              this.intensity = power1 / (4 * Math.PI);
          }
          dispose() {
              this.shadow.dispose();
          }
          copy(source1) {
              super.copy(source1);
              this.distance = source1.distance;
              this.decay = source1.decay;
              this.shadow = source1.shadow.clone();
              return this;
          }
      }
      PointLight.prototype.isPointLight = true;
      class DirectionalLightShadow extends LightShadow {
          constructor(){
              super(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));
          }
      }
      DirectionalLightShadow.prototype.isDirectionalLightShadow = true;
      class DirectionalLight extends Light {
          constructor(color3, intensity1){
              super(color3, intensity1);
              this.type = "DirectionalLight";
              this.position.copy(Object3D.DefaultUp);
              this.updateMatrix();
              this.target = new Object3D();
              this.shadow = new DirectionalLightShadow();
          }
          dispose() {
              this.shadow.dispose();
          }
          copy(source1) {
              super.copy(source1);
              this.target = source1.target.clone();
              this.shadow = source1.shadow.clone();
              return this;
          }
      }
      DirectionalLight.prototype.isDirectionalLight = true;
      class AmbientLight extends Light {
          constructor(color3, intensity1){
              super(color3, intensity1);
              this.type = "AmbientLight";
          }
      }
      AmbientLight.prototype.isAmbientLight = true;
      class RectAreaLight extends Light {
          constructor(color3, intensity1, width1 = 10, height1 = 10){
              super(color3, intensity1);
              this.type = "RectAreaLight";
              this.width = width1;
              this.height = height1;
          }
          get power() {
              // compute the light's luminous power (in lumens) from its intensity (in nits)
              return this.intensity * this.width * this.height * Math.PI;
          }
          set power(power1) {
              // set the light's intensity (in nits) from the desired luminous power (in lumens)
              this.intensity = power1 / (this.width * this.height * Math.PI);
          }
          copy(source1) {
              super.copy(source1);
              this.width = source1.width;
              this.height = source1.height;
              return this;
          }
          toJSON(meta1) {
              const data1 = super.toJSON(meta1);
              data1.object.width = this.width;
              data1.object.height = this.height;
              return data1;
          }
      }
      RectAreaLight.prototype.isRectAreaLight = true;
      /**
     * Primary reference:
     *   https://graphics.stanford.edu/papers/envmap/envmap.pdf
     *
     * Secondary reference:
     *   https://www.ppsloan.org/publications/StupidSH36.pdf
     */ // 3-band SH defined by 9 coefficients
      class SphericalHarmonics3 {
          constructor(){
              this.coefficients = [];
              for(let i3 = 0; i3 < 9; i3++)this.coefficients.push(new Vector3());
          }
          set(coefficients1) {
              for(let i3 = 0; i3 < 9; i3++)this.coefficients[i3].copy(coefficients1[i3]);
              return this;
          }
          zero() {
              for(let i3 = 0; i3 < 9; i3++)this.coefficients[i3].set(0, 0, 0);
              return this;
          }
          // get the radiance in the direction of the normal
          // target is a Vector3
          getAt(normal1, target1) {
              // normal is assumed to be unit length
              const x4 = normal1.x, y3 = normal1.y, z3 = normal1.z;
              const coeff1 = this.coefficients;
              // band 0
              target1.copy(coeff1[0]).multiplyScalar(0.282095);
              // band 1
              target1.addScaledVector(coeff1[1], 0.488603 * y3);
              target1.addScaledVector(coeff1[2], 0.488603 * z3);
              target1.addScaledVector(coeff1[3], 0.488603 * x4);
              // band 2
              target1.addScaledVector(coeff1[4], 1.092548 * (x4 * y3));
              target1.addScaledVector(coeff1[5], 1.092548 * (y3 * z3));
              target1.addScaledVector(coeff1[6], 0.315392 * (3.0 * z3 * z3 - 1.0));
              target1.addScaledVector(coeff1[7], 1.092548 * (x4 * z3));
              target1.addScaledVector(coeff1[8], 0.546274 * (x4 * x4 - y3 * y3));
              return target1;
          }
          // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
          // target is a Vector3
          // https://graphics.stanford.edu/papers/envmap/envmap.pdf
          getIrradianceAt(normal1, target1) {
              // normal is assumed to be unit length
              const x4 = normal1.x, y3 = normal1.y, z3 = normal1.z;
              const coeff1 = this.coefficients;
              // band 0
              target1.copy(coeff1[0]).multiplyScalar(0.886227); // π * 0.282095
              // band 1
              target1.addScaledVector(coeff1[1], 1.023328 * y3); // ( 2 * π / 3 ) * 0.488603
              target1.addScaledVector(coeff1[2], 1.023328 * z3);
              target1.addScaledVector(coeff1[3], 1.023328 * x4);
              // band 2
              target1.addScaledVector(coeff1[4], 0.858086 * x4 * y3); // ( π / 4 ) * 1.092548
              target1.addScaledVector(coeff1[5], 0.858086 * y3 * z3);
              target1.addScaledVector(coeff1[6], 0.743125 * z3 * z3 - 0.247708); // ( π / 4 ) * 0.315392 * 3
              target1.addScaledVector(coeff1[7], 0.858086 * x4 * z3);
              target1.addScaledVector(coeff1[8], 0.429043 * (x4 * x4 - y3 * y3)); // ( π / 4 ) * 0.546274
              return target1;
          }
          add(sh1) {
              for(let i3 = 0; i3 < 9; i3++)this.coefficients[i3].add(sh1.coefficients[i3]);
              return this;
          }
          addScaledSH(sh1, s10) {
              for(let i3 = 0; i3 < 9; i3++)this.coefficients[i3].addScaledVector(sh1.coefficients[i3], s10);
              return this;
          }
          scale(s10) {
              for(let i3 = 0; i3 < 9; i3++)this.coefficients[i3].multiplyScalar(s10);
              return this;
          }
          lerp(sh1, alpha1) {
              for(let i3 = 0; i3 < 9; i3++)this.coefficients[i3].lerp(sh1.coefficients[i3], alpha1);
              return this;
          }
          equals(sh1) {
              for(let i3 = 0; i3 < 9; i3++){
                  if (!this.coefficients[i3].equals(sh1.coefficients[i3])) return false;
              }
              return true;
          }
          copy(sh1) {
              return this.set(sh1.coefficients);
          }
          clone() {
              return new this.constructor().copy(this);
          }
          fromArray(array1, offset2 = 0) {
              const coefficients1 = this.coefficients;
              for(let i3 = 0; i3 < 9; i3++)coefficients1[i3].fromArray(array1, offset2 + i3 * 3);
              return this;
          }
          toArray(array1 = [], offset2 = 0) {
              const coefficients1 = this.coefficients;
              for(let i3 = 0; i3 < 9; i3++)coefficients1[i3].toArray(array1, offset2 + i3 * 3);
              return array1;
          }
          // evaluate the basis functions
          // shBasis is an Array[ 9 ]
          static getBasisAt(normal1, shBasis1) {
              // normal is assumed to be unit length
              const x4 = normal1.x, y3 = normal1.y, z3 = normal1.z;
              // band 0
              shBasis1[0] = 0.282095;
              // band 1
              shBasis1[1] = 0.488603 * y3;
              shBasis1[2] = 0.488603 * z3;
              shBasis1[3] = 0.488603 * x4;
              // band 2
              shBasis1[4] = 1.092548 * x4 * y3;
              shBasis1[5] = 1.092548 * y3 * z3;
              shBasis1[6] = 0.315392 * (3 * z3 * z3 - 1);
              shBasis1[7] = 1.092548 * x4 * z3;
              shBasis1[8] = 0.546274 * (x4 * x4 - y3 * y3);
          }
      }
      SphericalHarmonics3.prototype.isSphericalHarmonics3 = true;
      class LightProbe extends Light {
          constructor(sh1 = new SphericalHarmonics3(), intensity1 = 1){
              super(undefined, intensity1);
              this.sh = sh1;
          }
          copy(source1) {
              super.copy(source1);
              this.sh.copy(source1.sh);
              return this;
          }
          fromJSON(json1) {
              this.intensity = json1.intensity; // TODO: Move this bit to Light.fromJSON();
              this.sh.fromArray(json1.sh);
              return this;
          }
          toJSON(meta1) {
              const data1 = super.toJSON(meta1);
              data1.object.sh = this.sh.toArray();
              return data1;
          }
      }
      LightProbe.prototype.isLightProbe = true;
      class MaterialLoader extends Loader {
          constructor(manager1){
              super(manager1);
              this.textures = {};
          }
          load(url1, onLoad1, onProgress1, onError1) {
              const scope1 = this;
              const loader1 = new FileLoader(scope1.manager);
              loader1.setPath(scope1.path);
              loader1.setRequestHeader(scope1.requestHeader);
              loader1.setWithCredentials(scope1.withCredentials);
              loader1.load(url1, function(text1) {
                  try {
                      onLoad1(scope1.parse(JSON.parse(text1)));
                  } catch (e1) {
                      if (onError1) onError1(e1);
                      else console.error(e1);
                      scope1.manager.itemError(url1);
                  }
              }, onProgress1, onError1);
          }
          parse(json1) {
              const textures1 = this.textures;
              function getTexture1(name1) {
                  if (textures1[name1] === undefined) console.warn("THREE.MaterialLoader: Undefined texture", name1);
                  return textures1[name1];
              }
              const material1 = Material.fromType(json1.type);
              if (json1.uuid !== undefined) material1.uuid = json1.uuid;
              if (json1.name !== undefined) material1.name = json1.name;
              if (json1.color !== undefined && material1.color !== undefined) material1.color.setHex(json1.color);
              if (json1.roughness !== undefined) material1.roughness = json1.roughness;
              if (json1.metalness !== undefined) material1.metalness = json1.metalness;
              if (json1.sheen !== undefined) material1.sheen = json1.sheen;
              if (json1.sheenColor !== undefined) material1.sheenColor = new Color().setHex(json1.sheenColor);
              if (json1.sheenRoughness !== undefined) material1.sheenRoughness = json1.sheenRoughness;
              if (json1.emissive !== undefined && material1.emissive !== undefined) material1.emissive.setHex(json1.emissive);
              if (json1.specular !== undefined && material1.specular !== undefined) material1.specular.setHex(json1.specular);
              if (json1.specularIntensity !== undefined) material1.specularIntensity = json1.specularIntensity;
              if (json1.specularColor !== undefined && material1.specularColor !== undefined) material1.specularColor.setHex(json1.specularColor);
              if (json1.shininess !== undefined) material1.shininess = json1.shininess;
              if (json1.clearcoat !== undefined) material1.clearcoat = json1.clearcoat;
              if (json1.clearcoatRoughness !== undefined) material1.clearcoatRoughness = json1.clearcoatRoughness;
              if (json1.transmission !== undefined) material1.transmission = json1.transmission;
              if (json1.thickness !== undefined) material1.thickness = json1.thickness;
              if (json1.attenuationDistance !== undefined) material1.attenuationDistance = json1.attenuationDistance;
              if (json1.attenuationColor !== undefined && material1.attenuationColor !== undefined) material1.attenuationColor.setHex(json1.attenuationColor);
              if (json1.fog !== undefined) material1.fog = json1.fog;
              if (json1.flatShading !== undefined) material1.flatShading = json1.flatShading;
              if (json1.blending !== undefined) material1.blending = json1.blending;
              if (json1.combine !== undefined) material1.combine = json1.combine;
              if (json1.side !== undefined) material1.side = json1.side;
              if (json1.shadowSide !== undefined) material1.shadowSide = json1.shadowSide;
              if (json1.opacity !== undefined) material1.opacity = json1.opacity;
              if (json1.transparent !== undefined) material1.transparent = json1.transparent;
              if (json1.alphaTest !== undefined) material1.alphaTest = json1.alphaTest;
              if (json1.depthTest !== undefined) material1.depthTest = json1.depthTest;
              if (json1.depthWrite !== undefined) material1.depthWrite = json1.depthWrite;
              if (json1.colorWrite !== undefined) material1.colorWrite = json1.colorWrite;
              if (json1.stencilWrite !== undefined) material1.stencilWrite = json1.stencilWrite;
              if (json1.stencilWriteMask !== undefined) material1.stencilWriteMask = json1.stencilWriteMask;
              if (json1.stencilFunc !== undefined) material1.stencilFunc = json1.stencilFunc;
              if (json1.stencilRef !== undefined) material1.stencilRef = json1.stencilRef;
              if (json1.stencilFuncMask !== undefined) material1.stencilFuncMask = json1.stencilFuncMask;
              if (json1.stencilFail !== undefined) material1.stencilFail = json1.stencilFail;
              if (json1.stencilZFail !== undefined) material1.stencilZFail = json1.stencilZFail;
              if (json1.stencilZPass !== undefined) material1.stencilZPass = json1.stencilZPass;
              if (json1.wireframe !== undefined) material1.wireframe = json1.wireframe;
              if (json1.wireframeLinewidth !== undefined) material1.wireframeLinewidth = json1.wireframeLinewidth;
              if (json1.wireframeLinecap !== undefined) material1.wireframeLinecap = json1.wireframeLinecap;
              if (json1.wireframeLinejoin !== undefined) material1.wireframeLinejoin = json1.wireframeLinejoin;
              if (json1.rotation !== undefined) material1.rotation = json1.rotation;
              if (json1.linewidth !== 1) material1.linewidth = json1.linewidth;
              if (json1.dashSize !== undefined) material1.dashSize = json1.dashSize;
              if (json1.gapSize !== undefined) material1.gapSize = json1.gapSize;
              if (json1.scale !== undefined) material1.scale = json1.scale;
              if (json1.polygonOffset !== undefined) material1.polygonOffset = json1.polygonOffset;
              if (json1.polygonOffsetFactor !== undefined) material1.polygonOffsetFactor = json1.polygonOffsetFactor;
              if (json1.polygonOffsetUnits !== undefined) material1.polygonOffsetUnits = json1.polygonOffsetUnits;
              if (json1.dithering !== undefined) material1.dithering = json1.dithering;
              if (json1.alphaToCoverage !== undefined) material1.alphaToCoverage = json1.alphaToCoverage;
              if (json1.premultipliedAlpha !== undefined) material1.premultipliedAlpha = json1.premultipliedAlpha;
              if (json1.visible !== undefined) material1.visible = json1.visible;
              if (json1.toneMapped !== undefined) material1.toneMapped = json1.toneMapped;
              if (json1.userData !== undefined) material1.userData = json1.userData;
              if (json1.vertexColors !== undefined) {
                  if (typeof json1.vertexColors === "number") material1.vertexColors = json1.vertexColors > 0 ? true : false;
                  else material1.vertexColors = json1.vertexColors;
              }
              // Shader Material
              if (json1.uniforms !== undefined) for(const name1 in json1.uniforms){
                  const uniform1 = json1.uniforms[name1];
                  material1.uniforms[name1] = {};
                  switch(uniform1.type){
                      case "t":
                          material1.uniforms[name1].value = getTexture1(uniform1.value);
                          break;
                      case "c":
                          material1.uniforms[name1].value = new Color().setHex(uniform1.value);
                          break;
                      case "v2":
                          material1.uniforms[name1].value = new Vector2().fromArray(uniform1.value);
                          break;
                      case "v3":
                          material1.uniforms[name1].value = new Vector3().fromArray(uniform1.value);
                          break;
                      case "v4":
                          material1.uniforms[name1].value = new Vector4$1().fromArray(uniform1.value);
                          break;
                      case "m3":
                          material1.uniforms[name1].value = new Matrix3().fromArray(uniform1.value);
                          break;
                      case "m4":
                          material1.uniforms[name1].value = new Matrix4().fromArray(uniform1.value);
                          break;
                      default:
                          material1.uniforms[name1].value = uniform1.value;
                  }
              }
              if (json1.defines !== undefined) material1.defines = json1.defines;
              if (json1.vertexShader !== undefined) material1.vertexShader = json1.vertexShader;
              if (json1.fragmentShader !== undefined) material1.fragmentShader = json1.fragmentShader;
              if (json1.extensions !== undefined) for(const key1 in json1.extensions)material1.extensions[key1] = json1.extensions[key1];
              // Deprecated
              if (json1.shading !== undefined) material1.flatShading = json1.shading === 1; // THREE.FlatShading
              // for PointsMaterial
              if (json1.size !== undefined) material1.size = json1.size;
              if (json1.sizeAttenuation !== undefined) material1.sizeAttenuation = json1.sizeAttenuation;
              // maps
              if (json1.map !== undefined) material1.map = getTexture1(json1.map);
              if (json1.matcap !== undefined) material1.matcap = getTexture1(json1.matcap);
              if (json1.alphaMap !== undefined) material1.alphaMap = getTexture1(json1.alphaMap);
              if (json1.bumpMap !== undefined) material1.bumpMap = getTexture1(json1.bumpMap);
              if (json1.bumpScale !== undefined) material1.bumpScale = json1.bumpScale;
              if (json1.normalMap !== undefined) material1.normalMap = getTexture1(json1.normalMap);
              if (json1.normalMapType !== undefined) material1.normalMapType = json1.normalMapType;
              if (json1.normalScale !== undefined) {
                  let normalScale1 = json1.normalScale;
                  if (Array.isArray(normalScale1) === false) // Blender exporter used to export a scalar. See #7459
                  normalScale1 = [
                      normalScale1,
                      normalScale1
                  ];
                  material1.normalScale = new Vector2().fromArray(normalScale1);
              }
              if (json1.displacementMap !== undefined) material1.displacementMap = getTexture1(json1.displacementMap);
              if (json1.displacementScale !== undefined) material1.displacementScale = json1.displacementScale;
              if (json1.displacementBias !== undefined) material1.displacementBias = json1.displacementBias;
              if (json1.roughnessMap !== undefined) material1.roughnessMap = getTexture1(json1.roughnessMap);
              if (json1.metalnessMap !== undefined) material1.metalnessMap = getTexture1(json1.metalnessMap);
              if (json1.emissiveMap !== undefined) material1.emissiveMap = getTexture1(json1.emissiveMap);
              if (json1.emissiveIntensity !== undefined) material1.emissiveIntensity = json1.emissiveIntensity;
              if (json1.specularMap !== undefined) material1.specularMap = getTexture1(json1.specularMap);
              if (json1.specularIntensityMap !== undefined) material1.specularIntensityMap = getTexture1(json1.specularIntensityMap);
              if (json1.specularColorMap !== undefined) material1.specularColorMap = getTexture1(json1.specularColorMap);
              if (json1.envMap !== undefined) material1.envMap = getTexture1(json1.envMap);
              if (json1.envMapIntensity !== undefined) material1.envMapIntensity = json1.envMapIntensity;
              if (json1.reflectivity !== undefined) material1.reflectivity = json1.reflectivity;
              if (json1.refractionRatio !== undefined) material1.refractionRatio = json1.refractionRatio;
              if (json1.lightMap !== undefined) material1.lightMap = getTexture1(json1.lightMap);
              if (json1.lightMapIntensity !== undefined) material1.lightMapIntensity = json1.lightMapIntensity;
              if (json1.aoMap !== undefined) material1.aoMap = getTexture1(json1.aoMap);
              if (json1.aoMapIntensity !== undefined) material1.aoMapIntensity = json1.aoMapIntensity;
              if (json1.gradientMap !== undefined) material1.gradientMap = getTexture1(json1.gradientMap);
              if (json1.clearcoatMap !== undefined) material1.clearcoatMap = getTexture1(json1.clearcoatMap);
              if (json1.clearcoatRoughnessMap !== undefined) material1.clearcoatRoughnessMap = getTexture1(json1.clearcoatRoughnessMap);
              if (json1.clearcoatNormalMap !== undefined) material1.clearcoatNormalMap = getTexture1(json1.clearcoatNormalMap);
              if (json1.clearcoatNormalScale !== undefined) material1.clearcoatNormalScale = new Vector2().fromArray(json1.clearcoatNormalScale);
              if (json1.transmissionMap !== undefined) material1.transmissionMap = getTexture1(json1.transmissionMap);
              if (json1.thicknessMap !== undefined) material1.thicknessMap = getTexture1(json1.thicknessMap);
              if (json1.sheenColorMap !== undefined) material1.sheenColorMap = getTexture1(json1.sheenColorMap);
              if (json1.sheenRoughnessMap !== undefined) material1.sheenRoughnessMap = getTexture1(json1.sheenRoughnessMap);
              return material1;
          }
          setTextures(value1) {
              this.textures = value1;
              return this;
          }
      }
      class LoaderUtils {
          static decodeText(array1) {
              if (typeof TextDecoder !== "undefined") return new TextDecoder().decode(array1);
              // Avoid the String.fromCharCode.apply(null, array) shortcut, which
              // throws a "maximum call stack size exceeded" error for large arrays.
              let s10 = "";
              for(let i3 = 0, il1 = array1.length; i3 < il1; i3++)// Implicitly assumes little-endian.
              s10 += String.fromCharCode(array1[i3]);
              try {
                  // merges multi-byte utf-8 characters.
                  return decodeURIComponent(escape(s10));
              } catch (e1) {
                  return s10;
              }
          }
          static extractUrlBase(url1) {
              const index3 = url1.lastIndexOf("/");
              if (index3 === -1) return "./";
              return url1.slice(0, index3 + 1);
          }
          static resolveURL(url1, path1) {
              // Invalid URL
              if (typeof url1 !== "string" || url1 === "") return "";
              // Host Relative URL
              if (/^https?:\/\//i.test(path1) && /^\//.test(url1)) path1 = path1.replace(/(^https?:\/\/[^\/]+).*/i, "$1");
              // Absolute URL http://,https://,//
              if (/^(https?:)?\/\//i.test(url1)) return url1;
              // Data URI
              if (/^data:.*,.*$/i.test(url1)) return url1;
              // Blob URL
              if (/^blob:.*$/i.test(url1)) return url1;
              // Relative URL
              return path1 + url1;
          }
      }
      class InstancedBufferGeometry extends BufferGeometry {
          constructor(){
              super();
              this.type = "InstancedBufferGeometry";
              this.instanceCount = Infinity;
          }
          copy(source1) {
              super.copy(source1);
              this.instanceCount = source1.instanceCount;
              return this;
          }
          clone() {
              return new this.constructor().copy(this);
          }
          toJSON() {
              const data1 = super.toJSON(this);
              data1.instanceCount = this.instanceCount;
              data1.isInstancedBufferGeometry = true;
              return data1;
          }
      }
      InstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;
      class BufferGeometryLoader extends Loader {
          constructor(manager1){
              super(manager1);
          }
          load(url1, onLoad1, onProgress1, onError1) {
              const scope1 = this;
              const loader1 = new FileLoader(scope1.manager);
              loader1.setPath(scope1.path);
              loader1.setRequestHeader(scope1.requestHeader);
              loader1.setWithCredentials(scope1.withCredentials);
              loader1.load(url1, function(text1) {
                  try {
                      onLoad1(scope1.parse(JSON.parse(text1)));
                  } catch (e1) {
                      if (onError1) onError1(e1);
                      else console.error(e1);
                      scope1.manager.itemError(url1);
                  }
              }, onProgress1, onError1);
          }
          parse(json1) {
              const interleavedBufferMap1 = {};
              const arrayBufferMap1 = {};
              function getInterleavedBuffer1(json1, uuid1) {
                  if (interleavedBufferMap1[uuid1] !== undefined) return interleavedBufferMap1[uuid1];
                  const interleavedBuffers1 = json1.interleavedBuffers;
                  const interleavedBuffer1 = interleavedBuffers1[uuid1];
                  const buffer1 = getArrayBuffer1(json1, interleavedBuffer1.buffer);
                  const array1 = getTypedArray(interleavedBuffer1.type, buffer1);
                  const ib1 = new InterleavedBuffer(array1, interleavedBuffer1.stride);
                  ib1.uuid = interleavedBuffer1.uuid;
                  interleavedBufferMap1[uuid1] = ib1;
                  return ib1;
              }
              function getArrayBuffer1(json1, uuid1) {
                  if (arrayBufferMap1[uuid1] !== undefined) return arrayBufferMap1[uuid1];
                  const arrayBuffers1 = json1.arrayBuffers;
                  const arrayBuffer1 = arrayBuffers1[uuid1];
                  const ab1 = new Uint32Array(arrayBuffer1).buffer;
                  arrayBufferMap1[uuid1] = ab1;
                  return ab1;
              }
              const geometry1 = json1.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();
              const index3 = json1.data.index;
              if (index3 !== undefined) {
                  const typedArray1 = getTypedArray(index3.type, index3.array);
                  geometry1.setIndex(new BufferAttribute(typedArray1, 1));
              }
              const attributes1 = json1.data.attributes;
              for(const key1 in attributes1){
                  const attribute3 = attributes1[key1];
                  let bufferAttribute1;
                  if (attribute3.isInterleavedBufferAttribute) {
                      const interleavedBuffer1 = getInterleavedBuffer1(json1.data, attribute3.data);
                      bufferAttribute1 = new InterleavedBufferAttribute(interleavedBuffer1, attribute3.itemSize, attribute3.offset, attribute3.normalized);
                  } else {
                      const typedArray1 = getTypedArray(attribute3.type, attribute3.array);
                      const bufferAttributeConstr1 = attribute3.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;
                      bufferAttribute1 = new bufferAttributeConstr1(typedArray1, attribute3.itemSize, attribute3.normalized);
                  }
                  if (attribute3.name !== undefined) bufferAttribute1.name = attribute3.name;
                  if (attribute3.usage !== undefined) bufferAttribute1.setUsage(attribute3.usage);
                  if (attribute3.updateRange !== undefined) {
                      bufferAttribute1.updateRange.offset = attribute3.updateRange.offset;
                      bufferAttribute1.updateRange.count = attribute3.updateRange.count;
                  }
                  geometry1.setAttribute(key1, bufferAttribute1);
              }
              const morphAttributes1 = json1.data.morphAttributes;
              if (morphAttributes1) for(const key1 in morphAttributes1){
                  const attributeArray3 = morphAttributes1[key1];
                  const array1 = [];
                  for(let i3 = 0, il1 = attributeArray3.length; i3 < il1; i3++){
                      const attribute3 = attributeArray3[i3];
                      let bufferAttribute1;
                      if (attribute3.isInterleavedBufferAttribute) {
                          const interleavedBuffer1 = getInterleavedBuffer1(json1.data, attribute3.data);
                          bufferAttribute1 = new InterleavedBufferAttribute(interleavedBuffer1, attribute3.itemSize, attribute3.offset, attribute3.normalized);
                      } else {
                          const typedArray1 = getTypedArray(attribute3.type, attribute3.array);
                          bufferAttribute1 = new BufferAttribute(typedArray1, attribute3.itemSize, attribute3.normalized);
                      }
                      if (attribute3.name !== undefined) bufferAttribute1.name = attribute3.name;
                      array1.push(bufferAttribute1);
                  }
                  geometry1.morphAttributes[key1] = array1;
              }
              const morphTargetsRelative1 = json1.data.morphTargetsRelative;
              if (morphTargetsRelative1) geometry1.morphTargetsRelative = true;
              const groups1 = json1.data.groups || json1.data.drawcalls || json1.data.offsets;
              if (groups1 !== undefined) for(let i3 = 0, n3 = groups1.length; i3 !== n3; ++i3){
                  const group1 = groups1[i3];
                  geometry1.addGroup(group1.start, group1.count, group1.materialIndex);
              }
              const boundingSphere1 = json1.data.boundingSphere;
              if (boundingSphere1 !== undefined) {
                  const center1 = new Vector3();
                  if (boundingSphere1.center !== undefined) center1.fromArray(boundingSphere1.center);
                  geometry1.boundingSphere = new Sphere(center1, boundingSphere1.radius);
              }
              if (json1.name) geometry1.name = json1.name;
              if (json1.userData) geometry1.userData = json1.userData;
              return geometry1;
          }
      }
      class ObjectLoader extends Loader {
          constructor(manager1){
              super(manager1);
          }
          load(url1, onLoad1, onProgress1, onError1) {
              const scope1 = this;
              const path1 = this.path === "" ? LoaderUtils.extractUrlBase(url1) : this.path;
              this.resourcePath = this.resourcePath || path1;
              const loader1 = new FileLoader(this.manager);
              loader1.setPath(this.path);
              loader1.setRequestHeader(this.requestHeader);
              loader1.setWithCredentials(this.withCredentials);
              loader1.load(url1, function(text1) {
                  let json1 = null;
                  try {
                      json1 = JSON.parse(text1);
                  } catch (error1) {
                      if (onError1 !== undefined) onError1(error1);
                      console.error("THREE:ObjectLoader: Can't parse " + url1 + ".", error1.message);
                      return;
                  }
                  const metadata1 = json1.metadata;
                  if (metadata1 === undefined || metadata1.type === undefined || metadata1.type.toLowerCase() === "geometry") {
                      console.error("THREE.ObjectLoader: Can't load " + url1);
                      return;
                  }
                  scope1.parse(json1, onLoad1);
              }, onProgress1, onError1);
          }
          async loadAsync(url1, onProgress1) {
              const scope1 = this;
              const path1 = this.path === "" ? LoaderUtils.extractUrlBase(url1) : this.path;
              this.resourcePath = this.resourcePath || path1;
              const loader1 = new FileLoader(this.manager);
              loader1.setPath(this.path);
              loader1.setRequestHeader(this.requestHeader);
              loader1.setWithCredentials(this.withCredentials);
              const text1 = await loader1.loadAsync(url1, onProgress1);
              const json1 = JSON.parse(text1);
              const metadata1 = json1.metadata;
              if (metadata1 === undefined || metadata1.type === undefined || metadata1.type.toLowerCase() === "geometry") throw new Error("THREE.ObjectLoader: Can't load " + url1);
              return await scope1.parseAsync(json1);
          }
          parse(json1, onLoad1) {
              const animations1 = this.parseAnimations(json1.animations);
              const shapes1 = this.parseShapes(json1.shapes);
              const geometries1 = this.parseGeometries(json1.geometries, shapes1);
              const images1 = this.parseImages(json1.images, function() {
                  if (onLoad1 !== undefined) onLoad1(object1);
              });
              const textures1 = this.parseTextures(json1.textures, images1);
              const materials1 = this.parseMaterials(json1.materials, textures1);
              const object1 = this.parseObject(json1.object, geometries1, materials1, textures1, animations1);
              const skeletons1 = this.parseSkeletons(json1.skeletons, object1);
              this.bindSkeletons(object1, skeletons1);
              //
              if (onLoad1 !== undefined) {
                  let hasImages1 = false;
                  for(const uuid1 in images1)if (images1[uuid1] instanceof HTMLImageElement) {
                      hasImages1 = true;
                      break;
                  }
                  if (hasImages1 === false) onLoad1(object1);
              }
              return object1;
          }
          async parseAsync(json1) {
              const animations1 = this.parseAnimations(json1.animations);
              const shapes1 = this.parseShapes(json1.shapes);
              const geometries1 = this.parseGeometries(json1.geometries, shapes1);
              const images1 = await this.parseImagesAsync(json1.images);
              const textures1 = this.parseTextures(json1.textures, images1);
              const materials1 = this.parseMaterials(json1.materials, textures1);
              const object1 = this.parseObject(json1.object, geometries1, materials1, textures1, animations1);
              const skeletons1 = this.parseSkeletons(json1.skeletons, object1);
              this.bindSkeletons(object1, skeletons1);
              return object1;
          }
          parseShapes(json1) {
              const shapes1 = {};
              if (json1 !== undefined) for(let i3 = 0, l1 = json1.length; i3 < l1; i3++){
                  const shape1 = new Shape().fromJSON(json1[i3]);
                  shapes1[shape1.uuid] = shape1;
              }
              return shapes1;
          }
          parseSkeletons(json1, object1) {
              const skeletons1 = {};
              const bones1 = {};
              // generate bone lookup table
              object1.traverse(function(child1) {
                  if (child1.isBone) bones1[child1.uuid] = child1;
              });
              // create skeletons
              if (json1 !== undefined) for(let i3 = 0, l1 = json1.length; i3 < l1; i3++){
                  const skeleton1 = new Skeleton().fromJSON(json1[i3], bones1);
                  skeletons1[skeleton1.uuid] = skeleton1;
              }
              return skeletons1;
          }
          parseGeometries(json1, shapes1) {
              const geometries1 = {};
              if (json1 !== undefined) {
                  const bufferGeometryLoader1 = new BufferGeometryLoader();
                  for(let i3 = 0, l1 = json1.length; i3 < l1; i3++){
                      let geometry1;
                      const data1 = json1[i3];
                      switch(data1.type){
                          case "BufferGeometry":
                          case "InstancedBufferGeometry":
                              geometry1 = bufferGeometryLoader1.parse(data1);
                              break;
                          case "Geometry":
                              console.error("THREE.ObjectLoader: The legacy Geometry type is no longer supported.");
                              break;
                          default:
                              if (data1.type in Geometries) geometry1 = Geometries[data1.type].fromJSON(data1, shapes1);
                              else console.warn(`THREE.ObjectLoader: Unsupported geometry type "${data1.type}"`);
                      }
                      geometry1.uuid = data1.uuid;
                      if (data1.name !== undefined) geometry1.name = data1.name;
                      if (geometry1.isBufferGeometry === true && data1.userData !== undefined) geometry1.userData = data1.userData;
                      geometries1[data1.uuid] = geometry1;
                  }
              }
              return geometries1;
          }
          parseMaterials(json1, textures1) {
              const cache1 = {}; // MultiMaterial
              const materials1 = {};
              if (json1 !== undefined) {
                  const loader1 = new MaterialLoader();
                  loader1.setTextures(textures1);
                  for(let i3 = 0, l1 = json1.length; i3 < l1; i3++){
                      const data1 = json1[i3];
                      if (data1.type === "MultiMaterial") {
                          // Deprecated
                          const array1 = [];
                          for(let j1 = 0; j1 < data1.materials.length; j1++){
                              const material1 = data1.materials[j1];
                              if (cache1[material1.uuid] === undefined) cache1[material1.uuid] = loader1.parse(material1);
                              array1.push(cache1[material1.uuid]);
                          }
                          materials1[data1.uuid] = array1;
                      } else {
                          if (cache1[data1.uuid] === undefined) cache1[data1.uuid] = loader1.parse(data1);
                          materials1[data1.uuid] = cache1[data1.uuid];
                      }
                  }
              }
              return materials1;
          }
          parseAnimations(json1) {
              const animations1 = {};
              if (json1 !== undefined) for(let i3 = 0; i3 < json1.length; i3++){
                  const data1 = json1[i3];
                  const clip1 = AnimationClip.parse(data1);
                  animations1[clip1.uuid] = clip1;
              }
              return animations1;
          }
          parseImages(json1, onLoad1) {
              const scope1 = this;
              const images1 = {};
              let loader1;
              function loadImage1(url1) {
                  scope1.manager.itemStart(url1);
                  return loader1.load(url1, function() {
                      scope1.manager.itemEnd(url1);
                  }, undefined, function() {
                      scope1.manager.itemError(url1);
                      scope1.manager.itemEnd(url1);
                  });
              }
              function deserializeImage1(image1) {
                  if (typeof image1 === "string") {
                      const url1 = image1;
                      const path1 = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(url1) ? url1 : scope1.resourcePath + url1;
                      return loadImage1(path1);
                  } else {
                      if (image1.data) return {
                          data: getTypedArray(image1.type, image1.data),
                          width: image1.width,
                          height: image1.height
                      };
                      else return null;
                  }
              }
              if (json1 !== undefined && json1.length > 0) {
                  const manager1 = new LoadingManager(onLoad1);
                  loader1 = new ImageLoader(manager1);
                  loader1.setCrossOrigin(this.crossOrigin);
                  for(let i3 = 0, il1 = json1.length; i3 < il1; i3++){
                      const image1 = json1[i3];
                      const url1 = image1.url;
                      if (Array.isArray(url1)) {
                          // load array of images e.g CubeTexture
                          const imageArray1 = [];
                          for(let j1 = 0, jl1 = url1.length; j1 < jl1; j1++){
                              const currentUrl1 = url1[j1];
                              const deserializedImage1 = deserializeImage1(currentUrl1);
                              if (deserializedImage1 !== null) {
                                  if (deserializedImage1 instanceof HTMLImageElement) imageArray1.push(deserializedImage1);
                                  else // special case: handle array of data textures for cube textures
                                  imageArray1.push(new DataTexture(deserializedImage1.data, deserializedImage1.width, deserializedImage1.height));
                              }
                          }
                          images1[image1.uuid] = new Source(imageArray1);
                      } else {
                          // load single image
                          const deserializedImage1 = deserializeImage1(image1.url);
                          images1[image1.uuid] = new Source(deserializedImage1);
                      }
                  }
              }
              return images1;
          }
          async parseImagesAsync(json1) {
              const scope1 = this;
              const images1 = {};
              let loader1;
              async function deserializeImage1(image1) {
                  if (typeof image1 === "string") {
                      const url1 = image1;
                      const path1 = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(url1) ? url1 : scope1.resourcePath + url1;
                      return await loader1.loadAsync(path1);
                  } else {
                      if (image1.data) return {
                          data: getTypedArray(image1.type, image1.data),
                          width: image1.width,
                          height: image1.height
                      };
                      else return null;
                  }
              }
              if (json1 !== undefined && json1.length > 0) {
                  loader1 = new ImageLoader(this.manager);
                  loader1.setCrossOrigin(this.crossOrigin);
                  for(let i3 = 0, il1 = json1.length; i3 < il1; i3++){
                      const image1 = json1[i3];
                      const url1 = image1.url;
                      if (Array.isArray(url1)) {
                          // load array of images e.g CubeTexture
                          const imageArray1 = [];
                          for(let j1 = 0, jl1 = url1.length; j1 < jl1; j1++){
                              const currentUrl1 = url1[j1];
                              const deserializedImage1 = await deserializeImage1(currentUrl1);
                              if (deserializedImage1 !== null) {
                                  if (deserializedImage1 instanceof HTMLImageElement) imageArray1.push(deserializedImage1);
                                  else // special case: handle array of data textures for cube textures
                                  imageArray1.push(new DataTexture(deserializedImage1.data, deserializedImage1.width, deserializedImage1.height));
                              }
                          }
                          images1[image1.uuid] = new Source(imageArray1);
                      } else {
                          // load single image
                          const deserializedImage1 = await deserializeImage1(image1.url);
                          images1[image1.uuid] = new Source(deserializedImage1);
                      }
                  }
              }
              return images1;
          }
          parseTextures(json1, images1) {
              function parseConstant1(value1, type1) {
                  if (typeof value1 === "number") return value1;
                  console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", value1);
                  return type1[value1];
              }
              const textures1 = {};
              if (json1 !== undefined) for(let i3 = 0, l1 = json1.length; i3 < l1; i3++){
                  const data1 = json1[i3];
                  if (data1.image === undefined) console.warn('THREE.ObjectLoader: No "image" specified for', data1.uuid);
                  if (images1[data1.image] === undefined) console.warn("THREE.ObjectLoader: Undefined image", data1.image);
                  const source1 = images1[data1.image];
                  const image1 = source1.data;
                  let texture1;
                  if (Array.isArray(image1)) {
                      texture1 = new CubeTexture();
                      if (image1.length === 6) texture1.needsUpdate = true;
                  } else {
                      if (image1 && image1.data) texture1 = new DataTexture();
                      else texture1 = new Texture();
                      if (image1) texture1.needsUpdate = true; // textures can have undefined image data
                  }
                  texture1.source = source1;
                  texture1.uuid = data1.uuid;
                  if (data1.name !== undefined) texture1.name = data1.name;
                  if (data1.mapping !== undefined) texture1.mapping = parseConstant1(data1.mapping, TEXTURE_MAPPING);
                  if (data1.offset !== undefined) texture1.offset.fromArray(data1.offset);
                  if (data1.repeat !== undefined) texture1.repeat.fromArray(data1.repeat);
                  if (data1.center !== undefined) texture1.center.fromArray(data1.center);
                  if (data1.rotation !== undefined) texture1.rotation = data1.rotation;
                  if (data1.wrap !== undefined) {
                      texture1.wrapS = parseConstant1(data1.wrap[0], TEXTURE_WRAPPING);
                      texture1.wrapT = parseConstant1(data1.wrap[1], TEXTURE_WRAPPING);
                  }
                  if (data1.format !== undefined) texture1.format = data1.format;
                  if (data1.type !== undefined) texture1.type = data1.type;
                  if (data1.encoding !== undefined) texture1.encoding = data1.encoding;
                  if (data1.minFilter !== undefined) texture1.minFilter = parseConstant1(data1.minFilter, TEXTURE_FILTER);
                  if (data1.magFilter !== undefined) texture1.magFilter = parseConstant1(data1.magFilter, TEXTURE_FILTER);
                  if (data1.anisotropy !== undefined) texture1.anisotropy = data1.anisotropy;
                  if (data1.flipY !== undefined) texture1.flipY = data1.flipY;
                  if (data1.premultiplyAlpha !== undefined) texture1.premultiplyAlpha = data1.premultiplyAlpha;
                  if (data1.unpackAlignment !== undefined) texture1.unpackAlignment = data1.unpackAlignment;
                  if (data1.userData !== undefined) texture1.userData = data1.userData;
                  textures1[data1.uuid] = texture1;
              }
              return textures1;
          }
          parseObject(data1, geometries1, materials1, textures1, animations1) {
              let object1;
              function getGeometry1(name1) {
                  if (geometries1[name1] === undefined) console.warn("THREE.ObjectLoader: Undefined geometry", name1);
                  return geometries1[name1];
              }
              function getMaterial1(name1) {
                  if (name1 === undefined) return undefined;
                  if (Array.isArray(name1)) {
                      const array1 = [];
                      for(let i3 = 0, l1 = name1.length; i3 < l1; i3++){
                          const uuid1 = name1[i3];
                          if (materials1[uuid1] === undefined) console.warn("THREE.ObjectLoader: Undefined material", uuid1);
                          array1.push(materials1[uuid1]);
                      }
                      return array1;
                  }
                  if (materials1[name1] === undefined) console.warn("THREE.ObjectLoader: Undefined material", name1);
                  return materials1[name1];
              }
              function getTexture1(uuid1) {
                  if (textures1[uuid1] === undefined) console.warn("THREE.ObjectLoader: Undefined texture", uuid1);
                  return textures1[uuid1];
              }
              let geometry1, material1;
              switch(data1.type){
                  case "Scene":
                      object1 = new Scene();
                      if (data1.background !== undefined) {
                          if (Number.isInteger(data1.background)) object1.background = new Color(data1.background);
                          else object1.background = getTexture1(data1.background);
                      }
                      if (data1.environment !== undefined) object1.environment = getTexture1(data1.environment);
                      if (data1.fog !== undefined) {
                          if (data1.fog.type === "Fog") object1.fog = new Fog(data1.fog.color, data1.fog.near, data1.fog.far);
                          else if (data1.fog.type === "FogExp2") object1.fog = new FogExp2(data1.fog.color, data1.fog.density);
                      }
                      break;
                  case "PerspectiveCamera":
                      object1 = new PerspectiveCamera(data1.fov, data1.aspect, data1.near, data1.far);
                      if (data1.focus !== undefined) object1.focus = data1.focus;
                      if (data1.zoom !== undefined) object1.zoom = data1.zoom;
                      if (data1.filmGauge !== undefined) object1.filmGauge = data1.filmGauge;
                      if (data1.filmOffset !== undefined) object1.filmOffset = data1.filmOffset;
                      if (data1.view !== undefined) object1.view = Object.assign({}, data1.view);
                      break;
                  case "OrthographicCamera":
                      object1 = new OrthographicCamera(data1.left, data1.right, data1.top, data1.bottom, data1.near, data1.far);
                      if (data1.zoom !== undefined) object1.zoom = data1.zoom;
                      if (data1.view !== undefined) object1.view = Object.assign({}, data1.view);
                      break;
                  case "AmbientLight":
                      object1 = new AmbientLight(data1.color, data1.intensity);
                      break;
                  case "DirectionalLight":
                      object1 = new DirectionalLight(data1.color, data1.intensity);
                      break;
                  case "PointLight":
                      object1 = new PointLight(data1.color, data1.intensity, data1.distance, data1.decay);
                      break;
                  case "RectAreaLight":
                      object1 = new RectAreaLight(data1.color, data1.intensity, data1.width, data1.height);
                      break;
                  case "SpotLight":
                      object1 = new SpotLight(data1.color, data1.intensity, data1.distance, data1.angle, data1.penumbra, data1.decay);
                      break;
                  case "HemisphereLight":
                      object1 = new HemisphereLight(data1.color, data1.groundColor, data1.intensity);
                      break;
                  case "LightProbe":
                      object1 = new LightProbe().fromJSON(data1);
                      break;
                  case "SkinnedMesh":
                      geometry1 = getGeometry1(data1.geometry);
                      material1 = getMaterial1(data1.material);
                      object1 = new SkinnedMesh(geometry1, material1);
                      if (data1.bindMode !== undefined) object1.bindMode = data1.bindMode;
                      if (data1.bindMatrix !== undefined) object1.bindMatrix.fromArray(data1.bindMatrix);
                      if (data1.skeleton !== undefined) object1.skeleton = data1.skeleton;
                      break;
                  case "Mesh":
                      geometry1 = getGeometry1(data1.geometry);
                      material1 = getMaterial1(data1.material);
                      object1 = new Mesh(geometry1, material1);
                      break;
                  case "InstancedMesh":
                      geometry1 = getGeometry1(data1.geometry);
                      material1 = getMaterial1(data1.material);
                      const count1 = data1.count;
                      const instanceMatrix1 = data1.instanceMatrix;
                      const instanceColor1 = data1.instanceColor;
                      object1 = new InstancedMesh(geometry1, material1, count1);
                      object1.instanceMatrix = new InstancedBufferAttribute(new Float32Array(instanceMatrix1.array), 16);
                      if (instanceColor1 !== undefined) object1.instanceColor = new InstancedBufferAttribute(new Float32Array(instanceColor1.array), instanceColor1.itemSize);
                      break;
                  case "LOD":
                      object1 = new LOD();
                      break;
                  case "Line":
                      object1 = new Line(getGeometry1(data1.geometry), getMaterial1(data1.material));
                      break;
                  case "LineLoop":
                      object1 = new LineLoop(getGeometry1(data1.geometry), getMaterial1(data1.material));
                      break;
                  case "LineSegments":
                      object1 = new LineSegments(getGeometry1(data1.geometry), getMaterial1(data1.material));
                      break;
                  case "PointCloud":
                  case "Points":
                      object1 = new Points(getGeometry1(data1.geometry), getMaterial1(data1.material));
                      break;
                  case "Sprite":
                      object1 = new Sprite(getMaterial1(data1.material));
                      break;
                  case "Group":
                      object1 = new Group();
                      break;
                  case "Bone":
                      object1 = new Bone();
                      break;
                  default:
                      object1 = new Object3D();
              }
              object1.uuid = data1.uuid;
              if (data1.name !== undefined) object1.name = data1.name;
              if (data1.matrix !== undefined) {
                  object1.matrix.fromArray(data1.matrix);
                  if (data1.matrixAutoUpdate !== undefined) object1.matrixAutoUpdate = data1.matrixAutoUpdate;
                  if (object1.matrixAutoUpdate) object1.matrix.decompose(object1.position, object1.quaternion, object1.scale);
              } else {
                  if (data1.position !== undefined) object1.position.fromArray(data1.position);
                  if (data1.rotation !== undefined) object1.rotation.fromArray(data1.rotation);
                  if (data1.quaternion !== undefined) object1.quaternion.fromArray(data1.quaternion);
                  if (data1.scale !== undefined) object1.scale.fromArray(data1.scale);
              }
              if (data1.castShadow !== undefined) object1.castShadow = data1.castShadow;
              if (data1.receiveShadow !== undefined) object1.receiveShadow = data1.receiveShadow;
              if (data1.shadow) {
                  if (data1.shadow.bias !== undefined) object1.shadow.bias = data1.shadow.bias;
                  if (data1.shadow.normalBias !== undefined) object1.shadow.normalBias = data1.shadow.normalBias;
                  if (data1.shadow.radius !== undefined) object1.shadow.radius = data1.shadow.radius;
                  if (data1.shadow.mapSize !== undefined) object1.shadow.mapSize.fromArray(data1.shadow.mapSize);
                  if (data1.shadow.camera !== undefined) object1.shadow.camera = this.parseObject(data1.shadow.camera);
              }
              if (data1.visible !== undefined) object1.visible = data1.visible;
              if (data1.frustumCulled !== undefined) object1.frustumCulled = data1.frustumCulled;
              if (data1.renderOrder !== undefined) object1.renderOrder = data1.renderOrder;
              if (data1.userData !== undefined) object1.userData = data1.userData;
              if (data1.layers !== undefined) object1.layers.mask = data1.layers;
              if (data1.children !== undefined) {
                  const children1 = data1.children;
                  for(let i3 = 0; i3 < children1.length; i3++)object1.add(this.parseObject(children1[i3], geometries1, materials1, textures1, animations1));
              }
              if (data1.animations !== undefined) {
                  const objectAnimations1 = data1.animations;
                  for(let i3 = 0; i3 < objectAnimations1.length; i3++){
                      const uuid1 = objectAnimations1[i3];
                      object1.animations.push(animations1[uuid1]);
                  }
              }
              if (data1.type === "LOD") {
                  if (data1.autoUpdate !== undefined) object1.autoUpdate = data1.autoUpdate;
                  const levels1 = data1.levels;
                  for(let l1 = 0; l1 < levels1.length; l1++){
                      const level1 = levels1[l1];
                      const child1 = object1.getObjectByProperty("uuid", level1.object);
                      if (child1 !== undefined) object1.addLevel(child1, level1.distance);
                  }
              }
              return object1;
          }
          bindSkeletons(object1, skeletons1) {
              if (Object.keys(skeletons1).length === 0) return;
              object1.traverse(function(child1) {
                  if (child1.isSkinnedMesh === true && child1.skeleton !== undefined) {
                      const skeleton1 = skeletons1[child1.skeleton];
                      if (skeleton1 === undefined) console.warn("THREE.ObjectLoader: No skeleton found with UUID:", child1.skeleton);
                      else child1.bind(skeleton1, child1.bindMatrix);
                  }
              });
          }
          /* DEPRECATED */ setTexturePath(value1) {
              console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().");
              return this.setResourcePath(value1);
          }
      }
      const TEXTURE_MAPPING = {
          UVMapping: UVMapping,
          CubeReflectionMapping: CubeReflectionMapping,
          CubeRefractionMapping: CubeRefractionMapping,
          EquirectangularReflectionMapping: EquirectangularReflectionMapping,
          EquirectangularRefractionMapping: EquirectangularRefractionMapping,
          CubeUVReflectionMapping: CubeUVReflectionMapping,
          CubeUVRefractionMapping: CubeUVRefractionMapping
      };
      const TEXTURE_WRAPPING = {
          RepeatWrapping: RepeatWrapping,
          ClampToEdgeWrapping: ClampToEdgeWrapping,
          MirroredRepeatWrapping: MirroredRepeatWrapping
      };
      const TEXTURE_FILTER = {
          NearestFilter: NearestFilter,
          NearestMipmapNearestFilter: NearestMipmapNearestFilter,
          NearestMipmapLinearFilter: NearestMipmapLinearFilter,
          LinearFilter: LinearFilter,
          LinearMipmapNearestFilter: LinearMipmapNearestFilter,
          LinearMipmapLinearFilter: LinearMipmapLinearFilter
      };
      class ImageBitmapLoader extends Loader {
          constructor(manager1){
              super(manager1);
              if (typeof createImageBitmap === "undefined") console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.");
              if (typeof fetch === "undefined") console.warn("THREE.ImageBitmapLoader: fetch() not supported.");
              this.options = {
                  premultiplyAlpha: "none"
              };
          }
          setOptions(options1) {
              this.options = options1;
              return this;
          }
          load(url1, onLoad1, onProgress1, onError1) {
              if (url1 === undefined) url1 = "";
              if (this.path !== undefined) url1 = this.path + url1;
              url1 = this.manager.resolveURL(url1);
              const scope1 = this;
              const cached1 = Cache.get(url1);
              if (cached1 !== undefined) {
                  scope1.manager.itemStart(url1);
                  setTimeout(function() {
                      if (onLoad1) onLoad1(cached1);
                      scope1.manager.itemEnd(url1);
                  }, 0);
                  return cached1;
              }
              const fetchOptions1 = {};
              fetchOptions1.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include";
              fetchOptions1.headers = this.requestHeader;
              fetch(url1, fetchOptions1).then(function(res1) {
                  return res1.blob();
              }).then(function(blob1) {
                  return createImageBitmap(blob1, Object.assign(scope1.options, {
                      colorSpaceConversion: "none"
                  }));
              }).then(function(imageBitmap1) {
                  Cache.add(url1, imageBitmap1);
                  if (onLoad1) onLoad1(imageBitmap1);
                  scope1.manager.itemEnd(url1);
              }).catch(function(e1) {
                  if (onError1) onError1(e1);
                  scope1.manager.itemError(url1);
                  scope1.manager.itemEnd(url1);
              });
              scope1.manager.itemStart(url1);
          }
      }
      ImageBitmapLoader.prototype.isImageBitmapLoader = true;
      let _context;
      const AudioContext = {
          getContext: function() {
              if (_context === undefined) _context = new (window.AudioContext || window.webkitAudioContext)();
              return _context;
          },
          setContext: function(value1) {
              _context = value1;
          }
      };
      class AudioLoader extends Loader {
          constructor(manager1){
              super(manager1);
          }
          load(url1, onLoad1, onProgress1, onError1) {
              const scope1 = this;
              const loader1 = new FileLoader(this.manager);
              loader1.setResponseType("arraybuffer");
              loader1.setPath(this.path);
              loader1.setRequestHeader(this.requestHeader);
              loader1.setWithCredentials(this.withCredentials);
              loader1.load(url1, function(buffer1) {
                  try {
                      // Create a copy of the buffer. The `decodeAudioData` method
                      // detaches the buffer when complete, preventing reuse.
                      const bufferCopy1 = buffer1.slice(0);
                      const context1 = AudioContext.getContext();
                      context1.decodeAudioData(bufferCopy1, function(audioBuffer1) {
                          onLoad1(audioBuffer1);
                      });
                  } catch (e1) {
                      if (onError1) onError1(e1);
                      else console.error(e1);
                      scope1.manager.itemError(url1);
                  }
              }, onProgress1, onError1);
          }
      }
      class HemisphereLightProbe extends LightProbe {
          constructor(skyColor1, groundColor1, intensity1 = 1){
              super(undefined, intensity1);
              const color11 = new Color().set(skyColor1);
              const color21 = new Color().set(groundColor1);
              const sky1 = new Vector3(color11.r, color11.g, color11.b);
              const ground1 = new Vector3(color21.r, color21.g, color21.b);
              // without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );
              const c01 = Math.sqrt(Math.PI);
              const c11 = c01 * Math.sqrt(0.75);
              this.sh.coefficients[0].copy(sky1).add(ground1).multiplyScalar(c01);
              this.sh.coefficients[1].copy(sky1).sub(ground1).multiplyScalar(c11);
          }
      }
      HemisphereLightProbe.prototype.isHemisphereLightProbe = true;
      class AmbientLightProbe extends LightProbe {
          constructor(color3, intensity1 = 1){
              super(undefined, intensity1);
              const color11 = new Color().set(color3);
              // without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );
              this.sh.coefficients[0].set(color11.r, color11.g, color11.b).multiplyScalar(2 * Math.sqrt(Math.PI));
          }
      }
      AmbientLightProbe.prototype.isAmbientLightProbe = true;
      const _eyeRight = /*@__PURE__*/ new Matrix4();
      const _eyeLeft = /*@__PURE__*/ new Matrix4();
      const _projectionMatrix = /*@__PURE__*/ new Matrix4();
      class StereoCamera {
          constructor(){
              this.type = "StereoCamera";
              this.aspect = 1;
              this.eyeSep = 0.064;
              this.cameraL = new PerspectiveCamera();
              this.cameraL.layers.enable(1);
              this.cameraL.matrixAutoUpdate = false;
              this.cameraR = new PerspectiveCamera();
              this.cameraR.layers.enable(2);
              this.cameraR.matrixAutoUpdate = false;
              this._cache = {
                  focus: null,
                  fov: null,
                  aspect: null,
                  near: null,
                  far: null,
                  zoom: null,
                  eyeSep: null
              };
          }
          update(camera1) {
              const cache1 = this._cache;
              const needsUpdate1 = cache1.focus !== camera1.focus || cache1.fov !== camera1.fov || cache1.aspect !== camera1.aspect * this.aspect || cache1.near !== camera1.near || cache1.far !== camera1.far || cache1.zoom !== camera1.zoom || cache1.eyeSep !== this.eyeSep;
              if (needsUpdate1) {
                  cache1.focus = camera1.focus;
                  cache1.fov = camera1.fov;
                  cache1.aspect = camera1.aspect * this.aspect;
                  cache1.near = camera1.near;
                  cache1.far = camera1.far;
                  cache1.zoom = camera1.zoom;
                  cache1.eyeSep = this.eyeSep;
                  // Off-axis stereoscopic effect based on
                  // http://paulbourke.net/stereographics/stereorender/
                  _projectionMatrix.copy(camera1.projectionMatrix);
                  const eyeSepHalf1 = cache1.eyeSep / 2;
                  const eyeSepOnProjection1 = eyeSepHalf1 * cache1.near / cache1.focus;
                  const ymax1 = cache1.near * Math.tan(DEG2RAD * cache1.fov * 0.5) / cache1.zoom;
                  let xmin1, xmax1;
                  // translate xOffset
                  _eyeLeft.elements[12] = -eyeSepHalf1;
                  _eyeRight.elements[12] = eyeSepHalf1;
                  // for left eye
                  xmin1 = -ymax1 * cache1.aspect + eyeSepOnProjection1;
                  xmax1 = ymax1 * cache1.aspect + eyeSepOnProjection1;
                  _projectionMatrix.elements[0] = 2 * cache1.near / (xmax1 - xmin1);
                  _projectionMatrix.elements[8] = (xmax1 + xmin1) / (xmax1 - xmin1);
                  this.cameraL.projectionMatrix.copy(_projectionMatrix);
                  // for right eye
                  xmin1 = -ymax1 * cache1.aspect - eyeSepOnProjection1;
                  xmax1 = ymax1 * cache1.aspect - eyeSepOnProjection1;
                  _projectionMatrix.elements[0] = 2 * cache1.near / (xmax1 - xmin1);
                  _projectionMatrix.elements[8] = (xmax1 + xmin1) / (xmax1 - xmin1);
                  this.cameraR.projectionMatrix.copy(_projectionMatrix);
              }
              this.cameraL.matrixWorld.copy(camera1.matrixWorld).multiply(_eyeLeft);
              this.cameraR.matrixWorld.copy(camera1.matrixWorld).multiply(_eyeRight);
          }
      }
      class Clock {
          constructor(autoStart1 = true){
              this.autoStart = autoStart1;
              this.startTime = 0;
              this.oldTime = 0;
              this.elapsedTime = 0;
              this.running = false;
          }
          start() {
              this.startTime = now();
              this.oldTime = this.startTime;
              this.elapsedTime = 0;
              this.running = true;
          }
          stop() {
              this.getElapsedTime();
              this.running = false;
              this.autoStart = false;
          }
          getElapsedTime() {
              this.getDelta();
              return this.elapsedTime;
          }
          getDelta() {
              let diff1 = 0;
              if (this.autoStart && !this.running) {
                  this.start();
                  return 0;
              }
              if (this.running) {
                  const newTime1 = now();
                  diff1 = (newTime1 - this.oldTime) / 1000;
                  this.oldTime = newTime1;
                  this.elapsedTime += diff1;
              }
              return diff1;
          }
      }
      function now() {
          return (typeof performance === "undefined" ? Date : performance).now(); // see #10732
      }
      const _position$1 = /*@__PURE__*/ new Vector3();
      const _quaternion$1 = /*@__PURE__*/ new Quaternion();
      const _scale$1 = /*@__PURE__*/ new Vector3();
      const _orientation$1 = /*@__PURE__*/ new Vector3();
      class AudioListener extends Object3D {
          constructor(){
              super();
              this.type = "AudioListener";
              this.context = AudioContext.getContext();
              this.gain = this.context.createGain();
              this.gain.connect(this.context.destination);
              this.filter = null;
              this.timeDelta = 0;
              // private
              this._clock = new Clock();
          }
          getInput() {
              return this.gain;
          }
          removeFilter() {
              if (this.filter !== null) {
                  this.gain.disconnect(this.filter);
                  this.filter.disconnect(this.context.destination);
                  this.gain.connect(this.context.destination);
                  this.filter = null;
              }
              return this;
          }
          getFilter() {
              return this.filter;
          }
          setFilter(value1) {
              if (this.filter !== null) {
                  this.gain.disconnect(this.filter);
                  this.filter.disconnect(this.context.destination);
              } else this.gain.disconnect(this.context.destination);
              this.filter = value1;
              this.gain.connect(this.filter);
              this.filter.connect(this.context.destination);
              return this;
          }
          getMasterVolume() {
              return this.gain.gain.value;
          }
          setMasterVolume(value1) {
              this.gain.gain.setTargetAtTime(value1, this.context.currentTime, 0.01);
              return this;
          }
          updateMatrixWorld(force1) {
              super.updateMatrixWorld(force1);
              const listener1 = this.context.listener;
              const up1 = this.up;
              this.timeDelta = this._clock.getDelta();
              this.matrixWorld.decompose(_position$1, _quaternion$1, _scale$1);
              _orientation$1.set(0, 0, -1).applyQuaternion(_quaternion$1);
              if (listener1.positionX) {
                  // code path for Chrome (see #14393)
                  const endTime1 = this.context.currentTime + this.timeDelta;
                  listener1.positionX.linearRampToValueAtTime(_position$1.x, endTime1);
                  listener1.positionY.linearRampToValueAtTime(_position$1.y, endTime1);
                  listener1.positionZ.linearRampToValueAtTime(_position$1.z, endTime1);
                  listener1.forwardX.linearRampToValueAtTime(_orientation$1.x, endTime1);
                  listener1.forwardY.linearRampToValueAtTime(_orientation$1.y, endTime1);
                  listener1.forwardZ.linearRampToValueAtTime(_orientation$1.z, endTime1);
                  listener1.upX.linearRampToValueAtTime(up1.x, endTime1);
                  listener1.upY.linearRampToValueAtTime(up1.y, endTime1);
                  listener1.upZ.linearRampToValueAtTime(up1.z, endTime1);
              } else {
                  listener1.setPosition(_position$1.x, _position$1.y, _position$1.z);
                  listener1.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z, up1.x, up1.y, up1.z);
              }
          }
      }
      class Audio extends Object3D {
          constructor(listener1){
              super();
              this.type = "Audio";
              this.listener = listener1;
              this.context = listener1.context;
              this.gain = this.context.createGain();
              this.gain.connect(listener1.getInput());
              this.autoplay = false;
              this.buffer = null;
              this.detune = 0;
              this.loop = false;
              this.loopStart = 0;
              this.loopEnd = 0;
              this.offset = 0;
              this.duration = undefined;
              this.playbackRate = 1;
              this.isPlaying = false;
              this.hasPlaybackControl = true;
              this.source = null;
              this.sourceType = "empty";
              this._startedAt = 0;
              this._progress = 0;
              this._connected = false;
              this.filters = [];
          }
          getOutput() {
              return this.gain;
          }
          setNodeSource(audioNode1) {
              this.hasPlaybackControl = false;
              this.sourceType = "audioNode";
              this.source = audioNode1;
              this.connect();
              return this;
          }
          setMediaElementSource(mediaElement1) {
              this.hasPlaybackControl = false;
              this.sourceType = "mediaNode";
              this.source = this.context.createMediaElementSource(mediaElement1);
              this.connect();
              return this;
          }
          setMediaStreamSource(mediaStream1) {
              this.hasPlaybackControl = false;
              this.sourceType = "mediaStreamNode";
              this.source = this.context.createMediaStreamSource(mediaStream1);
              this.connect();
              return this;
          }
          setBuffer(audioBuffer1) {
              this.buffer = audioBuffer1;
              this.sourceType = "buffer";
              if (this.autoplay) this.play();
              return this;
          }
          play(delay1 = 0) {
              if (this.isPlaying === true) {
                  console.warn("THREE.Audio: Audio is already playing.");
                  return;
              }
              if (this.hasPlaybackControl === false) {
                  console.warn("THREE.Audio: this Audio has no playback control.");
                  return;
              }
              this._startedAt = this.context.currentTime + delay1;
              const source1 = this.context.createBufferSource();
              source1.buffer = this.buffer;
              source1.loop = this.loop;
              source1.loopStart = this.loopStart;
              source1.loopEnd = this.loopEnd;
              source1.onended = this.onEnded.bind(this);
              source1.start(this._startedAt, this._progress + this.offset, this.duration);
              this.isPlaying = true;
              this.source = source1;
              this.setDetune(this.detune);
              this.setPlaybackRate(this.playbackRate);
              return this.connect();
          }
          pause() {
              if (this.hasPlaybackControl === false) {
                  console.warn("THREE.Audio: this Audio has no playback control.");
                  return;
              }
              if (this.isPlaying === true) {
                  // update current progress
                  this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;
                  if (this.loop === true) // ensure _progress does not exceed duration with looped audios
                  this._progress = this._progress % (this.duration || this.buffer.duration);
                  this.source.stop();
                  this.source.onended = null;
                  this.isPlaying = false;
              }
              return this;
          }
          stop() {
              if (this.hasPlaybackControl === false) {
                  console.warn("THREE.Audio: this Audio has no playback control.");
                  return;
              }
              this._progress = 0;
              this.source.stop();
              this.source.onended = null;
              this.isPlaying = false;
              return this;
          }
          connect() {
              if (this.filters.length > 0) {
                  this.source.connect(this.filters[0]);
                  for(let i3 = 1, l1 = this.filters.length; i3 < l1; i3++)this.filters[i3 - 1].connect(this.filters[i3]);
                  this.filters[this.filters.length - 1].connect(this.getOutput());
              } else this.source.connect(this.getOutput());
              this._connected = true;
              return this;
          }
          disconnect() {
              if (this.filters.length > 0) {
                  this.source.disconnect(this.filters[0]);
                  for(let i3 = 1, l1 = this.filters.length; i3 < l1; i3++)this.filters[i3 - 1].disconnect(this.filters[i3]);
                  this.filters[this.filters.length - 1].disconnect(this.getOutput());
              } else this.source.disconnect(this.getOutput());
              this._connected = false;
              return this;
          }
          getFilters() {
              return this.filters;
          }
          setFilters(value1) {
              if (!value1) value1 = [];
              if (this._connected === true) {
                  this.disconnect();
                  this.filters = value1.slice();
                  this.connect();
              } else this.filters = value1.slice();
              return this;
          }
          setDetune(value1) {
              this.detune = value1;
              if (this.source.detune === undefined) return; // only set detune when available
              if (this.isPlaying === true) this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);
              return this;
          }
          getDetune() {
              return this.detune;
          }
          getFilter() {
              return this.getFilters()[0];
          }
          setFilter(filter1) {
              return this.setFilters(filter1 ? [
                  filter1
              ] : []);
          }
          setPlaybackRate(value1) {
              if (this.hasPlaybackControl === false) {
                  console.warn("THREE.Audio: this Audio has no playback control.");
                  return;
              }
              this.playbackRate = value1;
              if (this.isPlaying === true) this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);
              return this;
          }
          getPlaybackRate() {
              return this.playbackRate;
          }
          onEnded() {
              this.isPlaying = false;
          }
          getLoop() {
              if (this.hasPlaybackControl === false) {
                  console.warn("THREE.Audio: this Audio has no playback control.");
                  return false;
              }
              return this.loop;
          }
          setLoop(value1) {
              if (this.hasPlaybackControl === false) {
                  console.warn("THREE.Audio: this Audio has no playback control.");
                  return;
              }
              this.loop = value1;
              if (this.isPlaying === true) this.source.loop = this.loop;
              return this;
          }
          setLoopStart(value1) {
              this.loopStart = value1;
              return this;
          }
          setLoopEnd(value1) {
              this.loopEnd = value1;
              return this;
          }
          getVolume() {
              return this.gain.gain.value;
          }
          setVolume(value1) {
              this.gain.gain.setTargetAtTime(value1, this.context.currentTime, 0.01);
              return this;
          }
      }
      const _position = /*@__PURE__*/ new Vector3();
      const _quaternion = /*@__PURE__*/ new Quaternion();
      const _scale = /*@__PURE__*/ new Vector3();
      const _orientation = /*@__PURE__*/ new Vector3();
      class PositionalAudio extends Audio {
          constructor(listener1){
              super(listener1);
              this.panner = this.context.createPanner();
              this.panner.panningModel = "HRTF";
              this.panner.connect(this.gain);
          }
          getOutput() {
              return this.panner;
          }
          getRefDistance() {
              return this.panner.refDistance;
          }
          setRefDistance(value1) {
              this.panner.refDistance = value1;
              return this;
          }
          getRolloffFactor() {
              return this.panner.rolloffFactor;
          }
          setRolloffFactor(value1) {
              this.panner.rolloffFactor = value1;
              return this;
          }
          getDistanceModel() {
              return this.panner.distanceModel;
          }
          setDistanceModel(value1) {
              this.panner.distanceModel = value1;
              return this;
          }
          getMaxDistance() {
              return this.panner.maxDistance;
          }
          setMaxDistance(value1) {
              this.panner.maxDistance = value1;
              return this;
          }
          setDirectionalCone(coneInnerAngle1, coneOuterAngle1, coneOuterGain1) {
              this.panner.coneInnerAngle = coneInnerAngle1;
              this.panner.coneOuterAngle = coneOuterAngle1;
              this.panner.coneOuterGain = coneOuterGain1;
              return this;
          }
          updateMatrixWorld(force1) {
              super.updateMatrixWorld(force1);
              if (this.hasPlaybackControl === true && this.isPlaying === false) return;
              this.matrixWorld.decompose(_position, _quaternion, _scale);
              _orientation.set(0, 0, 1).applyQuaternion(_quaternion);
              const panner1 = this.panner;
              if (panner1.positionX) {
                  // code path for Chrome and Firefox (see #14393)
                  const endTime1 = this.context.currentTime + this.listener.timeDelta;
                  panner1.positionX.linearRampToValueAtTime(_position.x, endTime1);
                  panner1.positionY.linearRampToValueAtTime(_position.y, endTime1);
                  panner1.positionZ.linearRampToValueAtTime(_position.z, endTime1);
                  panner1.orientationX.linearRampToValueAtTime(_orientation.x, endTime1);
                  panner1.orientationY.linearRampToValueAtTime(_orientation.y, endTime1);
                  panner1.orientationZ.linearRampToValueAtTime(_orientation.z, endTime1);
              } else {
                  panner1.setPosition(_position.x, _position.y, _position.z);
                  panner1.setOrientation(_orientation.x, _orientation.y, _orientation.z);
              }
          }
      }
      class AudioAnalyser {
          constructor(audio1, fftSize1 = 2048){
              this.analyser = audio1.context.createAnalyser();
              this.analyser.fftSize = fftSize1;
              this.data = new Uint8Array(this.analyser.frequencyBinCount);
              audio1.getOutput().connect(this.analyser);
          }
          getFrequencyData() {
              this.analyser.getByteFrequencyData(this.data);
              return this.data;
          }
          getAverageFrequency() {
              let value1 = 0;
              const data1 = this.getFrequencyData();
              for(let i3 = 0; i3 < data1.length; i3++)value1 += data1[i3];
              return value1 / data1.length;
          }
      }
      class PropertyMixer {
          constructor(binding1, typeName1, valueSize1){
              this.binding = binding1;
              this.valueSize = valueSize1;
              let mixFunction1, mixFunctionAdditive1, setIdentity1;
              // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]
              //
              // interpolators can use .buffer as their .result
              // the data then goes to 'incoming'
              //
              // 'accu0' and 'accu1' are used frame-interleaved for
              // the cumulative result and are compared to detect
              // changes
              //
              // 'orig' stores the original state of the property
              //
              // 'add' is used for additive cumulative results
              //
              // 'work' is optional and is only present for quaternion types. It is used
              // to store intermediate quaternion multiplication results
              switch(typeName1){
                  case "quaternion":
                      mixFunction1 = this._slerp;
                      mixFunctionAdditive1 = this._slerpAdditive;
                      setIdentity1 = this._setAdditiveIdentityQuaternion;
                      this.buffer = new Float64Array(valueSize1 * 6);
                      this._workIndex = 5;
                      break;
                  case "string":
                  case "bool":
                      mixFunction1 = this._select;
                      // Use the regular mix function and for additive on these types,
                      // additive is not relevant for non-numeric types
                      mixFunctionAdditive1 = this._select;
                      setIdentity1 = this._setAdditiveIdentityOther;
                      this.buffer = new Array(valueSize1 * 5);
                      break;
                  default:
                      mixFunction1 = this._lerp;
                      mixFunctionAdditive1 = this._lerpAdditive;
                      setIdentity1 = this._setAdditiveIdentityNumeric;
                      this.buffer = new Float64Array(valueSize1 * 5);
              }
              this._mixBufferRegion = mixFunction1;
              this._mixBufferRegionAdditive = mixFunctionAdditive1;
              this._setIdentity = setIdentity1;
              this._origIndex = 3;
              this._addIndex = 4;
              this.cumulativeWeight = 0;
              this.cumulativeWeightAdditive = 0;
              this.useCount = 0;
              this.referenceCount = 0;
          }
          // accumulate data in the 'incoming' region into 'accu<i>'
          accumulate(accuIndex1, weight2) {
              // note: happily accumulating nothing when weight = 0, the caller knows
              // the weight and shouldn't have made the call in the first place
              const buffer1 = this.buffer, stride1 = this.valueSize, offset2 = accuIndex1 * stride1 + stride1;
              let currentWeight1 = this.cumulativeWeight;
              if (currentWeight1 === 0) {
                  // accuN := incoming * weight
                  for(let i3 = 0; i3 !== stride1; ++i3)buffer1[offset2 + i3] = buffer1[i3];
                  currentWeight1 = weight2;
              } else {
                  // accuN := accuN + incoming * weight
                  currentWeight1 += weight2;
                  const mix1 = weight2 / currentWeight1;
                  this._mixBufferRegion(buffer1, offset2, 0, mix1, stride1);
              }
              this.cumulativeWeight = currentWeight1;
          }
          // accumulate data in the 'incoming' region into 'add'
          accumulateAdditive(weight2) {
              const buffer1 = this.buffer, stride1 = this.valueSize, offset2 = stride1 * this._addIndex;
              if (this.cumulativeWeightAdditive === 0) // add = identity
              this._setIdentity();
              // add := add + incoming * weight
              this._mixBufferRegionAdditive(buffer1, offset2, 0, weight2, stride1);
              this.cumulativeWeightAdditive += weight2;
          }
          // apply the state of 'accu<i>' to the binding when accus differ
          apply(accuIndex1) {
              const stride1 = this.valueSize, buffer1 = this.buffer, offset2 = accuIndex1 * stride1 + stride1, weight2 = this.cumulativeWeight, weightAdditive1 = this.cumulativeWeightAdditive, binding1 = this.binding;
              this.cumulativeWeight = 0;
              this.cumulativeWeightAdditive = 0;
              if (weight2 < 1) {
                  // accuN := accuN + original * ( 1 - cumulativeWeight )
                  const originalValueOffset1 = stride1 * this._origIndex;
                  this._mixBufferRegion(buffer1, offset2, originalValueOffset1, 1 - weight2, stride1);
              }
              if (weightAdditive1 > 0) // accuN := accuN + additive accuN
              this._mixBufferRegionAdditive(buffer1, offset2, this._addIndex * stride1, 1, stride1);
              for(let i3 = stride1, e1 = stride1 + stride1; i3 !== e1; ++i3)if (buffer1[i3] !== buffer1[i3 + stride1]) {
                  // value has changed -> update scene graph
                  binding1.setValue(buffer1, offset2);
                  break;
              }
          }
          // remember the state of the bound property and copy it to both accus
          saveOriginalState() {
              const binding1 = this.binding;
              const buffer1 = this.buffer, stride1 = this.valueSize, originalValueOffset1 = stride1 * this._origIndex;
              binding1.getValue(buffer1, originalValueOffset1);
              // accu[0..1] := orig -- initially detect changes against the original
              for(let i3 = stride1, e1 = originalValueOffset1; i3 !== e1; ++i3)buffer1[i3] = buffer1[originalValueOffset1 + i3 % stride1];
              // Add to identity for additive
              this._setIdentity();
              this.cumulativeWeight = 0;
              this.cumulativeWeightAdditive = 0;
          }
          // apply the state previously taken via 'saveOriginalState' to the binding
          restoreOriginalState() {
              const originalValueOffset1 = this.valueSize * 3;
              this.binding.setValue(this.buffer, originalValueOffset1);
          }
          _setAdditiveIdentityNumeric() {
              const startIndex1 = this._addIndex * this.valueSize;
              const endIndex1 = startIndex1 + this.valueSize;
              for(let i3 = startIndex1; i3 < endIndex1; i3++)this.buffer[i3] = 0;
          }
          _setAdditiveIdentityQuaternion() {
              this._setAdditiveIdentityNumeric();
              this.buffer[this._addIndex * this.valueSize + 3] = 1;
          }
          _setAdditiveIdentityOther() {
              const startIndex1 = this._origIndex * this.valueSize;
              const targetIndex1 = this._addIndex * this.valueSize;
              for(let i3 = 0; i3 < this.valueSize; i3++)this.buffer[targetIndex1 + i3] = this.buffer[startIndex1 + i3];
          }
          // mix functions
          _select(buffer1, dstOffset1, srcOffset2, t4, stride1) {
              if (t4 >= 0.5) for(let i3 = 0; i3 !== stride1; ++i3)buffer1[dstOffset1 + i3] = buffer1[srcOffset2 + i3];
          }
          _slerp(buffer1, dstOffset1, srcOffset2, t4) {
              Quaternion.slerpFlat(buffer1, dstOffset1, buffer1, dstOffset1, buffer1, srcOffset2, t4);
          }
          _slerpAdditive(buffer1, dstOffset1, srcOffset2, t4, stride1) {
              const workOffset1 = this._workIndex * stride1;
              // Store result in intermediate buffer offset
              Quaternion.multiplyQuaternionsFlat(buffer1, workOffset1, buffer1, dstOffset1, buffer1, srcOffset2);
              // Slerp to the intermediate result
              Quaternion.slerpFlat(buffer1, dstOffset1, buffer1, dstOffset1, buffer1, workOffset1, t4);
          }
          _lerp(buffer1, dstOffset1, srcOffset2, t4, stride1) {
              const s10 = 1 - t4;
              for(let i3 = 0; i3 !== stride1; ++i3){
                  const j1 = dstOffset1 + i3;
                  buffer1[j1] = buffer1[j1] * s10 + buffer1[srcOffset2 + i3] * t4;
              }
          }
          _lerpAdditive(buffer1, dstOffset1, srcOffset2, t4, stride1) {
              for(let i3 = 0; i3 !== stride1; ++i3){
                  const j1 = dstOffset1 + i3;
                  buffer1[j1] = buffer1[j1] + buffer1[srcOffset2 + i3] * t4;
              }
          }
      }
      // Characters [].:/ are reserved for track binding syntax.
      const _RESERVED_CHARS_RE = "\\[\\]\\.:\\/";
      const _reservedRe = new RegExp("[" + _RESERVED_CHARS_RE + "]", "g");
      // Attempts to allow node names from any language. ES5's `\w` regexp matches
      // only latin characters, and the unicode \p{L} is not yet supported. So
      // instead, we exclude reserved characters and match everything else.
      const _wordChar = "[^" + _RESERVED_CHARS_RE + "]";
      const _wordCharOrDot = "[^" + _RESERVED_CHARS_RE.replace("\\.", "") + "]";
      // Parent directories, delimited by '/' or ':'. Currently unused, but must
      // be matched to parse the rest of the track name.
      const _directoryRe = /((?:WC+[\/:])*)/.source.replace("WC", _wordChar);
      // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
      const _nodeRe = /(WCOD+)?/.source.replace("WCOD", _wordCharOrDot);
      // Object on target node, and accessor. May not contain reserved
      // characters. Accessor may contain any character except closing bracket.
      const _objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", _wordChar);
      // Property and accessor. May not contain reserved characters. Accessor may
      // contain any non-bracket characters.
      const _propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", _wordChar);
      const _trackRe = new RegExp("^" + _directoryRe + _nodeRe + _objectRe + _propertyRe + "$");
      const _supportedObjectNames = [
          "material",
          "materials",
          "bones"
      ];
      class Composite {
          constructor(targetGroup1, path1, optionalParsedPath1){
              const parsedPath1 = optionalParsedPath1 || PropertyBinding.parseTrackName(path1);
              this._targetGroup = targetGroup1;
              this._bindings = targetGroup1.subscribe_(path1, parsedPath1);
          }
          getValue(array1, offset2) {
              this.bind(); // bind all binding
              const firstValidIndex1 = this._targetGroup.nCachedObjects_, binding1 = this._bindings[firstValidIndex1];
              // and only call .getValue on the first
              if (binding1 !== undefined) binding1.getValue(array1, offset2);
          }
          setValue(array1, offset2) {
              const bindings1 = this._bindings;
              for(let i3 = this._targetGroup.nCachedObjects_, n3 = bindings1.length; i3 !== n3; ++i3)bindings1[i3].setValue(array1, offset2);
          }
          bind() {
              const bindings1 = this._bindings;
              for(let i3 = this._targetGroup.nCachedObjects_, n3 = bindings1.length; i3 !== n3; ++i3)bindings1[i3].bind();
          }
          unbind() {
              const bindings1 = this._bindings;
              for(let i3 = this._targetGroup.nCachedObjects_, n3 = bindings1.length; i3 !== n3; ++i3)bindings1[i3].unbind();
          }
      }
      // Note: This class uses a State pattern on a per-method basis:
      // 'bind' sets 'this.getValue' / 'setValue' and shadows the
      // prototype version of these methods with one that represents
      // the bound state. When the property is not found, the methods
      // become no-ops.
      class PropertyBinding {
          constructor(rootNode1, path1, parsedPath1){
              this.path = path1;
              this.parsedPath = parsedPath1 || PropertyBinding.parseTrackName(path1);
              this.node = PropertyBinding.findNode(rootNode1, this.parsedPath.nodeName) || rootNode1;
              this.rootNode = rootNode1;
              // initial state of these methods that calls 'bind'
              this.getValue = this._getValue_unbound;
              this.setValue = this._setValue_unbound;
          }
          static create(root1, path1, parsedPath1) {
              if (!(root1 && root1.isAnimationObjectGroup)) return new PropertyBinding(root1, path1, parsedPath1);
              else return new PropertyBinding.Composite(root1, path1, parsedPath1);
          }
          /**
         * Replaces spaces with underscores and removes unsupported characters from
         * node names, to ensure compatibility with parseTrackName().
         *
         * @param {string} name Node name to be sanitized.
         * @return {string}
         */ static sanitizeNodeName(name1) {
              return name1.replace(/\s/g, "_").replace(_reservedRe, "");
          }
          static parseTrackName(trackName1) {
              const matches1 = _trackRe.exec(trackName1);
              if (matches1 === null) throw new Error("PropertyBinding: Cannot parse trackName: " + trackName1);
              const results1 = {
                  // directoryName: matches[ 1 ], // (tschw) currently unused
                  nodeName: matches1[2],
                  objectName: matches1[3],
                  objectIndex: matches1[4],
                  propertyName: matches1[5],
                  propertyIndex: matches1[6]
              };
              const lastDot1 = results1.nodeName && results1.nodeName.lastIndexOf(".");
              if (lastDot1 !== undefined && lastDot1 !== -1) {
                  const objectName1 = results1.nodeName.substring(lastDot1 + 1);
                  // Object names must be checked against an allowlist. Otherwise, there
                  // is no way to parse 'foo.bar.baz': 'baz' must be a property, but
                  // 'bar' could be the objectName, or part of a nodeName (which can
                  // include '.' characters).
                  if (_supportedObjectNames.indexOf(objectName1) !== -1) {
                      results1.nodeName = results1.nodeName.substring(0, lastDot1);
                      results1.objectName = objectName1;
                  }
              }
              if (results1.propertyName === null || results1.propertyName.length === 0) throw new Error("PropertyBinding: can not parse propertyName from trackName: " + trackName1);
              return results1;
          }
          static findNode(root1, nodeName1) {
              if (nodeName1 === undefined || nodeName1 === "" || nodeName1 === "." || nodeName1 === -1 || nodeName1 === root1.name || nodeName1 === root1.uuid) return root1;
              // search into skeleton bones.
              if (root1.skeleton) {
                  const bone1 = root1.skeleton.getBoneByName(nodeName1);
                  if (bone1 !== undefined) return bone1;
              }
              // search into node subtree.
              if (root1.children) {
                  const searchNodeSubtree1 = function(children1) {
                      for(let i3 = 0; i3 < children1.length; i3++){
                          const childNode1 = children1[i3];
                          if (childNode1.name === nodeName1 || childNode1.uuid === nodeName1) return childNode1;
                          const result1 = searchNodeSubtree1(childNode1.children);
                          if (result1) return result1;
                      }
                      return null;
                  };
                  const subTreeNode1 = searchNodeSubtree1(root1.children);
                  if (subTreeNode1) return subTreeNode1;
              }
              return null;
          }
          // these are used to "bind" a nonexistent property
          _getValue_unavailable() {}
          _setValue_unavailable() {}
          // Getters
          _getValue_direct(buffer1, offset2) {
              buffer1[offset2] = this.targetObject[this.propertyName];
          }
          _getValue_array(buffer1, offset2) {
              const source1 = this.resolvedProperty;
              for(let i3 = 0, n3 = source1.length; i3 !== n3; ++i3)buffer1[offset2++] = source1[i3];
          }
          _getValue_arrayElement(buffer1, offset2) {
              buffer1[offset2] = this.resolvedProperty[this.propertyIndex];
          }
          _getValue_toArray(buffer1, offset2) {
              this.resolvedProperty.toArray(buffer1, offset2);
          }
          // Direct
          _setValue_direct(buffer1, offset2) {
              this.targetObject[this.propertyName] = buffer1[offset2];
          }
          _setValue_direct_setNeedsUpdate(buffer1, offset2) {
              this.targetObject[this.propertyName] = buffer1[offset2];
              this.targetObject.needsUpdate = true;
          }
          _setValue_direct_setMatrixWorldNeedsUpdate(buffer1, offset2) {
              this.targetObject[this.propertyName] = buffer1[offset2];
              this.targetObject.matrixWorldNeedsUpdate = true;
          }
          // EntireArray
          _setValue_array(buffer1, offset2) {
              const dest1 = this.resolvedProperty;
              for(let i3 = 0, n3 = dest1.length; i3 !== n3; ++i3)dest1[i3] = buffer1[offset2++];
          }
          _setValue_array_setNeedsUpdate(buffer1, offset2) {
              const dest1 = this.resolvedProperty;
              for(let i3 = 0, n3 = dest1.length; i3 !== n3; ++i3)dest1[i3] = buffer1[offset2++];
              this.targetObject.needsUpdate = true;
          }
          _setValue_array_setMatrixWorldNeedsUpdate(buffer1, offset2) {
              const dest1 = this.resolvedProperty;
              for(let i3 = 0, n3 = dest1.length; i3 !== n3; ++i3)dest1[i3] = buffer1[offset2++];
              this.targetObject.matrixWorldNeedsUpdate = true;
          }
          // ArrayElement
          _setValue_arrayElement(buffer1, offset2) {
              this.resolvedProperty[this.propertyIndex] = buffer1[offset2];
          }
          _setValue_arrayElement_setNeedsUpdate(buffer1, offset2) {
              this.resolvedProperty[this.propertyIndex] = buffer1[offset2];
              this.targetObject.needsUpdate = true;
          }
          _setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer1, offset2) {
              this.resolvedProperty[this.propertyIndex] = buffer1[offset2];
              this.targetObject.matrixWorldNeedsUpdate = true;
          }
          // HasToFromArray
          _setValue_fromArray(buffer1, offset2) {
              this.resolvedProperty.fromArray(buffer1, offset2);
          }
          _setValue_fromArray_setNeedsUpdate(buffer1, offset2) {
              this.resolvedProperty.fromArray(buffer1, offset2);
              this.targetObject.needsUpdate = true;
          }
          _setValue_fromArray_setMatrixWorldNeedsUpdate(buffer1, offset2) {
              this.resolvedProperty.fromArray(buffer1, offset2);
              this.targetObject.matrixWorldNeedsUpdate = true;
          }
          _getValue_unbound(targetArray1, offset2) {
              this.bind();
              this.getValue(targetArray1, offset2);
          }
          _setValue_unbound(sourceArray1, offset2) {
              this.bind();
              this.setValue(sourceArray1, offset2);
          }
          // create getter / setter pair for a property in the scene graph
          bind() {
              let targetObject1 = this.node;
              const parsedPath1 = this.parsedPath;
              const objectName1 = parsedPath1.objectName;
              const propertyName1 = parsedPath1.propertyName;
              let propertyIndex1 = parsedPath1.propertyIndex;
              if (!targetObject1) {
                  targetObject1 = PropertyBinding.findNode(this.rootNode, parsedPath1.nodeName) || this.rootNode;
                  this.node = targetObject1;
              }
              // set fail state so we can just 'return' on error
              this.getValue = this._getValue_unavailable;
              this.setValue = this._setValue_unavailable;
              // ensure there is a value node
              if (!targetObject1) {
                  console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");
                  return;
              }
              if (objectName1) {
                  let objectIndex1 = parsedPath1.objectIndex;
                  // special cases were we need to reach deeper into the hierarchy to get the face materials....
                  switch(objectName1){
                      case "materials":
                          if (!targetObject1.material) {
                              console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                              return;
                          }
                          if (!targetObject1.material.materials) {
                              console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
                              return;
                          }
                          targetObject1 = targetObject1.material.materials;
                          break;
                      case "bones":
                          if (!targetObject1.skeleton) {
                              console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
                              return;
                          }
                          // potential future optimization: skip this if propertyIndex is already an integer
                          // and convert the integer string to a true integer.
                          targetObject1 = targetObject1.skeleton.bones;
                          // support resolving morphTarget names into indices.
                          for(let i3 = 0; i3 < targetObject1.length; i3++)if (targetObject1[i3].name === objectIndex1) {
                              objectIndex1 = i3;
                              break;
                          }
                          break;
                      default:
                          if (targetObject1[objectName1] === undefined) {
                              console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
                              return;
                          }
                          targetObject1 = targetObject1[objectName1];
                  }
                  if (objectIndex1 !== undefined) {
                      if (targetObject1[objectIndex1] === undefined) {
                          console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, targetObject1);
                          return;
                      }
                      targetObject1 = targetObject1[objectIndex1];
                  }
              }
              // resolve property
              const nodeProperty1 = targetObject1[propertyName1];
              if (nodeProperty1 === undefined) {
                  const nodeName1 = parsedPath1.nodeName;
                  console.error("THREE.PropertyBinding: Trying to update property for track: " + nodeName1 + "." + propertyName1 + " but it wasn't found.", targetObject1);
                  return;
              }
              // determine versioning scheme
              let versioning1 = this.Versioning.None;
              this.targetObject = targetObject1;
              if (targetObject1.needsUpdate !== undefined) versioning1 = this.Versioning.NeedsUpdate;
              else if (targetObject1.matrixWorldNeedsUpdate !== undefined) versioning1 = this.Versioning.MatrixWorldNeedsUpdate;
              // determine how the property gets bound
              let bindingType1 = this.BindingType.Direct;
              if (propertyIndex1 !== undefined) {
                  // access a sub element of the property array (only primitives are supported right now)
                  if (propertyName1 === "morphTargetInfluences") {
                      // potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.
                      // support resolving morphTarget names into indices.
                      if (!targetObject1.geometry) {
                          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
                          return;
                      }
                      if (targetObject1.geometry.isBufferGeometry) {
                          if (!targetObject1.geometry.morphAttributes) {
                              console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
                              return;
                          }
                          if (targetObject1.morphTargetDictionary[propertyIndex1] !== undefined) propertyIndex1 = targetObject1.morphTargetDictionary[propertyIndex1];
                      } else {
                          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.", this);
                          return;
                      }
                  }
                  bindingType1 = this.BindingType.ArrayElement;
                  this.resolvedProperty = nodeProperty1;
                  this.propertyIndex = propertyIndex1;
              } else if (nodeProperty1.fromArray !== undefined && nodeProperty1.toArray !== undefined) {
                  // must use copy for Object3D.Euler/Quaternion
                  bindingType1 = this.BindingType.HasFromToArray;
                  this.resolvedProperty = nodeProperty1;
              } else if (Array.isArray(nodeProperty1)) {
                  bindingType1 = this.BindingType.EntireArray;
                  this.resolvedProperty = nodeProperty1;
              } else this.propertyName = propertyName1;
              // select getter / setter
              this.getValue = this.GetterByBindingType[bindingType1];
              this.setValue = this.SetterByBindingTypeAndVersioning[bindingType1][versioning1];
          }
          unbind() {
              this.node = null;
              // back to the prototype version of getValue / setValue
              // note: avoiding to mutate the shape of 'this' via 'delete'
              this.getValue = this._getValue_unbound;
              this.setValue = this._setValue_unbound;
          }
      }
      PropertyBinding.Composite = Composite;
      PropertyBinding.prototype.BindingType = {
          Direct: 0,
          EntireArray: 1,
          ArrayElement: 2,
          HasFromToArray: 3
      };
      PropertyBinding.prototype.Versioning = {
          None: 0,
          NeedsUpdate: 1,
          MatrixWorldNeedsUpdate: 2
      };
      PropertyBinding.prototype.GetterByBindingType = [
          PropertyBinding.prototype._getValue_direct,
          PropertyBinding.prototype._getValue_array,
          PropertyBinding.prototype._getValue_arrayElement,
          PropertyBinding.prototype._getValue_toArray
      ];
      PropertyBinding.prototype.SetterByBindingTypeAndVersioning = [
          [
              // Direct
              PropertyBinding.prototype._setValue_direct,
              PropertyBinding.prototype._setValue_direct_setNeedsUpdate,
              PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate
          ],
          [
              // EntireArray
              PropertyBinding.prototype._setValue_array,
              PropertyBinding.prototype._setValue_array_setNeedsUpdate,
              PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate
          ],
          [
              // ArrayElement
              PropertyBinding.prototype._setValue_arrayElement,
              PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,
              PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
          ],
          [
              // HasToFromArray
              PropertyBinding.prototype._setValue_fromArray,
              PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,
              PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
          ]
      ];
      /**
     *
     * A group of objects that receives a shared animation state.
     *
     * Usage:
     *
     *  - Add objects you would otherwise pass as 'root' to the
     *    constructor or the .clipAction method of AnimationMixer.
     *
     *  - Instead pass this object as 'root'.
     *
     *  - You can also add and remove objects later when the mixer
     *    is running.
     *
     * Note:
     *
     *    Objects of this class appear as one object to the mixer,
     *    so cache control of the individual objects must be done
     *    on the group.
     *
     * Limitation:
     *
     *  - The animated properties must be compatible among the
     *    all objects in the group.
     *
     *  - A single property can either be controlled through a
     *    target group or directly, but not both.
     */ class AnimationObjectGroup {
          constructor(){
              this.uuid = generateUUID();
              // cached objects followed by the active ones
              this._objects = Array.prototype.slice.call(arguments);
              this.nCachedObjects_ = 0; // threshold
              // note: read by PropertyBinding.Composite
              const indices1 = {};
              this._indicesByUUID = indices1; // for bookkeeping
              for(let i3 = 0, n3 = arguments.length; i3 !== n3; ++i3)indices1[arguments[i3].uuid] = i3;
              this._paths = []; // inside: string
              this._parsedPaths = []; // inside: { we don't care, here }
              this._bindings = []; // inside: Array< PropertyBinding >
              this._bindingsIndicesByPath = {}; // inside: indices in these arrays
              const scope1 = this;
              this.stats = {
                  objects: {
                      get total () {
                          return scope1._objects.length;
                      },
                      get inUse () {
                          return this.total - scope1.nCachedObjects_;
                      }
                  },
                  get bindingsPerObject () {
                      return scope1._bindings.length;
                  }
              };
          }
          add() {
              const objects1 = this._objects, indicesByUUID1 = this._indicesByUUID, paths1 = this._paths, parsedPaths1 = this._parsedPaths, bindings1 = this._bindings, nBindings1 = bindings1.length;
              let knownObject1 = undefined, nObjects1 = objects1.length, nCachedObjects1 = this.nCachedObjects_;
              for(let i3 = 0, n3 = arguments.length; i3 !== n3; ++i3){
                  const object1 = arguments[i3], uuid1 = object1.uuid;
                  let index3 = indicesByUUID1[uuid1];
                  if (index3 === undefined) {
                      // unknown object -> add it to the ACTIVE region
                      index3 = nObjects1++;
                      indicesByUUID1[uuid1] = index3;
                      objects1.push(object1);
                      // accounting is done, now do the same for all bindings
                      for(let j1 = 0, m1 = nBindings1; j1 !== m1; ++j1)bindings1[j1].push(new PropertyBinding(object1, paths1[j1], parsedPaths1[j1]));
                  } else if (index3 < nCachedObjects1) {
                      knownObject1 = objects1[index3];
                      // move existing object to the ACTIVE region
                      const firstActiveIndex1 = --nCachedObjects1, lastCachedObject1 = objects1[firstActiveIndex1];
                      indicesByUUID1[lastCachedObject1.uuid] = index3;
                      objects1[index3] = lastCachedObject1;
                      indicesByUUID1[uuid1] = firstActiveIndex1;
                      objects1[firstActiveIndex1] = object1;
                      // accounting is done, now do the same for all bindings
                      for(let j1 = 0, m1 = nBindings1; j1 !== m1; ++j1){
                          const bindingsForPath1 = bindings1[j1], lastCached1 = bindingsForPath1[firstActiveIndex1];
                          let binding1 = bindingsForPath1[index3];
                          bindingsForPath1[index3] = lastCached1;
                          if (binding1 === undefined) // since we do not bother to create new bindings
                          // for objects that are cached, the binding may
                          // or may not exist
                          binding1 = new PropertyBinding(object1, paths1[j1], parsedPaths1[j1]);
                          bindingsForPath1[firstActiveIndex1] = binding1;
                      }
                  } else if (objects1[index3] !== knownObject1) console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
                   // else the object is already where we want it to be
              } // for arguments
              this.nCachedObjects_ = nCachedObjects1;
          }
          remove() {
              const objects1 = this._objects, indicesByUUID1 = this._indicesByUUID, bindings1 = this._bindings, nBindings1 = bindings1.length;
              let nCachedObjects1 = this.nCachedObjects_;
              for(let i3 = 0, n3 = arguments.length; i3 !== n3; ++i3){
                  const object1 = arguments[i3], uuid1 = object1.uuid, index3 = indicesByUUID1[uuid1];
                  if (index3 !== undefined && index3 >= nCachedObjects1) {
                      // move existing object into the CACHED region
                      const lastCachedIndex1 = nCachedObjects1++, firstActiveObject1 = objects1[lastCachedIndex1];
                      indicesByUUID1[firstActiveObject1.uuid] = index3;
                      objects1[index3] = firstActiveObject1;
                      indicesByUUID1[uuid1] = lastCachedIndex1;
                      objects1[lastCachedIndex1] = object1;
                      // accounting is done, now do the same for all bindings
                      for(let j1 = 0, m1 = nBindings1; j1 !== m1; ++j1){
                          const bindingsForPath1 = bindings1[j1], firstActive1 = bindingsForPath1[lastCachedIndex1], binding1 = bindingsForPath1[index3];
                          bindingsForPath1[index3] = firstActive1;
                          bindingsForPath1[lastCachedIndex1] = binding1;
                      }
                  }
              } // for arguments
              this.nCachedObjects_ = nCachedObjects1;
          }
          // remove & forget
          uncache() {
              const objects1 = this._objects, indicesByUUID1 = this._indicesByUUID, bindings1 = this._bindings, nBindings1 = bindings1.length;
              let nCachedObjects1 = this.nCachedObjects_, nObjects1 = objects1.length;
              for(let i3 = 0, n3 = arguments.length; i3 !== n3; ++i3){
                  const object1 = arguments[i3], uuid1 = object1.uuid, index3 = indicesByUUID1[uuid1];
                  if (index3 !== undefined) {
                      delete indicesByUUID1[uuid1];
                      if (index3 < nCachedObjects1) {
                          // object is cached, shrink the CACHED region
                          const firstActiveIndex1 = --nCachedObjects1, lastCachedObject1 = objects1[firstActiveIndex1], lastIndex1 = --nObjects1, lastObject1 = objects1[lastIndex1];
                          // last cached object takes this object's place
                          indicesByUUID1[lastCachedObject1.uuid] = index3;
                          objects1[index3] = lastCachedObject1;
                          // last object goes to the activated slot and pop
                          indicesByUUID1[lastObject1.uuid] = firstActiveIndex1;
                          objects1[firstActiveIndex1] = lastObject1;
                          objects1.pop();
                          // accounting is done, now do the same for all bindings
                          for(let j1 = 0, m1 = nBindings1; j1 !== m1; ++j1){
                              const bindingsForPath1 = bindings1[j1], lastCached1 = bindingsForPath1[firstActiveIndex1], last1 = bindingsForPath1[lastIndex1];
                              bindingsForPath1[index3] = lastCached1;
                              bindingsForPath1[firstActiveIndex1] = last1;
                              bindingsForPath1.pop();
                          }
                      } else {
                          // object is active, just swap with the last and pop
                          const lastIndex1 = --nObjects1, lastObject1 = objects1[lastIndex1];
                          if (lastIndex1 > 0) indicesByUUID1[lastObject1.uuid] = index3;
                          objects1[index3] = lastObject1;
                          objects1.pop();
                          // accounting is done, now do the same for all bindings
                          for(let j1 = 0, m1 = nBindings1; j1 !== m1; ++j1){
                              const bindingsForPath1 = bindings1[j1];
                              bindingsForPath1[index3] = bindingsForPath1[lastIndex1];
                              bindingsForPath1.pop();
                          }
                      } // cached or active
                  } // if object is known
              } // for arguments
              this.nCachedObjects_ = nCachedObjects1;
          }
          // Internal interface used by befriended PropertyBinding.Composite:
          subscribe_(path1, parsedPath1) {
              // returns an array of bindings for the given path that is changed
              // according to the contained objects in the group
              const indicesByPath1 = this._bindingsIndicesByPath;
              let index3 = indicesByPath1[path1];
              const bindings1 = this._bindings;
              if (index3 !== undefined) return bindings1[index3];
              const paths1 = this._paths, parsedPaths1 = this._parsedPaths, objects1 = this._objects, nObjects1 = objects1.length, nCachedObjects1 = this.nCachedObjects_, bindingsForPath1 = new Array(nObjects1);
              index3 = bindings1.length;
              indicesByPath1[path1] = index3;
              paths1.push(path1);
              parsedPaths1.push(parsedPath1);
              bindings1.push(bindingsForPath1);
              for(let i3 = nCachedObjects1, n3 = objects1.length; i3 !== n3; ++i3){
                  const object1 = objects1[i3];
                  bindingsForPath1[i3] = new PropertyBinding(object1, path1, parsedPath1);
              }
              return bindingsForPath1;
          }
          unsubscribe_(path1) {
              // tells the group to forget about a property path and no longer
              // update the array previously obtained with 'subscribe_'
              const indicesByPath1 = this._bindingsIndicesByPath, index3 = indicesByPath1[path1];
              if (index3 !== undefined) {
                  const paths1 = this._paths, parsedPaths1 = this._parsedPaths, bindings1 = this._bindings, lastBindingsIndex1 = bindings1.length - 1, lastBindings1 = bindings1[lastBindingsIndex1], lastBindingsPath1 = path1[lastBindingsIndex1];
                  indicesByPath1[lastBindingsPath1] = index3;
                  bindings1[index3] = lastBindings1;
                  bindings1.pop();
                  parsedPaths1[index3] = parsedPaths1[lastBindingsIndex1];
                  parsedPaths1.pop();
                  paths1[index3] = paths1[lastBindingsIndex1];
                  paths1.pop();
              }
          }
      }
      AnimationObjectGroup.prototype.isAnimationObjectGroup = true;
      class AnimationAction {
          constructor(mixer1, clip1, localRoot1 = null, blendMode1 = clip1.blendMode){
              this._mixer = mixer1;
              this._clip = clip1;
              this._localRoot = localRoot1;
              this.blendMode = blendMode1;
              const tracks1 = clip1.tracks, nTracks1 = tracks1.length, interpolants1 = new Array(nTracks1);
              const interpolantSettings1 = {
                  endingStart: ZeroCurvatureEnding,
                  endingEnd: ZeroCurvatureEnding
              };
              for(let i3 = 0; i3 !== nTracks1; ++i3){
                  const interpolant1 = tracks1[i3].createInterpolant(null);
                  interpolants1[i3] = interpolant1;
                  interpolant1.settings = interpolantSettings1;
              }
              this._interpolantSettings = interpolantSettings1;
              this._interpolants = interpolants1; // bound by the mixer
              // inside: PropertyMixer (managed by the mixer)
              this._propertyBindings = new Array(nTracks1);
              this._cacheIndex = null; // for the memory manager
              this._byClipCacheIndex = null; // for the memory manager
              this._timeScaleInterpolant = null;
              this._weightInterpolant = null;
              this.loop = LoopRepeat;
              this._loopCount = -1;
              // global mixer time when the action is to be started
              // it's set back to 'null' upon start of the action
              this._startTime = null;
              // scaled local time of the action
              // gets clamped or wrapped to 0..clip.duration according to loop
              this.time = 0;
              this.timeScale = 1;
              this._effectiveTimeScale = 1;
              this.weight = 1;
              this._effectiveWeight = 1;
              this.repetitions = Infinity; // no. of repetitions when looping
              this.paused = false; // true -> zero effective time scale
              this.enabled = true; // false -> zero effective weight
              this.clampWhenFinished = false; // keep feeding the last frame?
              this.zeroSlopeAtStart = true; // for smooth interpolation w/o separate
              this.zeroSlopeAtEnd = true; // clips for start, loop and end
          }
          // State & Scheduling
          play() {
              this._mixer._activateAction(this);
              return this;
          }
          stop() {
              this._mixer._deactivateAction(this);
              return this.reset();
          }
          reset() {
              this.paused = false;
              this.enabled = true;
              this.time = 0; // restart clip
              this._loopCount = -1; // forget previous loops
              this._startTime = null; // forget scheduling
              return this.stopFading().stopWarping();
          }
          isRunning() {
              return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
          }
          // return true when play has been called
          isScheduled() {
              return this._mixer._isActiveAction(this);
          }
          startAt(time1) {
              this._startTime = time1;
              return this;
          }
          setLoop(mode1, repetitions1) {
              this.loop = mode1;
              this.repetitions = repetitions1;
              return this;
          }
          // Weight
          // set the weight stopping any scheduled fading
          // although .enabled = false yields an effective weight of zero, this
          // method does *not* change .enabled, because it would be confusing
          setEffectiveWeight(weight2) {
              this.weight = weight2;
              // note: same logic as when updated at runtime
              this._effectiveWeight = this.enabled ? weight2 : 0;
              return this.stopFading();
          }
          // return the weight considering fading and .enabled
          getEffectiveWeight() {
              return this._effectiveWeight;
          }
          fadeIn(duration1) {
              return this._scheduleFading(duration1, 0, 1);
          }
          fadeOut(duration1) {
              return this._scheduleFading(duration1, 1, 0);
          }
          crossFadeFrom(fadeOutAction1, duration1, warp1) {
              fadeOutAction1.fadeOut(duration1);
              this.fadeIn(duration1);
              if (warp1) {
                  const fadeInDuration1 = this._clip.duration, fadeOutDuration1 = fadeOutAction1._clip.duration, startEndRatio1 = fadeOutDuration1 / fadeInDuration1, endStartRatio1 = fadeInDuration1 / fadeOutDuration1;
                  fadeOutAction1.warp(1.0, startEndRatio1, duration1);
                  this.warp(endStartRatio1, 1.0, duration1);
              }
              return this;
          }
          crossFadeTo(fadeInAction1, duration1, warp1) {
              return fadeInAction1.crossFadeFrom(this, duration1, warp1);
          }
          stopFading() {
              const weightInterpolant1 = this._weightInterpolant;
              if (weightInterpolant1 !== null) {
                  this._weightInterpolant = null;
                  this._mixer._takeBackControlInterpolant(weightInterpolant1);
              }
              return this;
          }
          // Time Scale Control
          // set the time scale stopping any scheduled warping
          // although .paused = true yields an effective time scale of zero, this
          // method does *not* change .paused, because it would be confusing
          setEffectiveTimeScale(timeScale1) {
              this.timeScale = timeScale1;
              this._effectiveTimeScale = this.paused ? 0 : timeScale1;
              return this.stopWarping();
          }
          // return the time scale considering warping and .paused
          getEffectiveTimeScale() {
              return this._effectiveTimeScale;
          }
          setDuration(duration1) {
              this.timeScale = this._clip.duration / duration1;
              return this.stopWarping();
          }
          syncWith(action1) {
              this.time = action1.time;
              this.timeScale = action1.timeScale;
              return this.stopWarping();
          }
          halt(duration1) {
              return this.warp(this._effectiveTimeScale, 0, duration1);
          }
          warp(startTimeScale1, endTimeScale1, duration1) {
              const mixer1 = this._mixer, now1 = mixer1.time, timeScale1 = this.timeScale;
              let interpolant1 = this._timeScaleInterpolant;
              if (interpolant1 === null) {
                  interpolant1 = mixer1._lendControlInterpolant();
                  this._timeScaleInterpolant = interpolant1;
              }
              const times1 = interpolant1.parameterPositions, values1 = interpolant1.sampleValues;
              times1[0] = now1;
              times1[1] = now1 + duration1;
              values1[0] = startTimeScale1 / timeScale1;
              values1[1] = endTimeScale1 / timeScale1;
              return this;
          }
          stopWarping() {
              const timeScaleInterpolant1 = this._timeScaleInterpolant;
              if (timeScaleInterpolant1 !== null) {
                  this._timeScaleInterpolant = null;
                  this._mixer._takeBackControlInterpolant(timeScaleInterpolant1);
              }
              return this;
          }
          // Object Accessors
          getMixer() {
              return this._mixer;
          }
          getClip() {
              return this._clip;
          }
          getRoot() {
              return this._localRoot || this._mixer._root;
          }
          // Interna
          _update(time1, deltaTime1, timeDirection1, accuIndex1) {
              // called by the mixer
              if (!this.enabled) {
                  // call ._updateWeight() to update ._effectiveWeight
                  this._updateWeight(time1);
                  return;
              }
              const startTime1 = this._startTime;
              if (startTime1 !== null) {
                  // check for scheduled start of action
                  const timeRunning1 = (time1 - startTime1) * timeDirection1;
                  if (timeRunning1 < 0 || timeDirection1 === 0) return; // yet to come / don't decide when delta = 0
                  // start
                  this._startTime = null; // unschedule
                  deltaTime1 = timeDirection1 * timeRunning1;
              }
              // apply time scale and advance time
              deltaTime1 *= this._updateTimeScale(time1);
              const clipTime1 = this._updateTime(deltaTime1);
              // note: _updateTime may disable the action resulting in
              // an effective weight of 0
              const weight2 = this._updateWeight(time1);
              if (weight2 > 0) {
                  const interpolants1 = this._interpolants;
                  const propertyMixers1 = this._propertyBindings;
                  switch(this.blendMode){
                      case AdditiveAnimationBlendMode:
                          for(let j1 = 0, m1 = interpolants1.length; j1 !== m1; ++j1){
                              interpolants1[j1].evaluate(clipTime1);
                              propertyMixers1[j1].accumulateAdditive(weight2);
                          }
                          break;
                      case NormalAnimationBlendMode:
                      default:
                          for(let j1 = 0, m1 = interpolants1.length; j1 !== m1; ++j1){
                              interpolants1[j1].evaluate(clipTime1);
                              propertyMixers1[j1].accumulate(accuIndex1, weight2);
                          }
                  }
              }
          }
          _updateWeight(time1) {
              let weight2 = 0;
              if (this.enabled) {
                  weight2 = this.weight;
                  const interpolant1 = this._weightInterpolant;
                  if (interpolant1 !== null) {
                      const interpolantValue1 = interpolant1.evaluate(time1)[0];
                      weight2 *= interpolantValue1;
                      if (time1 > interpolant1.parameterPositions[1]) {
                          this.stopFading();
                          if (interpolantValue1 === 0) // faded out, disable
                          this.enabled = false;
                      }
                  }
              }
              this._effectiveWeight = weight2;
              return weight2;
          }
          _updateTimeScale(time1) {
              let timeScale1 = 0;
              if (!this.paused) {
                  timeScale1 = this.timeScale;
                  const interpolant1 = this._timeScaleInterpolant;
                  if (interpolant1 !== null) {
                      const interpolantValue1 = interpolant1.evaluate(time1)[0];
                      timeScale1 *= interpolantValue1;
                      if (time1 > interpolant1.parameterPositions[1]) {
                          this.stopWarping();
                          if (timeScale1 === 0) // motion has halted, pause
                          this.paused = true;
                          else // warp done - apply final time scale
                          this.timeScale = timeScale1;
                      }
                  }
              }
              this._effectiveTimeScale = timeScale1;
              return timeScale1;
          }
          _updateTime(deltaTime1) {
              const duration1 = this._clip.duration;
              const loop1 = this.loop;
              let time1 = this.time + deltaTime1;
              let loopCount1 = this._loopCount;
              const pingPong1 = loop1 === LoopPingPong;
              if (deltaTime1 === 0) {
                  if (loopCount1 === -1) return time1;
                  return pingPong1 && (loopCount1 & 1) === 1 ? duration1 - time1 : time1;
              }
              if (loop1 === LoopOnce) {
                  if (loopCount1 === -1) {
                      // just started
                      this._loopCount = 0;
                      this._setEndings(true, true, false);
                  }
                  handle_stop: {
                      if (time1 >= duration1) time1 = duration1;
                      else if (time1 < 0) time1 = 0;
                      else {
                          this.time = time1;
                          break handle_stop;
                      }
                      if (this.clampWhenFinished) this.paused = true;
                      else this.enabled = false;
                      this.time = time1;
                      this._mixer.dispatchEvent({
                          type: "finished",
                          action: this,
                          direction: deltaTime1 < 0 ? -1 : 1
                      });
                  }
              } else {
                  if (loopCount1 === -1) {
                      // just started
                      if (deltaTime1 >= 0) {
                          loopCount1 = 0;
                          this._setEndings(true, this.repetitions === 0, pingPong1);
                      } else // when looping in reverse direction, the initial
                      // transition through zero counts as a repetition,
                      // so leave loopCount at -1
                      this._setEndings(this.repetitions === 0, true, pingPong1);
                  }
                  if (time1 >= duration1 || time1 < 0) {
                      // wrap around
                      const loopDelta1 = Math.floor(time1 / duration1); // signed
                      time1 -= duration1 * loopDelta1;
                      loopCount1 += Math.abs(loopDelta1);
                      const pending1 = this.repetitions - loopCount1;
                      if (pending1 <= 0) {
                          // have to stop (switch state, clamp time, fire event)
                          if (this.clampWhenFinished) this.paused = true;
                          else this.enabled = false;
                          time1 = deltaTime1 > 0 ? duration1 : 0;
                          this.time = time1;
                          this._mixer.dispatchEvent({
                              type: "finished",
                              action: this,
                              direction: deltaTime1 > 0 ? 1 : -1
                          });
                      } else {
                          // keep running
                          if (pending1 === 1) {
                              // entering the last round
                              const atStart1 = deltaTime1 < 0;
                              this._setEndings(atStart1, !atStart1, pingPong1);
                          } else this._setEndings(false, false, pingPong1);
                          this._loopCount = loopCount1;
                          this.time = time1;
                          this._mixer.dispatchEvent({
                              type: "loop",
                              action: this,
                              loopDelta: loopDelta1
                          });
                      }
                  } else this.time = time1;
                  if (pingPong1 && (loopCount1 & 1) === 1) // invert time for the "pong round"
                  return duration1 - time1;
              }
              return time1;
          }
          _setEndings(atStart1, atEnd1, pingPong1) {
              const settings1 = this._interpolantSettings;
              if (pingPong1) {
                  settings1.endingStart = ZeroSlopeEnding;
                  settings1.endingEnd = ZeroSlopeEnding;
              } else {
                  // assuming for LoopOnce atStart == atEnd == true
                  if (atStart1) settings1.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;
                  else settings1.endingStart = WrapAroundEnding;
                  if (atEnd1) settings1.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;
                  else settings1.endingEnd = WrapAroundEnding;
              }
          }
          _scheduleFading(duration1, weightNow1, weightThen1) {
              const mixer1 = this._mixer, now1 = mixer1.time;
              let interpolant1 = this._weightInterpolant;
              if (interpolant1 === null) {
                  interpolant1 = mixer1._lendControlInterpolant();
                  this._weightInterpolant = interpolant1;
              }
              const times1 = interpolant1.parameterPositions, values1 = interpolant1.sampleValues;
              times1[0] = now1;
              values1[0] = weightNow1;
              times1[1] = now1 + duration1;
              values1[1] = weightThen1;
              return this;
          }
      }
      class AnimationMixer extends EventDispatcher {
          constructor(root1){
              super();
              this._root = root1;
              this._initMemoryManager();
              this._accuIndex = 0;
              this.time = 0;
              this.timeScale = 1.0;
          }
          _bindAction(action1, prototypeAction1) {
              const root1 = action1._localRoot || this._root, tracks1 = action1._clip.tracks, nTracks1 = tracks1.length, bindings1 = action1._propertyBindings, interpolants1 = action1._interpolants, rootUuid1 = root1.uuid, bindingsByRoot1 = this._bindingsByRootAndName;
              let bindingsByName1 = bindingsByRoot1[rootUuid1];
              if (bindingsByName1 === undefined) {
                  bindingsByName1 = {};
                  bindingsByRoot1[rootUuid1] = bindingsByName1;
              }
              for(let i3 = 0; i3 !== nTracks1; ++i3){
                  const track1 = tracks1[i3], trackName1 = track1.name;
                  let binding1 = bindingsByName1[trackName1];
                  if (binding1 !== undefined) {
                      ++binding1.referenceCount;
                      bindings1[i3] = binding1;
                  } else {
                      binding1 = bindings1[i3];
                      if (binding1 !== undefined) {
                          // existing binding, make sure the cache knows
                          if (binding1._cacheIndex === null) {
                              ++binding1.referenceCount;
                              this._addInactiveBinding(binding1, rootUuid1, trackName1);
                          }
                          continue;
                      }
                      const path1 = prototypeAction1 && prototypeAction1._propertyBindings[i3].binding.parsedPath;
                      binding1 = new PropertyMixer(PropertyBinding.create(root1, trackName1, path1), track1.ValueTypeName, track1.getValueSize());
                      ++binding1.referenceCount;
                      this._addInactiveBinding(binding1, rootUuid1, trackName1);
                      bindings1[i3] = binding1;
                  }
                  interpolants1[i3].resultBuffer = binding1.buffer;
              }
          }
          _activateAction(action1) {
              if (!this._isActiveAction(action1)) {
                  if (action1._cacheIndex === null) {
                      // this action has been forgotten by the cache, but the user
                      // appears to be still using it -> rebind
                      const rootUuid1 = (action1._localRoot || this._root).uuid, clipUuid1 = action1._clip.uuid, actionsForClip1 = this._actionsByClip[clipUuid1];
                      this._bindAction(action1, actionsForClip1 && actionsForClip1.knownActions[0]);
                      this._addInactiveAction(action1, clipUuid1, rootUuid1);
                  }
                  const bindings1 = action1._propertyBindings;
                  // increment reference counts / sort out state
                  for(let i3 = 0, n3 = bindings1.length; i3 !== n3; ++i3){
                      const binding1 = bindings1[i3];
                      if (binding1.useCount++ === 0) {
                          this._lendBinding(binding1);
                          binding1.saveOriginalState();
                      }
                  }
                  this._lendAction(action1);
              }
          }
          _deactivateAction(action1) {
              if (this._isActiveAction(action1)) {
                  const bindings1 = action1._propertyBindings;
                  // decrement reference counts / sort out state
                  for(let i3 = 0, n3 = bindings1.length; i3 !== n3; ++i3){
                      const binding1 = bindings1[i3];
                      if (--binding1.useCount === 0) {
                          binding1.restoreOriginalState();
                          this._takeBackBinding(binding1);
                      }
                  }
                  this._takeBackAction(action1);
              }
          }
          // Memory manager
          _initMemoryManager() {
              this._actions = []; // 'nActiveActions' followed by inactive ones
              this._nActiveActions = 0;
              this._actionsByClip = {};
              // inside:
              // {
              // 	knownActions: Array< AnimationAction > - used as prototypes
              // 	actionByRoot: AnimationAction - lookup
              // }
              this._bindings = []; // 'nActiveBindings' followed by inactive ones
              this._nActiveBindings = 0;
              this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >
              this._controlInterpolants = []; // same game as above
              this._nActiveControlInterpolants = 0;
              const scope1 = this;
              this.stats = {
                  actions: {
                      get total () {
                          return scope1._actions.length;
                      },
                      get inUse () {
                          return scope1._nActiveActions;
                      }
                  },
                  bindings: {
                      get total () {
                          return scope1._bindings.length;
                      },
                      get inUse () {
                          return scope1._nActiveBindings;
                      }
                  },
                  controlInterpolants: {
                      get total () {
                          return scope1._controlInterpolants.length;
                      },
                      get inUse () {
                          return scope1._nActiveControlInterpolants;
                      }
                  }
              };
          }
          // Memory management for AnimationAction objects
          _isActiveAction(action1) {
              const index3 = action1._cacheIndex;
              return index3 !== null && index3 < this._nActiveActions;
          }
          _addInactiveAction(action1, clipUuid1, rootUuid1) {
              const actions1 = this._actions, actionsByClip1 = this._actionsByClip;
              let actionsForClip1 = actionsByClip1[clipUuid1];
              if (actionsForClip1 === undefined) {
                  actionsForClip1 = {
                      knownActions: [
                          action1
                      ],
                      actionByRoot: {}
                  };
                  action1._byClipCacheIndex = 0;
                  actionsByClip1[clipUuid1] = actionsForClip1;
              } else {
                  const knownActions1 = actionsForClip1.knownActions;
                  action1._byClipCacheIndex = knownActions1.length;
                  knownActions1.push(action1);
              }
              action1._cacheIndex = actions1.length;
              actions1.push(action1);
              actionsForClip1.actionByRoot[rootUuid1] = action1;
          }
          _removeInactiveAction(action1) {
              const actions1 = this._actions, lastInactiveAction1 = actions1[actions1.length - 1], cacheIndex1 = action1._cacheIndex;
              lastInactiveAction1._cacheIndex = cacheIndex1;
              actions1[cacheIndex1] = lastInactiveAction1;
              actions1.pop();
              action1._cacheIndex = null;
              const clipUuid1 = action1._clip.uuid, actionsByClip1 = this._actionsByClip, actionsForClip1 = actionsByClip1[clipUuid1], knownActionsForClip1 = actionsForClip1.knownActions, lastKnownAction1 = knownActionsForClip1[knownActionsForClip1.length - 1], byClipCacheIndex1 = action1._byClipCacheIndex;
              lastKnownAction1._byClipCacheIndex = byClipCacheIndex1;
              knownActionsForClip1[byClipCacheIndex1] = lastKnownAction1;
              knownActionsForClip1.pop();
              action1._byClipCacheIndex = null;
              const actionByRoot1 = actionsForClip1.actionByRoot, rootUuid1 = (action1._localRoot || this._root).uuid;
              delete actionByRoot1[rootUuid1];
              if (knownActionsForClip1.length === 0) delete actionsByClip1[clipUuid1];
              this._removeInactiveBindingsForAction(action1);
          }
          _removeInactiveBindingsForAction(action1) {
              const bindings1 = action1._propertyBindings;
              for(let i3 = 0, n3 = bindings1.length; i3 !== n3; ++i3){
                  const binding1 = bindings1[i3];
                  if (--binding1.referenceCount === 0) this._removeInactiveBinding(binding1);
              }
          }
          _lendAction(action1) {
              // [ active actions |  inactive actions  ]
              // [  active actions >| inactive actions ]
              //                 s        a
              //                  <-swap->
              //                 a        s
              const actions1 = this._actions, prevIndex1 = action1._cacheIndex, lastActiveIndex1 = this._nActiveActions++, firstInactiveAction1 = actions1[lastActiveIndex1];
              action1._cacheIndex = lastActiveIndex1;
              actions1[lastActiveIndex1] = action1;
              firstInactiveAction1._cacheIndex = prevIndex1;
              actions1[prevIndex1] = firstInactiveAction1;
          }
          _takeBackAction(action1) {
              // [  active actions  | inactive actions ]
              // [ active actions |< inactive actions  ]
              //        a        s
              //         <-swap->
              //        s        a
              const actions1 = this._actions, prevIndex1 = action1._cacheIndex, firstInactiveIndex1 = --this._nActiveActions, lastActiveAction1 = actions1[firstInactiveIndex1];
              action1._cacheIndex = firstInactiveIndex1;
              actions1[firstInactiveIndex1] = action1;
              lastActiveAction1._cacheIndex = prevIndex1;
              actions1[prevIndex1] = lastActiveAction1;
          }
          // Memory management for PropertyMixer objects
          _addInactiveBinding(binding1, rootUuid1, trackName1) {
              const bindingsByRoot1 = this._bindingsByRootAndName, bindings1 = this._bindings;
              let bindingByName1 = bindingsByRoot1[rootUuid1];
              if (bindingByName1 === undefined) {
                  bindingByName1 = {};
                  bindingsByRoot1[rootUuid1] = bindingByName1;
              }
              bindingByName1[trackName1] = binding1;
              binding1._cacheIndex = bindings1.length;
              bindings1.push(binding1);
          }
          _removeInactiveBinding(binding1) {
              const bindings1 = this._bindings, propBinding1 = binding1.binding, rootUuid1 = propBinding1.rootNode.uuid, trackName1 = propBinding1.path, bindingsByRoot1 = this._bindingsByRootAndName, bindingByName1 = bindingsByRoot1[rootUuid1], lastInactiveBinding1 = bindings1[bindings1.length - 1], cacheIndex1 = binding1._cacheIndex;
              lastInactiveBinding1._cacheIndex = cacheIndex1;
              bindings1[cacheIndex1] = lastInactiveBinding1;
              bindings1.pop();
              delete bindingByName1[trackName1];
              if (Object.keys(bindingByName1).length === 0) delete bindingsByRoot1[rootUuid1];
          }
          _lendBinding(binding1) {
              const bindings1 = this._bindings, prevIndex1 = binding1._cacheIndex, lastActiveIndex1 = this._nActiveBindings++, firstInactiveBinding1 = bindings1[lastActiveIndex1];
              binding1._cacheIndex = lastActiveIndex1;
              bindings1[lastActiveIndex1] = binding1;
              firstInactiveBinding1._cacheIndex = prevIndex1;
              bindings1[prevIndex1] = firstInactiveBinding1;
          }
          _takeBackBinding(binding1) {
              const bindings1 = this._bindings, prevIndex1 = binding1._cacheIndex, firstInactiveIndex1 = --this._nActiveBindings, lastActiveBinding1 = bindings1[firstInactiveIndex1];
              binding1._cacheIndex = firstInactiveIndex1;
              bindings1[firstInactiveIndex1] = binding1;
              lastActiveBinding1._cacheIndex = prevIndex1;
              bindings1[prevIndex1] = lastActiveBinding1;
          }
          // Memory management of Interpolants for weight and time scale
          _lendControlInterpolant() {
              const interpolants1 = this._controlInterpolants, lastActiveIndex1 = this._nActiveControlInterpolants++;
              let interpolant1 = interpolants1[lastActiveIndex1];
              if (interpolant1 === undefined) {
                  interpolant1 = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);
                  interpolant1.__cacheIndex = lastActiveIndex1;
                  interpolants1[lastActiveIndex1] = interpolant1;
              }
              return interpolant1;
          }
          _takeBackControlInterpolant(interpolant1) {
              const interpolants1 = this._controlInterpolants, prevIndex1 = interpolant1.__cacheIndex, firstInactiveIndex1 = --this._nActiveControlInterpolants, lastActiveInterpolant1 = interpolants1[firstInactiveIndex1];
              interpolant1.__cacheIndex = firstInactiveIndex1;
              interpolants1[firstInactiveIndex1] = interpolant1;
              lastActiveInterpolant1.__cacheIndex = prevIndex1;
              interpolants1[prevIndex1] = lastActiveInterpolant1;
          }
          // return an action for a clip optionally using a custom root target
          // object (this method allocates a lot of dynamic memory in case a
          // previously unknown clip/root combination is specified)
          clipAction(clip1, optionalRoot1, blendMode1) {
              const root1 = optionalRoot1 || this._root, rootUuid1 = root1.uuid;
              let clipObject1 = typeof clip1 === "string" ? AnimationClip.findByName(root1, clip1) : clip1;
              const clipUuid1 = clipObject1 !== null ? clipObject1.uuid : clip1;
              const actionsForClip1 = this._actionsByClip[clipUuid1];
              let prototypeAction1 = null;
              if (blendMode1 === undefined) {
                  if (clipObject1 !== null) blendMode1 = clipObject1.blendMode;
                  else blendMode1 = NormalAnimationBlendMode;
              }
              if (actionsForClip1 !== undefined) {
                  const existingAction1 = actionsForClip1.actionByRoot[rootUuid1];
                  if (existingAction1 !== undefined && existingAction1.blendMode === blendMode1) return existingAction1;
                  // we know the clip, so we don't have to parse all
                  // the bindings again but can just copy
                  prototypeAction1 = actionsForClip1.knownActions[0];
                  // also, take the clip from the prototype action
                  if (clipObject1 === null) clipObject1 = prototypeAction1._clip;
              }
              // clip must be known when specified via string
              if (clipObject1 === null) return null;
              // allocate all resources required to run it
              const newAction1 = new AnimationAction(this, clipObject1, optionalRoot1, blendMode1);
              this._bindAction(newAction1, prototypeAction1);
              // and make the action known to the memory manager
              this._addInactiveAction(newAction1, clipUuid1, rootUuid1);
              return newAction1;
          }
          // get an existing action
          existingAction(clip1, optionalRoot1) {
              const root1 = optionalRoot1 || this._root, rootUuid1 = root1.uuid, clipObject1 = typeof clip1 === "string" ? AnimationClip.findByName(root1, clip1) : clip1, clipUuid1 = clipObject1 ? clipObject1.uuid : clip1, actionsForClip1 = this._actionsByClip[clipUuid1];
              if (actionsForClip1 !== undefined) return actionsForClip1.actionByRoot[rootUuid1] || null;
              return null;
          }
          // deactivates all previously scheduled actions
          stopAllAction() {
              const actions1 = this._actions, nActions1 = this._nActiveActions;
              for(let i3 = nActions1 - 1; i3 >= 0; --i3)actions1[i3].stop();
              return this;
          }
          // advance the time and update apply the animation
          update(deltaTime1) {
              deltaTime1 *= this.timeScale;
              const actions1 = this._actions, nActions1 = this._nActiveActions, time1 = this.time += deltaTime1, timeDirection1 = Math.sign(deltaTime1), accuIndex1 = this._accuIndex ^= 1;
              // run active actions
              for(let i3 = 0; i3 !== nActions1; ++i3){
                  const action1 = actions1[i3];
                  action1._update(time1, deltaTime1, timeDirection1, accuIndex1);
              }
              // update scene graph
              const bindings1 = this._bindings, nBindings1 = this._nActiveBindings;
              for(let i3 = 0; i3 !== nBindings1; ++i3)bindings1[i3].apply(accuIndex1);
              return this;
          }
          // Allows you to seek to a specific time in an animation.
          setTime(timeInSeconds1) {
              this.time = 0; // Zero out time attribute for AnimationMixer object;
              for(let i3 = 0; i3 < this._actions.length; i3++)this._actions[i3].time = 0; // Zero out time attribute for all associated AnimationAction objects.
              return this.update(timeInSeconds1); // Update used to set exact time. Returns "this" AnimationMixer object.
          }
          // return this mixer's root target object
          getRoot() {
              return this._root;
          }
          // free all resources specific to a particular clip
          uncacheClip(clip1) {
              const actions1 = this._actions, clipUuid1 = clip1.uuid, actionsByClip1 = this._actionsByClip, actionsForClip1 = actionsByClip1[clipUuid1];
              if (actionsForClip1 !== undefined) {
                  // note: just calling _removeInactiveAction would mess up the
                  // iteration state and also require updating the state we can
                  // just throw away
                  const actionsToRemove1 = actionsForClip1.knownActions;
                  for(let i3 = 0, n3 = actionsToRemove1.length; i3 !== n3; ++i3){
                      const action1 = actionsToRemove1[i3];
                      this._deactivateAction(action1);
                      const cacheIndex1 = action1._cacheIndex, lastInactiveAction1 = actions1[actions1.length - 1];
                      action1._cacheIndex = null;
                      action1._byClipCacheIndex = null;
                      lastInactiveAction1._cacheIndex = cacheIndex1;
                      actions1[cacheIndex1] = lastInactiveAction1;
                      actions1.pop();
                      this._removeInactiveBindingsForAction(action1);
                  }
                  delete actionsByClip1[clipUuid1];
              }
          }
          // free all resources specific to a particular root target object
          uncacheRoot(root1) {
              const rootUuid1 = root1.uuid, actionsByClip1 = this._actionsByClip;
              for(const clipUuid1 in actionsByClip1){
                  const actionByRoot1 = actionsByClip1[clipUuid1].actionByRoot, action1 = actionByRoot1[rootUuid1];
                  if (action1 !== undefined) {
                      this._deactivateAction(action1);
                      this._removeInactiveAction(action1);
                  }
              }
              const bindingsByRoot1 = this._bindingsByRootAndName, bindingByName1 = bindingsByRoot1[rootUuid1];
              if (bindingByName1 !== undefined) for(const trackName1 in bindingByName1){
                  const binding1 = bindingByName1[trackName1];
                  binding1.restoreOriginalState();
                  this._removeInactiveBinding(binding1);
              }
          }
          // remove a targeted clip from the cache
          uncacheAction(clip1, optionalRoot1) {
              const action1 = this.existingAction(clip1, optionalRoot1);
              if (action1 !== null) {
                  this._deactivateAction(action1);
                  this._removeInactiveAction(action1);
              }
          }
      }
      AnimationMixer.prototype._controlInterpolantsResultBuffer = new Float32Array(1);
      class Uniform {
          constructor(value1){
              if (typeof value1 === "string") {
                  console.warn("THREE.Uniform: Type parameter is no longer needed.");
                  value1 = arguments[1];
              }
              this.value = value1;
          }
          clone() {
              return new Uniform(this.value.clone === undefined ? this.value : this.value.clone());
          }
      }
      class InstancedInterleavedBuffer extends InterleavedBuffer {
          constructor(array1, stride1, meshPerAttribute1 = 1){
              super(array1, stride1);
              this.meshPerAttribute = meshPerAttribute1;
          }
          copy(source1) {
              super.copy(source1);
              this.meshPerAttribute = source1.meshPerAttribute;
              return this;
          }
          clone(data1) {
              const ib1 = super.clone(data1);
              ib1.meshPerAttribute = this.meshPerAttribute;
              return ib1;
          }
          toJSON(data1) {
              const json1 = super.toJSON(data1);
              json1.isInstancedInterleavedBuffer = true;
              json1.meshPerAttribute = this.meshPerAttribute;
              return json1;
          }
      }
      InstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;
      class GLBufferAttribute {
          constructor(buffer1, type1, itemSize1, elementSize1, count1){
              this.buffer = buffer1;
              this.type = type1;
              this.itemSize = itemSize1;
              this.elementSize = elementSize1;
              this.count = count1;
              this.version = 0;
          }
          set needsUpdate(value1) {
              if (value1 === true) this.version++;
          }
          setBuffer(buffer1) {
              this.buffer = buffer1;
              return this;
          }
          setType(type1, elementSize1) {
              this.type = type1;
              this.elementSize = elementSize1;
              return this;
          }
          setItemSize(itemSize1) {
              this.itemSize = itemSize1;
              return this;
          }
          setCount(count1) {
              this.count = count1;
              return this;
          }
      }
      GLBufferAttribute.prototype.isGLBufferAttribute = true;
      class Raycaster {
          constructor(origin1, direction1, near1 = 0, far1 = Infinity){
              this.ray = new Ray(origin1, direction1);
              // direction is assumed to be normalized (for accurate distance calculations)
              this.near = near1;
              this.far = far1;
              this.camera = null;
              this.layers = new Layers();
              this.params = {
                  Mesh: {},
                  Line: {
                      threshold: 1
                  },
                  LOD: {},
                  Points: {
                      threshold: 1
                  },
                  Sprite: {}
              };
          }
          set(origin1, direction1) {
              // direction is assumed to be normalized (for accurate distance calculations)
              this.ray.set(origin1, direction1);
          }
          setFromCamera(coords1, camera1) {
              if (camera1.isPerspectiveCamera) {
                  this.ray.origin.setFromMatrixPosition(camera1.matrixWorld);
                  this.ray.direction.set(coords1.x, coords1.y, 0.5).unproject(camera1).sub(this.ray.origin).normalize();
                  this.camera = camera1;
              } else if (camera1.isOrthographicCamera) {
                  this.ray.origin.set(coords1.x, coords1.y, (camera1.near + camera1.far) / (camera1.near - camera1.far)).unproject(camera1); // set origin in plane of camera
                  this.ray.direction.set(0, 0, -1).transformDirection(camera1.matrixWorld);
                  this.camera = camera1;
              } else console.error("THREE.Raycaster: Unsupported camera type: " + camera1.type);
          }
          intersectObject(object1, recursive1 = true, intersects1 = []) {
              intersectObject(object1, this, intersects1, recursive1);
              intersects1.sort(ascSort);
              return intersects1;
          }
          intersectObjects(objects1, recursive1 = true, intersects1 = []) {
              for(let i3 = 0, l1 = objects1.length; i3 < l1; i3++)intersectObject(objects1[i3], this, intersects1, recursive1);
              intersects1.sort(ascSort);
              return intersects1;
          }
      }
      function ascSort(a3, b3) {
          return a3.distance - b3.distance;
      }
      function intersectObject(object1, raycaster1, intersects1, recursive1) {
          if (object1.layers.test(raycaster1.layers)) object1.raycast(raycaster1, intersects1);
          if (recursive1 === true) {
              const children1 = object1.children;
              for(let i3 = 0, l1 = children1.length; i3 < l1; i3++)intersectObject(children1[i3], raycaster1, intersects1, true);
          }
      }
      /**
     * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
     *
     * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
     * The azimuthal angle (theta) is measured from the positive z-axis.
     */ class Spherical {
          constructor(radius1 = 1, phi1 = 0, theta1 = 0){
              this.radius = radius1;
              this.phi = phi1; // polar angle
              this.theta = theta1; // azimuthal angle
              return this;
          }
          set(radius1, phi1, theta1) {
              this.radius = radius1;
              this.phi = phi1;
              this.theta = theta1;
              return this;
          }
          copy(other1) {
              this.radius = other1.radius;
              this.phi = other1.phi;
              this.theta = other1.theta;
              return this;
          }
          // restrict phi to be betwee EPS and PI-EPS
          makeSafe() {
              const EPS1 = 0.000001;
              this.phi = Math.max(EPS1, Math.min(Math.PI - EPS1, this.phi));
              return this;
          }
          setFromVector3(v4) {
              return this.setFromCartesianCoords(v4.x, v4.y, v4.z);
          }
          setFromCartesianCoords(x4, y3, z3) {
              this.radius = Math.sqrt(x4 * x4 + y3 * y3 + z3 * z3);
              if (this.radius === 0) {
                  this.theta = 0;
                  this.phi = 0;
              } else {
                  this.theta = Math.atan2(x4, z3);
                  this.phi = Math.acos(clamp$1(y3 / this.radius, -1, 1));
              }
              return this;
          }
          clone() {
              return new this.constructor().copy(this);
          }
      }
      /**
     * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
     */ class Cylindrical {
          constructor(radius1 = 1, theta1 = 0, y3 = 0){
              this.radius = radius1; // distance from the origin to a point in the x-z plane
              this.theta = theta1; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
              this.y = y3; // height above the x-z plane
              return this;
          }
          set(radius1, theta1, y3) {
              this.radius = radius1;
              this.theta = theta1;
              this.y = y3;
              return this;
          }
          copy(other1) {
              this.radius = other1.radius;
              this.theta = other1.theta;
              this.y = other1.y;
              return this;
          }
          setFromVector3(v4) {
              return this.setFromCartesianCoords(v4.x, v4.y, v4.z);
          }
          setFromCartesianCoords(x4, y3, z3) {
              this.radius = Math.sqrt(x4 * x4 + z3 * z3);
              this.theta = Math.atan2(x4, z3);
              this.y = y3;
              return this;
          }
          clone() {
              return new this.constructor().copy(this);
          }
      }
      const _vector$4 = /*@__PURE__*/ new Vector2();
      class Box2 {
          constructor(min1 = new Vector2(Infinity, Infinity), max1 = new Vector2(-Infinity, -Infinity)){
              this.min = min1;
              this.max = max1;
          }
          set(min1, max1) {
              this.min.copy(min1);
              this.max.copy(max1);
              return this;
          }
          setFromPoints(points1) {
              this.makeEmpty();
              for(let i3 = 0, il1 = points1.length; i3 < il1; i3++)this.expandByPoint(points1[i3]);
              return this;
          }
          setFromCenterAndSize(center1, size1) {
              const halfSize1 = _vector$4.copy(size1).multiplyScalar(0.5);
              this.min.copy(center1).sub(halfSize1);
              this.max.copy(center1).add(halfSize1);
              return this;
          }
          clone() {
              return new this.constructor().copy(this);
          }
          copy(box1) {
              this.min.copy(box1.min);
              this.max.copy(box1.max);
              return this;
          }
          makeEmpty() {
              this.min.x = this.min.y = Infinity;
              this.max.x = this.max.y = -Infinity;
              return this;
          }
          isEmpty() {
              // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
              return this.max.x < this.min.x || this.max.y < this.min.y;
          }
          getCenter(target1) {
              return this.isEmpty() ? target1.set(0, 0) : target1.addVectors(this.min, this.max).multiplyScalar(0.5);
          }
          getSize(target1) {
              return this.isEmpty() ? target1.set(0, 0) : target1.subVectors(this.max, this.min);
          }
          expandByPoint(point1) {
              this.min.min(point1);
              this.max.max(point1);
              return this;
          }
          expandByVector(vector1) {
              this.min.sub(vector1);
              this.max.add(vector1);
              return this;
          }
          expandByScalar(scalar1) {
              this.min.addScalar(-scalar1);
              this.max.addScalar(scalar1);
              return this;
          }
          containsPoint(point1) {
              return point1.x < this.min.x || point1.x > this.max.x || point1.y < this.min.y || point1.y > this.max.y ? false : true;
          }
          containsBox(box1) {
              return this.min.x <= box1.min.x && box1.max.x <= this.max.x && this.min.y <= box1.min.y && box1.max.y <= this.max.y;
          }
          getParameter(point1, target1) {
              // This can potentially have a divide by zero if the box
              // has a size dimension of 0.
              return target1.set((point1.x - this.min.x) / (this.max.x - this.min.x), (point1.y - this.min.y) / (this.max.y - this.min.y));
          }
          intersectsBox(box1) {
              // using 4 splitting planes to rule out intersections
              return box1.max.x < this.min.x || box1.min.x > this.max.x || box1.max.y < this.min.y || box1.min.y > this.max.y ? false : true;
          }
          clampPoint(point1, target1) {
              return target1.copy(point1).clamp(this.min, this.max);
          }
          distanceToPoint(point1) {
              const clampedPoint1 = _vector$4.copy(point1).clamp(this.min, this.max);
              return clampedPoint1.sub(point1).length();
          }
          intersect(box1) {
              this.min.max(box1.min);
              this.max.min(box1.max);
              return this;
          }
          union(box1) {
              this.min.min(box1.min);
              this.max.max(box1.max);
              return this;
          }
          translate(offset2) {
              this.min.add(offset2);
              this.max.add(offset2);
              return this;
          }
          equals(box1) {
              return box1.min.equals(this.min) && box1.max.equals(this.max);
          }
      }
      Box2.prototype.isBox2 = true;
      const _startP = /*@__PURE__*/ new Vector3();
      const _startEnd = /*@__PURE__*/ new Vector3();
      class Line3 {
          constructor(start1 = new Vector3(), end1 = new Vector3()){
              this.start = start1;
              this.end = end1;
          }
          set(start1, end1) {
              this.start.copy(start1);
              this.end.copy(end1);
              return this;
          }
          copy(line1) {
              this.start.copy(line1.start);
              this.end.copy(line1.end);
              return this;
          }
          getCenter(target1) {
              return target1.addVectors(this.start, this.end).multiplyScalar(0.5);
          }
          delta(target1) {
              return target1.subVectors(this.end, this.start);
          }
          distanceSq() {
              return this.start.distanceToSquared(this.end);
          }
          distance() {
              return this.start.distanceTo(this.end);
          }
          at(t4, target1) {
              return this.delta(target1).multiplyScalar(t4).add(this.start);
          }
          closestPointToPointParameter(point1, clampToLine1) {
              _startP.subVectors(point1, this.start);
              _startEnd.subVectors(this.end, this.start);
              const startEnd21 = _startEnd.dot(_startEnd);
              const startEnd_startP1 = _startEnd.dot(_startP);
              let t4 = startEnd_startP1 / startEnd21;
              if (clampToLine1) t4 = clamp$1(t4, 0, 1);
              return t4;
          }
          closestPointToPoint(point1, clampToLine1, target1) {
              const t4 = this.closestPointToPointParameter(point1, clampToLine1);
              return this.delta(target1).multiplyScalar(t4).add(this.start);
          }
          applyMatrix4(matrix1) {
              this.start.applyMatrix4(matrix1);
              this.end.applyMatrix4(matrix1);
              return this;
          }
          equals(line1) {
              return line1.start.equals(this.start) && line1.end.equals(this.end);
          }
          clone() {
              return new this.constructor().copy(this);
          }
      }
      const _vector$3 = /*@__PURE__*/ new Vector3();
      class SpotLightHelper extends Object3D {
          constructor(light1, color3){
              super();
              this.light = light1;
              this.light.updateMatrixWorld();
              this.matrix = light1.matrixWorld;
              this.matrixAutoUpdate = false;
              this.color = color3;
              const geometry1 = new BufferGeometry();
              const positions1 = [
                  0,
                  0,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  1,
                  0,
                  1,
                  0,
                  0,
                  0,
                  -1,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  1,
                  1,
                  0,
                  0,
                  0,
                  0,
                  -1,
                  1
              ];
              for(let i3 = 0, j1 = 1, l1 = 32; i3 < l1; i3++, j1++){
                  const p11 = i3 / l1 * Math.PI * 2;
                  const p21 = j1 / l1 * Math.PI * 2;
                  positions1.push(Math.cos(p11), Math.sin(p11), 1, Math.cos(p21), Math.sin(p21), 1);
              }
              geometry1.setAttribute("position", new Float32BufferAttribute(positions1, 3));
              const material1 = new LineBasicMaterial({
                  fog: false,
                  toneMapped: false
              });
              this.cone = new LineSegments(geometry1, material1);
              this.add(this.cone);
              this.update();
          }
          dispose() {
              this.cone.geometry.dispose();
              this.cone.material.dispose();
          }
          update() {
              this.light.updateMatrixWorld();
              const coneLength1 = this.light.distance ? this.light.distance : 1000;
              const coneWidth1 = coneLength1 * Math.tan(this.light.angle);
              this.cone.scale.set(coneWidth1, coneWidth1, coneLength1);
              _vector$3.setFromMatrixPosition(this.light.target.matrixWorld);
              this.cone.lookAt(_vector$3);
              if (this.color !== undefined) this.cone.material.color.set(this.color);
              else this.cone.material.color.copy(this.light.color);
          }
      }
      const _vector$2 = /*@__PURE__*/ new Vector3();
      const _boneMatrix = /*@__PURE__*/ new Matrix4();
      const _matrixWorldInv = /*@__PURE__*/ new Matrix4();
      class SkeletonHelper extends LineSegments {
          constructor(object1){
              const bones1 = getBoneList(object1);
              const geometry1 = new BufferGeometry();
              const vertices1 = [];
              const colors1 = [];
              const color11 = new Color(0, 0, 1);
              const color21 = new Color(0, 1, 0);
              for(let i3 = 0; i3 < bones1.length; i3++){
                  const bone1 = bones1[i3];
                  if (bone1.parent && bone1.parent.isBone) {
                      vertices1.push(0, 0, 0);
                      vertices1.push(0, 0, 0);
                      colors1.push(color11.r, color11.g, color11.b);
                      colors1.push(color21.r, color21.g, color21.b);
                  }
              }
              geometry1.setAttribute("position", new Float32BufferAttribute(vertices1, 3));
              geometry1.setAttribute("color", new Float32BufferAttribute(colors1, 3));
              const material1 = new LineBasicMaterial({
                  vertexColors: true,
                  depthTest: false,
                  depthWrite: false,
                  toneMapped: false,
                  transparent: true
              });
              super(geometry1, material1);
              this.type = "SkeletonHelper";
              this.isSkeletonHelper = true;
              this.root = object1;
              this.bones = bones1;
              this.matrix = object1.matrixWorld;
              this.matrixAutoUpdate = false;
          }
          updateMatrixWorld(force1) {
              const bones1 = this.bones;
              const geometry1 = this.geometry;
              const position1 = geometry1.getAttribute("position");
              _matrixWorldInv.copy(this.root.matrixWorld).invert();
              for(let i3 = 0, j1 = 0; i3 < bones1.length; i3++){
                  const bone1 = bones1[i3];
                  if (bone1.parent && bone1.parent.isBone) {
                      _boneMatrix.multiplyMatrices(_matrixWorldInv, bone1.matrixWorld);
                      _vector$2.setFromMatrixPosition(_boneMatrix);
                      position1.setXYZ(j1, _vector$2.x, _vector$2.y, _vector$2.z);
                      _boneMatrix.multiplyMatrices(_matrixWorldInv, bone1.parent.matrixWorld);
                      _vector$2.setFromMatrixPosition(_boneMatrix);
                      position1.setXYZ(j1 + 1, _vector$2.x, _vector$2.y, _vector$2.z);
                      j1 += 2;
                  }
              }
              geometry1.getAttribute("position").needsUpdate = true;
              super.updateMatrixWorld(force1);
          }
      }
      function getBoneList(object1) {
          const boneList1 = [];
          if (object1.isBone === true) boneList1.push(object1);
          for(let i3 = 0; i3 < object1.children.length; i3++)boneList1.push.apply(boneList1, getBoneList(object1.children[i3]));
          return boneList1;
      }
      class PointLightHelper extends Mesh {
          constructor(light1, sphereSize1, color3){
              const geometry1 = new SphereGeometry(sphereSize1, 4, 2);
              const material1 = new MeshBasicMaterial({
                  wireframe: true,
                  fog: false,
                  toneMapped: false
              });
              super(geometry1, material1);
              this.light = light1;
              this.light.updateMatrixWorld();
              this.color = color3;
              this.type = "PointLightHelper";
              this.matrix = this.light.matrixWorld;
              this.matrixAutoUpdate = false;
              this.update();
          /*
        // TODO: delete this comment?
        const distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
        const distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );
  
        this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
        this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );
  
        const d = light.distance;
  
        if ( d === 0.0 ) {
  
            this.lightDistance.visible = false;
  
        } else {
  
            this.lightDistance.scale.set( d, d, d );
  
        }
  
        this.add( this.lightDistance );
        */ }
          dispose() {
              this.geometry.dispose();
              this.material.dispose();
          }
          update() {
              if (this.color !== undefined) this.material.color.set(this.color);
              else this.material.color.copy(this.light.color);
          /*
            const d = this.light.distance;
  
            if ( d === 0.0 ) {
  
                this.lightDistance.visible = false;
  
            } else {
  
                this.lightDistance.visible = true;
                this.lightDistance.scale.set( d, d, d );
  
            }
            */ }
      }
      const _vector$1 = /*@__PURE__*/ new Vector3();
      const _color1 = /*@__PURE__*/ new Color();
      const _color2 = /*@__PURE__*/ new Color();
      class HemisphereLightHelper extends Object3D {
          constructor(light1, size1, color3){
              super();
              this.light = light1;
              this.light.updateMatrixWorld();
              this.matrix = light1.matrixWorld;
              this.matrixAutoUpdate = false;
              this.color = color3;
              const geometry1 = new OctahedronGeometry(size1);
              geometry1.rotateY(Math.PI * 0.5);
              this.material = new MeshBasicMaterial({
                  wireframe: true,
                  fog: false,
                  toneMapped: false
              });
              if (this.color === undefined) this.material.vertexColors = true;
              const position1 = geometry1.getAttribute("position");
              const colors1 = new Float32Array(position1.count * 3);
              geometry1.setAttribute("color", new BufferAttribute(colors1, 3));
              this.add(new Mesh(geometry1, this.material));
              this.update();
          }
          dispose() {
              this.children[0].geometry.dispose();
              this.children[0].material.dispose();
          }
          update() {
              const mesh1 = this.children[0];
              if (this.color !== undefined) this.material.color.set(this.color);
              else {
                  const colors1 = mesh1.geometry.getAttribute("color");
                  _color1.copy(this.light.color);
                  _color2.copy(this.light.groundColor);
                  for(let i3 = 0, l1 = colors1.count; i3 < l1; i3++){
                      const color3 = i3 < l1 / 2 ? _color1 : _color2;
                      colors1.setXYZ(i3, color3.r, color3.g, color3.b);
                  }
                  colors1.needsUpdate = true;
              }
              mesh1.lookAt(_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate());
          }
      }
      class GridHelper extends LineSegments {
          constructor(size1 = 10, divisions1 = 10, color11 = 0x444444, color21 = 0x888888){
              color11 = new Color(color11);
              color21 = new Color(color21);
              const center1 = divisions1 / 2;
              const step1 = size1 / divisions1;
              const halfSize1 = size1 / 2;
              const vertices1 = [], colors1 = [];
              for(let i3 = 0, j1 = 0, k1 = -halfSize1; i3 <= divisions1; i3++, k1 += step1){
                  vertices1.push(-halfSize1, 0, k1, halfSize1, 0, k1);
                  vertices1.push(k1, 0, -halfSize1, k1, 0, halfSize1);
                  const color3 = i3 === center1 ? color11 : color21;
                  color3.toArray(colors1, j1);
                  j1 += 3;
                  color3.toArray(colors1, j1);
                  j1 += 3;
                  color3.toArray(colors1, j1);
                  j1 += 3;
                  color3.toArray(colors1, j1);
                  j1 += 3;
              }
              const geometry1 = new BufferGeometry();
              geometry1.setAttribute("position", new Float32BufferAttribute(vertices1, 3));
              geometry1.setAttribute("color", new Float32BufferAttribute(colors1, 3));
              const material1 = new LineBasicMaterial({
                  vertexColors: true,
                  toneMapped: false
              });
              super(geometry1, material1);
              this.type = "GridHelper";
          }
      }
      class PolarGridHelper extends LineSegments {
          constructor(radius1 = 10, radials1 = 16, circles1 = 8, divisions1 = 64, color11 = 0x444444, color21 = 0x888888){
              color11 = new Color(color11);
              color21 = new Color(color21);
              const vertices1 = [];
              const colors1 = [];
              // create the radials
              for(let i3 = 0; i3 <= radials1; i3++){
                  const v4 = i3 / radials1 * (Math.PI * 2);
                  const x4 = Math.sin(v4) * radius1;
                  const z3 = Math.cos(v4) * radius1;
                  vertices1.push(0, 0, 0);
                  vertices1.push(x4, 0, z3);
                  const color3 = i3 & 1 ? color11 : color21;
                  colors1.push(color3.r, color3.g, color3.b);
                  colors1.push(color3.r, color3.g, color3.b);
              }
              // create the circles
              for(let i3 = 0; i3 <= circles1; i3++){
                  const color3 = i3 & 1 ? color11 : color21;
                  const r1 = radius1 - radius1 / circles1 * i3;
                  for(let j1 = 0; j1 < divisions1; j1++){
                      // first vertex
                      let v4 = j1 / divisions1 * (Math.PI * 2);
                      let x4 = Math.sin(v4) * r1;
                      let z3 = Math.cos(v4) * r1;
                      vertices1.push(x4, 0, z3);
                      colors1.push(color3.r, color3.g, color3.b);
                      // second vertex
                      v4 = (j1 + 1) / divisions1 * (Math.PI * 2);
                      x4 = Math.sin(v4) * r1;
                      z3 = Math.cos(v4) * r1;
                      vertices1.push(x4, 0, z3);
                      colors1.push(color3.r, color3.g, color3.b);
                  }
              }
              const geometry1 = new BufferGeometry();
              geometry1.setAttribute("position", new Float32BufferAttribute(vertices1, 3));
              geometry1.setAttribute("color", new Float32BufferAttribute(colors1, 3));
              const material1 = new LineBasicMaterial({
                  vertexColors: true,
                  toneMapped: false
              });
              super(geometry1, material1);
              this.type = "PolarGridHelper";
          }
      }
      const _v1 = /*@__PURE__*/ new Vector3();
      const _v2 = /*@__PURE__*/ new Vector3();
      const _v3 = /*@__PURE__*/ new Vector3();
      class DirectionalLightHelper extends Object3D {
          constructor(light1, size1, color3){
              super();
              this.light = light1;
              this.light.updateMatrixWorld();
              this.matrix = light1.matrixWorld;
              this.matrixAutoUpdate = false;
              this.color = color3;
              if (size1 === undefined) size1 = 1;
              let geometry1 = new BufferGeometry();
              geometry1.setAttribute("position", new Float32BufferAttribute([
                  -size1,
                  size1,
                  0,
                  size1,
                  size1,
                  0,
                  size1,
                  -size1,
                  0,
                  -size1,
                  -size1,
                  0,
                  -size1,
                  size1,
                  0
              ], 3));
              const material1 = new LineBasicMaterial({
                  fog: false,
                  toneMapped: false
              });
              this.lightPlane = new Line(geometry1, material1);
              this.add(this.lightPlane);
              geometry1 = new BufferGeometry();
              geometry1.setAttribute("position", new Float32BufferAttribute([
                  0,
                  0,
                  0,
                  0,
                  0,
                  1
              ], 3));
              this.targetLine = new Line(geometry1, material1);
              this.add(this.targetLine);
              this.update();
          }
          dispose() {
              this.lightPlane.geometry.dispose();
              this.lightPlane.material.dispose();
              this.targetLine.geometry.dispose();
              this.targetLine.material.dispose();
          }
          update() {
              _v1.setFromMatrixPosition(this.light.matrixWorld);
              _v2.setFromMatrixPosition(this.light.target.matrixWorld);
              _v3.subVectors(_v2, _v1);
              this.lightPlane.lookAt(_v2);
              if (this.color !== undefined) {
                  this.lightPlane.material.color.set(this.color);
                  this.targetLine.material.color.set(this.color);
              } else {
                  this.lightPlane.material.color.copy(this.light.color);
                  this.targetLine.material.color.copy(this.light.color);
              }
              this.targetLine.lookAt(_v2);
              this.targetLine.scale.z = _v3.length();
          }
      }
      const _vector = /*@__PURE__*/ new Vector3();
      const _camera = /*@__PURE__*/ new Camera();
      /**
     *	- shows frustum, line of sight and up of the camera
     *	- suitable for fast updates
     * 	- based on frustum visualization in lightgl.js shadowmap example
     *		https://github.com/evanw/lightgl.js/blob/master/tests/shadowmap.html
     */ class CameraHelper extends LineSegments {
          constructor(camera1){
              const geometry1 = new BufferGeometry();
              const material1 = new LineBasicMaterial({
                  color: 0xffffff,
                  vertexColors: true,
                  toneMapped: false
              });
              const vertices1 = [];
              const colors1 = [];
              const pointMap1 = {};
              // colors
              const colorFrustum1 = new Color(0xffaa00);
              const colorCone1 = new Color(0xff0000);
              const colorUp1 = new Color(0x00aaff);
              const colorTarget1 = new Color(0xffffff);
              const colorCross1 = new Color(0x333333);
              // near
              addLine1("n1", "n2", colorFrustum1);
              addLine1("n2", "n4", colorFrustum1);
              addLine1("n4", "n3", colorFrustum1);
              addLine1("n3", "n1", colorFrustum1);
              // far
              addLine1("f1", "f2", colorFrustum1);
              addLine1("f2", "f4", colorFrustum1);
              addLine1("f4", "f3", colorFrustum1);
              addLine1("f3", "f1", colorFrustum1);
              // sides
              addLine1("n1", "f1", colorFrustum1);
              addLine1("n2", "f2", colorFrustum1);
              addLine1("n3", "f3", colorFrustum1);
              addLine1("n4", "f4", colorFrustum1);
              // cone
              addLine1("p", "n1", colorCone1);
              addLine1("p", "n2", colorCone1);
              addLine1("p", "n3", colorCone1);
              addLine1("p", "n4", colorCone1);
              // up
              addLine1("u1", "u2", colorUp1);
              addLine1("u2", "u3", colorUp1);
              addLine1("u3", "u1", colorUp1);
              // target
              addLine1("c", "t", colorTarget1);
              addLine1("p", "c", colorCross1);
              // cross
              addLine1("cn1", "cn2", colorCross1);
              addLine1("cn3", "cn4", colorCross1);
              addLine1("cf1", "cf2", colorCross1);
              addLine1("cf3", "cf4", colorCross1);
              function addLine1(a3, b3, color3) {
                  addPoint1(a3, color3);
                  addPoint1(b3, color3);
              }
              function addPoint1(id1, color3) {
                  vertices1.push(0, 0, 0);
                  colors1.push(color3.r, color3.g, color3.b);
                  if (pointMap1[id1] === undefined) pointMap1[id1] = [];
                  pointMap1[id1].push(vertices1.length / 3 - 1);
              }
              geometry1.setAttribute("position", new Float32BufferAttribute(vertices1, 3));
              geometry1.setAttribute("color", new Float32BufferAttribute(colors1, 3));
              super(geometry1, material1);
              this.type = "CameraHelper";
              this.camera = camera1;
              if (this.camera.updateProjectionMatrix) this.camera.updateProjectionMatrix();
              this.matrix = camera1.matrixWorld;
              this.matrixAutoUpdate = false;
              this.pointMap = pointMap1;
              this.update();
          }
          update() {
              const geometry1 = this.geometry;
              const pointMap1 = this.pointMap;
              const w2 = 1, h1 = 1;
              // we need just camera projection matrix inverse
              // world matrix must be identity
              _camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);
              // center / target
              setPoint("c", pointMap1, geometry1, _camera, 0, 0, -1);
              setPoint("t", pointMap1, geometry1, _camera, 0, 0, 1);
              // near
              setPoint("n1", pointMap1, geometry1, _camera, -w2, -h1, -1);
              setPoint("n2", pointMap1, geometry1, _camera, w2, -h1, -1);
              setPoint("n3", pointMap1, geometry1, _camera, -w2, h1, -1);
              setPoint("n4", pointMap1, geometry1, _camera, w2, h1, -1);
              // far
              setPoint("f1", pointMap1, geometry1, _camera, -w2, -h1, 1);
              setPoint("f2", pointMap1, geometry1, _camera, w2, -h1, 1);
              setPoint("f3", pointMap1, geometry1, _camera, -w2, h1, 1);
              setPoint("f4", pointMap1, geometry1, _camera, w2, h1, 1);
              // up
              setPoint("u1", pointMap1, geometry1, _camera, w2 * 0.7, h1 * 1.1, -1);
              setPoint("u2", pointMap1, geometry1, _camera, -w2 * 0.7, h1 * 1.1, -1);
              setPoint("u3", pointMap1, geometry1, _camera, 0, h1 * 2, -1);
              // cross
              setPoint("cf1", pointMap1, geometry1, _camera, -w2, 0, 1);
              setPoint("cf2", pointMap1, geometry1, _camera, w2, 0, 1);
              setPoint("cf3", pointMap1, geometry1, _camera, 0, -h1, 1);
              setPoint("cf4", pointMap1, geometry1, _camera, 0, h1, 1);
              setPoint("cn1", pointMap1, geometry1, _camera, -w2, 0, -1);
              setPoint("cn2", pointMap1, geometry1, _camera, w2, 0, -1);
              setPoint("cn3", pointMap1, geometry1, _camera, 0, -h1, -1);
              setPoint("cn4", pointMap1, geometry1, _camera, 0, h1, -1);
              geometry1.getAttribute("position").needsUpdate = true;
          }
          dispose() {
              this.geometry.dispose();
              this.material.dispose();
          }
      }
      function setPoint(point1, pointMap1, geometry1, camera1, x4, y3, z3) {
          _vector.set(x4, y3, z3).unproject(camera1);
          const points1 = pointMap1[point1];
          if (points1 !== undefined) {
              const position1 = geometry1.getAttribute("position");
              for(let i3 = 0, l1 = points1.length; i3 < l1; i3++)position1.setXYZ(points1[i3], _vector.x, _vector.y, _vector.z);
          }
      }
      const _box = /*@__PURE__*/ new Box3();
      class BoxHelper extends LineSegments {
          constructor(object1, color3 = 0xffff00){
              const indices1 = new Uint16Array([
                  0,
                  1,
                  1,
                  2,
                  2,
                  3,
                  3,
                  0,
                  4,
                  5,
                  5,
                  6,
                  6,
                  7,
                  7,
                  4,
                  0,
                  4,
                  1,
                  5,
                  2,
                  6,
                  3,
                  7
              ]);
              const positions1 = new Float32Array(24);
              const geometry1 = new BufferGeometry();
              geometry1.setIndex(new BufferAttribute(indices1, 1));
              geometry1.setAttribute("position", new BufferAttribute(positions1, 3));
              super(geometry1, new LineBasicMaterial({
                  color: color3,
                  toneMapped: false
              }));
              this.object = object1;
              this.type = "BoxHelper";
              this.matrixAutoUpdate = false;
              this.update();
          }
          update(object1) {
              if (object1 !== undefined) console.warn("THREE.BoxHelper: .update() has no longer arguments.");
              if (this.object !== undefined) _box.setFromObject(this.object);
              if (_box.isEmpty()) return;
              const min1 = _box.min;
              const max1 = _box.max;
              /*
                5____4
            1/___0/|
            | 6__|_7
            2/___3/
  
            0: max.x, max.y, max.z
            1: min.x, max.y, max.z
            2: min.x, min.y, max.z
            3: max.x, min.y, max.z
            4: max.x, max.y, min.z
            5: min.x, max.y, min.z
            6: min.x, min.y, min.z
            7: max.x, min.y, min.z
            */ const position1 = this.geometry.attributes.position;
              const array1 = position1.array;
              array1[0] = max1.x;
              array1[1] = max1.y;
              array1[2] = max1.z;
              array1[3] = min1.x;
              array1[4] = max1.y;
              array1[5] = max1.z;
              array1[6] = min1.x;
              array1[7] = min1.y;
              array1[8] = max1.z;
              array1[9] = max1.x;
              array1[10] = min1.y;
              array1[11] = max1.z;
              array1[12] = max1.x;
              array1[13] = max1.y;
              array1[14] = min1.z;
              array1[15] = min1.x;
              array1[16] = max1.y;
              array1[17] = min1.z;
              array1[18] = min1.x;
              array1[19] = min1.y;
              array1[20] = min1.z;
              array1[21] = max1.x;
              array1[22] = min1.y;
              array1[23] = min1.z;
              position1.needsUpdate = true;
              this.geometry.computeBoundingSphere();
          }
          setFromObject(object1) {
              this.object = object1;
              this.update();
              return this;
          }
          copy(source1) {
              LineSegments.prototype.copy.call(this, source1);
              this.object = source1.object;
              return this;
          }
      }
      class Box3Helper extends LineSegments {
          constructor(box1, color3 = 0xffff00){
              const indices1 = new Uint16Array([
                  0,
                  1,
                  1,
                  2,
                  2,
                  3,
                  3,
                  0,
                  4,
                  5,
                  5,
                  6,
                  6,
                  7,
                  7,
                  4,
                  0,
                  4,
                  1,
                  5,
                  2,
                  6,
                  3,
                  7
              ]);
              const positions1 = [
                  1,
                  1,
                  1,
                  -1,
                  1,
                  1,
                  -1,
                  -1,
                  1,
                  1,
                  -1,
                  1,
                  1,
                  1,
                  -1,
                  -1,
                  1,
                  -1,
                  -1,
                  -1,
                  -1,
                  1,
                  -1,
                  -1
              ];
              const geometry1 = new BufferGeometry();
              geometry1.setIndex(new BufferAttribute(indices1, 1));
              geometry1.setAttribute("position", new Float32BufferAttribute(positions1, 3));
              super(geometry1, new LineBasicMaterial({
                  color: color3,
                  toneMapped: false
              }));
              this.box = box1;
              this.type = "Box3Helper";
              this.geometry.computeBoundingSphere();
          }
          updateMatrixWorld(force1) {
              const box1 = this.box;
              if (box1.isEmpty()) return;
              box1.getCenter(this.position);
              box1.getSize(this.scale);
              this.scale.multiplyScalar(0.5);
              super.updateMatrixWorld(force1);
          }
      }
      class PlaneHelper extends Line {
          constructor(plane1, size1 = 1, hex1 = 0xffff00){
              const color3 = hex1;
              const positions1 = [
                  1,
                  -1,
                  1,
                  -1,
                  1,
                  1,
                  -1,
                  -1,
                  1,
                  1,
                  1,
                  1,
                  -1,
                  1,
                  1,
                  -1,
                  -1,
                  1,
                  1,
                  -1,
                  1,
                  1,
                  1,
                  1,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0
              ];
              const geometry1 = new BufferGeometry();
              geometry1.setAttribute("position", new Float32BufferAttribute(positions1, 3));
              geometry1.computeBoundingSphere();
              super(geometry1, new LineBasicMaterial({
                  color: color3,
                  toneMapped: false
              }));
              this.type = "PlaneHelper";
              this.plane = plane1;
              this.size = size1;
              const positions21 = [
                  1,
                  1,
                  1,
                  -1,
                  1,
                  1,
                  -1,
                  -1,
                  1,
                  1,
                  1,
                  1,
                  -1,
                  -1,
                  1,
                  1,
                  -1,
                  1
              ];
              const geometry21 = new BufferGeometry();
              geometry21.setAttribute("position", new Float32BufferAttribute(positions21, 3));
              geometry21.computeBoundingSphere();
              this.add(new Mesh(geometry21, new MeshBasicMaterial({
                  color: color3,
                  opacity: 0.2,
                  transparent: true,
                  depthWrite: false,
                  toneMapped: false
              })));
          }
          updateMatrixWorld(force1) {
              let scale1 = -this.plane.constant;
              if (Math.abs(scale1) < 1e-8) scale1 = 1e-8; // sign does not matter
              this.scale.set(0.5 * this.size, 0.5 * this.size, scale1);
              this.children[0].material.side = scale1 < 0 ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here
              this.lookAt(this.plane.normal);
              super.updateMatrixWorld(force1);
          }
      }
      const _axis = /*@__PURE__*/ new Vector3();
      let _lineGeometry, _coneGeometry;
      class ArrowHelper extends Object3D {
          // dir is assumed to be normalized
          constructor(dir1 = new Vector3(0, 0, 1), origin1 = new Vector3(0, 0, 0), length1 = 1, color3 = 0xffff00, headLength1 = length1 * 0.2, headWidth1 = headLength1 * 0.2){
              super();
              this.type = "ArrowHelper";
              if (_lineGeometry === undefined) {
                  _lineGeometry = new BufferGeometry();
                  _lineGeometry.setAttribute("position", new Float32BufferAttribute([
                      0,
                      0,
                      0,
                      0,
                      1,
                      0
                  ], 3));
                  _coneGeometry = new CylinderGeometry(0, 0.5, 1, 5, 1);
                  _coneGeometry.translate(0, -0.5, 0);
              }
              this.position.copy(origin1);
              this.line = new Line(_lineGeometry, new LineBasicMaterial({
                  color: color3,
                  toneMapped: false
              }));
              this.line.matrixAutoUpdate = false;
              this.add(this.line);
              this.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({
                  color: color3,
                  toneMapped: false
              }));
              this.cone.matrixAutoUpdate = false;
              this.add(this.cone);
              this.setDirection(dir1);
              this.setLength(length1, headLength1, headWidth1);
          }
          setDirection(dir1) {
              // dir is assumed to be normalized
              if (dir1.y > 0.99999) this.quaternion.set(0, 0, 0, 1);
              else if (dir1.y < -0.99999) this.quaternion.set(1, 0, 0, 0);
              else {
                  _axis.set(dir1.z, 0, -dir1.x).normalize();
                  const radians1 = Math.acos(dir1.y);
                  this.quaternion.setFromAxisAngle(_axis, radians1);
              }
          }
          setLength(length1, headLength1 = length1 * 0.2, headWidth1 = headLength1 * 0.2) {
              this.line.scale.set(1, Math.max(0.0001, length1 - headLength1), 1); // see #17458
              this.line.updateMatrix();
              this.cone.scale.set(headWidth1, headLength1, headWidth1);
              this.cone.position.y = length1;
              this.cone.updateMatrix();
          }
          setColor(color3) {
              this.line.material.color.set(color3);
              this.cone.material.color.set(color3);
          }
          copy(source1) {
              super.copy(source1, false);
              this.line.copy(source1.line);
              this.cone.copy(source1.cone);
              return this;
          }
      }
      class AxesHelper extends LineSegments {
          constructor(size1 = 1){
              const vertices1 = [
                  0,
                  0,
                  0,
                  size1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  size1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  size1
              ];
              const colors1 = [
                  1,
                  0,
                  0,
                  1,
                  0.6,
                  0,
                  0,
                  1,
                  0,
                  0.6,
                  1,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0.6,
                  1
              ];
              const geometry1 = new BufferGeometry();
              geometry1.setAttribute("position", new Float32BufferAttribute(vertices1, 3));
              geometry1.setAttribute("color", new Float32BufferAttribute(colors1, 3));
              const material1 = new LineBasicMaterial({
                  vertexColors: true,
                  toneMapped: false
              });
              super(geometry1, material1);
              this.type = "AxesHelper";
          }
          setColors(xAxisColor1, yAxisColor1, zAxisColor1) {
              const color3 = new Color();
              const array1 = this.geometry.attributes.color.array;
              color3.set(xAxisColor1);
              color3.toArray(array1, 0);
              color3.toArray(array1, 3);
              color3.set(yAxisColor1);
              color3.toArray(array1, 6);
              color3.toArray(array1, 9);
              color3.set(zAxisColor1);
              color3.toArray(array1, 12);
              color3.toArray(array1, 15);
              this.geometry.attributes.color.needsUpdate = true;
              return this;
          }
          dispose() {
              this.geometry.dispose();
              this.material.dispose();
          }
      }
      class ShapePath {
          constructor(){
              this.type = "ShapePath";
              this.color = new Color();
              this.subPaths = [];
              this.currentPath = null;
          }
          moveTo(x4, y3) {
              this.currentPath = new Path();
              this.subPaths.push(this.currentPath);
              this.currentPath.moveTo(x4, y3);
              return this;
          }
          lineTo(x4, y3) {
              this.currentPath.lineTo(x4, y3);
              return this;
          }
          quadraticCurveTo(aCPx1, aCPy1, aX1, aY1) {
              this.currentPath.quadraticCurveTo(aCPx1, aCPy1, aX1, aY1);
              return this;
          }
          bezierCurveTo(aCP1x1, aCP1y1, aCP2x1, aCP2y1, aX1, aY1) {
              this.currentPath.bezierCurveTo(aCP1x1, aCP1y1, aCP2x1, aCP2y1, aX1, aY1);
              return this;
          }
          splineThru(pts1) {
              this.currentPath.splineThru(pts1);
              return this;
          }
          toShapes(isCCW1, noHoles1) {
              function toShapesNoHoles1(inSubpaths1) {
                  const shapes1 = [];
                  for(let i3 = 0, l1 = inSubpaths1.length; i3 < l1; i3++){
                      const tmpPath1 = inSubpaths1[i3];
                      const tmpShape1 = new Shape();
                      tmpShape1.curves = tmpPath1.curves;
                      shapes1.push(tmpShape1);
                  }
                  return shapes1;
              }
              function isPointInsidePolygon1(inPt1, inPolygon1) {
                  const polyLen1 = inPolygon1.length;
                  // inPt on polygon contour => immediate success    or
                  // toggling of inside/outside at every single! intersection point of an edge
                  //  with the horizontal line through inPt, left of inPt
                  //  not counting lowerY endpoints of edges and whole edges on that line
                  let inside1 = false;
                  for(let p6 = polyLen1 - 1, q3 = 0; q3 < polyLen1; p6 = q3++){
                      let edgeLowPt1 = inPolygon1[p6];
                      let edgeHighPt1 = inPolygon1[q3];
                      let edgeDx1 = edgeHighPt1.x - edgeLowPt1.x;
                      let edgeDy1 = edgeHighPt1.y - edgeLowPt1.y;
                      if (Math.abs(edgeDy1) > Number.EPSILON) {
                          // not parallel
                          if (edgeDy1 < 0) {
                              edgeLowPt1 = inPolygon1[q3];
                              edgeDx1 = -edgeDx1;
                              edgeHighPt1 = inPolygon1[p6];
                              edgeDy1 = -edgeDy1;
                          }
                          if (inPt1.y < edgeLowPt1.y || inPt1.y > edgeHighPt1.y) continue;
                          if (inPt1.y === edgeLowPt1.y) {
                              if (inPt1.x === edgeLowPt1.x) return true; // inPt is on contour ?
                          // continue;				// no intersection or edgeLowPt => doesn't count !!!
                          } else {
                              const perpEdge1 = edgeDy1 * (inPt1.x - edgeLowPt1.x) - edgeDx1 * (inPt1.y - edgeLowPt1.y);
                              if (perpEdge1 === 0) return true; // inPt is on contour ?
                              if (perpEdge1 < 0) continue;
                              inside1 = !inside1; // true intersection left of inPt
                          }
                      } else {
                          // parallel or collinear
                          if (inPt1.y !== edgeLowPt1.y) continue; // parallel
                          // edge lies on the same horizontal line as inPt
                          if (edgeHighPt1.x <= inPt1.x && inPt1.x <= edgeLowPt1.x || edgeLowPt1.x <= inPt1.x && inPt1.x <= edgeHighPt1.x) return true; // inPt: Point on contour !
                      // continue;
                      }
                  }
                  return inside1;
              }
              const isClockWise1 = ShapeUtils.isClockWise;
              const subPaths1 = this.subPaths;
              if (subPaths1.length === 0) return [];
              if (noHoles1 === true) return toShapesNoHoles1(subPaths1);
              let solid1, tmpPath1, tmpShape1;
              const shapes1 = [];
              if (subPaths1.length === 1) {
                  tmpPath1 = subPaths1[0];
                  tmpShape1 = new Shape();
                  tmpShape1.curves = tmpPath1.curves;
                  shapes1.push(tmpShape1);
                  return shapes1;
              }
              let holesFirst1 = !isClockWise1(subPaths1[0].getPoints());
              holesFirst1 = isCCW1 ? !holesFirst1 : holesFirst1;
              // console.log("Holes first", holesFirst);
              const betterShapeHoles1 = [];
              const newShapes1 = [];
              let newShapeHoles1 = [];
              let mainIdx1 = 0;
              let tmpPoints1;
              newShapes1[mainIdx1] = undefined;
              newShapeHoles1[mainIdx1] = [];
              for(let i3 = 0, l1 = subPaths1.length; i3 < l1; i3++){
                  tmpPath1 = subPaths1[i3];
                  tmpPoints1 = tmpPath1.getPoints();
                  solid1 = isClockWise1(tmpPoints1);
                  solid1 = isCCW1 ? !solid1 : solid1;
                  if (solid1) {
                      if (!holesFirst1 && newShapes1[mainIdx1]) mainIdx1++;
                      newShapes1[mainIdx1] = {
                          s: new Shape(),
                          p: tmpPoints1
                      };
                      newShapes1[mainIdx1].s.curves = tmpPath1.curves;
                      if (holesFirst1) mainIdx1++;
                      newShapeHoles1[mainIdx1] = [];
                  //console.log('cw', i);
                  } else newShapeHoles1[mainIdx1].push({
                      h: tmpPath1,
                      p: tmpPoints1[0]
                  });
              }
              // only Holes? -> probably all Shapes with wrong orientation
              if (!newShapes1[0]) return toShapesNoHoles1(subPaths1);
              if (newShapes1.length > 1) {
                  let ambiguous1 = false;
                  let toChange1 = 0;
                  for(let sIdx1 = 0, sLen1 = newShapes1.length; sIdx1 < sLen1; sIdx1++)betterShapeHoles1[sIdx1] = [];
                  for(let sIdx1 = 0, sLen1 = newShapes1.length; sIdx1 < sLen1; sIdx1++){
                      const sho1 = newShapeHoles1[sIdx1];
                      for(let hIdx1 = 0; hIdx1 < sho1.length; hIdx1++){
                          const ho1 = sho1[hIdx1];
                          let hole_unassigned1 = true;
                          for(let s2Idx1 = 0; s2Idx1 < newShapes1.length; s2Idx1++)if (isPointInsidePolygon1(ho1.p, newShapes1[s2Idx1].p)) {
                              if (sIdx1 !== s2Idx1) toChange1++;
                              if (hole_unassigned1) {
                                  hole_unassigned1 = false;
                                  betterShapeHoles1[s2Idx1].push(ho1);
                              } else ambiguous1 = true;
                          }
                          if (hole_unassigned1) betterShapeHoles1[sIdx1].push(ho1);
                      }
                  }
                  if (toChange1 > 0 && ambiguous1 === false) newShapeHoles1 = betterShapeHoles1;
              }
              let tmpHoles1;
              for(let i3 = 0, il1 = newShapes1.length; i3 < il1; i3++){
                  tmpShape1 = newShapes1[i3].s;
                  shapes1.push(tmpShape1);
                  tmpHoles1 = newShapeHoles1[i3];
                  for(let j1 = 0, jl1 = tmpHoles1.length; j1 < jl1; j1++)tmpShape1.holes.push(tmpHoles1[j1].h);
              }
              //console.log("shape", shapes);
              return shapes1;
          }
      }
      const _floatView = new Float32Array(1);
      const _int32View = new Int32Array(_floatView.buffer);
      class DataUtils {
          // Converts float32 to float16 (stored as uint16 value).
          static toHalfFloat(val1) {
              if (val1 > 65504) {
                  console.warn("THREE.DataUtils.toHalfFloat(): value exceeds 65504.");
                  val1 = 65504; // maximum representable value in float16
              }
              // Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410
              /* This method is faster than the OpenEXR implementation (very often
            * used, eg. in Ogre), with the additional benefit of rounding, inspired
            * by James Tursa?s half-precision code. */ _floatView[0] = val1;
              const x4 = _int32View[0];
              let bits1 = x4 >> 16 & 0x8000; /* Get the sign */ 
              let m1 = x4 >> 12 & 0x07ff; /* Keep one extra bit for rounding */ 
              const e1 = x4 >> 23 & 0xff; /* Using int is faster here */ 
              /* If zero, or denormal, or exponent underflows too much for a denormal
                * half, return signed zero. */ if (e1 < 103) return bits1;
              /* If NaN, return NaN. If Inf or exponent overflow, return Inf. */ if (e1 > 142) {
                  bits1 |= 0x7c00;
                  /* If exponent was 0xff and one mantissa bit was set, it means NaN,
                            * not Inf, so make sure we set one mantissa bit too. */ bits1 |= (e1 == 255 ? 0 : 1) && x4 & 0x007fffff;
                  return bits1;
              }
              /* If exponent underflows but not too much, return a denormal */ if (e1 < 113) {
                  m1 |= 0x0800;
                  /* Extra rounding may overflow and set mantissa to 0 and exponent
                    * to 1, which is OK. */ bits1 |= (m1 >> 114 - e1) + (m1 >> 113 - e1 & 1);
                  return bits1;
              }
              bits1 |= e1 - 112 << 10 | m1 >> 1;
              /* Extra rounding. An overflow will set mantissa to 0 and increment
                * the exponent, which is OK. */ bits1 += m1 & 1;
              return bits1;
          }
      }
      const LineStrip = 0;
      const LinePieces = 1;
      const NoColors = 0;
      const FaceColors = 1;
      const VertexColors = 2;
      function MeshFaceMaterial(materials1) {
          console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead.");
          return materials1;
      }
      function MultiMaterial(materials1 = []) {
          console.warn("THREE.MultiMaterial has been removed. Use an Array instead.");
          materials1.isMultiMaterial = true;
          materials1.materials = materials1;
          materials1.clone = function() {
              return materials1.slice();
          };
          return materials1;
      }
      function PointCloud(geometry1, material1) {
          console.warn("THREE.PointCloud has been renamed to THREE.Points.");
          return new Points(geometry1, material1);
      }
      function Particle(material1) {
          console.warn("THREE.Particle has been renamed to THREE.Sprite.");
          return new Sprite(material1);
      }
      function ParticleSystem(geometry1, material1) {
          console.warn("THREE.ParticleSystem has been renamed to THREE.Points.");
          return new Points(geometry1, material1);
      }
      function PointCloudMaterial(parameters1) {
          console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.");
          return new PointsMaterial(parameters1);
      }
      function ParticleBasicMaterial(parameters1) {
          console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.");
          return new PointsMaterial(parameters1);
      }
      function ParticleSystemMaterial(parameters1) {
          console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.");
          return new PointsMaterial(parameters1);
      }
      function Vertex(x4, y3, z3) {
          console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead.");
          return new Vector3(x4, y3, z3);
      }
      //
      function DynamicBufferAttribute(array1, itemSize1) {
          console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.");
          return new BufferAttribute(array1, itemSize1).setUsage(DynamicDrawUsage);
      }
      function Int8Attribute(array1, itemSize1) {
          console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.");
          return new Int8BufferAttribute(array1, itemSize1);
      }
      function Uint8Attribute(array1, itemSize1) {
          console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.");
          return new Uint8BufferAttribute(array1, itemSize1);
      }
      function Uint8ClampedAttribute(array1, itemSize1) {
          console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.");
          return new Uint8ClampedBufferAttribute(array1, itemSize1);
      }
      function Int16Attribute(array1, itemSize1) {
          console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.");
          return new Int16BufferAttribute(array1, itemSize1);
      }
      function Uint16Attribute(array1, itemSize1) {
          console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.");
          return new Uint16BufferAttribute(array1, itemSize1);
      }
      function Int32Attribute(array1, itemSize1) {
          console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.");
          return new Int32BufferAttribute(array1, itemSize1);
      }
      function Uint32Attribute(array1, itemSize1) {
          console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.");
          return new Uint32BufferAttribute(array1, itemSize1);
      }
      function Float32Attribute(array1, itemSize1) {
          console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.");
          return new Float32BufferAttribute(array1, itemSize1);
      }
      function Float64Attribute(array1, itemSize1) {
          console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.");
          return new Float64BufferAttribute(array1, itemSize1);
      }
      //
      Curve.create = function(construct1, getPoint1) {
          console.log("THREE.Curve.create() has been deprecated");
          construct1.prototype = Object.create(Curve.prototype);
          construct1.prototype.constructor = construct1;
          construct1.prototype.getPoint = getPoint1;
          return construct1;
      };
      //
      Path.prototype.fromPoints = function(points1) {
          console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints().");
          return this.setFromPoints(points1);
      };
      //
      function AxisHelper(size1) {
          console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper.");
          return new AxesHelper(size1);
      }
      function BoundingBoxHelper(object1, color3) {
          console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.");
          return new BoxHelper(object1, color3);
      }
      function EdgesHelper(object1, hex1) {
          console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.");
          return new LineSegments(new EdgesGeometry(object1.geometry), new LineBasicMaterial({
              color: hex1 !== undefined ? hex1 : 0xffffff
          }));
      }
      GridHelper.prototype.setColors = function() {
          console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.");
      };
      SkeletonHelper.prototype.update = function() {
          console.error("THREE.SkeletonHelper: update() no longer needs to be called.");
      };
      function WireframeHelper(object1, hex1) {
          console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.");
          return new LineSegments(new WireframeGeometry(object1.geometry), new LineBasicMaterial({
              color: hex1 !== undefined ? hex1 : 0xffffff
          }));
      }
      //
      Loader.prototype.extractUrlBase = function(url1) {
          console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.");
          return LoaderUtils.extractUrlBase(url1);
      };
      Loader.Handlers = {
          add: function() {
              console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.");
          },
          get: function() {
              console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.");
          }
      };
      function XHRLoader(manager1) {
          console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader.");
          return new FileLoader(manager1);
      }
      function BinaryTextureLoader(manager1) {
          console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.");
          return new DataTextureLoader(manager1);
      }
      //
      Box2.prototype.center = function(optionalTarget1) {
          console.warn("THREE.Box2: .center() has been renamed to .getCenter().");
          return this.getCenter(optionalTarget1);
      };
      Box2.prototype.empty = function() {
          console.warn("THREE.Box2: .empty() has been renamed to .isEmpty().");
          return this.isEmpty();
      };
      Box2.prototype.isIntersectionBox = function(box1) {
          console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().");
          return this.intersectsBox(box1);
      };
      Box2.prototype.size = function(optionalTarget1) {
          console.warn("THREE.Box2: .size() has been renamed to .getSize().");
          return this.getSize(optionalTarget1);
      };
      //
      Box3.prototype.center = function(optionalTarget1) {
          console.warn("THREE.Box3: .center() has been renamed to .getCenter().");
          return this.getCenter(optionalTarget1);
      };
      Box3.prototype.empty = function() {
          console.warn("THREE.Box3: .empty() has been renamed to .isEmpty().");
          return this.isEmpty();
      };
      Box3.prototype.isIntersectionBox = function(box1) {
          console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().");
          return this.intersectsBox(box1);
      };
      Box3.prototype.isIntersectionSphere = function(sphere1) {
          console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().");
          return this.intersectsSphere(sphere1);
      };
      Box3.prototype.size = function(optionalTarget1) {
          console.warn("THREE.Box3: .size() has been renamed to .getSize().");
          return this.getSize(optionalTarget1);
      };
      //
      Euler.prototype.toVector3 = function() {
          console.error("THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead");
      };
      //
      Sphere.prototype.empty = function() {
          console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty().");
          return this.isEmpty();
      };
      //
      Frustum.prototype.setFromMatrix = function(m1) {
          console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().");
          return this.setFromProjectionMatrix(m1);
      };
      //
      Line3.prototype.center = function(optionalTarget1) {
          console.warn("THREE.Line3: .center() has been renamed to .getCenter().");
          return this.getCenter(optionalTarget1);
      };
      //
      Matrix3.prototype.flattenToArrayOffset = function(array1, offset2) {
          console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
          return this.toArray(array1, offset2);
      };
      Matrix3.prototype.multiplyVector3 = function(vector1) {
          console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");
          return vector1.applyMatrix3(this);
      };
      Matrix3.prototype.multiplyVector3Array = function() {
          console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.");
      };
      Matrix3.prototype.applyToBufferAttribute = function(attribute3) {
          console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.");
          return attribute3.applyMatrix3(this);
      };
      Matrix3.prototype.applyToVector3Array = function() {
          console.error("THREE.Matrix3: .applyToVector3Array() has been removed.");
      };
      Matrix3.prototype.getInverse = function(matrix1) {
          console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.");
          return this.copy(matrix1).invert();
      };
      //
      Matrix4.prototype.extractPosition = function(m1) {
          console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");
          return this.copyPosition(m1);
      };
      Matrix4.prototype.flattenToArrayOffset = function(array1, offset2) {
          console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
          return this.toArray(array1, offset2);
      };
      Matrix4.prototype.getPosition = function() {
          console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");
          return new Vector3().setFromMatrixColumn(this, 3);
      };
      Matrix4.prototype.setRotationFromQuaternion = function(q3) {
          console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");
          return this.makeRotationFromQuaternion(q3);
      };
      Matrix4.prototype.multiplyToArray = function() {
          console.warn("THREE.Matrix4: .multiplyToArray() has been removed.");
      };
      Matrix4.prototype.multiplyVector3 = function(vector1) {
          console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.");
          return vector1.applyMatrix4(this);
      };
      Matrix4.prototype.multiplyVector4 = function(vector1) {
          console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");
          return vector1.applyMatrix4(this);
      };
      Matrix4.prototype.multiplyVector3Array = function() {
          console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.");
      };
      Matrix4.prototype.rotateAxis = function(v4) {
          console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");
          v4.transformDirection(this);
      };
      Matrix4.prototype.crossVector = function(vector1) {
          console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");
          return vector1.applyMatrix4(this);
      };
      Matrix4.prototype.translate = function() {
          console.error("THREE.Matrix4: .translate() has been removed.");
      };
      Matrix4.prototype.rotateX = function() {
          console.error("THREE.Matrix4: .rotateX() has been removed.");
      };
      Matrix4.prototype.rotateY = function() {
          console.error("THREE.Matrix4: .rotateY() has been removed.");
      };
      Matrix4.prototype.rotateZ = function() {
          console.error("THREE.Matrix4: .rotateZ() has been removed.");
      };
      Matrix4.prototype.rotateByAxis = function() {
          console.error("THREE.Matrix4: .rotateByAxis() has been removed.");
      };
      Matrix4.prototype.applyToBufferAttribute = function(attribute3) {
          console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.");
          return attribute3.applyMatrix4(this);
      };
      Matrix4.prototype.applyToVector3Array = function() {
          console.error("THREE.Matrix4: .applyToVector3Array() has been removed.");
      };
      Matrix4.prototype.makeFrustum = function(left1, right1, bottom1, top1, near1, far1) {
          console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.");
          return this.makePerspective(left1, right1, top1, bottom1, near1, far1);
      };
      Matrix4.prototype.getInverse = function(matrix1) {
          console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.");
          return this.copy(matrix1).invert();
      };
      //
      Plane.prototype.isIntersectionLine = function(line1) {
          console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().");
          return this.intersectsLine(line1);
      };
      //
      Quaternion.prototype.multiplyVector3 = function(vector1) {
          console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");
          return vector1.applyQuaternion(this);
      };
      Quaternion.prototype.inverse = function() {
          console.warn("THREE.Quaternion: .inverse() has been renamed to invert().");
          return this.invert();
      };
      //
      Ray.prototype.isIntersectionBox = function(box1) {
          console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().");
          return this.intersectsBox(box1);
      };
      Ray.prototype.isIntersectionPlane = function(plane1) {
          console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().");
          return this.intersectsPlane(plane1);
      };
      Ray.prototype.isIntersectionSphere = function(sphere1) {
          console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().");
          return this.intersectsSphere(sphere1);
      };
      //
      Triangle.prototype.area = function() {
          console.warn("THREE.Triangle: .area() has been renamed to .getArea().");
          return this.getArea();
      };
      Triangle.prototype.barycoordFromPoint = function(point1, target1) {
          console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");
          return this.getBarycoord(point1, target1);
      };
      Triangle.prototype.midpoint = function(target1) {
          console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint().");
          return this.getMidpoint(target1);
      };
      Triangle.prototypenormal = function(target1) {
          console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");
          return this.getNormal(target1);
      };
      Triangle.prototype.plane = function(target1) {
          console.warn("THREE.Triangle: .plane() has been renamed to .getPlane().");
          return this.getPlane(target1);
      };
      Triangle.barycoordFromPoint = function(point1, a3, b3, c4, target1) {
          console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");
          return Triangle.getBarycoord(point1, a3, b3, c4, target1);
      };
      Triangle.normal = function(a3, b3, c4, target1) {
          console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");
          return Triangle.getNormal(a3, b3, c4, target1);
      };
      //
      Shape.prototype.extractAllPoints = function(divisions1) {
          console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.");
          return this.extractPoints(divisions1);
      };
      Shape.prototype.extrude = function(options1) {
          console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.");
          return new ExtrudeGeometry(this, options1);
      };
      Shape.prototype.makeGeometry = function(options1) {
          console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.");
          return new ShapeGeometry(this, options1);
      };
      //
      Vector2.prototype.fromAttribute = function(attribute3, index3, offset2) {
          console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().");
          return this.fromBufferAttribute(attribute3, index3, offset2);
      };
      Vector2.prototype.distanceToManhattan = function(v4) {
          console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
          return this.manhattanDistanceTo(v4);
      };
      Vector2.prototype.lengthManhattan = function() {
          console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().");
          return this.manhattanLength();
      };
      //
      Vector3.prototype.setEulerFromRotationMatrix = function() {
          console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.");
      };
      Vector3.prototype.setEulerFromQuaternion = function() {
          console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.");
      };
      Vector3.prototype.getPositionFromMatrix = function(m1) {
          console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");
          return this.setFromMatrixPosition(m1);
      };
      Vector3.prototype.getScaleFromMatrix = function(m1) {
          console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");
          return this.setFromMatrixScale(m1);
      };
      Vector3.prototype.getColumnFromMatrix = function(index3, matrix1) {
          console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");
          return this.setFromMatrixColumn(matrix1, index3);
      };
      Vector3.prototype.applyProjection = function(m1) {
          console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.");
          return this.applyMatrix4(m1);
      };
      Vector3.prototype.fromAttribute = function(attribute3, index3, offset2) {
          console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().");
          return this.fromBufferAttribute(attribute3, index3, offset2);
      };
      Vector3.prototype.distanceToManhattan = function(v4) {
          console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
          return this.manhattanDistanceTo(v4);
      };
      Vector3.prototype.lengthManhattan = function() {
          console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().");
          return this.manhattanLength();
      };
      //
      Vector4$1.prototype.fromAttribute = function(attribute3, index3, offset2) {
          console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().");
          return this.fromBufferAttribute(attribute3, index3, offset2);
      };
      Vector4$1.prototype.lengthManhattan = function() {
          console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().");
          return this.manhattanLength();
      };
      //
      Object3D.prototype.getChildByName = function(name1) {
          console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");
          return this.getObjectByName(name1);
      };
      Object3D.prototype.renderDepth = function() {
          console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.");
      };
      Object3D.prototype.translate = function(distance1, axis1) {
          console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");
          return this.translateOnAxis(axis1, distance1);
      };
      Object3D.prototype.getWorldRotation = function() {
          console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.");
      };
      Object3D.prototype.applyMatrix = function(matrix1) {
          console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().");
          return this.applyMatrix4(matrix1);
      };
      Object.defineProperties(Object3D.prototype, {
          eulerOrder: {
              get: function() {
                  console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
                  return this.rotation.order;
              },
              set: function(value1) {
                  console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
                  this.rotation.order = value1;
              }
          },
          useQuaternion: {
              get: function() {
                  console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
              },
              set: function() {
                  console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
              }
          }
      });
      Mesh.prototype.setDrawMode = function() {
          console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.");
      };
      Object.defineProperties(Mesh.prototype, {
          drawMode: {
              get: function() {
                  console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.");
                  return TrianglesDrawMode;
              },
              set: function() {
                  console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.");
              }
          }
      });
      SkinnedMesh.prototype.initBones = function() {
          console.error("THREE.SkinnedMesh: initBones() has been removed.");
      };
      //
      PerspectiveCamera.prototype.setLens = function(focalLength1, filmGauge1) {
          console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.");
          if (filmGauge1 !== undefined) this.filmGauge = filmGauge1;
          this.setFocalLength(focalLength1);
      };
      //
      Object.defineProperties(Light.prototype, {
          onlyShadow: {
              set: function() {
                  console.warn("THREE.Light: .onlyShadow has been removed.");
              }
          },
          shadowCameraFov: {
              set: function(value1) {
                  console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov.");
                  this.shadow.camera.fov = value1;
              }
          },
          shadowCameraLeft: {
              set: function(value1) {
                  console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left.");
                  this.shadow.camera.left = value1;
              }
          },
          shadowCameraRight: {
              set: function(value1) {
                  console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right.");
                  this.shadow.camera.right = value1;
              }
          },
          shadowCameraTop: {
              set: function(value1) {
                  console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top.");
                  this.shadow.camera.top = value1;
              }
          },
          shadowCameraBottom: {
              set: function(value1) {
                  console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.");
                  this.shadow.camera.bottom = value1;
              }
          },
          shadowCameraNear: {
              set: function(value1) {
                  console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near.");
                  this.shadow.camera.near = value1;
              }
          },
          shadowCameraFar: {
              set: function(value1) {
                  console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far.");
                  this.shadow.camera.far = value1;
              }
          },
          shadowCameraVisible: {
              set: function() {
                  console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.");
              }
          },
          shadowBias: {
              set: function(value1) {
                  console.warn("THREE.Light: .shadowBias is now .shadow.bias.");
                  this.shadow.bias = value1;
              }
          },
          shadowDarkness: {
              set: function() {
                  console.warn("THREE.Light: .shadowDarkness has been removed.");
              }
          },
          shadowMapWidth: {
              set: function(value1) {
                  console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.");
                  this.shadow.mapSize.width = value1;
              }
          },
          shadowMapHeight: {
              set: function(value1) {
                  console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.");
                  this.shadow.mapSize.height = value1;
              }
          }
      });
      //
      Object.defineProperties(BufferAttribute.prototype, {
          length: {
              get: function() {
                  console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead.");
                  return this.array.length;
              }
          },
          dynamic: {
              get: function() {
                  console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.");
                  return this.usage === DynamicDrawUsage;
              },
              set: function() {
                  console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.");
                  this.setUsage(DynamicDrawUsage);
              }
          }
      });
      BufferAttribute.prototype.setDynamic = function(value1) {
          console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.");
          this.setUsage(value1 === true ? DynamicDrawUsage : StaticDrawUsage);
          return this;
      };
      BufferAttribute.prototype.copyIndicesArray = function() {
          console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.");
      }, BufferAttribute.prototype.setArray = function() {
          console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
      };
      //
      BufferGeometry.prototype.addIndex = function(index3) {
          console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().");
          this.setIndex(index3);
      };
      BufferGeometry.prototype.addAttribute = function(name1, attribute3) {
          console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().");
          if (!(attribute3 && attribute3.isBufferAttribute) && !(attribute3 && attribute3.isInterleavedBufferAttribute)) {
              console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).");
              return this.setAttribute(name1, new BufferAttribute(arguments[1], arguments[2]));
          }
          if (name1 === "index") {
              console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.");
              this.setIndex(attribute3);
              return this;
          }
          return this.setAttribute(name1, attribute3);
      };
      BufferGeometry.prototype.addDrawCall = function(start1, count1, indexOffset1) {
          if (indexOffset1 !== undefined) console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.");
          console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup().");
          this.addGroup(start1, count1);
      };
      BufferGeometry.prototype.clearDrawCalls = function() {
          console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().");
          this.clearGroups();
      };
      BufferGeometry.prototype.computeOffsets = function() {
          console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.");
      };
      BufferGeometry.prototype.removeAttribute = function(name1) {
          console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().");
          return this.deleteAttribute(name1);
      };
      BufferGeometry.prototype.applyMatrix = function(matrix1) {
          console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().");
          return this.applyMatrix4(matrix1);
      };
      Object.defineProperties(BufferGeometry.prototype, {
          drawcalls: {
              get: function() {
                  console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups.");
                  return this.groups;
              }
          },
          offsets: {
              get: function() {
                  console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups.");
                  return this.groups;
              }
          }
      });
      InterleavedBuffer.prototype.setDynamic = function(value1) {
          console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.");
          this.setUsage(value1 === true ? DynamicDrawUsage : StaticDrawUsage);
          return this;
      };
      InterleavedBuffer.prototype.setArray = function() {
          console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
      };
      //
      ExtrudeGeometry.prototype.getArrays = function() {
          console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.");
      };
      ExtrudeGeometry.prototype.addShapeList = function() {
          console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.");
      };
      ExtrudeGeometry.prototype.addShape = function() {
          console.error("THREE.ExtrudeGeometry: .addShape() has been removed.");
      };
      //
      Scene.prototype.dispose = function() {
          console.error("THREE.Scene: .dispose() has been removed.");
      };
      //
      Uniform.prototype.onUpdate = function() {
          console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.");
          return this;
      };
      //
      Object.defineProperties(Material.prototype, {
          wrapAround: {
              get: function() {
                  console.warn("THREE.Material: .wrapAround has been removed.");
              },
              set: function() {
                  console.warn("THREE.Material: .wrapAround has been removed.");
              }
          },
          overdraw: {
              get: function() {
                  console.warn("THREE.Material: .overdraw has been removed.");
              },
              set: function() {
                  console.warn("THREE.Material: .overdraw has been removed.");
              }
          },
          wrapRGB: {
              get: function() {
                  console.warn("THREE.Material: .wrapRGB has been removed.");
                  return new Color();
              }
          },
          shading: {
              get: function() {
                  console.error("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
              },
              set: function(value1) {
                  console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
                  this.flatShading = value1 === FlatShading;
              }
          },
          stencilMask: {
              get: function() {
                  console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead.");
                  return this.stencilFuncMask;
              },
              set: function(value1) {
                  console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead.");
                  this.stencilFuncMask = value1;
              }
          },
          vertexTangents: {
              get: function() {
                  console.warn("THREE." + this.type + ": .vertexTangents has been removed.");
              },
              set: function() {
                  console.warn("THREE." + this.type + ": .vertexTangents has been removed.");
              }
          }
      });
      Object.defineProperties(ShaderMaterial.prototype, {
          derivatives: {
              get: function() {
                  console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
                  return this.extensions.derivatives;
              },
              set: function(value1) {
                  console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
                  this.extensions.derivatives = value1;
              }
          }
      });
      //
      WebGLRenderer.prototype.clearTarget = function(renderTarget1, color3, depth1, stencil1) {
          console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.");
          this.setRenderTarget(renderTarget1);
          this.clear(color3, depth1, stencil1);
      };
      WebGLRenderer.prototype.animate = function(callback1) {
          console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop().");
          this.setAnimationLoop(callback1);
      };
      WebGLRenderer.prototype.getCurrentRenderTarget = function() {
          console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().");
          return this.getRenderTarget();
      };
      WebGLRenderer.prototype.getMaxAnisotropy = function() {
          console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().");
          return this.capabilities.getMaxAnisotropy();
      };
      WebGLRenderer.prototype.getPrecision = function() {
          console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.");
          return this.capabilities.precision;
      };
      WebGLRenderer.prototype.resetGLState = function() {
          console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset().");
          return this.state.reset();
      };
      WebGLRenderer.prototype.supportsFloatTextures = function() {
          console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).");
          return this.extensions.get("OES_texture_float");
      };
      WebGLRenderer.prototype.supportsHalfFloatTextures = function() {
          console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).");
          return this.extensions.get("OES_texture_half_float");
      };
      WebGLRenderer.prototype.supportsStandardDerivatives = function() {
          console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).");
          return this.extensions.get("OES_standard_derivatives");
      };
      WebGLRenderer.prototype.supportsCompressedTextureS3TC = function() {
          console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).");
          return this.extensions.get("WEBGL_compressed_texture_s3tc");
      };
      WebGLRenderer.prototype.supportsCompressedTexturePVRTC = function() {
          console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).");
          return this.extensions.get("WEBGL_compressed_texture_pvrtc");
      };
      WebGLRenderer.prototype.supportsBlendMinMax = function() {
          console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).");
          return this.extensions.get("EXT_blend_minmax");
      };
      WebGLRenderer.prototype.supportsVertexTextures = function() {
          console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.");
          return this.capabilities.vertexTextures;
      };
      WebGLRenderer.prototype.supportsInstancedArrays = function() {
          console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).");
          return this.extensions.get("ANGLE_instanced_arrays");
      };
      WebGLRenderer.prototype.enableScissorTest = function(boolean1) {
          console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().");
          this.setScissorTest(boolean1);
      };
      WebGLRenderer.prototype.initMaterial = function() {
          console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.");
      };
      WebGLRenderer.prototype.addPrePlugin = function() {
          console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.");
      };
      WebGLRenderer.prototype.addPostPlugin = function() {
          console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.");
      };
      WebGLRenderer.prototype.updateShadowMap = function() {
          console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.");
      };
      WebGLRenderer.prototype.setFaceCulling = function() {
          console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.");
      };
      WebGLRenderer.prototype.allocTextureUnit = function() {
          console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.");
      };
      WebGLRenderer.prototype.setTexture = function() {
          console.warn("THREE.WebGLRenderer: .setTexture() has been removed.");
      };
      WebGLRenderer.prototype.setTexture2D = function() {
          console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.");
      };
      WebGLRenderer.prototype.setTextureCube = function() {
          console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.");
      };
      WebGLRenderer.prototype.getActiveMipMapLevel = function() {
          console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().");
          return this.getActiveMipmapLevel();
      };
      Object.defineProperties(WebGLRenderer.prototype, {
          shadowMapEnabled: {
              get: function() {
                  return this.shadowMap.enabled;
              },
              set: function(value1) {
                  console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.");
                  this.shadowMap.enabled = value1;
              }
          },
          shadowMapType: {
              get: function() {
                  return this.shadowMap.type;
              },
              set: function(value1) {
                  console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.");
                  this.shadowMap.type = value1;
              }
          },
          shadowMapCullFace: {
              get: function() {
                  console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
                  return undefined;
              },
              set: function() {
                  console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
              }
          },
          context: {
              get: function() {
                  console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.");
                  return this.getContext();
              }
          },
          vr: {
              get: function() {
                  console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr");
                  return this.xr;
              }
          },
          gammaInput: {
              get: function() {
                  console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.");
                  return false;
              },
              set: function() {
                  console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.");
              }
          },
          gammaOutput: {
              get: function() {
                  console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.");
                  return false;
              },
              set: function(value1) {
                  console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.");
                  this.outputEncoding = value1 === true ? sRGBEncoding : LinearEncoding;
              }
          },
          toneMappingWhitePoint: {
              get: function() {
                  console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.");
                  return 1.0;
              },
              set: function() {
                  console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.");
              }
          },
          gammaFactor: {
              get: function() {
                  console.warn("THREE.WebGLRenderer: .gammaFactor has been removed.");
                  return 2;
              },
              set: function() {
                  console.warn("THREE.WebGLRenderer: .gammaFactor has been removed.");
              }
          }
      });
      Object.defineProperties(WebGLShadowMap.prototype, {
          cullFace: {
              get: function() {
                  console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
                  return undefined;
              },
              set: function() {
                  console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
              }
          },
          renderReverseSided: {
              get: function() {
                  console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
                  return undefined;
              },
              set: function() {
                  console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
              }
          },
          renderSingleSided: {
              get: function() {
                  console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
                  return undefined;
              },
              set: function() {
                  console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
              }
          }
      });
      function WebGLRenderTargetCube(width1, height1, options1) {
          console.warn("THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).");
          return new WebGLCubeRenderTarget(width1, options1);
      }
      //
      Object.defineProperties(WebGLRenderTarget.prototype, {
          wrapS: {
              get: function() {
                  console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
                  return this.texture.wrapS;
              },
              set: function(value1) {
                  console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
                  this.texture.wrapS = value1;
              }
          },
          wrapT: {
              get: function() {
                  console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
                  return this.texture.wrapT;
              },
              set: function(value1) {
                  console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
                  this.texture.wrapT = value1;
              }
          },
          magFilter: {
              get: function() {
                  console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
                  return this.texture.magFilter;
              },
              set: function(value1) {
                  console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
                  this.texture.magFilter = value1;
              }
          },
          minFilter: {
              get: function() {
                  console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
                  return this.texture.minFilter;
              },
              set: function(value1) {
                  console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
                  this.texture.minFilter = value1;
              }
          },
          anisotropy: {
              get: function() {
                  console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
                  return this.texture.anisotropy;
              },
              set: function(value1) {
                  console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
                  this.texture.anisotropy = value1;
              }
          },
          offset: {
              get: function() {
                  console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
                  return this.texture.offset;
              },
              set: function(value1) {
                  console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
                  this.texture.offset = value1;
              }
          },
          repeat: {
              get: function() {
                  console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
                  return this.texture.repeat;
              },
              set: function(value1) {
                  console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
                  this.texture.repeat = value1;
              }
          },
          format: {
              get: function() {
                  console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
                  return this.texture.format;
              },
              set: function(value1) {
                  console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
                  this.texture.format = value1;
              }
          },
          type: {
              get: function() {
                  console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
                  return this.texture.type;
              },
              set: function(value1) {
                  console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
                  this.texture.type = value1;
              }
          },
          generateMipmaps: {
              get: function() {
                  console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
                  return this.texture.generateMipmaps;
              },
              set: function(value1) {
                  console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
                  this.texture.generateMipmaps = value1;
              }
          }
      });
      //
      Audio.prototype.load = function(file1) {
          console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
          const scope1 = this;
          const audioLoader1 = new AudioLoader();
          audioLoader1.load(file1, function(buffer1) {
              scope1.setBuffer(buffer1);
          });
          return this;
      };
      AudioAnalyser.prototype.getData = function() {
          console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData().");
          return this.getFrequencyData();
      };
      //
      CubeCamera.prototype.updateCubeMap = function(renderer1, scene1) {
          console.warn("THREE.CubeCamera: .updateCubeMap() is now .update().");
          return this.update(renderer1, scene1);
      };
      CubeCamera.prototype.clear = function(renderer1, color3, depth1, stencil1) {
          console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear().");
          return this.renderTarget.clear(renderer1, color3, depth1, stencil1);
      };
      ImageUtils.crossOrigin = undefined;
      ImageUtils.loadTexture = function(url1, mapping1, onLoad1, onError1) {
          console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");
          const loader1 = new TextureLoader();
          loader1.setCrossOrigin(this.crossOrigin);
          const texture1 = loader1.load(url1, onLoad1, undefined, onError1);
          if (mapping1) texture1.mapping = mapping1;
          return texture1;
      };
      ImageUtils.loadTextureCube = function(urls1, mapping1, onLoad1, onError1) {
          console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");
          const loader1 = new CubeTextureLoader();
          loader1.setCrossOrigin(this.crossOrigin);
          const texture1 = loader1.load(urls1, onLoad1, undefined, onError1);
          if (mapping1) texture1.mapping = mapping1;
          return texture1;
      };
      ImageUtils.loadCompressedTexture = function() {
          console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.");
      };
      ImageUtils.loadCompressedTextureCube = function() {
          console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.");
      };
      //
      function CanvasRenderer() {
          console.error("THREE.CanvasRenderer has been removed");
      }
      //
      function JSONLoader() {
          console.error("THREE.JSONLoader has been removed.");
      }
      //
      const SceneUtils = {
          createMultiMaterialObject: function() {
              console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js");
          },
          detach: function() {
              console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js");
          },
          attach: function() {
              console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js");
          }
      };
      //
      function LensFlare() {
          console.error("THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js");
      }
      //
      function ParametricGeometry() {
          console.error("THREE.ParametricGeometry has been moved to /examples/jsm/geometries/ParametricGeometry.js");
          return new BufferGeometry();
      }
      function TextGeometry() {
          console.error("THREE.TextGeometry has been moved to /examples/jsm/geometries/TextGeometry.js");
          return new BufferGeometry();
      }
      function FontLoader() {
          console.error("THREE.FontLoader has been moved to /examples/jsm/loaders/FontLoader.js");
      }
      function Font() {
          console.error("THREE.Font has been moved to /examples/jsm/loaders/FontLoader.js");
      }
      function ImmediateRenderObject() {
          console.error("THREE.ImmediateRenderObject has been removed.");
      }
      function WebGLMultisampleRenderTarget(width1, height1, options1) {
          console.error('THREE.WebGLMultisampleRenderTarget has been removed. Use a normal render target and set the "samples" property to greater 0 to enable multisampling.');
          const renderTarget1 = new WebGLRenderTarget(width1, height1, options1);
          renderTarget1.samples = 4;
          return renderTarget1;
      }
      function DataTexture2DArray(data1, width1, height1, depth1) {
          console.warn("THREE.DataTexture2DArray has been renamed to DataArrayTexture.");
          return new DataArrayTexture(data1, width1, height1, depth1);
      }
      function DataTexture3D(data1, width1, height1, depth1) {
          console.warn("THREE.DataTexture3D has been renamed to Data3DTexture.");
          return new Data3DTexture(data1, width1, height1, depth1);
      }
      if (typeof __THREE_DEVTOOLS__ !== "undefined") __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", {
          detail: {
              revision: REVISION
          }
      }));
      if (typeof window !== "undefined") {
          if (window.__THREE__) console.warn("WARNING: Multiple instances of Three.js being imported.");
          else window.__THREE__ = REVISION;
      }
      /**
     *  Three targets are provided for both GLSL and Sculpt/JS api.
     *
     *  1: source -> Threejs shader source components (easy customization)
     *  2: source -> Threejs material
     *  3: source -> Threejs mesh (easy to use)
     *
     * TODO: make these materials 'plug in' to threejs' lighting model, like unity's surface shaders
     */ function glslToThreeJSShaderSource(source1) {
          return {
              uniforms: baseUniforms(),
              frag: threeHeader + "const float STEP_SIZE_CONSTANT = 0.9;\n" + "const int MAX_ITERATIONS = 300;\n" + uniformsToGLSL(baseUniforms()) + sculptureStarterCode + source1 + fragFooter,
              vert: threeJSVertexSource
          };
      }
      function glslToThreeJSMaterial(source1, payload1) {
          var src2 = glslToThreeJSShaderSource(source1);
          return makeMaterial(src2.uniforms, src2.vert, src2.frag, payload1);
      }
      function glslToThreeJSMesh(source1, payload1) {
          return makeBasicMesh(glslToThreeJSMaterial(source1, payload1));
      }
      function sculptToThreeJSShaderSource(source1) {
          var src2 = sculptToGLSL(source1);
          if (src2.error) console.log(src2.error);
          var frg1 = threeHeader + usePBRHeader + useHemisphereLight + uniformsToGLSL(src2.uniforms) + "const float STEP_SIZE_CONSTANT = " + src2.stepSizeConstant + ";\n" + "const int MAX_ITERATIONS = " + src2.maxIterations + ";\n" + sculptureStarterCode + src2.geoGLSL + "\n" + src2.colorGLSL + "\n" + fragFooter;
          return {
              uniforms: src2.uniforms,
              frag: frg1,
              vert: threeJSVertexSource,
              error: src2.error,
              geoGLSL: src2.geoGLSL,
              colorGLSL: src2.colorGLSL
          };
      }
      function sculptToThreeJSMaterial(source1, payload1, generatedGLSL1) {
          var src2;
          if (generatedGLSL1) src2 = generatedGLSL1;
          else src2 = sculptToThreeJSShaderSource(source1);
          var material1 = makeMaterial(src2.uniforms, src2.vert, src2.frag, payload1);
          material1.uniformDescriptions = src2.uniforms;
          return material1;
      }
      function sculptToThreeJSMesh(source1, payload1) {
          source1 = convertFunctionToString(source1);
          return makeBasicMesh(sculptToThreeJSMaterial(source1, payload1));
      }
      function createSculptureWithGeometry(geometry1, source1) {
          var uniformCallback1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function() {
              return {};
          };
          var params1 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
          var generatedGLSL1 = arguments.length > 4 ? arguments[4] : undefined;
          geometry1.computeBoundingSphere();
          var radius1 = "radius" in params1 ? params1.radius : geometry1.boundingSphere.radius;
          params1.radius = radius1;
          params1.geometry = geometry1;
          return createSculpture(source1, uniformCallback1, params1, generatedGLSL1);
      } // uniformCallback
      function createSculpture(source1) {
          var uniformCallback1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function() {
              return {};
          };
          var params1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          var generatedGLSL1 = arguments.length > 3 ? arguments[3] : undefined;
          source1 = convertFunctionToString(source1);
          var radius1 = "radius" in params1 ? params1.radius : 2;
          var geometry1;
          if ("geometry" in params1) geometry1 = params1.geometry;
          else {
              var segments1 = "segments" in params1 ? params1.segments : 8;
              geometry1 = new SphereGeometry(radius1, segments1, segments1);
          }
          var material1 = sculptToThreeJSMaterial(source1, null, generatedGLSL1);
          material1.uniforms["opacity"].value = 1.0;
          material1.uniforms["mouse"].value = new Vector3();
          material1.uniforms["_scale"].value = radius1;
          var mesh1 = new Mesh(geometry1, material1);
          mesh1.onBeforeRender = function(renderer1, scene1, camera1, geometry1, material1, group1) {
              var uniformsToUpdate1 = uniformCallback1();
              if (!(_typeof(uniformsToUpdate1) === "object")) throw "createSculpture takes, (source, uniformCallback, params) the uniformCallback must be a function that returns a dictionary of uniforms to update";
              for(var _i1 = 0, _Object$entries1 = Object.entries(uniformsToUpdate1); _i1 < _Object$entries1.length; _i1++){
                  var _Object$entries$_i1 = _slicedToArray(_Object$entries1[_i1], 2), uniform1 = _Object$entries$_i1[0], value1 = _Object$entries$_i1[1];
                  material1.uniforms[uniform1].value = value1;
              } // material.uniforms['sculptureCenter'].value = geometry.position;
          };
          return mesh1;
      }
      function uniformDescriptionToThreeJSFormat(unifs1, payload1) {
          var finalUniforms1 = {};
          if (payload1 && payload1 !== undefined && payload1.msdfTexture !== undefined) finalUniforms1["msdf"] = {
              value: payload1.msdfTexture || new Texture()
          };
          unifs1.forEach(function(uniform1) {
              if (uniform1.type === "float") finalUniforms1[uniform1.name] = {
                  value: uniform1.value
              };
              else if (uniform1.type === "vec2") finalUniforms1[uniform1.name] = {
                  value: new Vector2(uniform1.value.x, uniform1.value.y)
              };
              else if (uniform1.type === "vec3") finalUniforms1[uniform1.name] = {
                  value: new Vector3(uniform1.value.x, uniform1.value.y, uniform1.value.z)
              };
              else if (uniform1.type === "vec4") finalUniforms1[uniform1.name] = {
                  value: new Vector4(uniform1.value.x, uniform1.value.y, uniform1.value.z, uniform1.value.w)
              };
          });
          return finalUniforms1;
      } // could use a scale parameter
      function makeMaterial(unifs1, vert1, frag1, payload1) {
          var material1 = new ShaderMaterial({
              uniforms: uniformDescriptionToThreeJSFormat(unifs1, payload1),
              vertexShader: vert1,
              fragmentShader: frag1,
              transparent: true,
              side: BackSide
          });
          material1.extensions.fragDepth = false;
          return material1;
      } // There should be more options supported like size and shape
      function makeBasicMesh(material1) {
          return new Mesh(new BoxGeometry(2, 2, 2), material1);
      }
      function uniformToCpp(uniforms1) {
          var res1 = "";
          for(var i3 = 0; i3 < uniforms1.length; i3++){
              var unif1 = uniforms1[i3];
              res1 += unif1.type + " " + unif1.name + " = ";
              if (typeof unif1.value === "number") // float
              res1 += unif1.value + 0.0000001 + "f";
              else {
                  // vec
                  res1 += "vec" + unif1.value.length + "(";
                  for(var j1 = 0; j1 < unif1.value.length; j1++){
                      res1 += unif1.value[j1] + 0.0000001 + "f";
                      if (j1 + 1 < unif1.value.length) res1 += ", ";
                  }
                  res1 += ")";
              }
              res1 += ";\n";
          }
          return res1;
      }
      var cppFooter = "\n\n";
      var cppHeader = uniformToCpp(baseUniforms());
      function glslToGLM(source1) {
          // converts all numbers to floats
          var result1 = source1.replace(/([^a-zA-Z][0-9]+([.][^a-zA-Z][0-9]*)|[.][0-9]+)()/g, "$1f"); // adds parentheses after swizzling for glm to pick up
          result1 = result1.replace(/([a-zA-Z0-9][.][w-z]{2,})()/g, "$1()");
          return result1;
      }
      function glslToOfflineRenderer(source1) {}
      function sculptToOfflineRenderer(source1) {
          var src2 = sculptToGLSL(source1); //console.log(filteredStarter);
          return cppHeader + glslToGLM("const float STEP_SIZE_CONSTANT = " + src2.stepSizeConstant + "f;\n" + "const int MAX_ITERATIONS = " + src2.maxIterations + ";\n" + sculptureStarterCode + src2.geoGLSL + src2.colorGLSL) + cppFooter;
      }
      function glslToMinimalRenderer(canvas1, source1, updateUniforms1) {
          var fullFrag1 = minimalHeader + usePBRHeader + useHemisphereLight + uniformsToGLSL(baseUniforms()) + "const float STEP_SIZE_CONSTANT = 0.9;\n" + "const int MAX_ITERATIONS = 300;\n" + sculptureStarterCode + source1 + fragFooter;
          return fragToMinimalRenderer(canvas1, fullFrag1, updateUniforms1);
      }
      /**
     * for fast and efficient use on the web
     * input - sculpt code
     * output - a fully self-contained lightweight html file which renders the sculpture
     **/ function sculptToMinimalRenderer(canvas1, source1, updateUniforms1) {
          if (typeof source1 === "function") {
              source1 = source1.toString();
              source1 = source1.slice(source1.indexOf("{") + 1, source1.lastIndexOf("}"));
          } else if (!(typeof source1 === "string")) throw "sculptToMinimalRenderer requires the source code to be a function, or a string";
          var generatedGLSL1 = sculptToGLSL(source1);
          var fullFrag1 = minimalHeader + usePBRHeader + useHemisphereLight + uniformsToGLSL(generatedGLSL1.uniforms) + "const float STEP_SIZE_CONSTANT = " + generatedGLSL1.stepSizeConstant + ";\n" + "const int MAX_ITERATIONS = " + generatedGLSL1.maxIterations + ";\n" + sculptureStarterCode + generatedGLSL1.geoGLSL + "\n" + generatedGLSL1.colorGLSL + "\n" + fragFooter;
          return fragToMinimalRenderer(canvas1, fullFrag1, updateUniforms1);
      }
      function generatedGLSLToMinimalRenderer(canvas1, generatedGLSL1) {
          var fullFrag1 = minimalHeader + usePBRHeader + useHemisphereLight + uniformsToGLSL(generatedGLSL1.uniforms) + "const float STEP_SIZE_CONSTANT = " + generatedGLSL1.stepSizeConstant + ";\n" + "const int MAX_ITERATIONS = " + generatedGLSL1.maxIterations + ";\n" + sculptureStarterCode + generatedGLSL1.geoGLSL + "\n" + generatedGLSL1.colorGLSL + "\n" + fragFooter;
          return fragToMinimalRenderer(canvas1, fullFrag1, updateUniforms);
      }
      function fragToMinimalRenderer(canvas1, fullFrag1, updateUniforms1) {
          // if no update function is provided assume no-op
          if (updateUniforms1 === undefined) updateUniforms1 = function updateUniforms1() {
              return {};
          };
          function resizeCanvas1() {
              var devicePixelRatio1 = window.devicePixelRatio || 1; // change this so canvas doesn't have to fill entire window
              var width1 = window.innerWidth * devicePixelRatio1;
              var height1 = window.innerHeight * devicePixelRatio1;
              if (canvas1.width != width1 || canvas1.height != height1) {
                  canvas1.width = width1;
                  canvas1.height = height1;
              }
          }
          resizeCanvas1();
          window.addEventListener("resize", resizeCanvas1);
          var gl1 = canvas1.getContext("webgl2"); // Learn more: https://github.com/mrdoob/three.js/pull/21358
          var vertices1 = [
              -1,
              -1,
              0.0,
              3.0,
              -1,
              0.0,
              -1,
              3.0,
              0.0
          ];
          var indices1 = [
              0,
              1,
              2
          ]; // const vertices = [
          //   -1.0, 1.0, 0.0, -1.0, -1.0, 0.0, 1.0, -1.0, 0.0, 1.0, 1.0, 0.0,
          // ];
          // const indices = [3, 2, 1, 3, 1, 0];
          var vertex_buffer1 = gl1.createBuffer();
          gl1.bindBuffer(gl1.ARRAY_BUFFER, vertex_buffer1);
          gl1.bufferData(gl1.ARRAY_BUFFER, new Float32Array(vertices1), gl1.STATIC_DRAW);
          gl1.bindBuffer(gl1.ARRAY_BUFFER, null);
          var Index_Buffer1 = gl1.createBuffer();
          gl1.bindBuffer(gl1.ELEMENT_ARRAY_BUFFER, Index_Buffer1);
          gl1.bufferData(gl1.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices1), gl1.STATIC_DRAW);
          gl1.bindBuffer(gl1.ELEMENT_ARRAY_BUFFER, null);
          var vertShader1 = gl1.createShader(gl1.VERTEX_SHADER);
          gl1.shaderSource(vertShader1, minimalVertexSource);
          gl1.compileShader(vertShader1);
          var fragShader1 = gl1.createShader(gl1.FRAGMENT_SHADER);
          gl1.shaderSource(fragShader1, fullFrag1);
          gl1.compileShader(fragShader1);
          var logShaderComp1 = function logShaderComp1(shader1) {
              var compiled1 = gl1.getShaderParameter(shader1, gl1.COMPILE_STATUS);
              console.log("Shader compiled successfully: " + compiled1);
              var compilationLog1 = gl1.getShaderInfoLog(shader1);
              if (!compiled1) console.error("Shader compiler log: " + compilationLog1);
          };
          logShaderComp1(vertShader1);
          logShaderComp1(fragShader1);
          var shaderProgram1 = gl1.createProgram();
          gl1.attachShader(shaderProgram1, vertShader1);
          gl1.attachShader(shaderProgram1, fragShader1);
          gl1.linkProgram(shaderProgram1); // Check if it linked.
          var success1 = gl1.getProgramParameter(shaderProgram1, gl1.LINK_STATUS);
          if (!success1) // something went wrong with the link; get the error
          console.error("program failed to link:" + gl1.getProgramInfoLog(shaderProgram1));
          gl1.useProgram(shaderProgram1);
          gl1.bindBuffer(gl1.ARRAY_BUFFER, vertex_buffer1);
          gl1.bindBuffer(gl1.ELEMENT_ARRAY_BUFFER, Index_Buffer1);
          var coord1 = gl1.getAttribLocation(shaderProgram1, "coordinates");
          gl1.vertexAttribPointer(coord1, 3, gl1.FLOAT, false, 0, 0);
          gl1.enableVertexAttribArray(coord1);
          gl1.clearColor(1.0, 1.0, 1.0, 0.9);
          gl1.enable(gl1.DEPTH_TEST);
          var oTime1 = Date.now();
          var loc1 = gl1.getUniformLocation(shaderProgram1, "time");
          var _scale1 = gl1.getUniformLocation(shaderProgram1, "_scale");
          var resolution1 = gl1.getUniformLocation(shaderProgram1, "resolution");
          var opac1 = gl1.getUniformLocation(shaderProgram1, "opacity");
          var mouseloc1 = gl1.getUniformLocation(shaderProgram1, "mouse");
          gl1.uniform1f(opac1, 1.0);
          gl1.uniform1f(_scale1, 1.0);
          var userUniformUpdateFuncs1 = assignUniforms1(updateUniforms1);
          canvas1.addEventListener("pointermove", function(e1) {
              var devicePixelRatio1 = window.devicePixelRatio || 1;
              var canvasX1 = (e1.pageX - canvas1.offsetLeft) * devicePixelRatio1;
              var canvasY1 = (e1.pageY - canvas1.offsetTop) * devicePixelRatio1;
              gl1.uniform3f(mouseloc1, 2.0 * canvasX1 / canvas1.width - 1.0, 2.0 * (1.0 - canvasY1 / canvas1.height) - 1.0, -0.5);
          }, false);
          function updateDraw1() {
              if (typeof updateUniforms1 === "function") callUniformFuncs1(userUniformUpdateFuncs1, updateUniforms1());
              gl1.uniform1f(loc1, (Date.now() - oTime1) * 0.001);
              var devicePixelRatio1 = window.devicePixelRatio || 1;
              var wwidth1 = window.innerWidth * devicePixelRatio1;
              var wheight1 = window.innerHeight * devicePixelRatio1;
              gl1.uniform2fv(resolution1, [
                  wwidth1,
                  wheight1
              ]);
              gl1.clear(gl1.COLOR_BUFFER_BIT);
              gl1.viewport(0, 0, canvas1.width, canvas1.height);
              gl1.drawElements(gl1.TRIANGLES, indices1.length, gl1.UNSIGNED_SHORT, 0);
              window.requestAnimationFrame(updateDraw1);
          }
          updateDraw1(); // loops through a dictionary and calls the function sotred in the value
          function callUniformFuncs1(uniformFuncs1, updatedUniforms1) {
              if (_typeof(updatedUniforms1) !== "object") {
                  console.error("updateUniforms must return a dictionary of uniform names and values. Instead got: ", updateUniforms1);
                  return;
              }
              Object.entries(uniformFuncs1).forEach(function(keys1) {
                  var _keys1 = _slicedToArray(keys1, 2), key1 = _keys1[0], uniformUpdateFunc1 = _keys1[1];
                  if (key1 in updatedUniforms1) uniformUpdateFunc1(updatedUniforms1[key1]);
              });
          }
          function assignUniforms1(updateUniforms1) {
              if (typeof updateUniforms1 !== "function") {
                  console.error("updateUniforms must be a function that returns a dictionary of uniform names and values");
                  return {};
              }
              var userUniformUpdateFuncs1 = {};
              var uniformsDict1 = updateUniforms1();
              if (uniformsDict1 !== undefined && _typeof(uniformsDict1) === "object") Object.entries(uniformsDict1).forEach(function(keys1) {
                  var _keys21 = _slicedToArray(keys1, 2), key1 = _keys21[0], val1 = _keys21[1];
                  var unifLocation1 = gl1.getUniformLocation(shaderProgram1, key1);
                  if (typeof val1 === "number") userUniformUpdateFuncs1[key1] = function(unif1) {
                      return gl1.uniform1f(unifLocation1, unif1);
                  };
                  else if (Array.isArray(val1)) {
                      if (val1.length === 1) userUniformUpdateFuncs1[key1] = function(unif1) {
                          return gl1.uniform1f(unifLocation1, unif1[0]);
                      };
                      else if (val1.length === 2) userUniformUpdateFuncs1[key1] = function(unif1) {
                          return gl1.uniform2iv(unifLocation1, unif1);
                      };
                      else if (val1.length === 3) userUniformUpdateFuncs1[key1] = function(unif1) {
                          return gl1.uniform3iv(unifLocation1, unif1);
                      };
                      else if (val1.length === 4) userUniformUpdateFuncs1[key1] = function(unif1) {
                          return gl1.uniform4iv(unifLocation1, unif1);
                      };
                      else console.error("Uniforms must be either a float or an array with length 1, 2, 3 or 4");
                  } else console.error("Uniforms must be either a float or an array with length 1, 2, 3 or 4");
              });
              return userUniformUpdateFuncs1;
          }
      }
      /**
     * for fast tesing
     * input - sculpt code
     * output - self-contained lightweight html which renders the sculpture
     **/ function sculptToMinimalHTMLRenderer(spCode1, libPath1) {
          return makeHTML(spCode1, "sculptToMinimalRenderer", libPath1);
      }
      function glslToMinimalHTMLRenderer(spCode1, libPath1) {
          return makeHTML(spCode1, "glslToMinimalRenderer", libPath1);
      }
      function makeHTML(spCode1, minRenderFunc1, libPath1) {
          return '<!DOCTYPE html>\n<html lang="en">\n<head>\n    <title>Shader Park</title>\n    <meta charset="utf-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1">\n    <style>\n        body {\n            margin: 2em;\n            width: 100vw; \n            height: 100vh; \n            margin : 0px; \n            padding : 0px;\n            border : 0px; \n            background-color : white;\n        }\n        canvas {\n            width: 100%;\n            height:100%;\n            margin : 0px;\n            padding : 0px;\n            border : 0px;\n            background-color : transparent;\n        }\n    </style>\n</head>  \n<body>    \n    <canvas class="my-canvas"></canvas>\n    <script type="module">\n    import {'.concat(minRenderFunc1, "} from '").concat(libPath1, "';\n    let canvas = document.querySelector('.my-canvas');\n    ").concat(minRenderFunc1, "(canvas, `").concat(spCode1, "`);          \n    </script>\n</body>\n</html>");
      }
      /**
     * export for meshing with https://github.com/tdhooper/glsl-marching-cubes
     * input - sculpt code
     * output - glsl containing "mapDistance"
     **/ function sculptToRawSDF4Meshing(source1) {
          var minimalHeader1 = "\nprecision highp float;\nuniform float w_width;\nuniform float w_height;\nuniform mat4 projectionMatrix;\n#define cameraPosition vec3(0.0,0.0,-1.0)\n#define vUv vec2(0.0)\n#define worldPos vec4(vec2((gl_FragCoord.x/w_width-0.5)*(w_width/w_height),gl_FragCoord.y/w_height-0.5)*1.75,0.0,0.0)\n#define STEP_SIZE_CONSTANT 0.9\n#define MAX_ITERATIONS 300\n#define stepSize 0.9\n#define mouse vec3(0.0)\n#define time 0.0\n";
          var generatedGLSL1 = sculptToGLSL(source1);
          var fullFrag1 = minimalHeader1 + usePBRHeader + useHemisphereLight + //+ uniformsToGLSL(generatedGLSL.uniforms)
          sculptureStarterCode + generatedGLSL1.geoGLSL;
          return fullFrag1.replace(/surfaceDistance/g, "mapDistance");
      }
      /**
     *  TD target for GLSL and  Sculpt/JS api.
     *
     *  TODO: make these materials 'plug in' to Touch Designer's ' PBR lighting model.
     */ var TDHeader = "\nuniform float uShadowStrength;\nuniform vec3 uShadowColor;\nuniform vec4 uBaseColor;\nuniform float uMetallic;\nuniform float uRoughness;\nuniform float uSpecularLevel;\nuniform float uAmbientOcclusion;\nuniform vec3 cameraPosition;\nuniform sampler2D sBaseColorMap;\nuniform float useTDLighting;\n\n\nin Vertex\n{\n	vec4 color;\n	vec3 worldSpacePos;\n	vec3 worldSpaceNorm;\n	flat int cameraIndex;\n	vec2 texCoord0;\n	vec3 sculptureCenter;\n} iVert;\n\n#define sculptureCenter iVert.sculptureCenter;\n#define worldPos iVert.worldSpacePos\nlayout(location = 0) out vec4 oFragColor[TD_NUM_COLOR_BUFFERS];\nout float depthTexture;\n";
      var TDFooter = "\nvoid main()\n{\n	// This allows things such as order independent transparency\n	// and Dual-Paraboloid rendering to work properly\n	TDCheckDiscard();\n\n	// Raymarching\n	vec3 rayOrigin = worldPos.xyz-sculptureCenter;\n	vec3 rayDirection = getRayDirection();\n	rayOrigin -= rayDirection*2.0;\n	float t = intersect(rayOrigin, rayDirection, stepSize);\n    depthTexture = t;\n\n	vec4 outcol = vec4(0.0, 0.0, 0.0, 0.0);\n	vec3 diffuseSum = vec3(0.0, 0.0, 0.0);\n	vec3 specularSum = vec3(0.0, 0.0, 0.0);\n\n	vec3 worldSpaceNorm = normalize(iVert.worldSpaceNorm.xyz);\n	// vec3 normal = normalize(worldSpaceNorm.xyz);\n	if(t < 2.5) {\n		vec3 p = (rayOrigin + rayDirection*t);\n		vec3 normal = calcNormal(p);\n		vec3 raymarchedColor = shade(p, normal);\n	\n		vec3 baseColor = uBaseColor.rgb;\n\n		// 0.08 is the value for dielectric specular that\n		// Substance Designer uses for it's top-end.\n		float specularLevel = 0.08 * uSpecularLevel;\n		float metallic = uMetallic;\n\n		float roughness = uRoughness;\n\n		float ambientOcclusion = uAmbientOcclusion;\n\n		vec3 finalBaseColor = baseColor.rgb * iVert.color.rgb;\n\n		vec2 texCoord0 = iVert.texCoord0.st;\n		vec4 baseColorMap = texture(sBaseColorMap, texCoord0.st);\n		finalBaseColor *= baseColorMap.rgb;\n\n\n		// A roughness of exactly 0 is not allowed\n		roughness = max(roughness, 0.0001);\n\n		vec3 pbrDiffuseColor = finalBaseColor * (1.0 - metallic);\n		vec3 pbrSpecularColor = mix(vec3(specularLevel), finalBaseColor, metallic);\n\n		vec3 viewVec = normalize(uTDMats[iVert.cameraIndex].camInverse[3].xyz - iVert.worldSpacePos.xyz );\n\n\n		// Your shader will be recompiled based on the number\n		// of lights in your scene, so this continues to work\n		// even if you change your lighting setup after the shader\n		// has been exported from the Phong MAT\n		for (int i = 0; i < TD_NUM_LIGHTS; i++)\n		{\n			TDPBRResult res;\n			res = TDLightingPBR(i,\n								pbrDiffuseColor,\n								pbrSpecularColor,\n								iVert.worldSpacePos.xyz,\n								normal,\n								uShadowStrength, uShadowColor,\n								viewVec,\n								roughness);\n			diffuseSum += res.diffuse;\n			specularSum += res.specular;\n		}\n\n		// Environment lights\n		for (int i = 0; i < TD_NUM_ENV_LIGHTS; i++)\n		{\n			TDPBRResult res;\n			res = TDEnvLightingPBR(i,\n						pbrDiffuseColor,\n						pbrSpecularColor,\n						normal,\n						viewVec,\n						roughness,\n						ambientOcclusion);\n			diffuseSum += res.diffuse;\n			specularSum += res.specular;\n		}\n		// Final Diffuse Contribution\n		vec3 finalDiffuse = diffuseSum;\n		outcol.rgb += finalDiffuse;\n\n		// Final Specular Contribution\n		vec3 finalSpecular = vec3(0.0);\n		finalSpecular += specularSum;\n\n		outcol.rgb += finalSpecular;\n\n\n		// Apply fog, this does nothing if fog is disabled\n		outcol = TDFog(outcol, iVert.worldSpacePos.xyz, iVert.cameraIndex);\n\n		// Alpha Calculation\n		float alpha = uBaseColor.a * iVert.color.a ;\n\n		// Dithering, does nothing if dithering is disabled\n		outcol = TDDither(outcol);\n\n		outcol.rgb *= alpha;\n\n		// Modern GL removed the implicit alpha test, so we need to apply\n		// it manually here. This function does nothing if alpha test is disabled.\n		TDAlphaTest(alpha);\n\n		outcol.a = alpha;\n		outcol = mix(vec4(raymarchedColor, 1.0), outcol, useTDLighting);\n		oFragColor[0] = TDOutputSwizzle(outcol);\n\n\n		// TD_NUM_COLOR_BUFFERS will be set to the number of color buffers\n		// active in the render. By default we want to output zero to every\n		// buffer except the first one.\n		for (int i = 1; i < TD_NUM_COLOR_BUFFERS; i++)\n		{\n			oFragColor[i] = vec4(0.0);\n		}\n	} else {\n		discard;\n	}\n}\n";
      function glslToTouchDesignerShaderSource(source1) {
          return {
              uniforms: baseUniforms(),
              frag: TDHeader + "const float STEP_SIZE_CONSTANT = 0.9;\n" + "const int MAX_ITERATIONS = 300;\n" + uniformsToGLSL(baseUniforms()) + sculptureStarterCode + source1 + TDFooter,
              vert: minimalVertexSource
          };
      }
      function sculptToTouchDesignerShaderSource(source1) {
          var src2 = sculptToGLSL(source1);
          if (src2.error) console.log(src2.error);
          var frg1 = TDHeader + usePBRHeader + useHemisphereLight + uniformsToGLSL(src2.uniforms) + "const float STEP_SIZE_CONSTANT = " + src2.stepSizeConstant + ";\n" + "const int MAX_ITERATIONS = " + src2.maxIterations + ";\n" + sculptureStarterCode + src2.geoGLSL + "\n" + src2.colorGLSL + "\n" + TDFooter;
          var sdf1 = "const float STEP_SIZE_CONSTANT = " + src2.stepSizeConstant + ";\n" + "const int MAX_ITERATIONS = " + src2.maxIterations + ";\n" + sculptureStarterCode + src2.geoGLSL;
          return {
              uniforms: src2.uniforms,
              frag: frg1,
              vert: minimalVertexSource,
              error: src2.error,
              geoGLSL: src2.geoGLSL,
              colorGLSL: src2.colorGLSL,
              sdf: sdf1,
              glslUniforms: uniformsToGLSL(src2.uniforms)
          };
      }
      console.log("using shader-park-core version: 0.1.29"); /// Generate code for various targets
      exports.baseUniforms = baseUniforms;
      exports.bindStaticData = bindStaticData;
      exports.createSculpture = createSculpture;
      exports.createSculptureWithGeometry = createSculptureWithGeometry;
      exports.defaultFragSourceGLSL = defaultFragSourceGLSL;
      exports.fragFooter = fragFooter;
      exports.generatedGLSLToMinimalRenderer = generatedGLSLToMinimalRenderer;
      exports.glslToMinimalHTMLRenderer = glslToMinimalHTMLRenderer;
      exports.glslToMinimalRenderer = glslToMinimalRenderer;
      exports.glslToOfflineRenderer = glslToOfflineRenderer;
      exports.glslToThreeJSMaterial = glslToThreeJSMaterial;
      exports.glslToThreeJSMesh = glslToThreeJSMesh;
      exports.glslToThreeJSShaderSource = glslToThreeJSShaderSource;
      exports.glslToTouchDesignerShaderSource = glslToTouchDesignerShaderSource;
      exports.minimalHeader = minimalHeader;
      exports.minimalVertexSource = minimalVertexSource;
      exports.sculptToGLSL = sculptToGLSL;
      exports.sculptToMinimalHTMLRenderer = sculptToMinimalHTMLRenderer;
      exports.sculptToMinimalRenderer = sculptToMinimalRenderer;
      exports.sculptToOfflineRenderer = sculptToOfflineRenderer;
      exports.sculptToRawSDF4Meshing = sculptToRawSDF4Meshing;
      exports.sculptToThreeJSMaterial = sculptToThreeJSMaterial;
      exports.sculptToThreeJSMesh = sculptToThreeJSMesh;
      exports.sculptToThreeJSShaderSource = sculptToThreeJSShaderSource;
      exports.sculptToTouchDesignerShaderSource = sculptToTouchDesignerShaderSource;
      exports.sculptureStarterCode = sculptureStarterCode;
      exports.uniformsToGLSL = uniformsToGLSL;
      exports.useHemisphereLight = useHemisphereLight;
      exports.usePBRHeader = usePBRHeader;
      Object.defineProperty(exports, "__esModule", {
          value: true
      });
  });
  
  },{}]},["lmKb7","adjPd"], "adjPd", "parcelRequirec418")
  
  //# sourceMappingURL=index.63aff760.js.map
  